System.register("chunks:///_virtual/AnimFlash.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, UIOpacity, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4337bNrk0FEJoqD/r1XjAxm", "AnimFlash", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Flash = exports('default', (_dec = ccclass('AnimFlash'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Flash, _Component);

        function Flash() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Flash.prototype; // LIFE-CYCLE CALLBACKS:

        _proto.onLoad = function onLoad() {
          tween(this.label.getComponent(UIOpacity)).to(0.2, {
            opacity: 0
          }).to(0.2, {
            opacity: 255
          }).start();
        };

        _proto.start = function start() {} // update (dt) {}
        ;

        return Flash;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'hello';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugViewRuntimeControl, _Component);

        function DebugViewRuntimeControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));

          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this.hideButtonLabel = void 0;
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }

        var _proto = DebugViewRuntimeControl.prototype;

        _proto.start = function start() {
          // get canvas resolution
          var canvas = this.node.parent.getComponent(Canvas);

          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }

          var uiTransform = this.node.parent.getComponent(UITransform);
          var halfScreenWidth = uiTransform.width * 0.5;
          var halfScreenHeight = uiTransform.height * 0.5;
          var x = -halfScreenWidth + halfScreenWidth * 0.1,
              y = halfScreenHeight - halfScreenHeight * 0.1;
          var width = 200,
              height = 20; // new nodes

          var miscNode = this.node.getChildByName('MiscMode');
          var buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          var titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles'; // title

          for (var i = 0; i < 2; i++) {
            var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;

            var _labelComponent = newLabel.getComponent(Label);

            _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            _labelComponent.color = Color.WHITE;
            _labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = _labelComponent;
          }

          y -= height; // single

          var currentRow = 0;

          for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
            if (_i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }

            var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            var textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[_i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[_i] = newNode;
          }

          x += width; // buttons

          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent; // misc

          y -= 40;

          for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
            var _newNode = instantiate(this.compositeModeToggle);

            _newNode.setPosition(x, y - height * _i2, 0.0);

            _newNode.setScale(0.5, 0.5, 0.5);

            _newNode.parent = miscNode;

            var _textComponent = _newNode.getComponentInChildren(RichText);

            _textComponent.string = this.strMisc[_i2];
            this.textComponentList[this.textComponentList.length] = _textComponent;
            this.textContentList[this.textContentList.length] = _textComponent.string;

            var toggleComponent = _newNode.getComponent(Toggle);

            toggleComponent.isChecked = _i2 ? true : false;

            _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);

            this.miscModeToggleList[_i2] = _newNode;
          } // composite


          y -= 150;

          for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
            var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;

            _newNode2.setPosition(x, y - height * _i3, 0.0);

            _newNode2.setScale(0.5, 0.5, 0.5);

            _newNode2.parent = this.compositeModeToggle.parent;

            var _textComponent2 = _newNode2.getComponentInChildren(RichText);

            _textComponent2.string = this.strComposite[_i3];
            this.textComponentList[this.textComponentList.length] = _textComponent2;
            this.textContentList[this.textContentList.length] = _textComponent2.string;

            _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);

            this.compositeModeToggleList[_i3] = _newNode2;
          }
        };

        _proto.isTextMatched = function isTextMatched(textUI, textDescription) {
          var tempText = new String(textUI);
          var findIndex = tempText.search('>');

          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        };

        _proto.toggleSingleMode = function toggleSingleMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        };

        _proto.toggleCompositeMode = function toggleCompositeMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        };

        _proto.toggleLightingWithAlbedo = function toggleLightingWithAlbedo(toggle) {
          var debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        };

        _proto.toggleCSMColoration = function toggleCSMColoration(toggle) {
          var debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        };

        _proto.enableAllCompositeMode = function enableAllCompositeMode(button) {
          var debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);

          for (var i = 0; i < this.compositeModeToggleList.length; i++) {
            var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);

            _toggleComponent.isChecked = true;
          }

          var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        };

        _proto.hideUI = function hideUI(button) {
          var titleNode = this.node.getChildByName('Titles');
          var activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        };

        _proto.changeTextColor = function changeTextColor(button) {
          this._currentColorIndex++;

          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }

          for (var i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }

          for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
            this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
          }
        };

        _proto.onLoad = function onLoad() {};

        _proto.update = function update(deltaTime) {};

        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiConstant.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a9fbc9R7m9CR6woXdZ36j4x", "FaryguiConstant", undefined);

      var FaryguiPackage = exports('FaryguiPackage', /*#__PURE__*/function (FaryguiPackage) {
        FaryguiPackage["Sb"] = "Farygui/Sb";
        return FaryguiPackage;
      }({}));
      var FaryguiObject = exports('FaryguiObject', /*#__PURE__*/function (FaryguiObject) {
        FaryguiObject["Main"] = "Main";
        return FaryguiObject;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiImport.ts", ['cc', './FaryguiSrc.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('fgui', module);
    }],
    execute: function () {
      cclegacy._RF.push({}, "b1930nyaCFECaloqt7kADYR", "FaryguiImport", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiInput.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FaryguiImport.ts', './FaryguiSrc.ts'], function (exports) {
  var _inheritsLoose, _assertThisInitialized, cclegacy, UITransform, Node, game, RelationType, GRoot, registerFont, UIConfig, UIPackage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      UITransform = module.UITransform;
      Node = module.Node;
      game = module.game;
    }, null, function (module) {
      RelationType = module.RelationType;
      GRoot = module.GRoot;
      registerFont = module.registerFont;
      UIConfig = module.UIConfig;
      UIPackage = module.UIPackage;
    }],
    execute: function () {
      exports({
        LoadBufferAsset: LoadBufferAsset,
        LoadPackage: LoadPackage,
        RegisterFont: RegisterFont,
        SetupDefaultBitmapFont: SetupDefaultBitmapFont
      });

      cclegacy._RF.push({}, "3d7636AzCFGM4pwcvBtpTRZ", "FaryguiInput", undefined);

      var FaryguiInput = exports('FaryguiInput', /*#__PURE__*/function (_fgui$GRoot) {
        _inheritsLoose(FaryguiInput, _fgui$GRoot);

        function FaryguiInput(nParent) {
          var _this;

          _this = _fgui$GRoot.call(this) || this;
          _this.node.name = "FaryguiInput";
          nParent.addChild(_this.node);

          _this.onWinResize();

          var com = _assertThisInitialized(_this);

          nParent.on(Node.EventType.NODE_DESTROYED, function () {
            if (com.isDisposed) return;
            com.node.parent.removeAllChildren();
            com.dispose();
          }, nParent);
          return _this;
        }

        var _proto = FaryguiInput.prototype;

        _proto.dispose = function dispose() {
          _fgui$GRoot.prototype.dispose.call(this);
        };

        _proto.addChild = function addChild(child) {
          _fgui$GRoot.prototype.addChild.call(this, child);

          child.setSize(this.width, this.height);
          child.addRelation(this, RelationType.Width, true);
          child.addRelation(this, RelationType.Height, true);
          return child;
        };

        _proto.onWinResize = function onWinResize() {
          if (this.isDisposed) return;
          if (!this.node) return;
          var n = this.node;

          if (!n.isValid || !n.parent || !n.parent.isValid) {
            return;
          }

          var pUi = n.parent.getComponent(UITransform);

          if (!pUi) {
            return;
          }

          var size = pUi.contentSize;
          var anchorPoint = pUi.anchorPoint;
          var pX = -size.width * anchorPoint.x;
          var pY = size.height * (1 - anchorPoint.y);
          this.node.setPosition(pX, pY);
          this.setSize(size.width, size.height);
        };

        _proto.reSize = function reSize(w, h, offsetY) {
          if (offsetY === void 0) {
            offsetY = 0;
          }

          if (this.isDisposed) return;
          if (!this.node) return;
          var n = this.node;

          if (!n.isValid || !n.parent || !n.parent.isValid) {
            return;
          }

          var pUi = n.parent.getComponent(UITransform);

          if (!pUi) {
            return;
          }

          n.getComponent(UITransform).setContentSize(w, h);
          pUi.setContentSize(w, h);
          var size = pUi.contentSize;
          var anchorPoint = pUi.anchorPoint;
          var pX = -size.width * anchorPoint.x;
          var pY = size.height * (1 - anchorPoint.y);
          this.node.setPosition(pX, pY);
          this.setSize(size.width, size.height); // @ts-ignore

          var childs = this._children;

          for (var idx = 0; idx < childs.length; idx++) {
            var child = childs[idx];
            child.setSize(w, h);
            child.setPosition(0, offsetY);
          }
        };

        return FaryguiInput;
      }(GRoot));

      function LibInit() {
        if (!GRoot["_inst"]) {
          // fgui.GRoot.create();
          UIConfig.defaultScrollDecelerationRate = 0.988;
          var n = new Node("FairyGui");
          game.addPersistRootNode(n);
          var r = new FaryguiInput(n);
          GRoot["_inst"] = r;
          n.active = false;
          r.enabled = false;
        }
      }

      function SetupDefaultBitmapFont(fontUsing) {
        LibInit();
        var fntConfig = fontUsing.fntConfig;
        fntConfig.resizable = true;
        fntConfig.canTint = true;
        registerFont(fontUsing.name, fontUsing, null);
        UIConfig.defaultFont = fontUsing.name;
      }

      function RegisterFont(fontUsing, url) {
        if (!fontUsing) return;
        LibInit();
        var fntConfig = fontUsing.fntConfig;
        fntConfig.resizable = true;
        fntConfig.canTint = true;
        registerFont(fontUsing.name, fontUsing, null);
        UIPackage.addFont(url, fontUsing);
      }

      function LoadPackage(path, onComplete) {
        LibInit();
        UIPackage.loadPackage(path, onComplete);
      }

      function LoadBufferAsset(buffer, onComplete) {
        LibInit();
        UIPackage.addBufferAsset(buffer, onComplete);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiListEx.ts", ['cc', './FaryguiUtil.ts', './Image1.ts'], function (exports) {
  var cclegacy, Node, UITransform, Mask, NodeEventType, log, Sprite, RichText, Label, CacheMode, instantiate, Image1;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      UITransform = module.UITransform;
      Mask = module.Mask;
      NodeEventType = module.NodeEventType;
      log = module.log;
      Sprite = module.Sprite;
      RichText = module.RichText;
      Label = module.Label;
      CacheMode = module.CacheMode;
      instantiate = module.instantiate;
    }, null, function (module) {
      Image1 = module.Image1;
    }],
    execute: function () {
      exports({
        GetCacheNode: GetCacheNode,
        ListRendererEx: ListRendererEx,
        ListRendererEx4: ListRendererEx4
      });

      cclegacy._RF.push({}, "32b8c07oNRJHbSLdeHfmPMY", "FaryguiListEx", undefined);

      function instantiateFromNodeCom(node) {
        if (!node["$gobj"] || !node["$gobj"]._partner) {
          return instantiate(node);
        }

        var partner = node["$gobj"]._partner;
        var idxP = node.components.findIndex(function (it) {
          return it === partner;
        });
        node.components[idxP].enabled = false;
        var nn = instantiate(node);
        nn.components[idxP].destroy(); // for (let idx = 0; idx < node.components.length; idx++) {
        //     node.components[idx].enabled = idx == idxP;
        // }

        return nn;
      }

      var LbHolder = /*#__PURE__*/function () {
        function LbHolder(nRoot, nBase) {
          this.nRef = void 0;
          this.nBaseN = void 0;
          this.nRoot = nRoot;
          this.nBase = nBase;
          this.nBaseN = nBase.node;
        }

        var _proto = LbHolder.prototype;

        _proto.init = function init() {
          if (this.nRef) return;
          var nBase = this.nBase;
          if (!nBase.isValid || !nBase.node.activeInHierarchy) return; // @ts-ignore

          var id = nBase.fontAtlas && nBase.fontAtlas.getTexture() ? nBase.fontAtlas.getTexture()._id : null; // @ts-ignore

          if (!id && nBase.spriteFrame && nBase.spriteFrame.texture && nBase.spriteFrame.texture._id) {
            // @ts-ignore
            id = nBase.spriteFrame.texture._id;
          } // @ts-ignore


          if (!id && nBase.ttfSpriteFrame && nBase.ttfSpriteFrame._name) {
            // @ts-ignore
            id = nBase.ttfSpriteFrame._name;
          }

          if (!id && nBase.useSystemFont) {
            id = nBase.fontFamily;
          }

          if (!id) {
            return;
          }

          var p = GetCacheNode(this.nRoot, id);
          var nn = instantiateFromNodeCom(nBase.node);
          p.addChild(nn);
          this.nRef = nn.getComponent(Label);
          nBase.enabled = false;
          this.nRef.enabled = true;
          nBase.node["$gobj"]._label = this.nRef;
          this.nRef.node.worldPosition = nBase.node.worldPosition; // @ts-ignore

          nBase._canRender = function () {
            return false;
          }; // @ts-ignore


          nBase._render = function (_) {};

          nBase.updateRenderData = function (_) {};
        };

        _proto.copy = function copy() {
          this.init();
          if (!this.nRef) return;
          var nBaseN = this.nBaseN,
              nRef = this.nRef;

          if (!nBaseN || !nBaseN.isValid) {
            log("nBase is destroy");
            return;
          }

          if (!nBaseN.activeInHierarchy) {
            nRef.node.active = false;
            return;
          }

          nRef.node.active = true;
          nRef.node.worldPosition = nBaseN.worldPosition;
        };

        return LbHolder;
      }();

      function getComponentSprite(target) {
        var r = target.getComponent(Sprite);

        if (Image1.UseCustomSliced && r && r.type == Sprite.Type.SLICED) {
          return undefined;
        } // if (r && r.type != Sprite.Type.SLICED) return r;
        // const coms = target.components;
        // for (let idx = 0; idx < coms.length; idx++) {
        //     const com = coms[idx];
        //     if (com["spriteFrame"]) {
        //         return com as Sprite;
        //     }
        // }


        return r;
      }

      var SpriteHolder = /*#__PURE__*/function () {
        function SpriteHolder(nRoot, sBase) {
          this.nRef = void 0;
          this.nBase = void 0;
          this.nRoot = nRoot;
          this.sBase = sBase;
          this.init();
        }

        var _proto3 = SpriteHolder.prototype;

        _proto3.init = function init() {
          if (this.nRef) return;
          var sBase = this.sBase;
          if (!sBase.isValid) return; // @ts-ignore

          var id = sBase.spriteFrame && sBase.spriteFrame.texture ? sBase.spriteFrame.texture._id : null;

          if (!id && sBase.spriteAtlas && sBase.spriteAtlas.getTexture()) {
            // @ts-ignore
            id = nBase.spriteAtlas.getTexture()._id;
          }

          if (!id) {
            return;
          }

          var p = GetCacheNode(this.nRoot, id);
          var nn = instantiateFromNodeCom(sBase.node);
          p.addChild(nn);
          nn.worldPosition = sBase.node.worldPosition.clone();
          this.nRef = getComponentSprite(nn); // @ts-ignore

          sBase._render = function (render) {// render.commitComp(nBase, nBase.renderData, nBase._spriteFrame, nBase._assembler, null);
          }; // @ts-ignore


          sBase._canRender = function () {
            return false;
          }; // const coms: any[] = sBase.node._components;
          // coms[coms.indexOf(sBase)] = this.nRef;


          if (sBase.node["$gobj"]) sBase.node["$gobj"]._content = this.nRef;
          this.nBase = sBase.node;
          this.nRef.node.active = true;
        };

        _proto3.copy = function copy() {
          if (!this.nRef) return;
          var nBase = this.nBase,
              nRef = this.nRef,
              sBase = this.sBase;

          if (!nBase.activeInHierarchy) {
            // nRef.node.active = false;
            nRef.enabled = false;
            return;
          }

          nRef.enabled = true; // nRef.node.active = true;

          nRef.spriteFrame = sBase.spriteFrame;
          nRef.node.worldPosition = nBase.worldPosition.clone();
          nRef.node.getComponent(UITransform).setContentSize(sBase.node.getComponent(UITransform).contentSize);
          nRef.color = sBase.color;
          nRef.node.eulerAngles = sBase.node.eulerAngles;
          nRef.node.worldScale = sBase.node.worldScale; // const sizeNode = sBase.node._uiProps.uiTransformComp.contentSize;
          // nRef.node._uiProps.uiTransformComp.setContentSize(sizeNode);
        };

        return SpriteHolder;
      }();

      function GetCacheNode(container, name, siblingIndex) {
        if (siblingIndex === void 0) {
          siblingIndex = 2;
        }

        var n = container[name];
        if (n) return n;
        n = new Node(name);
        n.layer = container.layer;
        var containerUITrans = n.addComponent(UITransform);
        containerUITrans.setAnchorPoint(0, 1);
        container.insertChild(n, siblingIndex);
        container[name] = n;
        return n;
      }

      function AttachSprite(isDidAdd, holdes, target, nParent, floor, config) {
        if (floor > 1 && target.name == "Container" && target.getComponent(Mask)) {
          return;
        }

        if (target['$gobj'] && target['$gobj'].name == "break") {
          return;
        }

        if (config && config.isAddNewNode) {
          target.on(NodeEventType.CHILD_ADDED, function (nodeAdd) {
            log("CHILD_ADDED " + nodeAdd.name); // AttachSprite(isDidAdd, holdes, nodeAdd, nParent, floor, config);

            AttachSprite(isDidAdd, holdes, nodeAdd, GetCacheNode(nParent, "s_" + floor, floor), floor, config);
          });
        }

        var s = getComponentSprite(target);

        if (s && !isDidAdd[s.uuid]) {
          isDidAdd[s.uuid] = true; // holdes.push(new SpriteHolder(GetCacheNode(nParent, `s_${floor}`, floor), s));

          holdes.push(new SpriteHolder(nParent, s));
        }

        var children = target.children;
        if (!children || children.length <= 0) return;

        for (var idx = 0; idx < children.length; idx++) {
          var child = children[idx];

          if (child['$gobj'] && child['$gobj'].name == "break") {
            return;
          } // AttachSprite(isDidAdd, holdes, child, nParent, floor + 1, config);


          AttachSprite(isDidAdd, holdes, child, GetCacheNode(nParent, "s_" + floor, floor), floor + 1, config);
        }
      }

      function AttachLabel(isDidAdd, holdes, target, nParent, floor, item, config) {
        if (floor > 1 && target.name == "Container" && target.getComponent(Mask)) {
          return;
        }

        if (target['$gobj'] && target['$gobj'].name == "break") {
          return;
        }

        if (config && config.isAddNewNode) {
          target.on(NodeEventType.CHILD_ADDED, function (nodeAdd) {
            log("CHILD_ADDED");
            AttachLabel(isDidAdd, holdes, nodeAdd, nParent, floor + 1, item, config); // AttachLabel(isDidAdd, holdes, nodeAdd, GetCacheNode(nParent, `lb_${floor}`, floor), floor + 1, item, config);
          });
        }

        var children = target.children;
        if (!children || children.length <= 0) return;

        var _loop = function _loop() {
          var child = children[idx];

          if (child['$gobj'] && child['$gobj'].name == "break") {
            return {
              v: void 0
            };
          }

          var richText = child.getComponent(RichText); // Nếu richText sẽ cần phải check mỗi khi có update child label

          if (richText && !isDidAdd[richText.uuid]) {
            isDidAdd[richText.uuid] = true;
            richText.schedule(function () {
              if (item.isDisposed || !item.node.activeInHierarchy) return;
              AttachLabel(isDidAdd, holdes, child, nParent, floor + 1, item, config);
            });
          } else {
            var lb = child.getComponent(Label);

            if (lb && !isDidAdd[lb.uuid]) {
              isDidAdd[lb.uuid] = true;
              lb.cacheMode = CacheMode.CHAR;
              holdes.push(new LbHolder(nParent, lb)); // holdes.push(new LbHolder(GetCacheNode(nParent, `${lb.font._name}`, floor), lb));
              // if (floor <= 0) {
              //     holdes.push(new LbHolder(nParent, lb));
              // } else {
              //     holdes.push(new LbHolder(GetCacheNode(nParent, `lb_${floor}`, floor), lb));
              // }
            }

            AttachLabel(isDidAdd, holdes, child, nParent, floor + 1, item, config); // AttachLabel(isDidAdd, holdes, child, GetCacheNode(nParent, `lb_${floor}`, floor), floor + 1, item, config);
          }
        };

        for (var idx = 0; idx < children.length; idx++) {
          var _ret = _loop();

          if (typeof _ret === "object") return _ret.v;
        }
      }

      function ListRendererEx(list, itemRenderer, config) {
        if (config === void 0) {
          config = {
            isAddNewNode: true
          };
        }

        var container = list["_container"];
        var p = container.parent; // let skeRoot: Node = GetCacheNode(p, "SkeRoot", -4);
        // let labelRoot: Node = GetCacheNode(p, "LabelRoot", -2);

        var labelRoot = GetCacheNode(p, "LabelRoot", -2);
        var spriteRoot = GetCacheNode(p, "SpriteRoot", -2);
        var holdes = [];
        var isDidAdd = {};
        var items = [];

        list.itemRenderer = function (index, item) {
          itemRenderer(index, item);

          if (!item["$items"]) {
            item["$items"] = items;
            items.push(item);
          }

          var nRoot = item.node; // label

          AttachLabel(isDidAdd, holdes, nRoot, labelRoot, 0, item, config); // sprite

          AttachSprite(isDidAdd, holdes, nRoot, spriteRoot, 0, config); // sp.Skeleton

          /*
          const skes = nRoot.getComponentsInChildren(sp.Skeleton);
          for (let idx = 0; idx < skes.length; idx++) {
              const s = skes[idx];
              if (isDidAdd[s.uuid]) continue;
              if (s.node.children && s.node.children.length > 0) continue;
              isDidAdd[s.uuid] = true;
              holdes.push(new SkeHolder(skeRoot, s));
          }
          */
        }; // @ts-ignore


        var listCom = list._partner;
        listCom.schedule(function () {
          if (!holdes) return;
          holdes.forEach(function (h) {
            h.copy();
          });
        }); // const handleScrollBase = list["handleScroll"];
        // list["handleScroll"] = (forceUpdate: boolean) => {
        //     handleScrollBase.call(list, forceUpdate);
        //     if (!holdes) return;
        //     holdes.forEach(h => {
        //         h.copy();
        //     });
        // };

        var disposeBase = list.dispose;

        list.dispose = function () {
          if (holdes && p.isValid) {
            labelRoot.removeFromParent();
            spriteRoot.removeFromParent(); // skeRoot.removeFromParent();

            holdes = null;
          }

          disposeBase.call(list);
        }; // const masks: Mask[] = list.node.getComponentsInChildren(Mask);
        // log("masks", masks.length);
        // masks.forEach(mask => {
        //     mask.enabled = false;
        // });
        // @ts-ignore


        if (!list._virtual) {
          var scrollPane = list.scrollPane;
          listCom.schedule(function () {
            var top = scrollPane.posY;
            if (top < 0) top = 0;
            var bottom = top + list.height;
            var isSkip = false;

            for (var idx = 0; idx < items.length; idx++) {
              var _item = items[idx];

              if (isSkip || _item.y + _item.height < top) {
                _item._node.active = false;
              } else if (_item.y - _item.height > bottom) {
                _item._node.active = false;
                isSkip = true;
              } else {
                _item._node.active = true;
              }
            }
          });
        }
      }

      function ListRendererEx4(list, getInfo, itemRenderer) {
        var container = list._container;
        var p = container.parent;
        var labelRoot = GetCacheNode(p, "LabelRoot", -2);
        var spriteRoot = GetCacheNode(p, "SpriteRoot", -2);
        var holdes = [];
        var isDidAdd = {};
        var config = {
          isAddNewNode: true
        };

        list.itemRenderer = function (index, item) {
          itemRenderer(index, item);

          if (!item["$isAttach"]) {
            item["$isAttach"] = true;
            AttachSprite(isDidAdd, holdes, item.node, spriteRoot, 0, config);
            AttachLabel(isDidAdd, holdes, item.node, labelRoot, 0, item, config);
          }
        }; // @ts-ignore


        var listCom = list._partner;
        listCom.schedule(function () {
          if (!holdes) return;
          holdes.forEach(function (h) {
            h.copy();
          });
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiRichText.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FaryguiInput.ts', './FaryguiImport.ts', './FaryguiUtil.ts', './FaryguiSrc.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, UITransform, log, Node, Component, LoadPackage, FaryguiInput, FUtil, GRichTextField;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      log = module.log;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      LoadPackage = module.LoadPackage;
      FaryguiInput = module.FaryguiInput;
    }, null, function (module) {
      FUtil = module.default;
    }, function (module) {
      GRichTextField = module.GRichTextField;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f3d86jYbJFFUagWqMD27c4M", "FaryguiRichText", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FaryguiRichText = exports('FaryguiRichText', (_dec = ccclass('FaryguiRichText'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FaryguiRichText, _Component);

        function FaryguiRichText() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.panel = null;
          _this.rt = null;
          _this.textSync = "";
          _this.topSync = 0;
          _this.isLoadDone = false;
          return _this;
        }

        FaryguiRichText.create = function create(parent) {
          var n = new Node("FRichText");
          n.addComponent(UITransform);
          parent.addChild(n);
          return n.addComponent(FaryguiRichText);
        };

        var _proto = FaryguiRichText.prototype;

        _proto.onLoad = function onLoad() {
          var self = this;
          LoadPackage("Chat", function (error, pkg) {
            if (error) return;
            self.initUI(pkg);
          });
        };

        _proto.initUI = function initUI(pkg) {
          var rCom = new FaryguiInput(this.node);
          var comChat = pkg.createObject("RichTextEx").asCom;
          rCom.addChild(comChat);
          this.panel = rCom;
          this.rt = comChat.getChild("lb", GRichTextField);
          this.rt.on(FUtil.Event.LINK, this.onLinkClick, this);
          var pTf = this.node.parent.getComponent(UITransform);
          this.rt.width = pTf.width;
          this.setText(this.textSync, this.topSync);
        };

        _proto.setText = function setText(text, top) {
          if (top === void 0) {
            top = 0;
          }

          var panel = this.panel,
              rt = this.rt;

          if (!panel) {
            this.textSync = text;
            this.topSync = top;
            return;
          }

          rt.text = text;
          rt.setPosition(0, 0);
          var pTf = this.node.parent.getComponent(UITransform);
          pTf.setContentSize(pTf.width, rt.height + top); // add offset top and bot

          this.node.getComponent(UITransform).setContentSize(rt.width, rt.height);
          panel.reSize(rt.width, rt.height + top, top);
          this.isLoadDone = true;
        };

        _proto.onLinkClick = function onLinkClick(url) {
          // TODO: handle link click
          log("onLinkClick", url);
        };

        return FaryguiRichText;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiSrc.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Image1.ts', './MovieClip.ts', './GObjectPartner.ts', './FGraphics.ts'], function (exports) {
  var _inheritsLoose, _createClass, _assertThisInitialized, cclegacy, _decorator, gfx, Vec2, Color, Layers, Font, resources, Rect, Vec3, misc, Sprite, Size, assetManager, Texture2D, SpriteFrame, BitmapFont, sp, dragonBones, ImageAsset, AudioClip, Label, CacheMode, RichText, Node, UITransform, Mask, math, director, game, isValid, sys, screen, View, AudioSourceComponent, Overflow, EditBox, Asset, EventMouse, log, view, Event$1, UIOpacity, path, BufferAsset, AssetManager, SpriteAtlas, EventTarget, Component, UIRenderer, macro, Image1, MovieClip, GObjectPartner, FGraphics;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      gfx = module.gfx;
      Vec2 = module.Vec2;
      Color = module.Color;
      Layers = module.Layers;
      Font = module.Font;
      resources = module.resources;
      Rect = module.Rect;
      Vec3 = module.Vec3;
      misc = module.misc;
      Sprite = module.Sprite;
      Size = module.Size;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      BitmapFont = module.BitmapFont;
      sp = module.sp;
      dragonBones = module.dragonBones;
      ImageAsset = module.ImageAsset;
      AudioClip = module.AudioClip;
      Label = module.Label;
      CacheMode = module.CacheMode;
      RichText = module.RichText;
      Node = module.Node;
      UITransform = module.UITransform;
      Mask = module.Mask;
      math = module.math;
      director = module.director;
      game = module.game;
      isValid = module.isValid;
      sys = module.sys;
      screen = module.screen;
      View = module.View;
      AudioSourceComponent = module.AudioSourceComponent;
      Overflow = module.Overflow;
      EditBox = module.EditBox;
      Asset = module.Asset;
      EventMouse = module.EventMouse;
      log = module.log;
      view = module.view;
      Event$1 = module.Event;
      UIOpacity = module.UIOpacity;
      path = module.path;
      BufferAsset = module.BufferAsset;
      AssetManager = module.AssetManager;
      SpriteAtlas = module.SpriteAtlas;
      EventTarget = module.EventTarget;
      Component = module.Component;
      UIRenderer = module.UIRenderer;
      macro = module.macro;
    }, function (module) {
      Image1 = module.Image1;
      exports('Image', module.Image1);
    }, function (module) {
      MovieClip = module.MovieClip;
      exports('MovieClip', module.MovieClip);
    }, function (module) {
      GObjectPartner = module.GObjectPartner;
      exports('GObjectPartner', module.GObjectPartner);
    }, function (module) {
      FGraphics = module.FGraphics;
    }],
    execute: function () {
      exports({
        AlignType: void 0,
        AutoSizeType: void 0,
        BlendMode: void 0,
        ButtonMode: void 0,
        ChildrenRenderOrder: void 0,
        EaseType: void 0,
        FillMethod: void 0,
        FillOrigin: void 0,
        FlipType: void 0,
        GroupLayoutType: void 0,
        ListLayoutType: void 0,
        ListSelectionMode: void 0,
        LoaderFillType: void 0,
        ObjectPropID: void 0,
        ObjectType: void 0,
        OverflowType: void 0,
        PackageItemType: void 0,
        PopupDirection: void 0,
        ProgressTitleType: void 0,
        RelationType: void 0,
        ScrollBarDisplayType: void 0,
        ScrollType: void 0,
        VertAlignType: void 0,
        registerFont: registerFont
      });

      var _ItemTypeToAssetType, _dec, _class;

      cclegacy._RF.push({}, "61713bv5gNPOp5fyMja2HsQ", "FaryguiSrc", undefined); //@ts-nocheck


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ButtonMode;

      (function (ButtonMode) {
        ButtonMode[ButtonMode["Common"] = 0] = "Common";
        ButtonMode[ButtonMode["Check"] = 1] = "Check";
        ButtonMode[ButtonMode["Radio"] = 2] = "Radio";
      })(ButtonMode || (ButtonMode = exports('ButtonMode', {})));

      var AutoSizeType;

      (function (AutoSizeType) {
        AutoSizeType[AutoSizeType["None"] = 0] = "None";
        AutoSizeType[AutoSizeType["Both"] = 1] = "Both";
        AutoSizeType[AutoSizeType["Height"] = 2] = "Height";
        AutoSizeType[AutoSizeType["Shrink"] = 3] = "Shrink";
      })(AutoSizeType || (AutoSizeType = exports('AutoSizeType', {})));

      var AlignType;

      (function (AlignType) {
        AlignType[AlignType["Left"] = 0] = "Left";
        AlignType[AlignType["Center"] = 1] = "Center";
        AlignType[AlignType["Right"] = 2] = "Right";
      })(AlignType || (AlignType = exports('AlignType', {})));

      var VertAlignType;

      (function (VertAlignType) {
        VertAlignType[VertAlignType["Top"] = 0] = "Top";
        VertAlignType[VertAlignType["Middle"] = 1] = "Middle";
        VertAlignType[VertAlignType["Bottom"] = 2] = "Bottom";
      })(VertAlignType || (VertAlignType = exports('VertAlignType', {})));

      var LoaderFillType;

      (function (LoaderFillType) {
        LoaderFillType[LoaderFillType["None"] = 0] = "None";
        LoaderFillType[LoaderFillType["Scale"] = 1] = "Scale";
        LoaderFillType[LoaderFillType["ScaleMatchHeight"] = 2] = "ScaleMatchHeight";
        LoaderFillType[LoaderFillType["ScaleMatchWidth"] = 3] = "ScaleMatchWidth";
        LoaderFillType[LoaderFillType["ScaleFree"] = 4] = "ScaleFree";
        LoaderFillType[LoaderFillType["ScaleNoBorder"] = 5] = "ScaleNoBorder";
      })(LoaderFillType || (LoaderFillType = exports('LoaderFillType', {})));

      var ListLayoutType;

      (function (ListLayoutType) {
        ListLayoutType[ListLayoutType["SingleColumn"] = 0] = "SingleColumn";
        ListLayoutType[ListLayoutType["SingleRow"] = 1] = "SingleRow";
        ListLayoutType[ListLayoutType["FlowHorizontal"] = 2] = "FlowHorizontal";
        ListLayoutType[ListLayoutType["FlowVertical"] = 3] = "FlowVertical";
        ListLayoutType[ListLayoutType["Pagination"] = 4] = "Pagination";
      })(ListLayoutType || (ListLayoutType = exports('ListLayoutType', {})));

      var ListSelectionMode;

      (function (ListSelectionMode) {
        ListSelectionMode[ListSelectionMode["Single"] = 0] = "Single";
        ListSelectionMode[ListSelectionMode["Multiple"] = 1] = "Multiple";
        ListSelectionMode[ListSelectionMode["Multiple_SingleClick"] = 2] = "Multiple_SingleClick";
        ListSelectionMode[ListSelectionMode["None"] = 3] = "None";
      })(ListSelectionMode || (ListSelectionMode = exports('ListSelectionMode', {})));

      var OverflowType;

      (function (OverflowType) {
        OverflowType[OverflowType["Visible"] = 0] = "Visible";
        OverflowType[OverflowType["Hidden"] = 1] = "Hidden";
        OverflowType[OverflowType["Scroll"] = 2] = "Scroll";
      })(OverflowType || (OverflowType = exports('OverflowType', {})));

      var PackageItemType;

      (function (PackageItemType) {
        PackageItemType[PackageItemType["Image"] = 0] = "Image";
        PackageItemType[PackageItemType["MovieClip"] = 1] = "MovieClip";
        PackageItemType[PackageItemType["Sound"] = 2] = "Sound";
        PackageItemType[PackageItemType["Component"] = 3] = "Component";
        PackageItemType[PackageItemType["Atlas"] = 4] = "Atlas";
        PackageItemType[PackageItemType["Font"] = 5] = "Font";
        PackageItemType[PackageItemType["Swf"] = 6] = "Swf";
        PackageItemType[PackageItemType["Misc"] = 7] = "Misc";
        PackageItemType[PackageItemType["Unknown"] = 8] = "Unknown";
        PackageItemType[PackageItemType["Spine"] = 9] = "Spine";
        PackageItemType[PackageItemType["DragonBones"] = 10] = "DragonBones";
      })(PackageItemType || (PackageItemType = exports('PackageItemType', {})));

      var ObjectType;

      (function (ObjectType) {
        ObjectType[ObjectType["Image"] = 0] = "Image";
        ObjectType[ObjectType["MovieClip"] = 1] = "MovieClip";
        ObjectType[ObjectType["Swf"] = 2] = "Swf";
        ObjectType[ObjectType["Graph"] = 3] = "Graph";
        ObjectType[ObjectType["Loader"] = 4] = "Loader";
        ObjectType[ObjectType["Group"] = 5] = "Group";
        ObjectType[ObjectType["Text"] = 6] = "Text";
        ObjectType[ObjectType["RichText"] = 7] = "RichText";
        ObjectType[ObjectType["InputText"] = 8] = "InputText";
        ObjectType[ObjectType["Component"] = 9] = "Component";
        ObjectType[ObjectType["List"] = 10] = "List";
        ObjectType[ObjectType["Label"] = 11] = "Label";
        ObjectType[ObjectType["Button"] = 12] = "Button";
        ObjectType[ObjectType["ComboBox"] = 13] = "ComboBox";
        ObjectType[ObjectType["ProgressBar"] = 14] = "ProgressBar";
        ObjectType[ObjectType["Slider"] = 15] = "Slider";
        ObjectType[ObjectType["ScrollBar"] = 16] = "ScrollBar";
        ObjectType[ObjectType["Tree"] = 17] = "Tree";
        ObjectType[ObjectType["Loader3D"] = 18] = "Loader3D";
      })(ObjectType || (ObjectType = exports('ObjectType', {})));

      var ProgressTitleType;

      (function (ProgressTitleType) {
        ProgressTitleType[ProgressTitleType["Percent"] = 0] = "Percent";
        ProgressTitleType[ProgressTitleType["ValueAndMax"] = 1] = "ValueAndMax";
        ProgressTitleType[ProgressTitleType["Value"] = 2] = "Value";
        ProgressTitleType[ProgressTitleType["Max"] = 3] = "Max";
      })(ProgressTitleType || (ProgressTitleType = exports('ProgressTitleType', {})));

      var ScrollBarDisplayType;

      (function (ScrollBarDisplayType) {
        ScrollBarDisplayType[ScrollBarDisplayType["Default"] = 0] = "Default";
        ScrollBarDisplayType[ScrollBarDisplayType["Visible"] = 1] = "Visible";
        ScrollBarDisplayType[ScrollBarDisplayType["Auto"] = 2] = "Auto";
        ScrollBarDisplayType[ScrollBarDisplayType["Hidden"] = 3] = "Hidden";
      })(ScrollBarDisplayType || (ScrollBarDisplayType = exports('ScrollBarDisplayType', {})));

      var ScrollType;

      (function (ScrollType) {
        ScrollType[ScrollType["Horizontal"] = 0] = "Horizontal";
        ScrollType[ScrollType["Vertical"] = 1] = "Vertical";
        ScrollType[ScrollType["Both"] = 2] = "Both";
      })(ScrollType || (ScrollType = exports('ScrollType', {})));

      var FlipType;

      (function (FlipType) {
        FlipType[FlipType["None"] = 0] = "None";
        FlipType[FlipType["Horizontal"] = 1] = "Horizontal";
        FlipType[FlipType["Vertical"] = 2] = "Vertical";
        FlipType[FlipType["Both"] = 3] = "Both";
      })(FlipType || (FlipType = exports('FlipType', {})));

      var ChildrenRenderOrder;

      (function (ChildrenRenderOrder) {
        ChildrenRenderOrder[ChildrenRenderOrder["Ascent"] = 0] = "Ascent";
        ChildrenRenderOrder[ChildrenRenderOrder["Descent"] = 1] = "Descent";
        ChildrenRenderOrder[ChildrenRenderOrder["Arch"] = 2] = "Arch";
      })(ChildrenRenderOrder || (ChildrenRenderOrder = exports('ChildrenRenderOrder', {})));

      var GroupLayoutType;

      (function (GroupLayoutType) {
        GroupLayoutType[GroupLayoutType["None"] = 0] = "None";
        GroupLayoutType[GroupLayoutType["Horizontal"] = 1] = "Horizontal";
        GroupLayoutType[GroupLayoutType["Vertical"] = 2] = "Vertical";
      })(GroupLayoutType || (GroupLayoutType = exports('GroupLayoutType', {})));

      var PopupDirection;

      (function (PopupDirection) {
        PopupDirection[PopupDirection["Auto"] = 0] = "Auto";
        PopupDirection[PopupDirection["Up"] = 1] = "Up";
        PopupDirection[PopupDirection["Down"] = 2] = "Down";
      })(PopupDirection || (PopupDirection = exports('PopupDirection', {})));

      var RelationType;

      (function (RelationType) {
        RelationType[RelationType["Left_Left"] = 0] = "Left_Left";
        RelationType[RelationType["Left_Center"] = 1] = "Left_Center";
        RelationType[RelationType["Left_Right"] = 2] = "Left_Right";
        RelationType[RelationType["Center_Center"] = 3] = "Center_Center";
        RelationType[RelationType["Right_Left"] = 4] = "Right_Left";
        RelationType[RelationType["Right_Center"] = 5] = "Right_Center";
        RelationType[RelationType["Right_Right"] = 6] = "Right_Right";
        RelationType[RelationType["Top_Top"] = 7] = "Top_Top";
        RelationType[RelationType["Top_Middle"] = 8] = "Top_Middle";
        RelationType[RelationType["Top_Bottom"] = 9] = "Top_Bottom";
        RelationType[RelationType["Middle_Middle"] = 10] = "Middle_Middle";
        RelationType[RelationType["Bottom_Top"] = 11] = "Bottom_Top";
        RelationType[RelationType["Bottom_Middle"] = 12] = "Bottom_Middle";
        RelationType[RelationType["Bottom_Bottom"] = 13] = "Bottom_Bottom";
        RelationType[RelationType["Width"] = 14] = "Width";
        RelationType[RelationType["Height"] = 15] = "Height";
        RelationType[RelationType["LeftExt_Left"] = 16] = "LeftExt_Left";
        RelationType[RelationType["LeftExt_Right"] = 17] = "LeftExt_Right";
        RelationType[RelationType["RightExt_Left"] = 18] = "RightExt_Left";
        RelationType[RelationType["RightExt_Right"] = 19] = "RightExt_Right";
        RelationType[RelationType["TopExt_Top"] = 20] = "TopExt_Top";
        RelationType[RelationType["TopExt_Bottom"] = 21] = "TopExt_Bottom";
        RelationType[RelationType["BottomExt_Top"] = 22] = "BottomExt_Top";
        RelationType[RelationType["BottomExt_Bottom"] = 23] = "BottomExt_Bottom";
        RelationType[RelationType["Size"] = 24] = "Size";
      })(RelationType || (RelationType = exports('RelationType', {})));

      var FillMethod;

      (function (FillMethod) {
        FillMethod[FillMethod["None"] = 0] = "None";
        FillMethod[FillMethod["Horizontal"] = 1] = "Horizontal";
        FillMethod[FillMethod["Vertical"] = 2] = "Vertical";
        FillMethod[FillMethod["Radial90"] = 3] = "Radial90";
        FillMethod[FillMethod["Radial180"] = 4] = "Radial180";
        FillMethod[FillMethod["Radial360"] = 5] = "Radial360";
      })(FillMethod || (FillMethod = exports('FillMethod', {})));

      var FillOrigin;

      (function (FillOrigin) {
        FillOrigin[FillOrigin["Top"] = 0] = "Top";
        FillOrigin[FillOrigin["Bottom"] = 1] = "Bottom";
        FillOrigin[FillOrigin["Left"] = 2] = "Left";
        FillOrigin[FillOrigin["Right"] = 3] = "Right";
      })(FillOrigin || (FillOrigin = exports('FillOrigin', {})));

      var ObjectPropID;

      (function (ObjectPropID) {
        ObjectPropID[ObjectPropID["Text"] = 0] = "Text";
        ObjectPropID[ObjectPropID["Icon"] = 1] = "Icon";
        ObjectPropID[ObjectPropID["Color"] = 2] = "Color";
        ObjectPropID[ObjectPropID["OutlineColor"] = 3] = "OutlineColor";
        ObjectPropID[ObjectPropID["Playing"] = 4] = "Playing";
        ObjectPropID[ObjectPropID["Frame"] = 5] = "Frame";
        ObjectPropID[ObjectPropID["DeltaTime"] = 6] = "DeltaTime";
        ObjectPropID[ObjectPropID["TimeScale"] = 7] = "TimeScale";
        ObjectPropID[ObjectPropID["FontSize"] = 8] = "FontSize";
        ObjectPropID[ObjectPropID["Selected"] = 9] = "Selected";
      })(ObjectPropID || (ObjectPropID = exports('ObjectPropID', {})));

      var BlendMode;

      (function (BlendMode) {
        BlendMode[BlendMode["Normal"] = 0] = "Normal";
        BlendMode[BlendMode["None"] = 1] = "None";
        BlendMode[BlendMode["Add"] = 2] = "Add";
        BlendMode[BlendMode["Multiply"] = 3] = "Multiply";
        BlendMode[BlendMode["Screen"] = 4] = "Screen";
        BlendMode[BlendMode["Erase"] = 5] = "Erase";
        BlendMode[BlendMode["Mask"] = 6] = "Mask";
        BlendMode[BlendMode["Below"] = 7] = "Below";
        BlendMode[BlendMode["Off"] = 8] = "Off";
        BlendMode[BlendMode["Custom1"] = 9] = "Custom1";
        BlendMode[BlendMode["Custom2"] = 10] = "Custom2";
        BlendMode[BlendMode["Custom3"] = 11] = "Custom3";
      })(BlendMode || (BlendMode = exports('BlendMode', {})));

      var BlendModeUtils = /*#__PURE__*/function () {
        function BlendModeUtils() {}

        BlendModeUtils.apply = function apply(node, blendMode) {
          var f = factors[blendMode];
          var renderers = node.getComponentsInChildren(UIRenderer);
          renderers.forEach(function (element) {
            element.srcBlendFactor = f[0];
            element.dstBlendFactor = f[1];
          });
        };

        BlendModeUtils.override = function override(blendMode, srcFactor, dstFactor) {
          factors[blendMode][0] = srcFactor;
          factors[blendMode][1] = dstFactor;
        };

        return BlendModeUtils;
      }();

      var factors = [[gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA], //normal
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ONE], //none
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE], //add
      [gfx.BlendFactor.DST_COLOR, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA], //mul
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ONE_MINUS_SRC_COLOR], //screen
      [gfx.BlendFactor.ZERO, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA], //erase
      [gfx.BlendFactor.ZERO, gfx.BlendFactor.SRC_ALPHA], //mask
      [gfx.BlendFactor.ONE_MINUS_DST_ALPHA, gfx.BlendFactor.DST_ALPHA], //below
      [gfx.BlendFactor.ONE, gfx.BlendFactor.ZERO], //off
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA], //custom1
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA], //custom2
      [gfx.BlendFactor.SRC_ALPHA, gfx.BlendFactor.ONE_MINUS_SRC_ALPHA] //custom2
      ];
      var Event = exports('Event', /*#__PURE__*/function (_Event$) {
        _inheritsLoose(Event, _Event$);

        function Event(type, bubbles) {
          var _this;

          _this = _Event$.call(this, type, bubbles) || this;
          _this.pos = new Vec2();
          _this.touchId = 0;
          _this.clickCount = 0;
          _this.button = 0;
          _this.keyModifiers = 0;
          _this.mouseWheelDelta = 0;
          return _this;
        }

        var _proto = Event.prototype;

        _proto.captureTouch = function captureTouch() {
          var obj = GObject.cast(this.currentTarget);
          if (obj) this._processor.addTouchMonitor(this.touchId, obj);
        };

        _createClass(Event, [{
          key: "sender",
          get: function get() {
            return GObject.cast(this.currentTarget);
          }
        }, {
          key: "isShiftDown",
          get: function get() {
            return false;
          }
        }, {
          key: "isCtrlDown",
          get: function get() {
            return false;
          }
        }]);

        return Event;
      }(Event$1));
      Event.TOUCH_BEGIN = "fui_touch_begin";
      Event.TOUCH_MOVE = "fui_touch_move";
      Event.TOUCH_END = "fui_touch_end";
      Event.CLICK = "fui_click";
      Event.ROLL_OVER = "fui_roll_over";
      Event.ROLL_OUT = "fui_roll_out";
      Event.MOUSE_WHEEL = "fui_mouse_wheel";
      Event.DISPLAY = "fui_display";
      Event.UNDISPLAY = "fui_undisplay";
      Event.GEAR_STOP = "fui_gear_stop";
      Event.LINK = "fui_text_link";
      Event.Submit = "editing-return";
      Event.TEXT_CHANGE = "text-changed";
      Event.STATUS_CHANGED = "fui_status_changed";
      Event.XY_CHANGED = "fui_xy_changed";
      Event.SIZE_CHANGED = "fui_size_changed";
      Event.SIZE_DELAY_CHANGE = "fui_size_delay_change";
      Event.DRAG_START = "fui_drag_start";
      Event.DRAG_MOVE = "fui_drag_move";
      Event.DRAG_END = "fui_drag_end";
      Event.DROP = "fui_drop";
      Event.SCROLL = "fui_scroll";
      Event.SCROLL_END = "fui_scroll_end";
      Event.PULL_DOWN_RELEASE = "fui_pull_down_release";
      Event.PULL_UP_RELEASE = "fui_pull_up_release";
      Event.CLICK_ITEM = "fui_click_item";
      var eventPool = new Array();

      function borrowEvent(type, bubbles) {
        var evt;

        if (eventPool.length) {
          evt = eventPool.pop();
          evt.type = type;
          evt.bubbles = bubbles;
        } else {
          evt = new Event(type, bubbles);
        }

        return evt;
      }

      function returnEvent(evt) {
        evt.initiator = null;
        evt.unuse();
        eventPool.push(evt);
      }

      var EaseType;

      (function (EaseType) {
        EaseType[EaseType["Linear"] = 0] = "Linear";
        EaseType[EaseType["SineIn"] = 1] = "SineIn";
        EaseType[EaseType["SineOut"] = 2] = "SineOut";
        EaseType[EaseType["SineInOut"] = 3] = "SineInOut";
        EaseType[EaseType["QuadIn"] = 4] = "QuadIn";
        EaseType[EaseType["QuadOut"] = 5] = "QuadOut";
        EaseType[EaseType["QuadInOut"] = 6] = "QuadInOut";
        EaseType[EaseType["CubicIn"] = 7] = "CubicIn";
        EaseType[EaseType["CubicOut"] = 8] = "CubicOut";
        EaseType[EaseType["CubicInOut"] = 9] = "CubicInOut";
        EaseType[EaseType["QuartIn"] = 10] = "QuartIn";
        EaseType[EaseType["QuartOut"] = 11] = "QuartOut";
        EaseType[EaseType["QuartInOut"] = 12] = "QuartInOut";
        EaseType[EaseType["QuintIn"] = 13] = "QuintIn";
        EaseType[EaseType["QuintOut"] = 14] = "QuintOut";
        EaseType[EaseType["QuintInOut"] = 15] = "QuintInOut";
        EaseType[EaseType["ExpoIn"] = 16] = "ExpoIn";
        EaseType[EaseType["ExpoOut"] = 17] = "ExpoOut";
        EaseType[EaseType["ExpoInOut"] = 18] = "ExpoInOut";
        EaseType[EaseType["CircIn"] = 19] = "CircIn";
        EaseType[EaseType["CircOut"] = 20] = "CircOut";
        EaseType[EaseType["CircInOut"] = 21] = "CircInOut";
        EaseType[EaseType["ElasticIn"] = 22] = "ElasticIn";
        EaseType[EaseType["ElasticOut"] = 23] = "ElasticOut";
        EaseType[EaseType["ElasticInOut"] = 24] = "ElasticInOut";
        EaseType[EaseType["BackIn"] = 25] = "BackIn";
        EaseType[EaseType["BackOut"] = 26] = "BackOut";
        EaseType[EaseType["BackInOut"] = 27] = "BackInOut";
        EaseType[EaseType["BounceIn"] = 28] = "BounceIn";
        EaseType[EaseType["BounceOut"] = 29] = "BounceOut";
        EaseType[EaseType["BounceInOut"] = 30] = "BounceInOut";
        EaseType[EaseType["Custom"] = 31] = "Custom";
      })(EaseType || (EaseType = exports('EaseType', {})));

      var GearBase = exports('GearBase', /*#__PURE__*/function () {
        function GearBase() {}

        var _proto2 = GearBase.prototype;

        _proto2.dispose = function dispose() {
          if (this._tweenConfig && this._tweenConfig._tweener) {
            this._tweenConfig._tweener.kill();

            this._tweenConfig._tweener = null;
          }
        };

        _proto2.setup = function setup(buffer) {
          this._controller = this._owner.parent.getControllerAt(buffer.readShort());
          this.init();
          var i;
          var page;
          var cnt = buffer.readShort();

          if ("pages" in this) {
            this.pages = buffer.readSArray(cnt);
          } else {
            for (i = 0; i < cnt; i++) {
              page = buffer.readS();
              if (page == null) continue;
              this.addStatus(page, buffer);
            }

            if (buffer.readBool()) this.addStatus(null, buffer);
          }

          if (buffer.readBool()) {
            this._tweenConfig = new GearTweenConfig();
            this._tweenConfig.easeType = buffer.readByte();
            this._tweenConfig.duration = buffer.readFloat();
            this._tweenConfig.delay = buffer.readFloat();
          }

          if (buffer.version >= 2) {
            if ("positionsInPercent" in this) {
              if (buffer.readBool()) {
                this.positionsInPercent = true;

                for (i = 0; i < cnt; i++) {
                  page = buffer.readS();
                  if (page == null) continue;
                  this.addExtStatus(page, buffer);
                }

                if (buffer.readBool()) this.addExtStatus(null, buffer);
              }
            } else if ("condition" in this) this.condition = buffer.readByte();
          }
        };

        _proto2.updateFromRelations = function updateFromRelations(dx, dy) {};

        _proto2.addStatus = function addStatus(pageId, buffer) {};

        _proto2.init = function init() {};

        _proto2.apply = function apply() {};

        _proto2.updateState = function updateState() {};

        _createClass(GearBase, [{
          key: "controller",
          get: function get() {
            return this._controller;
          },
          set: function set(val) {
            if (val != this._controller) {
              this._controller = val;
              if (this._controller) this.init();
            }
          }
        }, {
          key: "tweenConfig",
          get: function get() {
            if (!this._tweenConfig) this._tweenConfig = new GearTweenConfig();
            return this._tweenConfig;
          }
        }, {
          key: "allowTween",
          get: function get() {
            return this._tweenConfig && this._tweenConfig.tween && constructingDepth.n == 0 && !GearBase.disableAllTweenEffect;
          }
        }]);

        return GearBase;
      }());

      var GearTweenConfig = function GearTweenConfig() {
        this.tween = true;
        this.easeType = EaseType.QuadOut;
        this.duration = 0.3;
        this.delay = 0;
      };

      var GearAnimation = exports('GearAnimation', /*#__PURE__*/function (_GearBase) {
        _inheritsLoose(GearAnimation, _GearBase);

        function GearAnimation() {
          return _GearBase.apply(this, arguments) || this;
        }

        var _proto3 = GearAnimation.prototype;

        _proto3.init = function init() {
          this._default = {
            playing: this._owner.getProp(ObjectPropID.Playing),
            frame: this._owner.getProp(ObjectPropID.Frame)
          };
          this._storage = {};
        };

        _proto3.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.playing = buffer.readBool();
          gv.frame = buffer.readInt();
        };

        _proto3.apply = function apply() {
          this._owner._gearLocked = true;
          var gv = this._storage[this._controller.selectedPageId] || this._default;

          this._owner.setProp(ObjectPropID.Playing, gv.playing);

          this._owner.setProp(ObjectPropID.Frame, gv.frame);

          this._owner._gearLocked = false;
        };

        _proto3.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];

          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }

          gv.playing = this._owner.getProp(ObjectPropID.Playing);
          gv.frame = this._owner.getProp(ObjectPropID.Frame);
        };

        return GearAnimation;
      }(GearBase));
      var GearColor = exports('GearColor', /*#__PURE__*/function (_GearBase2) {
        _inheritsLoose(GearColor, _GearBase2);

        function GearColor() {
          return _GearBase2.apply(this, arguments) || this;
        }

        var _proto4 = GearColor.prototype;

        _proto4.init = function init() {
          this._default = {
            color: this._owner.getProp(ObjectPropID.Color),
            strokeColor: this._owner.getProp(ObjectPropID.OutlineColor)
          };
          this._storage = {};
        };

        _proto4.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.color = buffer.readColor();
          gv.strokeColor = buffer.readColor();
        };

        _proto4.apply = function apply() {
          this._owner._gearLocked = true;
          var gv = this._storage[this._controller.selectedPageId] || this._default;

          this._owner.setProp(ObjectPropID.Color, gv.color);

          this._owner.setProp(ObjectPropID.OutlineColor, gv.strokeColor);

          this._owner._gearLocked = false;
        };

        _proto4.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];

          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }

          gv.color = this._owner.getProp(ObjectPropID.Color);
          gv.strokeColor = this._owner.getProp(ObjectPropID.OutlineColor);
        };

        return GearColor;
      }(GearBase));
      var GearDisplay = exports('GearDisplay', /*#__PURE__*/function (_GearBase3) {
        _inheritsLoose(GearDisplay, _GearBase3);

        function GearDisplay() {
          var _this2;

          _this2 = _GearBase3.apply(this, arguments) || this;
          _this2.pages = null;
          _this2._visible = 0;
          _this2._displayLockToken = 1;
          return _this2;
        }

        var _proto5 = GearDisplay.prototype;

        _proto5.init = function init() {
          this.pages = null;
        };

        _proto5.addLock = function addLock() {
          this._visible++;
          return this._displayLockToken;
        };

        _proto5.releaseLock = function releaseLock(token) {
          if (token == this._displayLockToken) this._visible--;
        };

        _proto5.apply = function apply() {
          this._displayLockToken++;
          if (this._displayLockToken <= 0) this._displayLockToken = 1;
          if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };

        _createClass(GearDisplay, [{
          key: "connected",
          get: function get() {
            return this._controller == null || this._visible > 0;
          }
        }]);

        return GearDisplay;
      }(GearBase));
      var GearDisplay2 = exports('GearDisplay2', /*#__PURE__*/function (_GearBase4) {
        _inheritsLoose(GearDisplay2, _GearBase4);

        function GearDisplay2() {
          var _this3;

          _this3 = _GearBase4.apply(this, arguments) || this;
          _this3.pages = null;
          _this3.condition = 0;
          _this3._visible = 0;
          return _this3;
        }

        var _proto6 = GearDisplay2.prototype;

        _proto6.init = function init() {
          this.pages = null;
        };

        _proto6.apply = function apply() {
          if (this.pages == null || this.pages.length == 0 || this.pages.indexOf(this._controller.selectedPageId) != -1) this._visible = 1;else this._visible = 0;
        };

        _proto6.evaluate = function evaluate(connected) {
          var v = this._controller == null || this._visible > 0;
          if (this.condition == 0) v = v && connected;else v = v || connected;
          return v;
        };

        return GearDisplay2;
      }(GearBase));
      var GearFontSize = exports('GearFontSize', /*#__PURE__*/function (_GearBase5) {
        _inheritsLoose(GearFontSize, _GearBase5);

        function GearFontSize() {
          var _this4;

          _this4 = _GearBase5.apply(this, arguments) || this;
          _this4._default = 0;
          return _this4;
        }

        var _proto7 = GearFontSize.prototype;

        _proto7.init = function init() {
          this._default = this._owner.getProp(ObjectPropID.FontSize);
          this._storage = {};
        };

        _proto7.addStatus = function addStatus(pageId, buffer) {
          if (!pageId) this._default = buffer.readInt();else this._storage[pageId] = buffer.readInt();
        };

        _proto7.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.setProp(ObjectPropID.FontSize, data);else this._owner.setProp(ObjectPropID.FontSize, this._default);
          this._owner._gearLocked = false;
        };

        _proto7.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.getProp(ObjectPropID.FontSize);
        };

        return GearFontSize;
      }(GearBase));
      var GearIcon = exports('GearIcon', /*#__PURE__*/function (_GearBase6) {
        _inheritsLoose(GearIcon, _GearBase6);

        function GearIcon() {
          return _GearBase6.apply(this, arguments) || this;
        }

        var _proto8 = GearIcon.prototype;

        _proto8.init = function init() {
          this._default = this._owner.icon;
          this._storage = {};
        };

        _proto8.addStatus = function addStatus(pageId, buffer) {
          if (!pageId) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };

        _proto8.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.icon = data;else this._owner.icon = this._default;
          this._owner._gearLocked = false;
        };

        _proto8.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.icon;
        };

        return GearIcon;
      }(GearBase));

      var Pool = /*#__PURE__*/function () {
        function Pool(type, init, reset) {
          this.pool = [];
          this._init = init;
          this._reset = reset;
          this._ct = type;
        }

        var _proto9 = Pool.prototype;

        _proto9.borrow = function borrow() {
          var ret;
          if (this.pool.length > 0) ret = this.pool.pop();else ret = new this._ct();

          for (var _len = arguments.length, argArray = new Array(_len), _key = 0; _key < _len; _key++) {
            argArray[_key] = arguments[_key];
          }

          if (this._init) this._init.apply(this, [ret].concat(argArray));
          return ret;
        };

        _proto9.returns = function returns(element) {
          if (Array.isArray(element)) {
            var count = element.length;

            for (var i = 0; i < count; i++) {
              var element2 = element[i];
              if (this._reset) this._reset(element2);
              this.pool.push(element2);
            }

            element.length = 0;
          } else {
            if (this._reset) this._reset(element);
            this.pool.push(element);
          }
        };

        return Pool;
      }(); // Author: Daniele Giardini - http://www.demigiant.com
      // Created: 2014/07/19 14:11
      // 
      // License Copyright (c) Daniele Giardini.
      // This work is subject to the terms at http://dotween.demigiant.com/license.php
      // 
      // =============================================================
      // Contains Daniele Giardini's C# port of the easing equations created by Robert Penner
      // (all easing equations except for Flash, InFlash, OutFlash, InOutFlash,
      // which use some parts of Robert Penner's equations but were created by Daniele Giardini)
      // http://robertpenner.com/easing, see license below:
      // =============================================================
      //
      // TERMS OF USE - EASING EQUATIONS
      //
      // Open source under the BSD License.
      //
      // Copyright ? 2001 Robert Penner
      // All rights reserved.
      //
      // Redistribution and use in source and binary forms, with or without modification,
      // are permitted provided that the following conditions are met:
      //
      // - Redistributions of source code must retain the above copyright notice,
      // this list of conditions and the following disclaimer.
      // - Redistributions in binary form must reproduce the above copyright notice,
      // this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      // - Neither the name of the author nor the names of contributors may be used to endorse
      // or promote products derived} from this software without specific prior written permission.
      // - THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      // THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
      // IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      // LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
      // STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


      var _PiOver2 = Math.PI * 0.5;

      var _TwoPi = Math.PI * 2;

      function evaluateEase(easeType, time, duration, overshootOrAmplitude, period) {
        switch (easeType) {
          case EaseType.Linear:
            return time / duration;

          case EaseType.SineIn:
            return -Math.cos(time / duration * _PiOver2) + 1;

          case EaseType.SineOut:
            return Math.sin(time / duration * _PiOver2);

          case EaseType.SineInOut:
            return -0.5 * (Math.cos(Math.PI * time / duration) - 1);

          case EaseType.QuadIn:
            return (time /= duration) * time;

          case EaseType.QuadOut:
            return -(time /= duration) * (time - 2);

          case EaseType.QuadInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time;
            return -0.5 * (--time * (time - 2) - 1);

          case EaseType.CubicIn:
            return (time /= duration) * time * time;

          case EaseType.CubicOut:
            return (time = time / duration - 1) * time * time + 1;

          case EaseType.CubicInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time;
            return 0.5 * ((time -= 2) * time * time + 2);

          case EaseType.QuartIn:
            return (time /= duration) * time * time * time;

          case EaseType.QuartOut:
            return -((time = time / duration - 1) * time * time * time - 1);

          case EaseType.QuartInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time;
            return -0.5 * ((time -= 2) * time * time * time - 2);

          case EaseType.QuintIn:
            return (time /= duration) * time * time * time * time;

          case EaseType.QuintOut:
            return (time = time / duration - 1) * time * time * time * time + 1;

          case EaseType.QuintInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * time * time * time * time * time;
            return 0.5 * ((time -= 2) * time * time * time * time + 2);

          case EaseType.ExpoIn:
            return time == 0 ? 0 : Math.pow(2, 10 * (time / duration - 1));

          case EaseType.ExpoOut:
            if (time == duration) return 1;
            return -Math.pow(2, -10 * time / duration) + 1;

          case EaseType.ExpoInOut:
            if (time == 0) return 0;
            if (time == duration) return 1;
            if ((time /= duration * 0.5) < 1) return 0.5 * Math.pow(2, 10 * (time - 1));
            return 0.5 * (-Math.pow(2, -10 * --time) + 2);

          case EaseType.CircIn:
            return -(Math.sqrt(1 - (time /= duration) * time) - 1);

          case EaseType.CircOut:
            return Math.sqrt(1 - (time = time / duration - 1) * time);

          case EaseType.CircInOut:
            if ((time /= duration * 0.5) < 1) return -0.5 * (Math.sqrt(1 - time * time) - 1);
            return 0.5 * (Math.sqrt(1 - (time -= 2) * time) + 1);

          case EaseType.ElasticIn:
            var s0;
            if (time == 0) return 0;
            if ((time /= duration) == 1) return 1;
            if (period == 0) period = duration * 0.3;

            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s0 = period / 4;
            } else s0 = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);

            return -(overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s0) * _TwoPi / period));

          case EaseType.ElasticOut:
            var s1;
            if (time == 0) return 0;
            if ((time /= duration) == 1) return 1;
            if (period == 0) period = duration * 0.3;

            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s1 = period / 4;
            } else s1 = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);

            return overshootOrAmplitude * Math.pow(2, -10 * time) * Math.sin((time * duration - s1) * _TwoPi / period) + 1;

          case EaseType.ElasticInOut:
            var s;
            if (time == 0) return 0;
            if ((time /= duration * 0.5) == 2) return 1;
            if (period == 0) period = duration * (0.3 * 1.5);

            if (overshootOrAmplitude < 1) {
              overshootOrAmplitude = 1;
              s = period / 4;
            } else s = period / _TwoPi * Math.asin(1 / overshootOrAmplitude);

            if (time < 1) return -0.5 * (overshootOrAmplitude * Math.pow(2, 10 * (time -= 1)) * Math.sin((time * duration - s) * _TwoPi / period));
            return overshootOrAmplitude * Math.pow(2, -10 * (time -= 1)) * Math.sin((time * duration - s) * _TwoPi / period) * 0.5 + 1;

          case EaseType.BackIn:
            return (time /= duration) * time * ((overshootOrAmplitude + 1) * time - overshootOrAmplitude);

          case EaseType.BackOut:
            return (time = time / duration - 1) * time * ((overshootOrAmplitude + 1) * time + overshootOrAmplitude) + 1;

          case EaseType.BackInOut:
            if ((time /= duration * 0.5) < 1) return 0.5 * (time * time * (((overshootOrAmplitude *= 1.525) + 1) * time - overshootOrAmplitude));
            return 0.5 * ((time -= 2) * time * (((overshootOrAmplitude *= 1.525) + 1) * time + overshootOrAmplitude) + 2);

          case EaseType.BounceIn:
            return bounce_easeIn(time, duration);

          case EaseType.BounceOut:
            return bounce_easeOut(time, duration);

          case EaseType.BounceInOut:
            return bounce_easeInOut(time, duration);

          default:
            return -(time /= duration) * (time - 2);
        }
      }

      function bounce_easeIn(time, duration) {
        return 1 - bounce_easeOut(duration - time, duration);
      }

      function bounce_easeOut(time, duration) {
        if ((time /= duration) < 1 / 2.75) {
          return 7.5625 * time * time;
        }

        if (time < 2 / 2.75) {
          return 7.5625 * (time -= 1.5 / 2.75) * time + 0.75;
        }

        if (time < 2.5 / 2.75) {
          return 7.5625 * (time -= 2.25 / 2.75) * time + 0.9375;
        }

        return 7.5625 * (time -= 2.625 / 2.75) * time + 0.984375;
      }

      function bounce_easeInOut(time, duration) {
        if (time < duration * 0.5) {
          return bounce_easeIn(time * 2, duration) * 0.5;
        }

        return bounce_easeOut(time * 2 - duration, duration) * 0.5 + 0.5;
      }

      var TweenValue = /*#__PURE__*/function () {
        function TweenValue() {
          this.x = this.y = this.z = this.w = 0;
        }

        var _proto10 = TweenValue.prototype;

        _proto10.getField = function getField(index) {
          switch (index) {
            case 0:
              return this.x;

            case 1:
              return this.y;

            case 2:
              return this.z;

            case 3:
              return this.w;

            default:
              throw new Error("Index out of bounds: " + index);
          }
        };

        _proto10.setField = function setField(index, value) {
          switch (index) {
            case 0:
              this.x = value;
              break;

            case 1:
              this.y = value;
              break;

            case 2:
              this.z = value;
              break;

            case 3:
              this.w = value;
              break;

            default:
              throw new Error("Index out of bounds: " + index);
          }
        };

        _proto10.setZero = function setZero() {
          this.x = this.y = this.z = this.w = 0;
        };

        _createClass(TweenValue, [{
          key: "color",
          get: function get() {
            return (this.w << 24) + (this.x << 16) + (this.y << 8) + this.z;
          },
          set: function set(value) {
            this.x = (value & 0xFF0000) >> 16;
            this.y = (value & 0x00FF00) >> 8;
            this.z = value & 0x0000FF;
            this.w = (value & 0xFF000000) >> 24;
          }
        }]);

        return TweenValue;
      }();

      var s_vec2$5 = new Vec2();
      var GTweener = exports('GTweener', /*#__PURE__*/function () {
        function GTweener() {
          this._delay = 0;
          this._duration = 0;
          this._breakpoint = 0;
          this._easeType = 0;
          this._easeOvershootOrAmplitude = 0;
          this._easePeriod = 0;
          this._repeat = 0;
          this._yoyo = false;
          this._timeScale = 1;
          this._snapping = false;
          this._startValue = new TweenValue();
          this._endValue = new TweenValue();
          this._value = new TweenValue();
          this._deltaValue = new TweenValue();

          this._reset();
        }

        var _proto11 = GTweener.prototype;

        _proto11.setDelay = function setDelay(value) {
          this._delay = value;
          return this;
        };

        _proto11.setDuration = function setDuration(value) {
          this._duration = value;
          return this;
        };

        _proto11.setBreakpoint = function setBreakpoint(value) {
          this._breakpoint = value;
          return this;
        };

        _proto11.setEase = function setEase(value) {
          this._easeType = value;
          return this;
        };

        _proto11.setEasePeriod = function setEasePeriod(value) {
          this._easePeriod = value;
          return this;
        };

        _proto11.setEaseOvershootOrAmplitude = function setEaseOvershootOrAmplitude(value) {
          this._easeOvershootOrAmplitude = value;
          return this;
        };

        _proto11.setRepeat = function setRepeat(repeat, yoyo) {
          this._repeat = repeat;
          this._yoyo = yoyo;
          return this;
        };

        _proto11.setTimeScale = function setTimeScale(value) {
          this._timeScale = value;
          return this;
        };

        _proto11.setSnapping = function setSnapping(value) {
          this._snapping = value;
          return this;
        };

        _proto11.setTarget = function setTarget(value, propType) {
          this._target = value;
          this._propType = propType;
          return this;
        };

        _proto11.setPath = function setPath(value) {
          this._path = value;
          return this;
        };

        _proto11.setUserData = function setUserData(value) {
          this._userData = value;
          return this;
        };

        _proto11.onUpdate = function onUpdate(callback, target) {
          this._onUpdate = callback;
          this._onUpdateCaller = target;
          return this;
        };

        _proto11.onStart = function onStart(callback, target) {
          this._onStart = callback;
          this._onStartCaller = target;
          return this;
        };

        _proto11.onComplete = function onComplete(callback, target) {
          if (target === void 0) {
            target = null;
          }

          this._onComplete = callback;
          this._onCompleteCaller = target;
          return this;
        };

        _proto11.setPaused = function setPaused(paused) {
          this._paused = paused;
          return this;
        }
        /**
        * seek position of the tween, in seconds.
        */
        ;

        _proto11.seek = function seek(time) {
          if (this._killed) return;
          this._elapsedTime = time;

          if (this._elapsedTime < this._delay) {
            if (this._started) this._elapsedTime = this._delay;else return;
          }

          this.update();
        };

        _proto11.kill = function kill(complete) {
          if (this._killed) return;

          if (complete) {
            if (this._ended == 0) {
              if (this._breakpoint >= 0) this._elapsedTime = this._delay + this._breakpoint;else if (this._repeat >= 0) this._elapsedTime = this._delay + this._duration * (this._repeat + 1);else this._elapsedTime = this._delay + this._duration * 2;
              this.update();
            }

            this.callCompleteCallback();
          }

          this._killed = true;
        };

        _proto11._to = function _to(start, end, duration) {
          this._valueSize = 1;
          this._startValue.x = start;
          this._endValue.x = end;
          this._value.x = start;
          this._duration = duration;
          return this;
        };

        _proto11._to2 = function _to2(start, start2, end, end2, duration) {
          this._valueSize = 2;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._value.x = start;
          this._value.y = start2;
          this._duration = duration;
          return this;
        };

        _proto11._to3 = function _to3(start, start2, start3, end, end2, end3, duration) {
          this._valueSize = 3;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._startValue.z = start3;
          this._endValue.z = end3;
          this._value.x = start;
          this._value.y = start2;
          this._value.z = start3;
          this._duration = duration;
          return this;
        };

        _proto11._to4 = function _to4(start, start2, start3, start4, end, end2, end3, end4, duration) {
          this._valueSize = 4;
          this._startValue.x = start;
          this._endValue.x = end;
          this._startValue.y = start2;
          this._endValue.y = end2;
          this._startValue.z = start3;
          this._endValue.z = end3;
          this._startValue.w = start4;
          this._endValue.w = end4;
          this._value.x = start;
          this._value.y = start2;
          this._value.z = start3;
          this._value.w = start4;
          this._duration = duration;
          return this;
        };

        _proto11._toColor = function _toColor(start, end, duration) {
          this._valueSize = 5;
          this._startValue.color = start;
          this._endValue.color = end;
          this._value.color = start;
          this._duration = duration;
          return this;
        };

        _proto11._shake = function _shake(startX, startY, amplitude, duration) {
          this._valueSize = 6;
          this._startValue.x = startX;
          this._startValue.y = startY;
          this._startValue.w = amplitude;
          this._duration = duration;
          return this;
        };

        _proto11._init = function _init() {
          this._delay = 0;
          this._duration = 0;
          this._breakpoint = -1;
          this._easeType = EaseType.QuadOut;
          this._timeScale = 1;
          this._easePeriod = 0;
          this._easeOvershootOrAmplitude = 1.70158;
          this._snapping = false;
          this._repeat = 0;
          this._yoyo = false;
          this._valueSize = 0;
          this._started = false;
          this._paused = false;
          this._killed = false;
          this._elapsedTime = 0;
          this._normalizedTime = 0;
          this._ended = 0;
        };

        _proto11._reset = function _reset() {
          this._target = null;
          this._propType = null;
          this._userData = null;
          this._path = null;
          this._onStart = this._onUpdate = this._onComplete = null;
          this._onStartCaller = this._onUpdateCaller = this._onCompleteCaller = null;
        };

        _proto11._update = function _update(dt) {
          if (this._timeScale != 1) dt *= this._timeScale;
          if (dt == 0) return;

          if (this._ended != 0) //Maybe completed by seek
            {
              this.callCompleteCallback();
              this._killed = true;
              return;
            }

          this._elapsedTime += dt;
          this.update();

          if (this._ended != 0) {
            if (!this._killed) {
              this.callCompleteCallback();
              this._killed = true;
            }
          }
        };

        _proto11.update = function update() {
          this._ended = 0;

          if (this._valueSize == 0) //DelayedCall
            {
              if (this._elapsedTime >= this._delay + this._duration) this._ended = 1;
              return;
            }

          if (!this._started) {
            if (this._elapsedTime < this._delay) return;
            this._started = true;
            this.callStartCallback();
            if (this._killed) return;
          }

          var reversed = false;
          var tt = this._elapsedTime - this._delay;

          if (this._breakpoint >= 0 && tt >= this._breakpoint) {
            tt = this._breakpoint;
            this._ended = 2;
          }

          if (this._repeat != 0) {
            var round = Math.floor(tt / this._duration);
            tt -= this._duration * round;
            if (this._yoyo) reversed = round % 2 == 1;

            if (this._repeat > 0 && this._repeat - round < 0) {
              if (this._yoyo) reversed = this._repeat % 2 == 1;
              tt = this._duration;
              this._ended = 1;
            }
          } else if (tt >= this._duration) {
            tt = this._duration;
            this._ended = 1;
          }

          this._normalizedTime = evaluateEase(this._easeType, reversed ? this._duration - tt : tt, this._duration, this._easeOvershootOrAmplitude, this._easePeriod);

          this._value.setZero();

          this._deltaValue.setZero();

          if (this._valueSize == 6) {
            if (this._ended == 0) {
              var r = this._startValue.w * (1 - this._normalizedTime);
              var rx = r * (Math.random() > 0.5 ? 1 : -1);
              var ry = r * (Math.random() > 0.5 ? 1 : -1);
              this._deltaValue.x = rx;
              this._deltaValue.y = ry;
              this._value.x = this._startValue.x + rx;
              this._value.y = this._startValue.y + ry;
            } else {
              this._value.x = this._startValue.x;
              this._value.y = this._startValue.y;
            }
          } else if (this._path) {
            var pt = this._path.getPointAt(this._normalizedTime, s_vec2$5);

            if (this._snapping) {
              pt.x = Math.round(pt.x);
              pt.y = Math.round(pt.y);
            }

            this._deltaValue.x = pt.x - this._value.x;
            this._deltaValue.y = pt.y - this._value.y;
            this._value.x = pt.x;
            this._value.y = pt.y;
          } else {
            var cnt = Math.min(this._valueSize, 4);

            for (var i = 0; i < cnt; i++) {
              var n1 = this._startValue.getField(i);

              var n2 = this._endValue.getField(i);

              var f = n1 + (n2 - n1) * this._normalizedTime;
              if (this._snapping) f = Math.round(f);

              this._deltaValue.setField(i, f - this._value.getField(i));

              this._value.setField(i, f);
            }
          }

          if (this._target && this._propType) {
            if (this._propType instanceof Function) {
              switch (this._valueSize) {
                case 1:
                  this._propType.call(this._target, this._value.x);

                  break;

                case 2:
                  this._propType.call(this._target, this._value.x, this._value.y);

                  break;

                case 3:
                  this._propType.call(this._target, this._value.x, this._value.y, this._value.z);

                  break;

                case 4:
                  this._propType.call(this._target, this._value.x, this._value.y, this._value.z, this._value.w);

                  break;

                case 5:
                  this._propType.call(this._target, this._value.color);

                  break;

                case 6:
                  this._propType.call(this._target, this._value.x, this._value.y);

                  break;
              }
            } else {
              if (this._valueSize == 5) this._target[this._propType] = this._value.color;else this._target[this._propType] = this._value.x;
            }
          }

          this.callUpdateCallback();
        };

        _proto11.callStartCallback = function callStartCallback() {
          if (this._onStart) {
            try {
              this._onStart.call(this._onStartCaller, this);
            } catch (err) {
              console.log("error in start callback > " + err);
            }
          }
        };

        _proto11.callUpdateCallback = function callUpdateCallback() {
          if (this._onUpdate) {
            try {
              this._onUpdate.call(this._onUpdateCaller, this);
            } catch (err) {
              console.log("error in update callback > " + err);
            }
          }
        };

        _proto11.callCompleteCallback = function callCompleteCallback() {
          if (this._onComplete) {
            try {
              this._onComplete.call(this._onCompleteCaller, this);
            } catch (err) {
              console.log("error in complete callback > " + err);
            }
          }
        };

        _createClass(GTweener, [{
          key: "delay",
          get: function get() {
            return this._delay;
          }
        }, {
          key: "duration",
          get: function get() {
            return this._duration;
          }
        }, {
          key: "repeat",
          get: function get() {
            return this._repeat;
          }
        }, {
          key: "target",
          get: function get() {
            return this._target;
          }
        }, {
          key: "userData",
          get: function get() {
            return this._userData;
          }
        }, {
          key: "startValue",
          get: function get() {
            return this._startValue;
          }
        }, {
          key: "endValue",
          get: function get() {
            return this._endValue;
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          }
        }, {
          key: "deltaValue",
          get: function get() {
            return this._deltaValue;
          }
        }, {
          key: "normalizedTime",
          get: function get() {
            return this._normalizedTime;
          }
        }, {
          key: "completed",
          get: function get() {
            return this._ended != 0;
          }
        }, {
          key: "allCompleted",
          get: function get() {
            return this._ended == 1;
          }
        }]);

        return GTweener;
      }());

      var TweenManager = /*#__PURE__*/function () {
        function TweenManager() {}

        TweenManager.createTween = function createTween() {
          if (!_root) {
            _root = new Node("[TweenManager]");
            game.addPersistRootNode(_root);
            director.getScheduler().schedule(TweenManager.update, _root, 0, macro.REPEAT_FOREVER, 0, false);
          }

          var tweener = _tweenerPool.borrow();

          _activeTweens[_totalActiveTweens++] = tweener;
          return tweener;
        };

        TweenManager.isTweening = function isTweening(target, propType) {
          if (target == null) return false;
          var anyType = !propType;

          for (var i = 0; i < _totalActiveTweens; i++) {
            var tweener = _activeTweens[i];
            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) return true;
          }

          return false;
        };

        TweenManager.killTweens = function killTweens(target, completed, propType) {
          if (target == null) return false;
          var flag = false;
          var cnt = _totalActiveTweens;
          var anyType = !propType;

          for (var i = 0; i < cnt; i++) {
            var tweener = _activeTweens[i];

            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
              tweener.kill(completed);
              flag = true;
            }
          }

          return flag;
        };

        TweenManager.getTween = function getTween(target, propType) {
          if (target == null) return null;
          var cnt = _totalActiveTweens;
          var anyType = !propType;

          for (var i = 0; i < cnt; i++) {
            var tweener = _activeTweens[i];

            if (tweener && tweener.target == target && !tweener._killed && (anyType || tweener._propType == propType)) {
              return tweener;
            }
          }

          return null;
        };

        TweenManager.update = function update(dt) {
          var tweens = _activeTweens;
          var cnt = _totalActiveTweens;
          var freePosStart = -1;

          for (var i = 0; i < cnt; i++) {
            var tweener = tweens[i];

            if (tweener == null) {
              if (freePosStart == -1) freePosStart = i;
            } else if (tweener._killed) {
              tweener._reset();

              _tweenerPool.returns(tweener);

              tweens[i] = null;
              if (freePosStart == -1) freePosStart = i;
            } else {
              if (tweener._target && 'isDisposed' in tweener._target && tweener._target.isDisposed) tweener._killed = true;else if (!tweener._paused) tweener._update(dt);

              if (freePosStart != -1) {
                tweens[freePosStart] = tweener;
                tweens[i] = null;
                freePosStart++;
              }
            }
          }

          if (freePosStart >= 0) {
            if (_totalActiveTweens != cnt) //new tweens added
              {
                var j = cnt;
                cnt = _totalActiveTweens - cnt;

                for (i = 0; i < cnt; i++) tweens[freePosStart++] = tweens[j++];
              }

            _totalActiveTweens = freePosStart;
          }

          return false;
        };

        return TweenManager;
      }();

      var _activeTweens = new Array();

      var _tweenerPool = new Pool(GTweener, function (e) {
        return e._init();
      }, function (e) {
        return e._reset();
      });

      var _totalActiveTweens = 0;

      var _root;

      var GTween = exports('GTween', /*#__PURE__*/function () {
        function GTween() {}

        GTween.to = function to(start, end, duration) {
          return TweenManager.createTween()._to(start, end, duration);
        };

        GTween.to2 = function to2(start, start2, end, end2, duration) {
          return TweenManager.createTween()._to2(start, start2, end, end2, duration);
        };

        GTween.to3 = function to3(start, start2, start3, end, end2, end3, duration) {
          return TweenManager.createTween()._to3(start, start2, start3, end, end2, end3, duration);
        };

        GTween.to4 = function to4(start, start2, start3, start4, end, end2, end3, end4, duration) {
          return TweenManager.createTween()._to4(start, start2, start3, start4, end, end2, end3, end4, duration);
        };

        GTween.toColor = function toColor(start, end, duration) {
          return TweenManager.createTween()._toColor(start, end, duration);
        };

        GTween.delayedCall = function delayedCall(delay) {
          return TweenManager.createTween().setDelay(delay);
        };

        GTween.shake = function shake(startX, startY, amplitude, duration) {
          return TweenManager.createTween()._shake(startX, startY, amplitude, duration);
        };

        GTween.isTweening = function isTweening(target, propType) {
          return TweenManager.isTweening(target, propType);
        };

        GTween.kill = function kill(target, complete, propType) {
          TweenManager.killTweens(target, complete, propType);
        };

        GTween.getTween = function getTween(target, propType) {
          return TweenManager.getTween(target, propType);
        };

        return GTween;
      }());
      GTween.catchCallbackExceptions = true;
      var GearLook = exports('GearLook', /*#__PURE__*/function (_GearBase7) {
        _inheritsLoose(GearLook, _GearBase7);

        function GearLook() {
          return _GearBase7.apply(this, arguments) || this;
        }

        var _proto12 = GearLook.prototype;

        _proto12.init = function init() {
          this._default = {
            alpha: this._owner.alpha,
            rotation: this._owner.rotation,
            grayed: this._owner.grayed,
            touchable: this._owner.touchable
          };
          this._storage = {};
        };

        _proto12.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.alpha = buffer.readFloat();
          gv.rotation = buffer.readFloat();
          gv.grayed = buffer.readBool();
          gv.touchable = buffer.readBool();
        };

        _proto12.apply = function apply() {
          var gv = this._storage[this._controller.selectedPageId] || this._default;

          if (this.allowTween) {
            this._owner._gearLocked = true;
            this._owner.grayed = gv.grayed;
            this._owner.touchable = gv.touchable;
            this._owner._gearLocked = false;

            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != gv.alpha || this._tweenConfig._tweener.endValue.y != gv.rotation) {
                this._tweenConfig._tweener.kill(true);

                this._tweenConfig._tweener = null;
              } else return;
            }

            var a = gv.alpha != this._owner.alpha;
            var b = gv.rotation != this._owner.rotation;

            if (a || b) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to2(this._owner.alpha, this._owner.rotation, gv.alpha, gv.rotation, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;
            this._owner.grayed = gv.grayed;
            this._owner.alpha = gv.alpha;
            this._owner.rotation = gv.rotation;
            this._owner.touchable = gv.touchable;
            this._owner._gearLocked = false;
          }
        };

        _proto12.__tweenUpdate = function __tweenUpdate(tweener) {
          var flag = tweener.userData;
          this._owner._gearLocked = true;
          if ((flag & 1) != 0) this._owner.alpha = tweener.value.x;
          if ((flag & 2) != 0) this._owner.rotation = tweener.value.y;
          this._owner._gearLocked = false;
        };

        _proto12.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);

            this._tweenConfig._displayLockToken = 0;
          }

          this._tweenConfig._tweener = null;
        };

        _proto12.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];

          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }

          gv.alpha = this._owner.alpha;
          gv.rotation = this._owner.rotation;
          gv.grayed = this._owner.grayed;
          gv.touchable = this._owner.touchable;
        };

        return GearLook;
      }(GearBase));
      var GearSize = exports('GearSize', /*#__PURE__*/function (_GearBase8) {
        _inheritsLoose(GearSize, _GearBase8);

        function GearSize() {
          return _GearBase8.apply(this, arguments) || this;
        }

        var _proto13 = GearSize.prototype;

        _proto13.init = function init() {
          this._default = {
            width: this._owner.width,
            height: this._owner.height,
            scaleX: this._owner.scaleX,
            scaleY: this._owner.scaleY
          };
          this._storage = {};
        };

        _proto13.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.width = buffer.readInt();
          gv.height = buffer.readInt();
          gv.scaleX = buffer.readFloat();
          gv.scaleY = buffer.readFloat();
        };

        _proto13.apply = function apply() {
          var gv = this._storage[this._controller.selectedPageId] || this._default;

          if (this.allowTween) {
            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != gv.width || this._tweenConfig._tweener.endValue.y != gv.height || this._tweenConfig._tweener.endValue.z != gv.scaleX || this._tweenConfig._tweener.endValue.w != gv.scaleY) {
                this._tweenConfig._tweener.kill(true);

                this._tweenConfig._tweener = null;
              } else return;
            }

            var a = gv.width != this._owner.width || gv.height != this._owner.height;
            var b = gv.scaleX != this._owner.scaleX || gv.scaleY != this._owner.scaleY;

            if (a || b) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to4(this._owner.width, this._owner.height, this._owner.scaleX, this._owner.scaleY, gv.width, gv.height, gv.scaleX, gv.scaleY, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setUserData((a ? 1 : 0) + (b ? 2 : 0)).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;

            this._owner.setSize(gv.width, gv.height, this._owner.checkGearController(1, this._controller));

            this._owner.setScale(gv.scaleX, gv.scaleY);

            this._owner._gearLocked = false;
          }
        };

        _proto13.__tweenUpdate = function __tweenUpdate(tweener) {
          var flag = tweener.userData;
          this._owner._gearLocked = true;
          if ((flag & 1) != 0) this._owner.setSize(tweener.value.x, tweener.value.y, this._owner.checkGearController(1, this._controller));
          if ((flag & 2) != 0) this._owner.setScale(tweener.value.z, tweener.value.w);
          this._owner._gearLocked = false;
        };

        _proto13.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);

            this._tweenConfig._displayLockToken = 0;
          }

          this._tweenConfig._tweener = null;
        };

        _proto13.updateState = function updateState() {
          var gv = this._storage[this._controller.selectedPageId];

          if (!gv) {
            gv = {};
            this._storage[this._controller.selectedPageId] = gv;
          }

          gv.width = this._owner.width;
          gv.height = this._owner.height;
          gv.scaleX = this._owner.scaleX;
          gv.scaleY = this._owner.scaleY;
        };

        _proto13.updateFromRelations = function updateFromRelations(dx, dy) {
          if (this._controller == null || this._storage == null) return;

          for (var key in this._storage) {
            var gv = this._storage[key];
            gv.width += dx;
            gv.height += dy;
          }

          this._default.width += dx;
          this._default.height += dy;
          this.updateState();
        };

        return GearSize;
      }(GearBase));
      var GearText = exports('GearText', /*#__PURE__*/function (_GearBase9) {
        _inheritsLoose(GearText, _GearBase9);

        function GearText() {
          return _GearBase9.apply(this, arguments) || this;
        }

        var _proto14 = GearText.prototype;

        _proto14.init = function init() {
          this._default = this._owner.text;
          this._storage = {};
        };

        _proto14.addStatus = function addStatus(pageId, buffer) {
          if (pageId == null) this._default = buffer.readS();else this._storage[pageId] = buffer.readS();
        };

        _proto14.apply = function apply() {
          this._owner._gearLocked = true;
          var data = this._storage[this._controller.selectedPageId];
          if (data !== undefined) this._owner.text = data;else this._owner.text = this._default;
          this._owner._gearLocked = false;
        };

        _proto14.updateState = function updateState() {
          this._storage[this._controller.selectedPageId] = this._owner.text;
        };

        return GearText;
      }(GearBase));
      var GearXY = exports('GearXY', /*#__PURE__*/function (_GearBase10) {
        _inheritsLoose(GearXY, _GearBase10);

        function GearXY() {
          return _GearBase10.apply(this, arguments) || this;
        }

        var _proto15 = GearXY.prototype;

        _proto15.init = function init() {
          this._default = {
            x: this._owner.x,
            y: this._owner.y,
            px: this._owner.x / this._owner.parent.width,
            py: this._owner.y / this._owner.parent.height
          };
          this._storage = {};
        };

        _proto15.addStatus = function addStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else {
            gv = {};
            this._storage[pageId] = gv;
          }
          gv.x = buffer.readInt();
          gv.y = buffer.readInt();
        };

        _proto15.addExtStatus = function addExtStatus(pageId, buffer) {
          var gv;
          if (!pageId) gv = this._default;else gv = this._storage[pageId];
          gv.px = buffer.readFloat();
          gv.py = buffer.readFloat();
        };

        _proto15.apply = function apply() {
          var pt = this._storage[this._controller.selectedPageId] || this._default;
          var ex;
          var ey;

          if (this.positionsInPercent && this._owner.parent) {
            ex = pt.px * this._owner.parent.width;
            ey = pt.py * this._owner.parent.height;
          } else {
            ex = pt.x;
            ey = pt.y;
          }

          if (this.allowTween) {
            if (this._tweenConfig._tweener) {
              if (this._tweenConfig._tweener.endValue.x != ex || this._tweenConfig._tweener.endValue.y != ey) {
                this._tweenConfig._tweener.kill(true);

                this._tweenConfig._tweener = null;
              } else return;
            }

            var ox = this._owner.x;
            var oy = this._owner.y;

            if (ox != ex || oy != ey) {
              if (this._owner.checkGearController(0, this._controller)) this._tweenConfig._displayLockToken = this._owner.addDisplayLock();
              this._tweenConfig._tweener = GTween.to2(ox, oy, ex, ey, this._tweenConfig.duration).setDelay(this._tweenConfig.delay).setEase(this._tweenConfig.easeType).setTarget(this).onUpdate(this.__tweenUpdate, this).onComplete(this.__tweenComplete, this);
            }
          } else {
            this._owner._gearLocked = true;

            this._owner.setPosition(ex, ey);

            this._owner._gearLocked = false;
          }
        };

        _proto15.__tweenUpdate = function __tweenUpdate(tweener) {
          this._owner._gearLocked = true;

          this._owner.setPosition(tweener.value.x, tweener.value.y);

          this._owner._gearLocked = false;
        };

        _proto15.__tweenComplete = function __tweenComplete() {
          if (this._tweenConfig._displayLockToken != 0) {
            this._owner.releaseDisplayLock(this._tweenConfig._displayLockToken);

            this._tweenConfig._displayLockToken = 0;
          }

          this._tweenConfig._tweener = null;
        };

        _proto15.updateState = function updateState() {
          var pt = this._storage[this._controller.selectedPageId];

          if (!pt) {
            pt = {};
            this._storage[this._controller.selectedPageId] = pt;
          }

          pt.x = this._owner.x;
          pt.y = this._owner.y;
          pt.px = this._owner.x / this._owner.parent.width;
          pt.py = this._owner.y / this._owner.parent.height;
        };

        _proto15.updateFromRelations = function updateFromRelations(dx, dy) {
          if (this._controller == null || this._storage == null || this.positionsInPercent) return;

          for (var key in this._storage) {
            var pt = this._storage[key];
            pt.x += dx;
            pt.y += dy;
          }

          this._default.x += dx;
          this._default.y += dy;
          this.updateState();
        };

        return GearXY;
      }(GearBase));

      var RelationItem = /*#__PURE__*/function () {
        function RelationItem(owner) {
          this._owner = owner;
          this._defs = new Array();
        }

        var _proto16 = RelationItem.prototype;

        _proto16.add = function add(relationType, usePercent) {
          if (relationType == RelationType.Size) {
            this.add(RelationType.Width, usePercent);
            this.add(RelationType.Height, usePercent);
            return;
          }

          var length = this._defs.length;

          for (var i = 0; i < length; i++) {
            var def = this._defs[i];
            if (def.type == relationType) return;
          }

          this.internalAdd(relationType, usePercent);
        };

        _proto16.internalAdd = function internalAdd(relationType, usePercent) {
          if (relationType == RelationType.Size) {
            this.internalAdd(RelationType.Width, usePercent);
            this.internalAdd(RelationType.Height, usePercent);
            return;
          }

          var info = new RelationDef();
          info.percent = usePercent;
          info.type = relationType;
          info.axis = relationType <= RelationType.Right_Right || relationType == RelationType.Width || relationType >= RelationType.LeftExt_Left && relationType <= RelationType.RightExt_Right ? 0 : 1;

          this._defs.push(info);
        };

        _proto16.remove = function remove(relationType) {
          if (relationType == RelationType.Size) {
            this.remove(RelationType.Width);
            this.remove(RelationType.Height);
            return;
          }

          var dc = this._defs.length;

          for (var k = 0; k < dc; k++) {
            if (this._defs[k].type == relationType) {
              this._defs.splice(k, 1);

              break;
            }
          }
        };

        _proto16.copyFrom = function copyFrom(source) {
          this.target = source.target;
          this._defs.length = 0;
          var length = source._defs.length;

          for (var i = 0; i < length; i++) {
            var info = source._defs[i];
            var info2 = new RelationDef();
            info2.copyFrom(info);

            this._defs.push(info2);
          }
        };

        _proto16.dispose = function dispose() {
          if (this._target) {
            this.releaseRefTarget(this._target);
            this._target = null;
          }
        };

        _proto16.applyOnSelfResized = function applyOnSelfResized(dWidth, dHeight, applyPivot) {
          var ox = this._owner.x;
          var oy = this._owner.y;
          var length = this._defs.length;

          for (var i = 0; i < length; i++) {
            var info = this._defs[i];

            switch (info.type) {
              case RelationType.Center_Center:
                this._owner.x -= (0.5 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                break;

              case RelationType.Right_Center:
              case RelationType.Right_Left:
              case RelationType.Right_Right:
                this._owner.x -= (1 - (applyPivot ? this._owner.pivotX : 0)) * dWidth;
                break;

              case RelationType.Middle_Middle:
                this._owner.y -= (0.5 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                break;

              case RelationType.Bottom_Middle:
              case RelationType.Bottom_Top:
              case RelationType.Bottom_Bottom:
                this._owner.y -= (1 - (applyPivot ? this._owner.pivotY : 0)) * dHeight;
                break;
            }
          }

          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;

            this._owner.updateGearFromRelations(1, ox, oy);

            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;

              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }
        };

        _proto16.applyOnXYChanged = function applyOnXYChanged(info, dx, dy) {
          var tmp;

          switch (info.type) {
            case RelationType.Left_Left:
            case RelationType.Left_Center:
            case RelationType.Left_Right:
            case RelationType.Center_Center:
            case RelationType.Right_Left:
            case RelationType.Right_Center:
            case RelationType.Right_Right:
              this._owner.x += dx;
              break;

            case RelationType.Top_Top:
            case RelationType.Top_Middle:
            case RelationType.Top_Bottom:
            case RelationType.Middle_Middle:
            case RelationType.Bottom_Top:
            case RelationType.Bottom_Middle:
            case RelationType.Bottom_Bottom:
              this._owner.y += dy;
              break;

            case RelationType.Width:
            case RelationType.Height:
              break;

            case RelationType.LeftExt_Left:
            case RelationType.LeftExt_Right:
              if (this._owner != this._target.parent) {
                tmp = this._owner.xMin;
                this._owner.width = this._owner._rawWidth - dx;
                this._owner.xMin = tmp + dx;
              } else this._owner.width = this._owner._rawWidth - dx;

              break;

            case RelationType.RightExt_Left:
            case RelationType.RightExt_Right:
              if (this._owner != this._target.parent) {
                tmp = this._owner.xMin;
                this._owner.width = this._owner._rawWidth + dx;
                this._owner.xMin = tmp;
              } else this._owner.width = this._owner._rawWidth + dx;

              break;

            case RelationType.TopExt_Top:
            case RelationType.TopExt_Bottom:
              if (this._owner != this._target.parent) {
                tmp = this._owner.yMin;
                this._owner.height = this._owner._rawHeight - dy;
                this._owner.yMin = tmp + dy;
              } else this._owner.height = this._owner._rawHeight - dy;

              break;

            case RelationType.BottomExt_Top:
            case RelationType.BottomExt_Bottom:
              if (this._owner != this._target.parent) {
                tmp = this._owner.yMin;
                this._owner.height = this._owner._rawHeight + dy;
                this._owner.yMin = tmp;
              } else this._owner.height = this._owner._rawHeight + dy;

              break;
          }
        };

        _proto16.applyOnSizeChanged = function applyOnSizeChanged(info) {
          var pos = 0,
              pivot = 0,
              delta = 0;
          var v, tmp;

          if (info.axis == 0) {
            if (this._target != this._owner.parent) {
              pos = this._target.x;
              if (this._target.pivotAsAnchor) pivot = this._target.pivotX;
            }

            if (info.percent) {
              if (this._targetWidth != 0) delta = this._target._width / this._targetWidth;
            } else delta = this._target._width - this._targetWidth;
          } else {
            if (this._target != this._owner.parent) {
              pos = this._target.y;
              if (this._target.pivotAsAnchor) pivot = this._target.pivotY;
            }

            if (info.percent) {
              if (this._targetHeight != 0) delta = this._target._height / this._targetHeight;
            } else delta = this._target._height - this._targetHeight;
          }

          switch (info.type) {
            case RelationType.Left_Left:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else if (pivot != 0) this._owner.x += delta * -pivot;
              break;

            case RelationType.Left_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (0.5 - pivot);
              break;

            case RelationType.Left_Right:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin - pos) * delta;else this._owner.x += delta * (1 - pivot);
              break;

            case RelationType.Center_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth * 0.5 - pos) * delta - this._owner._rawWidth * 0.5;else this._owner.x += delta * (0.5 - pivot);
              break;

            case RelationType.Right_Left:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else if (pivot != 0) this._owner.x += delta * -pivot;
              break;

            case RelationType.Right_Center:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (0.5 - pivot);
              break;

            case RelationType.Right_Right:
              if (info.percent) this._owner.xMin = pos + (this._owner.xMin + this._owner._rawWidth - pos) * delta - this._owner._rawWidth;else this._owner.x += delta * (1 - pivot);
              break;

            case RelationType.Top_Top:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else if (pivot != 0) this._owner.y += delta * -pivot;
              break;

            case RelationType.Top_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (0.5 - pivot);
              break;

            case RelationType.Top_Bottom:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin - pos) * delta;else this._owner.y += delta * (1 - pivot);
              break;

            case RelationType.Middle_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight * 0.5 - pos) * delta - this._owner._rawHeight * 0.5;else this._owner.y += delta * (0.5 - pivot);
              break;

            case RelationType.Bottom_Top:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else if (pivot != 0) this._owner.y += delta * -pivot;
              break;

            case RelationType.Bottom_Middle:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (0.5 - pivot);
              break;

            case RelationType.Bottom_Bottom:
              if (info.percent) this._owner.yMin = pos + (this._owner.yMin + this._owner._rawHeight - pos) * delta - this._owner._rawHeight;else this._owner.y += delta * (1 - pivot);
              break;

            case RelationType.Width:
              if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceWidth - this._target.initWidth;else v = this._owner._rawWidth - this._targetWidth;
              if (info.percent) v = v * delta;

              if (this._target == this._owner.parent) {
                if (this._owner.pivotAsAnchor) {
                  tmp = this._owner.xMin;

                  this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);

                  this._owner.xMin = tmp;
                } else this._owner.setSize(this._target._width + v, this._owner._rawHeight, true);
              } else this._owner.width = this._target._width + v;

              break;

            case RelationType.Height:
              if (this._owner._underConstruct && this._owner == this._target.parent) v = this._owner.sourceHeight - this._target.initHeight;else v = this._owner._rawHeight - this._targetHeight;
              if (info.percent) v = v * delta;

              if (this._target == this._owner.parent) {
                if (this._owner.pivotAsAnchor) {
                  tmp = this._owner.yMin;

                  this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);

                  this._owner.yMin = tmp;
                } else this._owner.setSize(this._owner._rawWidth, this._target._height + v, true);
              } else this._owner.height = this._target._height + v;

              break;

            case RelationType.LeftExt_Left:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
              this._owner.width = this._owner._rawWidth - v;
              this._owner.xMin = tmp + v;
              break;

            case RelationType.LeftExt_Right:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
              this._owner.width = this._owner._rawWidth - v;
              this._owner.xMin = tmp + v;
              break;

            case RelationType.RightExt_Left:
              tmp = this._owner.xMin;
              if (info.percent) v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);else v = delta * -pivot;
              this._owner.width = this._owner._rawWidth + v;
              this._owner.xMin = tmp;
              break;

            case RelationType.RightExt_Right:
              tmp = this._owner.xMin;

              if (info.percent) {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.width = pos + this._target._width - this._target._width * pivot + (this._owner.sourceWidth - pos - this._target.initWidth + this._target.initWidth * pivot) * delta;else this._owner.width = pos + (this._owner._rawWidth - pos) * delta;
                } else {
                  v = pos + (tmp + this._owner._rawWidth - pos) * delta - (tmp + this._owner._rawWidth);
                  this._owner.width = this._owner._rawWidth + v;
                  this._owner.xMin = tmp;
                }
              } else {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.width = this._owner.sourceWidth + (this._target._width - this._target.initWidth) * (1 - pivot);else this._owner.width = this._owner._rawWidth + delta * (1 - pivot);
                } else {
                  v = delta * (1 - pivot);
                  this._owner.width = this._owner._rawWidth + v;
                  this._owner.xMin = tmp;
                }
              }

              break;

            case RelationType.TopExt_Top:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * -pivot;
              this._owner.height = this._owner._rawHeight - v;
              this._owner.yMin = tmp + v;
              break;

            case RelationType.TopExt_Bottom:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp - pos) * delta - tmp;else v = delta * (1 - pivot);
              this._owner.height = this._owner._rawHeight - v;
              this._owner.yMin = tmp + v;
              break;

            case RelationType.BottomExt_Top:
              tmp = this._owner.yMin;
              if (info.percent) v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);else v = delta * -pivot;
              this._owner.height = this._owner._rawHeight + v;
              this._owner.yMin = tmp;
              break;

            case RelationType.BottomExt_Bottom:
              tmp = this._owner.yMin;

              if (info.percent) {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.height = pos + this._target._height - this._target._height * pivot + (this._owner.sourceHeight - pos - this._target.initHeight + this._target.initHeight * pivot) * delta;else this._owner.height = pos + (this._owner._rawHeight - pos) * delta;
                } else {
                  v = pos + (tmp + this._owner._rawHeight - pos) * delta - (tmp + this._owner._rawHeight);
                  this._owner.height = this._owner._rawHeight + v;
                  this._owner.yMin = tmp;
                }
              } else {
                if (this._owner == this._target.parent) {
                  if (this._owner._underConstruct) this._owner.height = this._owner.sourceHeight + (this._target._height - this._target.initHeight) * (1 - pivot);else this._owner.height = this._owner._rawHeight + delta * (1 - pivot);
                } else {
                  v = delta * (1 - pivot);
                  this._owner.height = this._owner._rawHeight + v;
                  this._owner.yMin = tmp;
                }
              }

              break;
          }
        };

        _proto16.addRefTarget = function addRefTarget(target) {
          if (target != this._owner.parent) target.on(Event.XY_CHANGED, this.__targetXYChanged, this);
          target.on(Event.SIZE_CHANGED, this.__targetSizeChanged, this);
          target.on(Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
          this._targetX = this._target.x;
          this._targetY = this._target.y;
          this._targetWidth = this._target._width;
          this._targetHeight = this._target._height;
        };

        _proto16.releaseRefTarget = function releaseRefTarget(target) {
          if (!target.node) return;

          if (!target.node.isValid) {
            console.warn("target is not Valid");
            return;
          }

          target.off(Event.XY_CHANGED, this.__targetXYChanged, this);
          target.off(Event.SIZE_CHANGED, this.__targetSizeChanged, this);
          target.off(Event.SIZE_DELAY_CHANGE, this.__targetSizeWillChange, this);
        };

        _proto16.__targetXYChanged = function __targetXYChanged(evt) {
          if (this._owner.relations.handling != null || this._owner.group != null && this._owner.group._updating) {
            this._targetX = this._target.x;
            this._targetY = this._target.y;
            return;
          }

          this._owner.relations.handling = this._target;
          var ox = this._owner.x;
          var oy = this._owner.y;
          var dx = this._target.x - this._targetX;
          var dy = this._target.y - this._targetY;
          var length = this._defs.length;

          for (var i = 0; i < length; i++) {
            var info = this._defs[i];
            this.applyOnXYChanged(info, dx, dy);
          }

          this._targetX = this._target.x;
          this._targetY = this._target.y;

          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;

            this._owner.updateGearFromRelations(1, ox, oy);

            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;

              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }

          this._owner.relations.handling = null;
        };

        _proto16.__targetSizeChanged = function __targetSizeChanged(evt) {
          if (this._owner.relations.handling != null) return;
          this._owner.relations.handling = this._target;
          var ox = this._owner.x;
          var oy = this._owner.y;
          var ow = this._owner._rawWidth;
          var oh = this._owner._rawHeight;
          var length = this._defs.length;

          for (var i = 0; i < length; i++) {
            var info = this._defs[i];
            this.applyOnSizeChanged(info);
          }

          this._targetWidth = this._target._width;
          this._targetHeight = this._target._height;

          if (ox != this._owner.x || oy != this._owner.y) {
            ox = this._owner.x - ox;
            oy = this._owner.y - oy;

            this._owner.updateGearFromRelations(1, ox, oy);

            if (this._owner.parent) {
              var len = this._owner.parent._transitions.length;

              if (len > 0) {
                for (var i = 0; i < len; ++i) {
                  this._owner.parent._transitions[i].updateFromRelations(this._owner.id, ox, oy);
                }
              }
            }
          }

          if (ow != this._owner._rawWidth || oh != this._owner._rawHeight) {
            ow = this._owner._rawWidth - ow;
            oh = this._owner._rawHeight - oh;

            this._owner.updateGearFromRelations(2, ow, oh);
          }

          this._owner.relations.handling = null;
        };

        _proto16.__targetSizeWillChange = function __targetSizeWillChange(evt) {
          this._owner.relations.sizeDirty = true;
        };

        _createClass(RelationItem, [{
          key: "owner",
          get: function get() {
            return this._owner;
          }
        }, {
          key: "target",
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            if (this._target != value) {
              if (this._target) this.releaseRefTarget(this._target);
              this._target = value;
              if (this._target) this.addRefTarget(this._target);
            }
          }
        }, {
          key: "isEmpty",
          get: function get() {
            return this._defs.length == 0;
          }
        }]);

        return RelationItem;
      }();

      var RelationDef = /*#__PURE__*/function () {
        function RelationDef() {
          this.percent = false;
          this.type = 0;
          this.axis = 0;
        }

        var _proto17 = RelationDef.prototype;

        _proto17.copyFrom = function copyFrom(source) {
          this.percent = source.percent;
          this.type = source.type;
          this.axis = source.axis;
        };

        return RelationDef;
      }();

      var Relations = /*#__PURE__*/function () {
        function Relations(owner) {
          this.sizeDirty = false;
          this._owner = owner;
          this._items = new Array();
        }

        var _proto18 = Relations.prototype;

        _proto18.add = function add(target, relationType, usePercent) {
          var length = this._items.length;

          for (var i = 0; i < length; i++) {
            var item = this._items[i];

            if (item.target == target) {
              item.add(relationType, usePercent);
              return;
            }
          }

          var newItem = new RelationItem(this._owner);
          newItem.target = target;
          newItem.add(relationType, usePercent);

          this._items.push(newItem);
        };

        _proto18.remove = function remove(target, relationType) {
          relationType = relationType || 0;
          var cnt = this._items.length;
          var i = 0;

          while (i < cnt) {
            var item = this._items[i];

            if (item.target == target) {
              item.remove(relationType);

              if (item.isEmpty) {
                item.dispose();

                this._items.splice(i, 1);

                cnt--;
              } else i++;
            } else i++;
          }
        };

        _proto18.contains = function contains(target) {
          var length = this._items.length;

          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            if (item.target == target) return true;
          }

          return false;
        };

        _proto18.clearFor = function clearFor(target) {
          var cnt = this._items.length;
          var i = 0;

          while (i < cnt) {
            var item = this._items[i];

            if (item.target == target) {
              item.dispose();

              this._items.splice(i, 1);

              cnt--;
            } else i++;
          }
        };

        _proto18.clearAll = function clearAll() {
          var length = this._items.length;

          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.dispose();
          }

          this._items.length = 0;
        };

        _proto18.copyFrom = function copyFrom(source) {
          this.clearAll();
          var arr = source._items;
          var length = arr.length;

          for (var i = 0; i < length; i++) {
            var ri = arr[i];
            var item = new RelationItem(this._owner);
            item.copyFrom(ri);

            this._items.push(item);
          }
        };

        _proto18.dispose = function dispose() {
          this.clearAll();
        };

        _proto18.onOwnerSizeChanged = function onOwnerSizeChanged(dWidth, dHeight, applyPivot) {
          if (this._items.length == 0) return;
          var length = this._items.length;

          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.applyOnSelfResized(dWidth, dHeight, applyPivot);
          }
        };

        _proto18.ensureRelationsSizeCorrect = function ensureRelationsSizeCorrect() {
          if (this._items.length == 0) return;
          this.sizeDirty = false;
          var length = this._items.length;

          for (var i = 0; i < length; i++) {
            var item = this._items[i];
            item.target.ensureSizeCorrect();
          }
        };

        _proto18.setup = function setup(buffer, parentToChild) {
          var cnt = buffer.readByte();
          var target;

          for (var i = 0; i < cnt; i++) {
            var targetIndex = buffer.readShort();
            if (targetIndex == -1) target = this._owner.parent;else if (parentToChild) target = this._owner.getChildAt(targetIndex);else target = this._owner.parent.getChildAt(targetIndex);
            var newItem = new RelationItem(this._owner);
            newItem.target = target;

            this._items.push(newItem);

            var cnt2 = buffer.readByte();

            for (var j = 0; j < cnt2; j++) {
              var rt = buffer.readByte();
              var usePercent = buffer.readBool();
              newItem.internalAdd(rt, usePercent);
            }
          }
        };

        _createClass(Relations, [{
          key: "empty",
          get: function get() {
            return this._items.length == 0;
          }
        }]);

        return Relations;
      }();

      var UIConfig = exports('UIConfig', function UIConfig() {}); //Default font name

      UIConfig.defaultScrollDecelerationRate = void 0;
      UIConfig.defaultFont = void 0;
      UIConfig.defaultFont = "Arial"; //When a modal window is in front, the background becomes dark.

      UIConfig.modalLayerColor = new Color(0x33, 0x33, 0x33, 0x33);
      UIConfig.buttonSoundVolumeScale = 1; //Scrolling step in pixels

      UIConfig.defaultScrollStep = 25; //Deceleration ratio of scrollpane when its in touch dragging.

      UIConfig.defaultScrollDecelerationRate = 0.967; //Default scrollbar display mode. Recommened visible for Desktop and Auto for mobile.

      UIConfig.defaultScrollBarDisplay = ScrollBarDisplayType.Visible; //Allow dragging the content to scroll. Recommeded true for mobile.

      UIConfig.defaultScrollTouchEffect = true; //The "rebound" effect in the scolling container. Recommeded true for mobile.

      UIConfig.defaultScrollBounceEffect = true; //Max items displayed in combobox without scrolling.

      UIConfig.defaultComboBoxVisibleItemCount = 10; // Pixel offsets of finger to trigger scrolling.

      UIConfig.touchScrollSensitivity = 20; // Pixel offsets of finger to trigger dragging.

      UIConfig.touchDragSensitivity = 10; // Pixel offsets of mouse pointer to trigger dragging.

      UIConfig.clickDragSensitivity = 2; // When click the window, brings to front automatically.

      UIConfig.bringWindowToFrontOnClick = true;
      UIConfig.frameTimeForAsyncUIConstruction = 0.002;
      UIConfig.linkUnderline = true; //Default group name of UI node.<br/>

      UIConfig.defaultUILayer = Layers.Enum.UI_2D;
      var _fontRegistry = {};

      function registerFont(name, font, bundle) {
        if (font instanceof Font) _fontRegistry[name] = font;else {
          (bundle || resources).load(font || name, Font, function (err, asset) {
            _fontRegistry[name] = asset;
          });
        }
      }

      function getFontByName(name) {
        return _fontRegistry[name];
      }

      var GObject = exports('GObject', /*#__PURE__*/function () {
        function GObject() {
          this._node = void 0;
          this._x = 0;
          this._y = 0;
          this._alpha = 1;
          this._visible = true;
          this._touchable = true;
          this._skewX = 0;
          this._skewY = 0;
          this._sortingOrder = 0;
          this._internalVisible = true;
          this.sourceWidth = 0;
          this.sourceHeight = 0;
          this.initWidth = 0;
          this.initHeight = 0;
          this.minWidth = 0;
          this.minHeight = 0;
          this.maxWidth = 0;
          this.maxHeight = 0;
          this._width = 0;
          this._height = 0;
          this._rawWidth = 0;
          this._rawHeight = 0;
          this._underConstruct = false;
          this._sizePercentInGroup = 0;
          this._node = new Node();
          this._uiTrans = this._node.addComponent(UITransform);
          this._uiOpacity = this.node.addComponent(UIOpacity);
          this._node["$gobj"] = this;
          this._node.layer = UIConfig.defaultUILayer;

          this._uiTrans.setAnchorPoint(0, 1);

          this._node.on(Node.EventType.ANCHOR_CHANGED, this.handleAnchorChanged, this);

          this._id = this._node.uuid;
          this._name = "";
          this._relations = new Relations(this);
          this._gears = new Array(10);
          this._blendMode = BlendMode.Normal;
          this._partner = this._node.addComponent(GObjectPartner);
        }

        var _proto19 = GObject.prototype;

        _proto19.setNodeY = function setNodeY(value) {
          var xv = this._x;
          var yv = -value;

          if (!this._pivotAsAnchor) {
            xv += this._uiTrans.anchorX * this._width;
            yv -= (1 - this._uiTrans.anchorY) * this._height;
          }

          if (this._pixelSnapping) {
            xv = Math.round(xv);
            yv = Math.round(yv);
          }

          this._node.setPosition(xv, yv);
        };

        _proto19.setPosition = function setPosition(xv, yv) {
          if (this._x != xv || this._y != yv) {
            var dx = xv - this._x;
            var dy = yv - this._y;
            this._x = xv;
            this._y = yv;
            this.handlePositionChanged();
            if (this instanceof GGroup) this.moveChildren(dx, dy);
            this.updateGear(1);

            if (this._parent && !("setVirtual" in this._parent)
            /*not list*/
            ) {
                this._parent.setBoundsChangedFlag();

                if (this._group) this._group.setBoundsChangedFlag(true);

                this._node.emit(Event.XY_CHANGED, this);
              }

            if (GObject.draggingObject == this && !s_dragging) this.localToGlobalRect(0, 0, this._width, this._height, sGlobalRect);
          }
        };

        _proto19.center = function center(restraint) {
          var r;
          if (this._parent) r = this.parent;else r = Decls$1.GRoot.inst;
          this.setPosition((r.width - this._width) / 2, (r.height - this._height) / 2);

          if (restraint) {
            this.addRelation(r, RelationType.Center_Center);
            this.addRelation(r, RelationType.Middle_Middle);
          }
        };

        _proto19.setSize = function setSize(wv, hv, ignorePivot) {
          if (ignorePivot === void 0) {
            ignorePivot = false;
          }

          if (this._rawWidth != wv || this._rawHeight != hv) {
            this._rawWidth = wv;
            this._rawHeight = hv;
            if (wv < this.minWidth) wv = this.minWidth;
            if (hv < this.minHeight) hv = this.minHeight;
            if (this.maxWidth > 0 && wv > this.maxWidth) wv = this.maxWidth;
            if (this.maxHeight > 0 && hv > this.maxHeight) hv = this.maxHeight;
            var dWidth = wv - this._width;
            var dHeight = hv - this._height;
            this._width = wv;
            this._height = hv;
            this.handleSizeChanged();
            if ((this._uiTrans.anchorX != 0 || this._uiTrans.anchorY != 1) && !this._pivotAsAnchor && !ignorePivot) this.setPosition(this.x - this._uiTrans.anchorX * dWidth, this.y - (1 - this._uiTrans.anchorY) * dHeight);else this.handlePositionChanged();
            if (this instanceof GGroup) this.resizeChildren(dWidth, dHeight);
            this.updateGear(2);

            if (this._parent) {
              this._relations.onOwnerSizeChanged(dWidth, dHeight, this._pivotAsAnchor || !ignorePivot);

              this._parent.setBoundsChangedFlag();

              if (this._group) this._group.setBoundsChangedFlag();
            }

            this._node.emit(Event.SIZE_CHANGED, this);
          }
        };

        _proto19.makeFullScreen = function makeFullScreen() {
          this.setSize(Decls$1.GRoot.inst.width, Decls$1.GRoot.inst.height);
        };

        _proto19.ensureSizeCorrect = function ensureSizeCorrect() {};

        _proto19.setScale = function setScale(sx, sy) {
          if (this._node.scale.x != sx || this._node.scale.y != sy) {
            this._node.setScale(sx, sy);

            this.updateGear(2);
          }
        };

        _proto19.setPivot = function setPivot(xv, yv, asAnchor) {
          if (this._uiTrans.anchorX != xv || this._uiTrans.anchorY != 1 - yv) {
            this._pivotAsAnchor = asAnchor;

            this._uiTrans.setAnchorPoint(xv, 1 - yv);
          } else if (this._pivotAsAnchor != asAnchor) {
            this._pivotAsAnchor = asAnchor;
            this.handlePositionChanged();
          }
        };

        _proto19.requestFocus = function requestFocus() {};

        _proto19.getGear = function getGear(index) {
          var gear = this._gears[index];
          if (!gear) this._gears[index] = gear = createGear(this, index);
          return gear;
        };

        _proto19.updateGear = function updateGear(index) {
          if (this._underConstruct || this._gearLocked) return;
          var gear = this._gears[index];
          if (gear && gear.controller) gear.updateState();
        };

        _proto19.checkGearController = function checkGearController(index, c) {
          return this._gears[index] && this._gears[index].controller == c;
        };

        _proto19.updateGearFromRelations = function updateGearFromRelations(index, dx, dy) {
          if (this._gears[index]) this._gears[index].updateFromRelations(dx, dy);
        };

        _proto19.addDisplayLock = function addDisplayLock() {
          var gearDisplay = this._gears[0];

          if (gearDisplay && gearDisplay.controller) {
            var ret = gearDisplay.addLock();
            this.checkGearDisplay();
            return ret;
          } else return 0;
        };

        _proto19.releaseDisplayLock = function releaseDisplayLock(token) {
          var gearDisplay = this._gears[0];

          if (gearDisplay && gearDisplay.controller) {
            gearDisplay.releaseLock(token);
            this.checkGearDisplay();
          }
        };

        _proto19.checkGearDisplay = function checkGearDisplay() {
          if (this._handlingController) return;
          var connected = this._gears[0] == null || this._gears[0].connected;
          if (this._gears[8]) connected = this._gears[8].evaluate(connected);

          if (connected != this._internalVisible) {
            this._internalVisible = connected;
            this.handleVisibleChanged();
            if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
          }
        };

        _proto19.addRelation = function addRelation(target, relationType, usePercent) {
          this._relations.add(target, relationType, usePercent);
        };

        _proto19.removeRelation = function removeRelation(target, relationType) {
          this._relations.remove(target, relationType);
        };

        _proto19.removeFromParent = function removeFromParent() {
          if (this._parent) this._parent.removeChild(this);
        };

        _proto19.findParent = function findParent() {
          if (this._parent) return this._parent; //可能有些不直接在children里，但node挂着的

          var pn = this._node.parent;

          while (pn) {
            var gobj = pn["$gobj"];
            if (gobj) return gobj;
            pn = pn.parent;
          }

          return null;
        };

        GObject.cast = function cast(obj) {
          return obj["$gobj"];
        };

        _proto19.dispose = function dispose() {
          var n = this._node;
          if (!n) return;
          this.removeFromParent();

          this._relations.dispose();

          this._node = null;
          n.destroy();

          for (var i = 0; i < 10; i++) {
            var gear = this._gears[i];
            if (gear) gear.dispose();
          }
        };

        _proto19.onEnable = function onEnable() {};

        _proto19.onDisable = function onDisable() {};

        _proto19.onUpdate = function onUpdate() {};

        _proto19.onDestroy = function onDestroy() {};

        _proto19.onClick = function onClick(listener, target) {
          this._node.on(Event.CLICK, listener, target);
        };

        _proto19.onceClick = function onceClick(listener, target) {
          this._node.once(Event.CLICK, listener, target);
        };

        _proto19.offClick = function offClick(listener, target) {
          this._node.off(Event.CLICK, listener, target);
        };

        _proto19.clearClick = function clearClick() {
          this._node.off(Event.CLICK);
        };

        _proto19.hasClickListener = function hasClickListener() {
          return this._node.hasEventListener(Event.CLICK);
        };

        _proto19.on = function on(type, listener, target) {
          if (type == Event.DISPLAY || type == Event.UNDISPLAY) this._partner._emitDisplayEvents = true;

          this._node.on(type, listener, target);
        };

        _proto19.once = function once(type, listener, target) {
          if (type == Event.DISPLAY || type == Event.UNDISPLAY) this._partner._emitDisplayEvents = true;

          this._node.once(type, listener, target);
        };

        _proto19.off = function off(type, listener, target) {
          this._node.off(type, listener, target);
        };

        _proto19.startDrag = function startDrag(touchId) {
          if (!this._node.activeInHierarchy) return;
          this.dragBegin(touchId);
        };

        _proto19.stopDrag = function stopDrag() {
          this.dragEnd();
        };

        _proto19.localToGlobal = function localToGlobal(ax, ay, result) {
          if (result === void 0) {
            result = null;
          }

          ax = ax || 0;
          ay = ay || 0;
          s_vec3$1.x = ax;
          s_vec3$1.y = -ay;

          if (!this._pivotAsAnchor) {
            s_vec3$1.x -= this._uiTrans.anchorX * this._width;
            s_vec3$1.y += (1 - this._uiTrans.anchorY) * this._height;
          }

          this._uiTrans.convertToWorldSpaceAR(s_vec3$1, s_vec3$1);

          s_vec3$1.y = Decls$1.GRoot.inst.height - s_vec3$1.y;
          result = result || new Vec2();
          result.x = s_vec3$1.x;
          result.y = s_vec3$1.y;
          return result;
        };

        _proto19.globalToLocal = function globalToLocal(ax, ay, result) {
          if (result === void 0) {
            result = null;
          }

          ax = ax || 0;
          ay = ay || 0;
          s_vec3$1.x = ax;
          s_vec3$1.y = Decls$1.GRoot.inst.height - ay;

          this._uiTrans.convertToNodeSpaceAR(s_vec3$1, s_vec3$1);

          if (!this._pivotAsAnchor) {
            s_vec3$1.x += this._uiTrans.anchorX * this._width;
            s_vec3$1.y -= (1 - this._uiTrans.anchorY) * this._height;
          }

          result = result || new Vec2();
          result.x = s_vec3$1.x;
          result.y = -s_vec3$1.y;
          return result;
        };

        _proto19.localToGlobalRect = function localToGlobalRect(ax, ay, aw, ah, result) {
          ax = ax || 0;
          ay = ay || 0;
          aw = aw || 0;
          ah = ah || 0;
          result = result || new Rect();
          var pt = this.localToGlobal(ax, ay);
          result.x = pt.x;
          result.y = pt.y;
          pt = this.localToGlobal(ax + aw, ay + ah, pt);
          result.xMax = pt.x;
          result.yMax = pt.y;
          return result;
        };

        _proto19.globalToLocalRect = function globalToLocalRect(ax, ay, aw, ah, result) {
          ax = ax || 0;
          ay = ay || 0;
          aw = aw || 0;
          ah = ah || 0;
          result = result || new Rect();
          var pt = this.globalToLocal(ax, ay);
          result.x = pt.x;
          result.y = pt.y;
          pt = this.globalToLocal(ax + aw, ay + ah, pt);
          result.xMax = pt.x;
          result.yMax = pt.y;
          return result;
        };

        _proto19.handleControllerChanged = function handleControllerChanged(c) {
          this._handlingController = true;

          for (var i = 0; i < 10; i++) {
            var gear = this._gears[i];
            if (gear && gear.controller == c) gear.apply();
          }

          this._handlingController = false;
          this.checkGearDisplay();
        };

        _proto19.handleAnchorChanged = function handleAnchorChanged() {
          this.handlePositionChanged();
        };

        _proto19.handlePositionChanged = function handlePositionChanged() {
          var xv = this._x;
          var yv = -this._y;

          if (!this._pivotAsAnchor) {
            xv += this._uiTrans.anchorX * this._width;
            yv -= (1 - this._uiTrans.anchorY) * this._height;
          }

          if (this._pixelSnapping) {
            xv = Math.round(xv);
            yv = Math.round(yv);
          }

          this._node.setPosition(xv, yv);
        };

        _proto19.handleSizeChanged = function handleSizeChanged() {
          this._uiTrans.setContentSize(this._width, this._height);
        };

        _proto19.handleGrayedChanged = function handleGrayedChanged() {//nothing is base
        };

        _proto19.handleVisibleChanged = function handleVisibleChanged() {
          this._node.active = this._finalVisible;
          if (this instanceof GGroup) this.handleVisibleChanged();
          if (this._parent) this._parent.setBoundsChangedFlag();
        };

        _proto19.hitTest = function hitTest(globalPt, forTouch) {
          if (forTouch == null) forTouch = true;
          if (forTouch && (this._touchDisabled || !this._touchable || !this._node.activeInHierarchy)) return null;
          if (!this._hitTestPt) this._hitTestPt = new Vec2();
          this.globalToLocal(globalPt.x, globalPt.y, this._hitTestPt);

          if (this._pivotAsAnchor) {
            this._hitTestPt.x += this._uiTrans.anchorX * this._width;
            this._hitTestPt.y += (1 - this._uiTrans.anchorY) * this._height;
          }

          return this._hitTest(this._hitTestPt, globalPt);
        };

        _proto19._hitTest = function _hitTest(pt, globalPt) {
          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };

        _proto19.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Text:
              return this.text;

            case ObjectPropID.Icon:
              return this.icon;

            case ObjectPropID.Color:
              return null;

            case ObjectPropID.OutlineColor:
              return null;

            case ObjectPropID.Playing:
              return false;

            case ObjectPropID.Frame:
              return 0;

            case ObjectPropID.DeltaTime:
              return 0;

            case ObjectPropID.TimeScale:
              return 1;

            case ObjectPropID.FontSize:
              return 0;

            case ObjectPropID.Selected:
              return false;

            default:
              return undefined;
          }
        };

        _proto19.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Text:
              this.text = value;
              break;

            case ObjectPropID.Icon:
              this.icon = value;
              break;
          }
        };

        _proto19.constructFromResource = function constructFromResource() {};

        _proto19.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          buffer.seek(beginPos, 0);
          buffer.skip(5);
          var f1;
          var f2;
          this._id = buffer.readS();
          this.name = buffer.readS();
          f1 = buffer.readInt();
          f2 = buffer.readInt();
          this.setPosition(f1, f2);

          if (buffer.readBool()) {
            this.initWidth = buffer.readInt();
            this.initHeight = buffer.readInt();
            this.setSize(this.initWidth, this.initHeight, true);
          }

          if (buffer.readBool()) {
            this.minWidth = buffer.readInt();
            this.maxWidth = buffer.readInt();
            this.minHeight = buffer.readInt();
            this.maxHeight = buffer.readInt();
          }

          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setScale(f1, f2);
          }

          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat(); //this.setSkew(f1, f2);
          }

          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setPivot(f1, f2, buffer.readBool());
          }

          f1 = buffer.readFloat();
          if (f1 != 1) this.alpha = f1;
          f1 = buffer.readFloat();
          if (f1 != 0) this.rotation = f1;
          if (!buffer.readBool()) this.visible = false;
          if (!buffer.readBool()) this.touchable = false;
          if (buffer.readBool()) this.grayed = true;
          this.blendMode = buffer.readByte();
          buffer.readByte();
          var str = buffer.readS();
          if (str != null) this.data = str;
        };

        _proto19.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          buffer.seek(beginPos, 1);
          var str = buffer.readS();
          if (str != null) this.tooltips = str;
          var groupId = buffer.readShort();
          if (groupId >= 0) this.group = this.parent.getChildAt(groupId);
          buffer.seek(beginPos, 2);
          var cnt = buffer.readShort();

          for (var i = 0; i < cnt; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            var gear = this.getGear(buffer.readByte());
            gear.setup(buffer);
            buffer.position = nextPos;
          }
        } //toolTips support
        ;

        _proto19.onRollOver = function onRollOver() {
          Decls$1.GRoot.inst.showTooltips(this.tooltips);
        };

        _proto19.onRollOut = function onRollOut() {
          Decls$1.GRoot.inst.hideTooltips();
        }; //drag support
        //-------------------------------------------------------------------


        _proto19.initDrag = function initDrag() {
          if (this._draggable) {
            this.on(Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
            this.on(Event.TOUCH_MOVE, this.onTouchMove_0, this);
            this.on(Event.TOUCH_END, this.onTouchEnd_0, this);
          } else {
            this.off(Event.TOUCH_BEGIN, this.onTouchBegin_0, this);
            this.off(Event.TOUCH_MOVE, this.onTouchMove_0, this);
            this.off(Event.TOUCH_END, this.onTouchEnd_0, this);
          }
        };

        _proto19.dragBegin = function dragBegin(touchId) {
          if (GObject.draggingObject) {
            var tmp = GObject.draggingObject;
            tmp.stopDrag();
            GObject.draggingObject = null;

            tmp._node.emit(Event.DRAG_END);
          }

          if (touchId == undefined) touchId = Decls$1.GRoot.inst.inputProcessor.getAllTouches()[0];
          sGlobalDragStart.set(Decls$1.GRoot.inst.getTouchPosition(touchId));
          this.localToGlobalRect(0, 0, this._width, this._height, sGlobalRect);
          GObject.draggingObject = this;
          this._dragTesting = false;
          Decls$1.GRoot.inst.inputProcessor.addTouchMonitor(touchId, this);
          this.on(Event.TOUCH_MOVE, this.onTouchMove_0, this);
          this.on(Event.TOUCH_END, this.onTouchEnd_0, this);
        };

        _proto19.dragEnd = function dragEnd() {
          if (GObject.draggingObject == this) {
            this._dragTesting = false;
            GObject.draggingObject = null;
          }

          s_dragQuery = false;
        };

        _proto19.onTouchBegin_0 = function onTouchBegin_0(evt) {
          if (this._dragStartPos == null) this._dragStartPos = new Vec2();

          this._dragStartPos.set(evt.pos);

          this._dragTesting = true;
          evt.captureTouch();
        };

        _proto19.onTouchMove_0 = function onTouchMove_0(evt) {
          if (GObject.draggingObject != this && this._draggable && this._dragTesting) {
            var sensitivity = UIConfig.touchDragSensitivity;
            if (this._dragStartPos && Math.abs(this._dragStartPos.x - evt.pos.x) < sensitivity && Math.abs(this._dragStartPos.y - evt.pos.y) < sensitivity) return;
            this._dragTesting = false;
            s_dragQuery = true;

            this._node.emit(Event.DRAG_START, evt);

            if (s_dragQuery) this.dragBegin(evt.touchId);
          }

          if (GObject.draggingObject == this) {
            var xx = evt.pos.x - sGlobalDragStart.x + sGlobalRect.x;
            var yy = evt.pos.y - sGlobalDragStart.y + sGlobalRect.y;

            if (this._dragBounds) {
              var rect = Decls$1.GRoot.inst.localToGlobalRect(this._dragBounds.x, this._dragBounds.y, this._dragBounds.width, this._dragBounds.height, s_rect$1);
              if (xx < rect.x) xx = rect.x;else if (xx + sGlobalRect.width > rect.xMax) {
                xx = rect.xMax - sGlobalRect.width;
                if (xx < rect.x) xx = rect.x;
              }
              if (yy < rect.y) yy = rect.y;else if (yy + sGlobalRect.height > rect.yMax) {
                yy = rect.yMax - sGlobalRect.height;
                if (yy < rect.y) yy = rect.y;
              }
            }

            s_dragging = true;
            var pt = this.parent.globalToLocal(xx, yy, s_vec2$4);
            this.setPosition(Math.round(pt.x), Math.round(pt.y));
            s_dragging = false;

            this._node.emit(Event.DRAG_MOVE, evt);
          }
        };

        _proto19.onTouchEnd_0 = function onTouchEnd_0(evt) {
          if (GObject.draggingObject == this) {
            GObject.draggingObject = null;

            this._node.emit(Event.DRAG_END, evt);
          }
        };

        _createClass(GObject, [{
          key: "id",
          get: function get() {
            return this._id;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(value) {
            this._name = value;
            this._node.name = value || "";
          }
        }, {
          key: "x",
          get: function get() {
            return this._x;
          },
          set: function set(value) {
            this.setPosition(value, this._y);
          }
        }, {
          key: "y",
          get: function get() {
            return this._y;
          },
          set: function set(value) {
            this.setPosition(this._x, value);
          }
        }, {
          key: "xMin",
          get: function get() {
            return this._pivotAsAnchor ? this._x - this._width * this._uiTrans.anchorX : this._x;
          },
          set: function set(value) {
            if (this._pivotAsAnchor) this.setPosition(value + this._width * this._uiTrans.anchorX, this._y);else this.setPosition(value, this._y);
          }
        }, {
          key: "yMin",
          get: function get() {
            return this._pivotAsAnchor ? this._y - this._height * (1 - this._uiTrans.anchorY) : this._y;
          },
          set: function set(value) {
            if (this._pivotAsAnchor) this.setPosition(this._x, value + this._height * (1 - this._uiTrans.anchorY));else this.setPosition(this._x, value);
          }
        }, {
          key: "pixelSnapping",
          get: function get() {
            return this._pixelSnapping;
          },
          set: function set(value) {
            if (this._pixelSnapping != value) {
              this._pixelSnapping = value;
              this.handlePositionChanged();
            }
          }
        }, {
          key: "width",
          get: function get() {
            this.ensureSizeCorrect();
            if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
            return this._width;
          },
          set: function set(value) {
            this.setSize(value, this._rawHeight);
          }
        }, {
          key: "height",
          get: function get() {
            this.ensureSizeCorrect();
            if (this._relations.sizeDirty) this._relations.ensureRelationsSizeCorrect();
            return this._height;
          },
          set: function set(value) {
            this.setSize(this._rawWidth, value);
          }
        }, {
          key: "actualWidth",
          get: function get() {
            return this.width * Math.abs(this._node.scale.x);
          }
        }, {
          key: "actualHeight",
          get: function get() {
            return this.height * Math.abs(this._node.scale.y);
          }
        }, {
          key: "scaleX",
          get: function get() {
            return this._node.scale.x;
          },
          set: function set(value) {
            this.setScale(value, this._node.scale.y);
          }
        }, {
          key: "scaleY",
          get: function get() {
            return this._node.scale.y;
          },
          set: function set(value) {
            this.setScale(this._node.scale.x, value);
          }
        }, {
          key: "skewX",
          get: function get() {
            return this._skewX;
          }
        }, {
          key: "pivotX",
          get: function get() {
            return this._uiTrans.anchorX;
          },
          set: function set(value) {
            this._uiTrans.anchorX = value;
          }
        }, {
          key: "pivotY",
          get: function get() {
            return 1 - this._uiTrans.anchorY;
          },
          set: function set(value) {
            this._uiTrans.anchorY = 1 - value;
          }
        }, {
          key: "pivotAsAnchor",
          get: function get() {
            return this._pivotAsAnchor;
          }
        }, {
          key: "touchable",
          get: function get() {
            return this._touchable;
          },
          set: function set(value) {
            if (this._touchable != value) {
              this._touchable = value;
              this.updateGear(3);
            }
          }
        }, {
          key: "grayed",
          get: function get() {
            return this._grayed;
          },
          set: function set(value) {
            if (this._grayed != value) {
              this._grayed = value;
              this.handleGrayedChanged();
              this.updateGear(3);
            }
          }
        }, {
          key: "enabled",
          get: function get() {
            return !this._grayed && this._touchable;
          },
          set: function set(value) {
            this.grayed = !value;
            this.touchable = value;
          }
        }, {
          key: "rotation",
          get: function get() {
            return -this._node.angle;
          },
          set: function set(value) {
            value = -value;

            if (this._node.angle != value) {
              this._node.angle = value;
              this.updateGear(3);
            }
          }
        }, {
          key: "alpha",
          get: function get() {
            return this._alpha;
          },
          set: function set(value) {
            if (this._alpha != value) {
              this._alpha = value;
              this._uiOpacity.opacity = this._alpha * 255;
              if (this instanceof GGroup) this.handleAlphaChanged();
              this.updateGear(3);
            }
          }
        }, {
          key: "visible",
          get: function get() {
            return this._visible;
          },
          set: function set(value) {
            if (this._visible != value) {
              this._visible = value;
              this.handleVisibleChanged();
              if (this._group && this._group.excludeInvisibles) this._group.setBoundsChangedFlag();
            }
          }
        }, {
          key: "_finalVisible",
          get: function get() {
            return this._visible && this._internalVisible && (!this._group || this._group._finalVisible);
          }
        }, {
          key: "internalVisible3",
          get: function get() {
            return this._visible && this._internalVisible;
          }
        }, {
          key: "sortingOrder",
          get: function get() {
            return this._sortingOrder;
          },
          set: function set(value) {
            if (value < 0) value = 0;

            if (this._sortingOrder != value) {
              var old = this._sortingOrder;
              this._sortingOrder = value;
              if (this._parent) this._parent.childSortingOrderChanged(this, old, this._sortingOrder);
            }
          }
        }, {
          key: "tooltips",
          get: function get() {
            return this._tooltips;
          },
          set: function set(value) {
            if (this._tooltips) {
              this._node.off(Event.ROLL_OVER, this.onRollOver, this);

              this._node.off(Event.ROLL_OUT, this.onRollOut, this);
            }

            this._tooltips = value;

            if (this._tooltips) {
              this._node.on(Event.ROLL_OVER, this.onRollOver, this);

              this._node.on(Event.ROLL_OUT, this.onRollOut, this);
            }
          }
        }, {
          key: "blendMode",
          get: function get() {
            return this._blendMode;
          },
          set: function set(value) {
            if (this._blendMode != value) {
              this._blendMode = value;
              BlendModeUtils.apply(this._node, value);
            }
          }
        }, {
          key: "onStage",
          get: function get() {
            return this._node && this._node.activeInHierarchy;
          }
        }, {
          key: "resourceURL",
          get: function get() {
            if (this.packageItem) return "ui://" + this.packageItem.owner.id + this.packageItem.id;else return null;
          }
        }, {
          key: "group",
          get: function get() {
            return this._group;
          },
          set: function set(value) {
            if (this._group != value) {
              if (this._group) this._group.setBoundsChangedFlag();
              this._group = value;
              if (this._group) this._group.setBoundsChangedFlag();
            }
          }
        }, {
          key: "gearXY",
          get: function get() {
            return this.getGear(1);
          }
        }, {
          key: "gearSize",
          get: function get() {
            return this.getGear(2);
          }
        }, {
          key: "gearLook",
          get: function get() {
            return this.getGear(3);
          }
        }, {
          key: "relations",
          get: function get() {
            return this._relations;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }, {
          key: "asCom",
          get: function get() {
            return this;
          }
        }, {
          key: "text",
          get: function get() {
            return null;
          },
          set: function set(value) {}
        }, {
          key: "icon",
          get: function get() {
            return null;
          },
          set: function set(value) {}
        }, {
          key: "treeNode",
          get: function get() {
            return this._treeNode;
          }
        }, {
          key: "isDisposed",
          get: function get() {
            return this._node == null;
          }
        }, {
          key: "draggable",
          get: function get() {
            return this._draggable;
          },
          set: function set(value) {
            if (this._draggable != value) {
              this._draggable = value;
              this.initDrag();
            }
          }
        }, {
          key: "dragBounds",
          get: function get() {
            return this._dragBounds;
          },
          set: function set(value) {
            this._dragBounds = value;
          }
        }, {
          key: "dragging",
          get: function get() {
            return GObject.draggingObject == this;
          }
        }]);

        return GObject;
      }()); //-------------------------------------------------------------------

      /*
      class GObjectPartner extends Component {
          callLater(callback, delay) {
              if (!director.getScheduler().isScheduled(callback, this))
                  this.scheduleOnce(callback, delay);
          }
          onClickLink(evt, text) {
              this.node.emit(Event.LINK, text, evt);
          }
          onEnable() {
              this.node["$gobj"].onEnable();
              if (this._emitDisplayEvents)
                  this.node.emit(Event.DISPLAY);
          }
          onDisable() {
              this.node["$gobj"].onDisable();
              if (this._emitDisplayEvents)
                  this.node.emit(Event.UNDISPLAY);
          }
          update(dt) {
              this.node["$gobj"].onUpdate(dt);
          }
          onDestroy() {
              this.node["$gobj"].onDestroy();
          }
      }
      */
      //-------------------------------------------------------------------

      var GearClasses = [GearDisplay, GearXY, GearSize, GearLook, GearColor, GearAnimation, GearText, GearIcon, GearDisplay2, GearFontSize];

      function createGear(owner, index) {
        var ret = new GearClasses[index]();
        ret._owner = owner;
        return ret;
      }

      var s_vec2$4 = new Vec2();
      var s_vec3$1 = new Vec3();
      var s_rect$1 = new Rect();
      var sGlobalDragStart = new Vec2();
      var sGlobalRect = new Rect();
      var s_dragging;
      var s_dragQuery;
      var Decls$1 = {};
      var constructingDepth = {
        n: 0
      };
      var GGroup = exports('GGroup', /*#__PURE__*/function (_GObject) {
        _inheritsLoose(GGroup, _GObject);

        function GGroup() {
          var _this5;

          _this5 = _GObject.call(this) || this;
          _this5._layout = 0;
          _this5._lineGap = 0;
          _this5._columnGap = 0;
          _this5._mainGridIndex = -1;
          _this5._mainGridMinSize = 50;
          _this5._mainChildIndex = -1;
          _this5._totalSize = 0;
          _this5._numChildren = 0;
          _this5._updating = 0;
          _this5._node.name = "GGroup";
          _this5._touchDisabled = true;
          return _this5;
        }

        var _proto20 = GGroup.prototype;

        _proto20.dispose = function dispose() {
          this._boundsChanged = false;

          _GObject.prototype.dispose.call(this);
        };

        _proto20.setBoundsChangedFlag = function setBoundsChangedFlag(positionChangedOnly) {
          if (positionChangedOnly === void 0) {
            positionChangedOnly = false;
          }

          if (this._updating == 0 && this._parent) {
            if (!positionChangedOnly) this._percentReady = false;

            if (!this._boundsChanged) {
              this._boundsChanged = true;
              if (this._layout != GroupLayoutType.None) this._partner.callLater(this._ensureBoundsCorrect);
            }
          }
        };

        _proto20._ensureBoundsCorrect = function _ensureBoundsCorrect() {
          var _t = GObject.cast(this.node);

          _t.ensureBoundsCorrect();
        };

        _proto20.ensureSizeCorrect = function ensureSizeCorrect() {
          if (this._parent == null || !this._boundsChanged || this._layout == 0) return;
          this._boundsChanged = false;
          if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
            this.handleLayout();
            this.updateBounds();
          }
        };

        _proto20.ensureBoundsCorrect = function ensureBoundsCorrect() {
          if (this._parent == null || !this._boundsChanged) return;
          this._boundsChanged = false;
          if (this._layout == 0) this.updateBounds();else {
            if (this._autoSizeDisabled) this.resizeChildren(0, 0);else {
              this.handleLayout();
              this.updateBounds();
            }
          }
        };

        _proto20.updateBounds = function updateBounds() {
          this._partner.unschedule(this._ensureBoundsCorrect);

          var cnt = this._parent.numChildren;
          var i;
          var child;
          var ax = Number.POSITIVE_INFINITY,
              ay = Number.POSITIVE_INFINITY;
          var ar = Number.NEGATIVE_INFINITY,
              ab = Number.NEGATIVE_INFINITY;
          var tmp;
          var empty = true;

          for (i = 0; i < cnt; i++) {
            child = this._parent.getChildAt(i);
            if (child.group != this || this._excludeInvisibles && !child.internalVisible3) continue;
            tmp = child.xMin;
            if (tmp < ax) ax = tmp;
            tmp = child.yMin;
            if (tmp < ay) ay = tmp;
            tmp = child.xMin + child.width;
            if (tmp > ar) ar = tmp;
            tmp = child.yMin + child.height;
            if (tmp > ab) ab = tmp;
            empty = false;
          }

          var w = 0,
              h = 0;

          if (!empty) {
            this._updating |= 1;
            this.setPosition(ax, ay);
            this._updating &= 2;
            w = ar - ax;
            h = ab - ay;
          }

          if ((this._updating & 2) == 0) {
            this._updating |= 2;
            this.setSize(w, h);
            this._updating &= 1;
          } else {
            this._updating &= 1;
            this.resizeChildren(this._width - w, this._height - h);
          }
        };

        _proto20.handleLayout = function handleLayout() {
          this._updating |= 1;
          var child;
          var i;
          var cnt;

          if (this._layout == GroupLayoutType.Horizontal) {
            var curX = this.x;
            cnt = this._parent.numChildren;

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) continue;
              child.xMin = curX;
              if (child.width != 0) curX += child.width + this._columnGap;
            }
          } else if (this._layout == GroupLayoutType.Vertical) {
            var curY = this.y;
            cnt = this._parent.numChildren;

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (this._excludeInvisibles && !child.internalVisible3) continue;
              child.yMin = curY;
              if (child.height != 0) curY += child.height + this._lineGap;
            }
          }

          this._updating &= 2;
        };

        _proto20.moveChildren = function moveChildren(dx, dy) {
          if ((this._updating & 1) != 0 || this._parent == null) return;
          this._updating |= 1;
          var cnt = this._parent.numChildren;
          var i;
          var child;

          for (i = 0; i < cnt; i++) {
            child = this._parent.getChildAt(i);

            if (child.group == this) {
              child.setPosition(child.x + dx, child.y + dy);
            }
          }

          this._updating &= 2;
        };

        _proto20.resizeChildren = function resizeChildren(dw, dh) {
          if (this._layout == GroupLayoutType.None || (this._updating & 2) != 0 || this._parent == null) return;
          this._updating |= 2;

          if (this._boundsChanged) {
            this._boundsChanged = false;

            if (!this._autoSizeDisabled) {
              this.updateBounds();
              return;
            }
          }

          var cnt = this._parent.numChildren;
          var i;
          var child;

          if (!this._percentReady) {
            this._percentReady = true;
            this._numChildren = 0;
            this._totalSize = 0;
            this._mainChildIndex = -1;
            var j = 0;

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;

              if (!this._excludeInvisibles || child.internalVisible3) {
                if (j == this._mainGridIndex) this._mainChildIndex = i;
                this._numChildren++;
                if (this._layout == 1) this._totalSize += child.width;else this._totalSize += child.height;
              }

              j++;
            }

            if (this._mainChildIndex != -1) {
              if (this._layout == 1) {
                child = this._parent.getChildAt(this._mainChildIndex);
                this._totalSize += this._mainGridMinSize - child.width;
                child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
              } else {
                child = this._parent.getChildAt(this._mainChildIndex);
                this._totalSize += this._mainGridMinSize - child.height;
                child._sizePercentInGroup = this._mainGridMinSize / this._totalSize;
              }
            }

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;
              if (i == this._mainChildIndex) continue;
              if (this._totalSize > 0) child._sizePercentInGroup = (this._layout == 1 ? child.width : child.height) / this._totalSize;else child._sizePercentInGroup = 0;
            }
          }

          var remainSize = 0;
          var remainPercent = 1;
          var priorHandled = false;

          if (this._layout == 1) {
            remainSize = this.width - (this._numChildren - 1) * this._columnGap;

            if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
              child = this._parent.getChildAt(this._mainChildIndex);
              child.setSize(remainSize - (this._totalSize - this._mainGridMinSize), child._rawHeight + dh, true);
              remainSize -= child.width;
              remainPercent -= child._sizePercentInGroup;
              priorHandled = true;
            }

            var curX = this.x;

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;

              if (this._excludeInvisibles && !child.internalVisible3) {
                child.setSize(child._rawWidth, child._rawHeight + dh, true);
                continue;
              }

              if (!priorHandled || i != this._mainChildIndex) {
                child.setSize(Math.round(child._sizePercentInGroup / remainPercent * remainSize), child._rawHeight + dh, true);
                remainPercent -= child._sizePercentInGroup;
                remainSize -= child.width;
              }

              child.xMin = curX;
              if (child.width != 0) curX += child.width + this._columnGap;
            }
          } else {
            remainSize = this.height - (this._numChildren - 1) * this._lineGap;

            if (this._mainChildIndex != -1 && remainSize >= this._totalSize) {
              child = this._parent.getChildAt(this._mainChildIndex);
              child.setSize(child._rawWidth + dw, remainSize - (this._totalSize - this._mainGridMinSize), true);
              remainSize -= child.height;
              remainPercent -= child._sizePercentInGroup;
              priorHandled = true;
            }

            var curY = this.y;

            for (i = 0; i < cnt; i++) {
              child = this._parent.getChildAt(i);
              if (child.group != this) continue;

              if (this._excludeInvisibles && !child.internalVisible3) {
                child.setSize(child._rawWidth + dw, child._rawHeight, true);
                continue;
              }

              if (!priorHandled || i != this._mainChildIndex) {
                child.setSize(child._rawWidth + dw, Math.round(child._sizePercentInGroup / remainPercent * remainSize), true);
                remainPercent -= child._sizePercentInGroup;
                remainSize -= child.height;
              }

              child.yMin = curY;
              if (child.height != 0) curY += child.height + this._lineGap;
            }
          }

          this._updating &= 1;
        };

        _proto20.handleAlphaChanged = function handleAlphaChanged() {
          if (this._underConstruct) return;
          var cnt = this._parent.numChildren;

          for (var i = 0; i < cnt; i++) {
            var child = this._parent.getChildAt(i);

            if (child.group == this) child.alpha = this.alpha;
          }
        };

        _proto20.handleVisibleChanged = function handleVisibleChanged() {
          if (!this._parent) return;
          var cnt = this._parent.numChildren;

          for (var i = 0; i < cnt; i++) {
            var child = this._parent.getChildAt(i);

            if (child.group == this) child.handleVisibleChanged();
          }
        };

        _proto20.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this._layout = buffer.readByte();
          this._lineGap = buffer.readInt();
          this._columnGap = buffer.readInt();

          if (buffer.version >= 2) {
            this._excludeInvisibles = buffer.readBool();
            this._autoSizeDisabled = buffer.readBool();
            this._mainGridIndex = buffer.readShort();
          }
        };

        _proto20.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!this.visible) this.handleVisibleChanged();
        };

        _createClass(GGroup, [{
          key: "layout",
          get: function get() {
            return this._layout;
          },
          set: function set(value) {
            if (this._layout != value) {
              this._layout = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "lineGap",
          get: function get() {
            return this._lineGap;
          },
          set: function set(value) {
            if (this._lineGap != value) {
              this._lineGap = value;
              this.setBoundsChangedFlag(true);
            }
          }
        }, {
          key: "columnGap",
          get: function get() {
            return this._columnGap;
          },
          set: function set(value) {
            if (this._columnGap != value) {
              this._columnGap = value;
              this.setBoundsChangedFlag(true);
            }
          }
        }, {
          key: "excludeInvisibles",
          get: function get() {
            return this._excludeInvisibles;
          },
          set: function set(value) {
            if (this._excludeInvisibles != value) {
              this._excludeInvisibles = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "autoSizeDisabled",
          get: function get() {
            return this._autoSizeDisabled;
          },
          set: function set(value) {
            this._autoSizeDisabled = value;
          }
        }, {
          key: "mainGridMinSize",
          get: function get() {
            return this._mainGridMinSize;
          },
          set: function set(value) {
            if (this._mainGridMinSize != value) {
              this._mainGridMinSize = value;
              this.setBoundsChangedFlag();
            }
          }
        }, {
          key: "mainGridIndex",
          get: function get() {
            return this._mainGridIndex;
          },
          set: function set(value) {
            if (this._mainGridIndex != value) {
              this._mainGridIndex = value;
              this.setBoundsChangedFlag();
            }
          }
        }]);

        return GGroup;
      }(GObject));
      var GGraph = exports('GGraph', /*#__PURE__*/function (_GObject2) {
        _inheritsLoose(GGraph, _GObject2);

        function GGraph() {
          var _this6;

          _this6 = _GObject2.call(this) || this;
          _this6._content = void 0;
          _this6._type = 0;
          _this6._lineSize = 0;
          _this6._node.name = "GGraph";
          _this6._lineSize = 1;
          _this6._lineColor = new Color();
          _this6._fillColor = new Color(255, 255, 255, 255);
          _this6._content = _this6._node.addComponent(FGraphics);
          return _this6;
        }

        var _proto21 = GGraph.prototype;

        _proto21.drawRect = function drawRect(lineSize, lineColor, fillColor, corner) {
          this._type = 1;
          this._lineSize = lineSize;

          this._lineColor.set(lineColor);

          this._fillColor.set(fillColor);

          this._cornerRadius = corner;
          this.updateGraph();
        };

        _proto21.drawEllipse = function drawEllipse(lineSize, lineColor, fillColor) {
          this._type = 2;
          this._lineSize = lineSize;

          this._lineColor.set(lineColor);

          this._fillColor.set(fillColor);

          this.updateGraph();
        };

        _proto21.drawRegularPolygon = function drawRegularPolygon(lineSize, lineColor, fillColor, sides, startAngle, distances) {
          this._type = 4;
          this._lineSize = lineSize;

          this._lineColor.set(lineColor);

          this._fillColor.set(fillColor);

          this._sides = sides;
          this._startAngle = startAngle || 0;
          this._distances = distances;
          this.updateGraph();
        };

        _proto21.drawPolygon = function drawPolygon(lineSize, lineColor, fillColor, points) {
          this._type = 3;
          this._lineSize = lineSize;

          this._lineColor.set(lineColor);

          this._fillColor.set(fillColor);

          this._polygonPoints = points;
          this.updateGraph();
        };

        _proto21.clearGraphics = function clearGraphics() {
          this._type = 0;

          if (this._hasContent) {
            this._content.clear();

            this._hasContent = false;
          }
        };

        _proto21.updateGraph = function updateGraph() {
          var ctx = this._content;

          if (this._hasContent) {
            this._hasContent = false;
            ctx.clear();
          }

          var w = this._width;
          var h = this._height;
          if (w == 0 || h == 0) return;
          var px = -this.pivotX * this._width;
          var py = this.pivotY * this._height;
          var ls = this._lineSize / 2;
          ctx.lineWidth = this._lineSize;
          ctx.strokeColor = this._lineColor;
          ctx.fillColor = this._fillColor;

          if (this._type == 1) {
            if (this._cornerRadius) {
              ctx.roundRect(px + ls, -h + py + ls, w - this._lineSize, h - this._lineSize, this._cornerRadius[0]);
            } else ctx.rect(px + ls, -h + py + ls, w - this._lineSize, h - this._lineSize);
          } else if (this._type == 2) {
            ctx.ellipse(w / 2 + px, -h / 2 + py, w / 2 - ls, h / 2 - ls);
          } else if (this._type == 3) {
            this.drawPath(ctx, this._polygonPoints, px, py);
          } else if (this._type == 4) {
            if (!this._polygonPoints) this._polygonPoints = [];
            var radius = Math.min(w, h) / 2 - ls;
            this._polygonPoints.length = 0;
            var angle = misc.degreesToRadians(this._startAngle);
            var deltaAngle = 2 * Math.PI / this._sides;
            var dist;

            for (var i = 0; i < this._sides; i++) {
              if (this._distances) {
                dist = this._distances[i];
                if (isNaN(dist)) dist = 1;
              } else dist = 1;

              var xv = radius + radius * dist * Math.cos(angle);
              var yv = radius + radius * dist * Math.sin(angle);

              this._polygonPoints.push(xv, yv);

              angle += deltaAngle;
            }

            this.drawPath(ctx, this._polygonPoints, px, py);
          }

          if (ls != 0) ctx.stroke();
          if (this._fillColor.a != 0) ctx.fill();
          this._hasContent = true;
        };

        _proto21.drawPath = function drawPath(ctx, points, px, py) {
          var cnt = points.length;
          ctx.moveTo(points[0] + px, -points[1] + py);

          for (var i = 2; i < cnt; i += 2) ctx.lineTo(points[i] + px, -points[i + 1] + py);

          ctx.lineTo(points[0] + px, -points[1] + py);
        };

        _proto21.handleSizeChanged = function handleSizeChanged() {
          _GObject2.prototype.handleSizeChanged.call(this);

          if (this._type != 0) this.updateGraph();
        };

        _proto21.handleAnchorChanged = function handleAnchorChanged() {
          _GObject2.prototype.handleAnchorChanged.call(this);

          if (this._type != 0) this.updateGraph();
        };

        _proto21.getProp = function getProp(index) {
          if (index == ObjectPropID.Color) return this.color;else return _GObject2.prototype.getProp.call(this, index);
        };

        _proto21.setProp = function setProp(index, value) {
          if (index == ObjectPropID.Color) this.color = value;else _GObject2.prototype.setProp.call(this, index, value);
        };

        _proto21._hitTest = function _hitTest(pt) {
          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) {
            if (this._type == 3) {
              var points = this._polygonPoints;
              var len = points.length / 2;
              var i;
              var j = len - 1;
              var oddNodes = false;
              this._width;
              this._height;

              for (i = 0; i < len; ++i) {
                var ix = points[i * 2];
                var iy = points[i * 2 + 1];
                var jx = points[j * 2];
                var jy = points[j * 2 + 1];

                if ((iy < pt.y && jy >= pt.y || jy < pt.y && iy >= pt.y) && (ix <= pt.x || jx <= pt.x)) {
                  if (ix + (pt.y - iy) / (jy - iy) * (jx - ix) < pt.x) oddNodes = !oddNodes;
                }

                j = i;
              }

              return oddNodes ? this : null;
            } else return this;
          } else return null;
        };

        _proto21.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject2.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this._type = buffer.readByte();

          if (this._type != 0) {
            var i;
            var cnt;
            this._lineSize = buffer.readInt();

            this._lineColor.set(buffer.readColor(true));

            this._fillColor.set(buffer.readColor(true));

            if (buffer.readBool()) {
              this._cornerRadius = new Array(4);

              for (i = 0; i < 4; i++) this._cornerRadius[i] = buffer.readFloat();
            }

            if (this._type == 3) {
              cnt = buffer.readShort();
              this._polygonPoints = [];
              this._polygonPoints.length = cnt;

              for (i = 0; i < cnt; i++) this._polygonPoints[i] = buffer.readFloat();
            } else if (this._type == 4) {
              this._sides = buffer.readShort();
              this._startAngle = buffer.readFloat();
              cnt = buffer.readShort();

              if (cnt > 0) {
                this._distances = [];

                for (i = 0; i < cnt; i++) this._distances[i] = buffer.readFloat();
              }
            }

            this.updateGraph();
          }
        };

        _createClass(GGraph, [{
          key: "distances",
          get: function get() {
            return this._distances;
          },
          set: function set(value) {
            this._distances = value;
            if (this._type == 3) this.updateGraph();
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "color",
          get: function get() {
            return this._fillColor;
          },
          set: function set(value) {
            this._fillColor.set(value);

            if (this._type != 0) this.updateGraph();
          }
        }]);

        return GGraph;
      }(GObject));
      /*
      class Image1 extends Sprite {
      constructor() {
      super();
      this._flip = FlipType.None;
      this._fillMethod = FillMethod.None;
      this._fillOrigin = FillOrigin.Left;
      this._fillAmount = 0;
      }
      get flip() {
      return this._flip;
      }
      set flip(value) {
      if (this._flip != value) {
      this._flip = value;
      let sx = 1, sy = 1;
      if (this._flip == FlipType.Horizontal || this._flip == FlipType.Both)
      sx = -1;
      if (this._flip == FlipType.Vertical || this._flip == FlipType.Both)
      sy = -1;
      if (sx != 1 || sy != 1) {
      let uiTrans = this.node.getComponent(UITransform);
      uiTrans.setAnchorPoint(0.5, 0.5);
      }
      this.node.setScale(sx, sy);
      }
      }
      get fillMethod() {
      return this._fillMethod;
      }
      set fillMethod(value) {
      if (this._fillMethod != value) {
      this._fillMethod = value;
      if (this._fillMethod != 0) {
      this.type = Sprite.Type.FILLED;
      if (this._fillMethod <= 3)
      this.fillType = this._fillMethod - 1;
      else
      this.fillType = Sprite.FillType.RADIAL;
      this.fillCenter = new Vec2(0.5, 0.5);
      this.setupFill();
      }
      else {
      this.type = Sprite.Type.SIMPLE;
      }
      }
      }
      get fillOrigin() {
      return this._fillOrigin;
      }
      set fillOrigin(value) {
      if (this._fillOrigin != value) {
      this._fillOrigin = value;
      if (this._fillMethod != 0)
      this.setupFill();
      }
      }
      get fillClockwise() {
      return this._fillClockwise;
      }
      set fillClockwise(value) {
      if (this._fillClockwise != value) {
      this._fillClockwise = value;
      if (this._fillMethod != 0)
      this.setupFill();
      }
      }
      get fillAmount() {
      return this._fillAmount;
      }
      set fillAmount(value) {
      if (this._fillAmount != value) {
      this._fillAmount = value;
      if (this._fillMethod != 0) {
      if (this._fillClockwise)
      this.fillRange = -this._fillAmount;
      else
      this.fillRange = this._fillAmount;
      }
      }
      }
      setupFill() {
      if (this._fillMethod == FillMethod.Horizontal) {
      this._fillClockwise = this._fillOrigin == FillOrigin.Right || this._fillOrigin == FillOrigin.Bottom;
      this.fillStart = this._fillClockwise ? 1 : 0;
      }
      else if (this._fillMethod == FillMethod.Vertical) {
      this._fillClockwise = this._fillOrigin == FillOrigin.Left || this._fillOrigin == FillOrigin.Top;
      this.fillStart = this._fillClockwise ? 1 : 0;
      }
      else {
      switch (this._fillOrigin) {
      case FillOrigin.Right:
      this.fillOrigin = 0;
      break;
      case FillOrigin.Top:
      this.fillStart = 0.25;
      break;
      case FillOrigin.Left:
      this.fillStart = 0.5;
      break;
      case FillOrigin.Bottom:
      this.fillStart = 0.75;
      break;
      }
      }
      }
      };
      */

      var GImage = exports('GImage', /*#__PURE__*/function (_GObject3) {
        _inheritsLoose(GImage, _GObject3);

        function GImage() {
          var _this7;

          _this7 = _GObject3.call(this) || this;
          _this7._content = void 0;
          _this7._node.name = "GImage";
          _this7._touchDisabled = true; // this._node.addComponent(Sprite);

          _this7._content = _this7._node.addComponent(Image1);
          _this7._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this7._content.trim = false;
          return _this7;
        }

        var _proto22 = GImage.prototype;

        _proto22.constructFromResource = function constructFromResource() {
          var contentItem = this.packageItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          if (contentItem.scale9Grid) this._content.type = Sprite.Type.SLICED;else if (contentItem.scaleByTile) this._content.type = Sprite.Type.TILED;
          this._content.spriteFrame = contentItem.asset;
        };

        _proto22.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };

        _proto22.getProp = function getProp(index) {
          if (index == ObjectPropID.Color) return this.color;else return _GObject3.prototype.getProp.call(this, index);
        };

        _proto22.setProp = function setProp(index, value) {
          if (index == ObjectPropID.Color) this.color = value;else _GObject3.prototype.setProp.call(this, index, value);
        };

        _proto22.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject3.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          if (buffer.readBool()) this.color = buffer.readColor();
          this._content.flip = buffer.readByte();
          this._content.fillMethod = buffer.readByte();

          if (this._content.fillMethod != 0) {
            this._content.fillOrigin = buffer.readByte();
            this._content.fillClockwise = buffer.readBool();
            this._content.fillAmount = buffer.readFloat();
          }
        };

        _createClass(GImage, [{
          key: "color",
          get: function get() {
            return this._content.color;
          },
          set: function set(value) {
            this._content.color = value;
            this.updateGear(4);
          }
        }, {
          key: "flip",
          get: function get() {
            return this._content.flip;
          },
          set: function set(value) {
            this._content.flip = value;
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._content.fillMethod;
          },
          set: function set(value) {
            this._content.fillMethod = value;
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._content.fillOrigin;
          },
          set: function set(value) {
            this._content.fillOrigin = value;
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._content.fillClockwise;
          },
          set: function set(value) {
            this._content.fillClockwise = value;
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._content.fillAmount;
          },
          set: function set(value) {
            this._content.fillAmount = value;
          }
        }]);

        return GImage;
      }(GObject));
      /*
      class MovieClip extends Image1 {
      constructor() {
      super();
      this.interval = 0;
      this.swing = false;
      this.repeatDelay = 0;
      this.timeScale = 1;
      this._playing = true;
      this._frameCount = 0;
      this._frame = 0;
      this._start = 0;
      this._end = 0;
      this._times = 0;
      this._endAt = 0;
      this._status = 0; //0-none, 1-next loop, 2-ending, 3-ended
      this._smoothing = true;
      this._frameElapsed = 0; //当前帧延迟
      this._reversed = false;
      this._repeatedCount = 0;
      }
      get frames() {
      return this._frames;
      }
      set frames(value) {
      this._frames = value;
      if (this._frames) {
      this._frameCount = this._frames.length;
      if (this._end == -1 || this._end > this._frameCount - 1)
      this._end = this._frameCount - 1;
      if (this._endAt == -1 || this._endAt > this._frameCount - 1)
      this._endAt = this._frameCount - 1;
      if (this._frame < 0 || this._frame > this._frameCount - 1)
      this._frame = this._frameCount - 1;
      this.type = Sprite.Type.SIMPLE;
      this.drawFrame();
      this._frameElapsed = 0;
      this._repeatedCount = 0;
      this._reversed = false;
      }
      else {
      this._frameCount = 0;
      }
      }
      get frameCount() {
      return this._frameCount;
      }
      get frame() {
      return this._frame;
      }
      set frame(value) {
      if (this._frame != value) {
      if (this._frames && value >= this._frameCount)
      value = this._frameCount - 1;
      this._frame = value;
      this._frameElapsed = 0;
      this.drawFrame();
      }
      }
      get playing() {
      return this._playing;
      }
      set playing(value) {
      if (this._playing != value) {
      this._playing = value;
      }
      }
      get smoothing() {
      return this._smoothing;
      }
      set smoothing(value) {
      this._smoothing = value;
      }
      rewind() {
      this._frame = 0;
      this._frameElapsed = 0;
      this._reversed = false;
      this._repeatedCount = 0;
      this.drawFrame();
      }
      syncStatus(anotherMc) {
      this._frame = anotherMc._frame;
      this._frameElapsed = anotherMc._frameElapsed;
      this._reversed = anotherMc._reversed;
      this._repeatedCount = anotherMc._repeatedCount;
      this.drawFrame();
      }
      advance(timeInSeconds) {
      var beginFrame = this._frame;
      var beginReversed = this._reversed;
      var backupTime = timeInSeconds;
      while (true) {
      var tt = this.interval + this._frames[this._frame].addDelay;
      if (this._frame == 0 && this._repeatedCount > 0)
      tt += this.repeatDelay;
      if (timeInSeconds < tt) {
      this._frameElapsed = 0;
      break;
      }
      timeInSeconds -= tt;
      if (this.swing) {
      if (this._reversed) {
      this._frame--;
      if (this._frame <= 0) {
      this._frame = 0;
      this._repeatedCount++;
      this._reversed = !this._reversed;
      }
      }
      else {
      this._frame++;
      if (this._frame > this._frameCount - 1) {
      this._frame = Math.max(0, this._frameCount - 2);
      this._repeatedCount++;
      this._reversed = !this._reversed;
      }
      }
      }
      else {
      this._frame++;
      if (this._frame > this._frameCount - 1) {
      this._frame = 0;
      this._repeatedCount++;
      }
      }
      if (this._frame == beginFrame && this._reversed == beginReversed) //走了一轮了
      {
      var roundTime = backupTime - timeInSeconds; //这就是一轮需要的时间
      timeInSeconds -= Math.floor(timeInSeconds / roundTime) * roundTime; //跳过
      }
      }
      this.drawFrame();
      }
      //从start帧开始，播放到end帧（-1表示结尾），重复times次（0表示无限循环），循环结束后，停止在endAt帧（-1表示参数end）
      setPlaySettings(start, end, times, endAt, endCallback) {
      if (start == undefined)
      start = 0;
      if (end == undefined)
      end = -1;
      if (times == undefined)
      times = 0;
      if (endAt == undefined)
      endAt = -1;
      this._start = start;
      this._end = end;
      if (this._end == -1 || this._end > this._frameCount - 1)
      this._end = this._frameCount - 1;
      this._times = times;
      this._endAt = endAt;
      if (this._endAt == -1)
      this._endAt = this._end;
      this._status = 0;
      this._callback = endCallback;
      this.frame = start;
      }
      update(dt) {
      if (!this._playing || this._frameCount == 0 || this._status == 3)
      return;
      if (this.timeScale != 1)
      dt *= this.timeScale;
      this._frameElapsed += dt;
      var tt = this.interval + this._frames[this._frame].addDelay;
      if (this._frame == 0 && this._repeatedCount > 0)
      tt += this.repeatDelay;
      if (this._frameElapsed < tt)
      return;
      this._frameElapsed -= tt;
      if (this._frameElapsed > this.interval)
      this._frameElapsed = this.interval;
      if (this.swing) {
      if (this._reversed) {
      this._frame--;
      if (this._frame <= 0) {
      this._frame = 0;
      this._repeatedCount++;
      this._reversed = !this._reversed;
      }
      }
      else {
      this._frame++;
      if (this._frame > this._frameCount - 1) {
      this._frame = Math.max(0, this._frameCount - 2);
      this._repeatedCount++;
      this._reversed = !this._reversed;
      }
      }
      }
      else {
      this._frame++;
      if (this._frame > this._frameCount - 1) {
      this._frame = 0;
      this._repeatedCount++;
      }
      }
      if (this._status == 1) //new loop
      {
      this._frame = this._start;
      this._frameElapsed = 0;
      this._status = 0;
      }
      else if (this._status == 2) //ending
      {
      this._frame = this._endAt;
      this._frameElapsed = 0;
      this._status = 3; //ended
      //play end
      if (this._callback != null) {
      let callback = this._callback;
      this._callback = null;
      callback();
      }
      }
      else {
      if (this._frame == this._end) {
      if (this._times > 0) {
      this._times--;
      if (this._times == 0)
      this._status = 2; //ending
      else
      this._status = 1; //new loop
      }
      else if (this._start != 0)
      this._status = 1; //new loop
      }
      }
      this.drawFrame();
      }
      drawFrame() {
      if (this._frameCount > 0 && this._frame < this._frames.length) {
      var frame = this._frames[this._frame];
      this.spriteFrame = frame.texture;
      }
      }
      }
      */

      var GMovieClip = exports('GMovieClip', /*#__PURE__*/function (_GObject4) {
        _inheritsLoose(GMovieClip, _GObject4);

        function GMovieClip() {
          var _this8;

          _this8 = _GObject4.call(this) || this;
          _this8._content = void 0;
          _this8._node.name = "GMovieClip";
          _this8._touchDisabled = true; // this._node.addComponent(Sprite);

          _this8._content = _this8._node.addComponent(MovieClip);
          _this8._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this8._content.trim = false;

          _this8._content.setPlaySettings();

          return _this8;
        }

        var _proto23 = GMovieClip.prototype;

        _proto23.rewind = function rewind() {
          this._content.rewind();
        };

        _proto23.syncStatus = function syncStatus(anotherMc) {
          this._content.syncStatus(anotherMc._content);
        };

        _proto23.advance = function advance(timeInSeconds) {
          this._content.advance(timeInSeconds);
        } //从start帧开始，播放到end帧（-1表示结尾），重复times次（0表示无限循环），循环结束后，停止在endAt帧（-1表示参数end）
        ;

        _proto23.setPlaySettings = function setPlaySettings(start, end, times, endAt, endCallback) {
          this._content.setPlaySettings(start, end, times, endAt, endCallback);
        };

        _proto23.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };

        _proto23.handleSizeChanged = function handleSizeChanged() {
          _GObject4.prototype.handleSizeChanged.call(this); //不知道原因，尺寸改变必须调用一次这个，否则大小不对


          this._content.sizeMode = Sprite.SizeMode.CUSTOM;
        };

        _proto23.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;

            case ObjectPropID.Playing:
              return this.playing;

            case ObjectPropID.Frame:
              return this.frame;

            case ObjectPropID.TimeScale:
              return this.timeScale;

            default:
              return _GObject4.prototype.getProp.call(this, index);
          }
        };

        _proto23.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;

            case ObjectPropID.Playing:
              this.playing = value;
              break;

            case ObjectPropID.Frame:
              this.frame = value;
              break;

            case ObjectPropID.TimeScale:
              this.timeScale = value;
              break;

            case ObjectPropID.DeltaTime:
              this.advance(value);
              break;

            default:
              _GObject4.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto23.constructFromResource = function constructFromResource() {
          var contentItem = this.packageItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          this._content.interval = contentItem.interval;
          this._content.swing = contentItem.swing;
          this._content.repeatDelay = contentItem.repeatDelay;
          this._content.frames = contentItem.frames;
          this._content.smoothing = contentItem.smoothing;
        };

        _proto23.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject4.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          if (buffer.readBool()) this.color = buffer.readColor();
          buffer.readByte(); //flip

          this._content.frame = buffer.readInt();
          this._content.playing = buffer.readBool();
        };

        _createClass(GMovieClip, [{
          key: "color",
          get: function get() {
            return this._content.color;
          },
          set: function set(value) {
            this._content.color = value;
            this.updateGear(4);
          }
        }, {
          key: "playing",
          get: function get() {
            return this._content.playing;
          },
          set: function set(value) {
            if (this._content.playing != value) {
              this._content.playing = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._content.frame;
          },
          set: function set(value) {
            if (this._content.frame != value) {
              this._content.frame = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "timeScale",
          get: function get() {
            return this._content.timeScale;
          },
          set: function set(value) {
            this._content.timeScale = value;
          }
        }]);

        return GMovieClip;
      }(GObject));

      var UIContentScaler = function UIContentScaler() {};

      UIContentScaler.scaleFactor = 1;
      UIContentScaler.scaleLevel = 0;
      UIContentScaler.rootSize = new Size();

      function updateScaler() {
        var size = screen.windowSize;
        size.width /= view.getScaleX();
        size.height /= view.getScaleY();
        UIContentScaler.rootSize.set(size);
        var ss = Math.max(view.getScaleX(), view.getScaleY());
        UIContentScaler.scaleFactor = ss;
        if (ss >= 3.5) UIContentScaler.scaleLevel = 3; //x4
        else if (ss >= 2.5) UIContentScaler.scaleLevel = 2; //x3
          else if (ss >= 1.5) UIContentScaler.scaleLevel = 1; //x2
            else UIContentScaler.scaleLevel = 0;
      }

      var PackageItem = exports('PackageItem', /*#__PURE__*/function () {
        function PackageItem() {
          this.width = 0;
          this.height = 0;
        }

        var _proto24 = PackageItem.prototype;

        _proto24.load = function load() {
          return this.owner.getItemAsset(this);
        };

        _proto24.getBranch = function getBranch() {
          if (this.branches && this.owner._branchIndex != -1) {
            var itemId = this.branches[this.owner._branchIndex];
            if (itemId) return this.owner.getItemById(itemId);
          }

          return this;
        };

        _proto24.getHighResolution = function getHighResolution() {
          if (this.highResolution && UIContentScaler.scaleLevel > 0) {
            var itemId = this.highResolution[UIContentScaler.scaleLevel - 1];
            if (itemId) return this.owner.getItemById(itemId);
          }

          return this;
        };

        _proto24.toString = function toString() {
          return this.name;
        };

        return PackageItem;
      }());
      var TranslationHelper = exports('TranslationHelper', /*#__PURE__*/function () {
        function TranslationHelper() {}

        TranslationHelper.loadFromXML = function loadFromXML(source) {
          TranslationHelper.strings = {};
          var strings = TranslationHelper.strings;
          var xml = new DOMParser().parseFromString(source, "text/xml").documentElement;
          var nodes = xml.childNodes;
          var length1 = nodes.length;

          for (var i1 = 0; i1 < length1; i1++) {
            var cxml = nodes[i1];

            if (cxml.tagName == "string") {
              var key = cxml.getAttribute("name");
              var text = cxml.childNodes.length > 0 ? cxml.firstChild.nodeValue : "";
              var i = key.indexOf("-");
              if (i == -1) continue;
              var key2 = key.substring(0, i);
              var key3 = key.substring(i + 1);
              var col = strings[key2];

              if (!col) {
                col = {};
                strings[key2] = col;
              }

              col[key3] = text;
            }
          }
        };

        TranslationHelper.translateComponent = function translateComponent(item) {
          if (TranslationHelper.strings == null) return;
          var compStrings = TranslationHelper.strings[item.owner.id + item.id];
          if (compStrings == null) return;
          var elementId, value;
          var buffer = item.rawData;
          var nextPos;
          var itemCount;
          var i, j, k;
          var dataLen;
          var curPos;
          var valueCnt;
          var page;
          buffer.seek(0, 2);
          var childCount = buffer.readShort();

          for (i = 0; i < childCount; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            buffer.seek(curPos, 0);
            var baseType = buffer.readByte();
            var type = baseType;
            buffer.skip(4);
            elementId = buffer.readS();

            if (type == ObjectType.Component) {
              if (buffer.seek(curPos, 6)) type = buffer.readByte();
            }

            buffer.seek(curPos, 1);
            if ((value = compStrings[elementId + "-tips"]) != null) buffer.writeS(value);
            buffer.seek(curPos, 2);
            var gearCnt = buffer.readShort();

            for (j = 0; j < gearCnt; j++) {
              nextPos = buffer.readShort();
              nextPos += buffer.position;

              if (buffer.readByte() == 6) //gearText
                {
                  buffer.skip(2); //controller

                  valueCnt = buffer.readShort();

                  for (k = 0; k < valueCnt; k++) {
                    page = buffer.readS();

                    if (page != null) {
                      if ((value = compStrings[elementId + "-texts_" + k]) != null) buffer.writeS(value);else buffer.skip(2);
                    }
                  }

                  if (buffer.readBool() && (value = compStrings[elementId + "-texts_def"]) != null) buffer.writeS(value);
                }

              buffer.position = nextPos;
            }

            if (baseType == ObjectType.Component && buffer.version >= 2) {
              buffer.seek(curPos, 4);
              buffer.skip(2); //pageController

              buffer.skip(4 * buffer.readShort());
              var cpCount = buffer.readShort();

              for (var k = 0; k < cpCount; k++) {
                var target = buffer.readS();
                var propertyId = buffer.readShort();
                if (propertyId == 0 && (value = compStrings[elementId + "-cp-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
              }
            }

            switch (type) {
              case ObjectType.Text:
              case ObjectType.RichText:
              case ObjectType.InputText:
                {
                  if ((value = compStrings[elementId]) != null) {
                    buffer.seek(curPos, 6);
                    buffer.writeS(value);
                  }

                  if ((value = compStrings[elementId + "-prompt"]) != null) {
                    buffer.seek(curPos, 4);
                    buffer.writeS(value);
                  }

                  break;
                }

              case ObjectType.List:
              case ObjectType.Tree:
                {
                  buffer.seek(curPos, 8);
                  buffer.skip(2);
                  itemCount = buffer.readShort();

                  for (j = 0; j < itemCount; j++) {
                    nextPos = buffer.readShort();
                    nextPos += buffer.position;
                    buffer.skip(2); //url

                    if (type == ObjectType.Tree) buffer.skip(2); //title

                    if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);else buffer.skip(2); //selected title

                    if ((value = compStrings[elementId + "-" + j + "-0"]) != null) buffer.writeS(value);else buffer.skip(2);

                    if (buffer.version >= 2) {
                      buffer.skip(6);
                      buffer.skip(buffer.readUshort() * 4); //controllers

                      var cpCount = buffer.readUshort();

                      for (var k = 0; k < cpCount; k++) {
                        var target = buffer.readS();
                        var propertyId = buffer.readUshort();
                        if (propertyId == 0 && (value = compStrings[elementId + "-" + j + "-" + target]) != null) buffer.writeS(value);else buffer.skip(2);
                      }
                    }

                    buffer.position = nextPos;
                  }

                  break;
                }

              case ObjectType.Label:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                    buffer.skip(2);
                    if (buffer.readBool()) buffer.skip(4);
                    buffer.skip(4);
                    if (buffer.readBool() && (value = compStrings[elementId + "-prompt"]) != null) buffer.writeS(value);
                  }

                  break;
                }

              case ObjectType.Button:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);else buffer.skip(2);
                    if ((value = compStrings[elementId + "-0"]) != null) buffer.writeS(value);
                  }

                  break;
                }

              case ObjectType.ComboBox:
                {
                  if (buffer.seek(curPos, 6) && buffer.readByte() == type) {
                    itemCount = buffer.readShort();

                    for (j = 0; j < itemCount; j++) {
                      nextPos = buffer.readShort();
                      nextPos += buffer.position;
                      if ((value = compStrings[elementId + "-" + j]) != null) buffer.writeS(value);
                      buffer.position = nextPos;
                    }

                    if ((value = compStrings[elementId]) != null) buffer.writeS(value);
                  }

                  break;
                }
            }

            buffer.position = curPos + dataLen;
          }
        };

        return TranslationHelper;
      }());
      var ByteBuffer = exports('ByteBuffer', /*#__PURE__*/function () {
        function ByteBuffer(buffer, offset, length) {
          this.version = 0;
          offset = offset || 0;
          if (length == null || length == -1) length = buffer.byteLength - offset;
          this._bytes = new Uint8Array(buffer, offset, length);
          this._view = new DataView(this._bytes.buffer, offset, length);
          this._pos = 0;
          this._length = length;
        }

        var _proto25 = ByteBuffer.prototype;

        _proto25.skip = function skip(count) {
          this._pos += count;
        };

        _proto25.validate = function validate(forward) {
          if (this._pos + forward > this._length) throw new Error("Out of bounds");
        };

        _proto25.readByte = function readByte() {
          this.validate(1);
          return this._view.getUint8(this._pos++);
        };

        _proto25.readBool = function readBool() {
          return this.readByte() == 1;
        };

        _proto25.readShort = function readShort() {
          this.validate(2);

          var ret = this._view.getInt16(this._pos, this.littleEndian);

          this._pos += 2;
          return ret;
        };

        _proto25.readUshort = function readUshort() {
          this.validate(2);

          var ret = this._view.getUint16(this._pos, this.littleEndian);

          this._pos += 2;
          return ret;
        };

        _proto25.readInt = function readInt() {
          this.validate(4);

          var ret = this._view.getInt32(this._pos, this.littleEndian);

          this._pos += 4;
          return ret;
        };

        _proto25.readUint = function readUint() {
          this.validate(4);

          var ret = this._view.getUint32(this._pos, this.littleEndian);

          this._pos += 4;
          return ret;
        };

        _proto25.readFloat = function readFloat() {
          this.validate(4);

          var ret = this._view.getFloat32(this._pos, this.littleEndian);

          this._pos += 4;
          return ret;
        };

        _proto25.readString = function readString(len) {
          if (len == undefined) len = this.readUshort();
          this.validate(len);
          var v = "",
              max = this._pos + len,
              c = 0,
              c2 = 0,
              c3 = 0,
              f = String.fromCharCode;
          var u = this._bytes;
          var pos = this._pos;

          while (pos < max) {
            c = u[pos++];

            if (c < 0x80) {
              if (c != 0) {
                v += f(c);
              }
            } else if (c < 0xE0) {
              v += f((c & 0x3F) << 6 | u[pos++] & 0x7F);
            } else if (c < 0xF0) {
              c2 = u[pos++];
              v += f((c & 0x1F) << 12 | (c2 & 0x7F) << 6 | u[pos++] & 0x7F);
            } else {
              c2 = u[pos++];
              c3 = u[pos++];
              v += f((c & 0x0F) << 18 | (c2 & 0x7F) << 12 | c3 << 6 & 0x7F | u[pos++] & 0x7F);
            }
          }

          this._pos += len;
          return v;
        };

        _proto25.readS = function readS() {
          var index = this.readUshort();
          if (index == 65534) //null
            return null;else if (index == 65533) return "";else return this.stringTable[index];
        };

        _proto25.readSArray = function readSArray(cnt) {
          var ret = new Array(cnt);

          for (var i = 0; i < cnt; i++) ret[i] = this.readS();

          return ret;
        };

        _proto25.writeS = function writeS(value) {
          var index = this.readUshort();
          if (index != 65534 && index != 65533) this.stringTable[index] = value;
        };

        _proto25.readColor = function readColor(hasAlpha) {
          var r = this.readByte();
          var g = this.readByte();
          var b = this.readByte();
          var a = this.readByte();
          return new Color(r, g, b, hasAlpha ? a : 255);
        };

        _proto25.readChar = function readChar() {
          var i = this.readUshort();
          return String.fromCharCode(i);
        };

        _proto25.readBuffer = function readBuffer() {
          var count = this.readUint();
          this.validate(count);
          var ba = new ByteBuffer(this._bytes.buffer, this._bytes.byteOffset + this._pos, count);
          ba.stringTable = this.stringTable;
          ba.version = this.version;
          this._pos += count;
          return ba;
        };

        _proto25.seek = function seek(indexTablePos, blockIndex) {
          var tmp = this._pos;
          this._pos = indexTablePos;
          var segCount = this.readByte();

          if (blockIndex < segCount) {
            var useShort = this.readByte() == 1;
            var newPos;

            if (useShort) {
              this._pos += 2 * blockIndex;
              newPos = this.readUshort();
            } else {
              this._pos += 4 * blockIndex;
              newPos = this.readUint();
            }

            if (newPos > 0) {
              this._pos = indexTablePos + newPos;
              return true;
            } else {
              this._pos = tmp;
              return false;
            }
          } else {
            this._pos = tmp;
            return false;
          }
        };

        _createClass(ByteBuffer, [{
          key: "data",
          get: function get() {
            return this._bytes;
          }
        }, {
          key: "position",
          get: function get() {
            return this._pos;
          },
          set: function set(value) {
            if (value > this._length) throw new Error("Out of bounds");
            this._pos = value;
          }
        }]);

        return ByteBuffer;
      }());

      var PixelHitTest = /*#__PURE__*/function () {
        function PixelHitTest(data, offsetX, offsetY) {
          this._data = data;
          this.offsetX = offsetX == undefined ? 0 : offsetX;
          this.offsetY = offsetY == undefined ? 0 : offsetY;
          this.scaleX = 1;
          this.scaleY = 1;
        }

        var _proto26 = PixelHitTest.prototype;

        _proto26.hitTest = function hitTest(pt) {
          var x = Math.floor((pt.x / this.scaleX - this.offsetX) * this._data.scale);
          var y = Math.floor((pt.y / this.scaleY - this.offsetY) * this._data.scale);
          if (x < 0 || y < 0 || x >= this._data.pixelWidth) return false;
          var pos = y * this._data.pixelWidth + x;
          var pos2 = Math.floor(pos / 8);
          var pos3 = pos % 8;
          if (pos2 >= 0 && pos2 < this._data.pixels.length) return (this._data.pixels[pos2] >> pos3 & 0x1) == 1;else return false;
        };

        return PixelHitTest;
      }();

      var PixelHitTestData = function PixelHitTestData(ba) {
        ba.readInt();
        this.pixelWidth = ba.readInt();
        this.scale = 1 / ba.readByte();
        this.pixels = ba.readBuffer().data;
      };

      var ChildHitArea = /*#__PURE__*/function () {
        function ChildHitArea(child) {
          this._child = child;
        }

        var _proto27 = ChildHitArea.prototype;

        _proto27.hitTest = function hitTest(pt, globalPt) {
          return this._child.hitTest(globalPt, false) != null;
        };

        return ChildHitArea;
      }();

      var PathUtils = path;
      var UIPackage = exports('UIPackage', /*#__PURE__*/function () {
        function UIPackage() {
          this._items = [];
          this._itemsById = {};
          this._itemsByName = {};
          this._sprites = {};
          this._dependencies = [];
          this._branches = [];
          this._branchIndex = -1;
        }

        UIPackage.getVar = function getVar(key) {
          return _vars[key];
        };

        UIPackage.setVar = function setVar(key, value) {
          _vars[key] = value;
        };

        UIPackage.getById = function getById(id) {
          return _instById[id];
        };

        UIPackage.getByName = function getByName(name) {
          return _instByName[name];
        }
        /**
        * 注册一个包。包的所有资源必须放在resources下，且已经预加载。
        * @param path 相对 resources 的路径。
        */
        ;

        UIPackage.addPackage = function addPackage(path) {
          var pkg = _instById[path];
          if (pkg) return pkg;
          var asset = resources.get(path, BufferAsset);
          if (!asset) throw new Error("Resource '" + path + "' not ready");
          var buffer = asset.buffer();
          if (!buffer) throw new Error("Missing asset data.");
          pkg = new UIPackage();
          pkg._bundle = resources;
          pkg.loadPackage(new ByteBuffer(buffer), path);
          _instById[pkg.id] = pkg;
          _instByName[pkg.name] = pkg;
          _instById[pkg._path] = pkg;
          return pkg;
        };

        UIPackage.addFont = function addFont(url, bitmap) {
          _instFont[url] = bitmap;
        };

        UIPackage.getFont = function getFont(url) {
          return _instFont[url];
        };

        UIPackage.addBufferAsset = function addBufferAsset(asset, onComplete) {
          var path = asset.name;
          var bundle = resources;
          var onProgress = null;
          var pkg = new UIPackage();
          pkg._bundle = bundle;
          var buffer = asset.buffer ? asset.buffer() : asset._nativeAsset;
          pkg.loadPackage(new ByteBuffer(buffer), path);
          var cnt = pkg._items.length;
          var urls = [];

          for (var i = 0; i < cnt; i++) {
            var pi = pkg._items[i];

            if (pi.type == PackageItemType.Atlas || pi.type == PackageItemType.Sound) {
              ItemTypeToAssetType[pi.type];
              urls.push(pi.file);
            }
          }

          var total = urls.length;
          var lastErr;

          var taskComplete = function taskComplete(err, asset) {
            total--;
            if (err) lastErr = err;

            if (total <= 0) {
              _instById[pkg.id] = pkg;
              _instByName[pkg.name] = pkg;
              if (pkg._path) _instById[pkg._path] = pkg;
              if (onComplete != null) onComplete(lastErr, pkg);
            }
          };

          if (total > 0) {
            urls.forEach(function (url, index) {
              bundle.load(url, Asset, onProgress, taskComplete);
            });
          } else taskComplete(null);
        };

        UIPackage.loadPackage = function loadPackage() {
          var path;
          var onProgress;
          var onComplete;
          var bundle;

          if ((arguments.length <= 0 ? undefined : arguments[0]) instanceof AssetManager.Bundle) {
            bundle = arguments.length <= 0 ? undefined : arguments[0];
            path = arguments.length <= 1 ? undefined : arguments[1];

            if (arguments.length > 3) {
              onProgress = arguments.length <= 2 ? undefined : arguments[2];
              onComplete = arguments.length <= 3 ? undefined : arguments[3];
            } else onComplete = arguments.length <= 2 ? undefined : arguments[2];
          } else {
            path = arguments.length <= 0 ? undefined : arguments[0];

            if (arguments.length > 2) {
              onProgress = arguments.length <= 1 ? undefined : arguments[1];
              onComplete = arguments.length <= 2 ? undefined : arguments[2];
            } else onComplete = arguments.length <= 1 ? undefined : arguments[1];
          }

          bundle = bundle || resources;
          bundle.load(path, Asset, onProgress, function (err, asset) {
            if (err) {
              if (onComplete != null) onComplete(err, null);
              return;
            }

            var pkg = new UIPackage();
            pkg._bundle = bundle;
            var buffer = asset.buffer ? asset.buffer() : asset._nativeAsset;
            pkg.loadPackage(new ByteBuffer(buffer), path);
            var cnt = pkg._items.length;
            var urls = [];

            for (var i = 0; i < cnt; i++) {
              var pi = pkg._items[i];

              if (pi.type == PackageItemType.Atlas || pi.type == PackageItemType.Sound) {
                ItemTypeToAssetType[pi.type];
                urls.push(pi.file);
              }
            }

            var total = urls.length;
            var lastErr;

            var taskComplete = function taskComplete(err, asset) {
              total--;
              if (err) lastErr = err;

              if (total <= 0) {
                _instById[pkg.id] = pkg;
                _instByName[pkg.name] = pkg;
                if (pkg._path) _instById[pkg._path] = pkg;
                if (onComplete != null) onComplete(lastErr, pkg);
              }
            };

            if (total > 0) {
              urls.forEach(function (url, index) {
                bundle.load(url, Asset, onProgress, taskComplete);
              });
            } else taskComplete(null);
          });
        };

        UIPackage.removePackage = function removePackage(packageIdOrName) {
          var pkg = _instById[packageIdOrName];
          if (!pkg) pkg = _instByName[packageIdOrName];
          if (!pkg) throw new Error("No package found: " + packageIdOrName);
          pkg.dispose();
          delete _instById[pkg.id];
          delete _instByName[pkg.name];
          if (pkg._path) delete _instById[pkg._path];
        };

        UIPackage.createObject = function createObject(pkgName, resName, userClass) {
          var pkg = UIPackage.getByName(pkgName);
          if (pkg) return pkg.createObject(resName, userClass);else return null;
        };

        UIPackage.createObjectFromURL = function createObjectFromURL(url, userClass) {
          var pi = UIPackage.getItemByURL(url);
          if (pi) return pi.owner.internalCreateObject(pi, userClass);else return null;
        };

        UIPackage.getItemURL = function getItemURL(pkgName, resName) {
          var pkg = UIPackage.getByName(pkgName);
          if (!pkg) return null;
          var pi = pkg._itemsByName[resName];
          if (!pi) return null;
          return "ui://" + pkg.id + pi.id;
        };

        UIPackage.getItemByURL = function getItemByURL(url) {
          var pos1 = url.indexOf("//");
          if (pos1 == -1) return null;
          var pos2 = url.indexOf("/", pos1 + 2);

          if (pos2 == -1) {
            if (url.length > 13) {
              var pkgId = url.substring(5, 13);
              var pkg = UIPackage.getById(pkgId);

              if (pkg != null) {
                var srcId = url.substring(13);
                return pkg.getItemById(srcId);
              }
            }
          } else {
            var pkgName = url.substring(pos1 + 2, pos2);
            pkg = UIPackage.getByName(pkgName);

            if (pkg != null) {
              var srcName = url.substring(pos2 + 1);
              return pkg.getItemByName(srcName);
            }
          }

          return null;
        };

        UIPackage.normalizeURL = function normalizeURL(url) {
          if (url == null) return null;
          var pos1 = url.indexOf("//");
          if (pos1 == -1) return null;
          var pos2 = url.indexOf("/", pos1 + 2);
          if (pos2 == -1) return url;
          var pkgName = url.substring(pos1 + 2, pos2);
          var srcName = url.substring(pos2 + 1);
          return UIPackage.getItemURL(pkgName, srcName);
        };

        UIPackage.setStringsSource = function setStringsSource(source) {
          TranslationHelper.loadFromXML(source);
        };

        var _proto28 = UIPackage.prototype;

        _proto28.loadPackage = function loadPackage(buffer, path) {
          if (buffer.readUint() != 0x46475549) throw new Error("FairyGUI: old package format found in '" + path + "'");
          this._path = path;
          buffer.version = buffer.readInt();
          var ver2 = buffer.version >= 2;
          buffer.readBool();
          this._id = buffer.readString();
          this._name = buffer.readString();
          buffer.skip(20);
          var indexTablePos = buffer.position;
          var cnt;
          var i;
          var nextPos;
          var str;
          var branchIncluded;
          buffer.seek(indexTablePos, 4);
          cnt = buffer.readInt();
          var stringTable = new Array(cnt);
          buffer.stringTable = stringTable;

          for (i = 0; i < cnt; i++) stringTable[i] = buffer.readString();

          if (buffer.seek(indexTablePos, 5)) {
            cnt = buffer.readInt();

            for (i = 0; i < cnt; i++) {
              var _index = buffer.readUshort();

              var len = buffer.readInt();
              stringTable[_index] = buffer.readString(len);
            }
          }

          buffer.seek(indexTablePos, 0);
          cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) this._dependencies.push({
            id: buffer.readS(),
            name: buffer.readS()
          });

          if (ver2) {
            cnt = buffer.readShort();

            if (cnt > 0) {
              this._branches = buffer.readSArray(cnt);
              if (_branch) this._branchIndex = this._branches.indexOf(_branch);
            }

            branchIncluded = cnt > 0;
          }

          buffer.seek(indexTablePos, 1);
          var pi;
          var pos = path.lastIndexOf('/');
          var shortPath = pos == -1 ? "" : path.substring(0, pos + 1);
          path = path + "_";
          cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readInt();
            nextPos += buffer.position;
            pi = new PackageItem();
            pi.owner = this;
            pi.type = buffer.readByte();
            pi.id = buffer.readS();
            pi.name = buffer.readS();
            buffer.readS(); //path

            pi.file = buffer.readS();
            buffer.readBool(); //exported

            pi.width = buffer.readInt();
            pi.height = buffer.readInt();

            switch (pi.type) {
              case PackageItemType.Image:
                {
                  pi.objectType = ObjectType.Image;
                  var scaleOption = buffer.readByte();

                  if (scaleOption == 1) {
                    pi.scale9Grid = new Rect();
                    pi.scale9Grid.x = buffer.readInt();
                    pi.scale9Grid.y = buffer.readInt();
                    pi.scale9Grid.width = buffer.readInt();
                    pi.scale9Grid.height = buffer.readInt();
                    pi.tileGridIndice = buffer.readInt();
                  } else if (scaleOption == 2) pi.scaleByTile = true;

                  pi.smoothing = buffer.readBool();
                  break;
                }

              case PackageItemType.MovieClip:
                {
                  pi.smoothing = buffer.readBool();
                  pi.objectType = ObjectType.MovieClip;
                  pi.rawData = buffer.readBuffer();
                  break;
                }

              case PackageItemType.Font:
                {
                  pi.rawData = buffer.readBuffer();
                  break;
                }

              case PackageItemType.Component:
                {
                  var extension = buffer.readByte();
                  if (extension > 0) pi.objectType = extension;else pi.objectType = ObjectType.Component;
                  pi.rawData = buffer.readBuffer();
                  Decls.UIObjectFactory.resolveExtension(pi);
                  break;
                }

              case PackageItemType.Atlas:
              case PackageItemType.Sound:
              case PackageItemType.Misc:
                {
                  pi.file = path + PathUtils.mainFileName(pi.file);
                  break;
                }

              case PackageItemType.Spine:
              case PackageItemType.DragonBones:
                {
                  pi.file = shortPath + PathUtils.mainFileName(pi.file);
                  pi.skeletonAnchor = new Vec2();
                  pi.skeletonAnchor.x = buffer.readFloat();
                  pi.skeletonAnchor.y = buffer.readFloat();
                  break;
                }
            }

            if (ver2) {
              str = buffer.readS(); //branch

              if (str) pi.name = str + "/" + pi.name;
              var branchCnt = buffer.readByte();

              if (branchCnt > 0) {
                if (branchIncluded) pi.branches = buffer.readSArray(branchCnt);else this._itemsById[buffer.readS()] = pi;
              }

              var highResCnt = buffer.readByte();
              if (highResCnt > 0) pi.highResolution = buffer.readSArray(highResCnt);
            }

            this._items.push(pi);

            this._itemsById[pi.id] = pi;
            if (pi.name != null) this._itemsByName[pi.name] = pi;
            buffer.position = nextPos;
          }

          buffer.seek(indexTablePos, 2);
          cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var itemId = buffer.readS();
            pi = this._itemsById[buffer.readS()];
            var rect = new Rect();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            var sprite = {
              atlas: pi,
              rect: rect,
              offset: new Vec2(),
              originalSize: new Size(0, 0)
            };
            sprite.rotated = buffer.readBool();

            if (ver2 && buffer.readBool()) {
              sprite.offset.x = buffer.readInt();
              sprite.offset.y = buffer.readInt();
              sprite.originalSize.width = buffer.readInt();
              sprite.originalSize.height = buffer.readInt();
            } else {
              sprite.originalSize.width = sprite.rect.width;
              sprite.originalSize.height = sprite.rect.height;
            }

            this._sprites[itemId] = sprite;
            buffer.position = nextPos;
          }

          if (buffer.seek(indexTablePos, 3)) {
            cnt = buffer.readShort();

            for (i = 0; i < cnt; i++) {
              nextPos = buffer.readInt();
              nextPos += buffer.position;
              pi = this._itemsById[buffer.readS()];
              if (pi && pi.type == PackageItemType.Image) pi.hitTestData = new PixelHitTestData(buffer);
              buffer.position = nextPos;
            }
          }
        };

        _proto28.dispose = function dispose() {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var pi = this._items[i];
            if (pi.asset) assetManager.releaseAsset(pi.asset);
          }
        };

        _proto28.createObject = function createObject(resName, userClass) {
          if (userClass === void 0) {
            userClass = undefined;
          }

          var pi = this._itemsByName[resName];
          if (pi) return this.internalCreateObject(pi, userClass);else return null;
        };

        _proto28.internalCreateObject = function internalCreateObject(item, userClass) {
          var g = Decls.UIObjectFactory.newObject(item, userClass);
          if (g == null) return null;
          constructingDepth.n++;
          g.constructFromResource();
          constructingDepth.n--;
          return g;
        };

        _proto28.getItemById = function getItemById(itemId) {
          return this._itemsById[itemId];
        };

        _proto28.getItemByName = function getItemByName(resName) {
          return this._itemsByName[resName];
        };

        _proto28.getItemAssetByName = function getItemAssetByName(resName) {
          var pi = this._itemsByName[resName];

          if (pi == null) {
            throw new Error("Resource not found -" + resName);
          }

          return this.getItemAsset(pi);
        };

        _proto28.getItemAsset = function getItemAsset(item) {
          switch (item.type) {
            case PackageItemType.Image:
              if (!item.decoded) {
                item.decoded = true;
                var sprite = this._sprites[item.id];

                if (sprite) {
                  var atlasTexture = this.getItemAsset(sprite.atlas);

                  if (atlasTexture) {
                    var sf = new SpriteFrame();
                    sf.texture = atlasTexture;
                    sf.rect = sprite.rect;
                    sf.rotated = sprite.rotated;
                    sf.offset = new Vec2(sprite.offset.x - (sprite.originalSize.width - sprite.rect.width) / 2, -(sprite.offset.y - (sprite.originalSize.height - sprite.rect.height) / 2));
                    sf.originalSize = sprite.originalSize;

                    if (item.scale9Grid) {
                      sf.insetLeft = item.scale9Grid.x;
                      sf.insetTop = item.scale9Grid.y;
                      sf.insetRight = item.width - item.scale9Grid.xMax;
                      sf.insetBottom = item.height - item.scale9Grid.yMax;
                    }

                    item.asset = sf;
                  }
                }
              }

              break;

            case PackageItemType.Atlas:
            case PackageItemType.Sound:
              if (!item.decoded) {
                item.decoded = true;
                item.asset = this._bundle.get(item.file, ItemTypeToAssetType[item.type]);

                if (!item.asset) {
                  console.log("Resource '" + item.file + "' not found");
                } else if (item.type == PackageItemType.Atlas) {
                  var asset = item.asset;
                  var tex = asset['_texture'];

                  if (!tex) {
                    tex = new Texture2D();
                    tex.name = asset.nativeUrl;
                    tex.image = asset;
                  }

                  item.asset = tex;
                } else {
                  item.asset = item.asset;
                }
              }

              break;

            case PackageItemType.Font:
              if (!item.decoded) {
                item.decoded = true;
                this.loadFont(item);
              }

              break;

            case PackageItemType.MovieClip:
              if (!item.decoded) {
                item.decoded = true;
                this.loadMovieClip(item);
              }

              break;
          }

          return item.asset;
        };

        _proto28.getItemAssetAsync = function getItemAssetAsync(item, onComplete) {
          if (item.decoded) {
            onComplete(null, item);
            return;
          }

          if (item.loading) {
            item.loading.push(onComplete);
            return;
          }

          switch (item.type) {
            case PackageItemType.Spine:
              item.loading = [onComplete];
              this.loadSpine(item);
              break;

            case PackageItemType.DragonBones:
              item.loading = [onComplete];
              this.loadDragonBones(item);
              break;

            default:
              this.getItemAsset(item);
              onComplete(null, item);
              break;
          }
        };

        _proto28.loadAllAssets = function loadAllAssets() {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var pi = this._items[i];
            this.getItemAsset(pi);
          }
        };

        _proto28.loadMovieClip = function loadMovieClip(item) {
          var buffer = item.rawData;
          buffer.seek(0, 0);
          item.interval = buffer.readInt() / 1000;
          item.swing = buffer.readBool();
          item.repeatDelay = buffer.readInt() / 1000;
          buffer.seek(0, 1);
          var frameCount = buffer.readShort();
          item.frames = Array(frameCount);
          var spriteId;
          var sprite;

          for (var i = 0; i < frameCount; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            var rect = new Rect();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            var addDelay = buffer.readInt() / 1000;
            var frame = {
              rect: rect,
              addDelay: addDelay,
              texture: null
            };
            spriteId = buffer.readS();

            if (spriteId != null && (sprite = this._sprites[spriteId]) != null) {
              var atlasTexture = this.getItemAsset(sprite.atlas);

              if (atlasTexture) {
                item.width / frame.rect.width;
                var sf = new SpriteFrame();
                sf.texture = atlasTexture;
                sf.rect = sprite.rect;
                sf.rotated = sprite.rotated;
                sf.offset = new Vec2(frame.rect.x - (item.width - frame.rect.width) / 2, -(frame.rect.y - (item.height - frame.rect.height) / 2));
                sf.originalSize = new Size(item.width, item.height);
                frame.texture = sf;
              }
            }

            item.frames[i] = frame;
            buffer.position = nextPos;
          }
        };

        _proto28.loadFont = function loadFont(item) {
          var font = new BitmapFont();
          item.asset = font;
          font.fntConfig = {
            commonHeight: 0,
            fontSize: 0,
            kerningDict: {},
            fontDefDictionary: {}
          };
          var dict = font.fntConfig.fontDefDictionary;
          var buffer = item.rawData;
          buffer.seek(0, 0);
          var ttf = buffer.readBool();
          var canTint = buffer.readBool();
          var resizable = buffer.readBool();
          buffer.readBool(); //has channel

          var fontSize = buffer.readInt();
          var xadvance = buffer.readInt();
          var lineHeight = buffer.readInt();
          var mainTexture;
          var mainSprite = this._sprites[item.id];
          if (mainSprite) mainTexture = this.getItemAsset(mainSprite.atlas);
          buffer.seek(0, 1);
          var bg;
          var cnt = buffer.readInt();

          for (var i = 0; i < cnt; i++) {
            var nextPos = buffer.readShort();
            nextPos += buffer.position;
            bg = {};
            var ch = buffer.readUshort();
            dict[ch] = bg;
            var rect = new Rect();
            bg.rect = rect;
            var img = buffer.readS();
            rect.x = buffer.readInt();
            rect.y = buffer.readInt();
            bg.xOffset = buffer.readInt();
            bg.yOffset = buffer.readInt();
            rect.width = buffer.readInt();
            rect.height = buffer.readInt();
            bg.xAdvance = buffer.readInt();
            bg.channel = buffer.readByte();
            if (bg.channel == 1) bg.channel = 3;else if (bg.channel == 2) bg.channel = 2;else if (bg.channel == 3) bg.channel = 1;

            if (ttf) {
              rect.x += mainSprite.rect.x;
              rect.y += mainSprite.rect.y;
            } else {
              var sprite = this._sprites[img];

              if (sprite) {
                rect.set(sprite.rect);
                bg.xOffset += sprite.offset.x;
                bg.yOffset += sprite.offset.y;
                if (fontSize == 0) fontSize = sprite.originalSize.height;

                if (!mainTexture) {
                  sprite.atlas.load();
                  mainTexture = sprite.atlas.asset;
                }
              }

              if (bg.xAdvance == 0) {
                if (xadvance == 0) bg.xAdvance = bg.xOffset + bg.rect.width;else bg.xAdvance = xadvance;
              }
            }

            buffer.position = nextPos;
          }

          font.fontSize = fontSize;
          font.fntConfig.fontSize = fontSize;
          font.fntConfig.commonHeight = lineHeight == 0 ? fontSize : lineHeight;
          font.fntConfig.resizable = resizable;
          font.fntConfig.canTint = canTint;
          var spriteFrame = new SpriteFrame();
          spriteFrame.texture = mainTexture;
          font.spriteFrame = spriteFrame;
          font.onLoaded();
        };

        _proto28.loadSpine = function loadSpine(item) {
          this._bundle.load(item.file, sp.SkeletonData, function (err, asset) {
            item.decoded = true;
            item.asset = asset;
            var arr = item.loading;
            delete item.loading;
            arr.forEach(function (e) {
              return e(err, item);
            });
          });
        };

        _proto28.loadDragonBones = function loadDragonBones(item) {
          var _this9 = this;

          this._bundle.load(item.file, dragonBones.DragonBonesAsset, function (err, asset) {
            if (err) {
              item.decoded = true;
              var arr = item.loading;
              delete item.loading;
              arr.forEach(function (e) {
                return e(err, item);
              });
              return;
            }

            item.asset = asset;
            var atlasFile = item.file.replace("_ske", "_tex");
            var pos = atlasFile.lastIndexOf('.');
            if (pos != -1) atlasFile = atlasFile.substring(0, pos + 1) + "json";

            _this9._bundle.load(atlasFile, dragonBones.DragonBonesAtlasAsset, function (err, asset) {
              item.decoded = true;
              item.atlasAsset = asset;
              var arr = item.loading;
              delete item.loading;
              arr.forEach(function (e) {
                return e(err, item);
              });
            });
          });
        };

        _createClass(UIPackage, [{
          key: "id",
          get: function get() {
            return this._id;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "path",
          get: function get() {
            return this._path;
          }
        }, {
          key: "dependencies",
          get: function get() {
            return this._dependencies;
          }
        }], [{
          key: "branch",
          get: function get() {
            return _branch;
          },
          set: function set(value) {
            _branch = value;

            for (var pkgId in _instById) {
              var pkg = _instById[pkgId];

              if (pkg._branches) {
                pkg._branchIndex = pkg._branches.indexOf(value);
              }
            }
          }
        }]);

        return UIPackage;
      }());
      var ItemTypeToAssetType = (_ItemTypeToAssetType = {}, _ItemTypeToAssetType[PackageItemType.Atlas] = ImageAsset, _ItemTypeToAssetType[PackageItemType.Sound] = AudioClip, _ItemTypeToAssetType);
      var _instById = {};
      var _instByName = {};
      var _branch = "";
      var _vars = {};
      var Decls = {};
      var _instFont = {};

      function toGrayedColor(c) {
        var v = c.r * 0.299 + c.g * 0.587 + c.b * 0.114;
        return new Color(v, v, v, c.a);
      }

      var UBBParser = exports('UBBParser', /*#__PURE__*/function () {
        function UBBParser() {
          this._readPos = 0;
          this._handlers = {};
          this._handlers["url"] = this.onTag_URL;
          this._handlers["img"] = this.onTag_IMG;
          this._handlers["b"] = this.onTag_Simple;
          this._handlers["i"] = this.onTag_Simple;
          this._handlers["u"] = this.onTag_Simple; //this._handlers["sup"] = this.onTag_Simple;
          //this._handlers["sub"] = this.onTag_Simple;

          this._handlers["color"] = this.onTag_COLOR; //this._handlers["font"] = this.onTag_FONT;

          this._handlers["size"] = this.onTag_SIZE;
        }

        var _proto29 = UBBParser.prototype;

        _proto29.onTag_URL = function onTag_URL(tagName, end, attr) {
          if (!end) {
            var ret;
            if (attr != null) ret = "<on click=\"onClickLink\" param=\"" + attr + "\">";else {
              var href = this.getTagText();
              ret = "<on click=\"onClickLink\" param=\"" + href + "\">";
            }
            if (this.linkUnderline) ret += "<u>";
            if (this.linkColor) ret += "<color=" + this.linkColor + ">";
            return ret;
          } else {
            var _ret = "";
            if (this.linkColor) _ret += "</color>";
            if (this.linkUnderline) _ret += "</u>";
            _ret += "</on>";
            return _ret;
          }
        };

        _proto29.onTag_IMG = function onTag_IMG(tagName, end, attr) {
          if (!end) {
            var src = this.getTagText(true);
            if (!src) return null;
            return "<img src=\"" + src + "\"/>";
          } else return null;
        };

        _proto29.onTag_Simple = function onTag_Simple(tagName, end, attr) {
          return end ? "</" + tagName + ">" : "<" + tagName + ">";
        };

        _proto29.onTag_COLOR = function onTag_COLOR(tagName, end, attr) {
          if (!end) {
            this.lastColor = attr;
            return "<color=" + attr + ">";
          } else return "</color>";
        };

        _proto29.onTag_FONT = function onTag_FONT(tagName, end, attr) {
          if (!end) return "<font face=\"" + attr + "\">";else return "</font>";
        };

        _proto29.onTag_SIZE = function onTag_SIZE(tagName, end, attr) {
          if (!end) {
            this.lastSize = attr;
            return "<size=" + attr + ">";
          } else return "</size>";
        };

        _proto29.getTagText = function getTagText(remove) {
          var pos1 = this._readPos;
          var pos2;
          var result = "";

          while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
            if (this._text.charCodeAt(pos2 - 1) == 92) //\
              {
                result += this._text.substring(pos1, pos2 - 1);
                result += "[";
                pos1 = pos2 + 1;
              } else {
              result += this._text.substring(pos1, pos2);
              break;
            }
          }

          if (pos2 == -1) return null;
          if (remove) this._readPos = pos2;
          return result;
        };

        _proto29.parse = function parse(text, remove) {
          this._text = text;
          this.lastColor = null;
          this.lastSize = null;
          var pos1 = 0,
              pos2,
              pos3;
          var end;
          var tag, attr;
          var repl;
          var func;
          var result = "";

          while ((pos2 = this._text.indexOf("[", pos1)) != -1) {
            if (pos2 > 0 && this._text.charCodeAt(pos2 - 1) == 92) //\
              {
                result += this._text.substring(pos1, pos2 - 1);
                result += "[";
                pos1 = pos2 + 1;
                continue;
              }

            result += this._text.substring(pos1, pos2);
            pos1 = pos2;
            pos2 = this._text.indexOf("]", pos1);
            if (pos2 == -1) break;
            end = this._text.charAt(pos1 + 1) == '/';
            tag = this._text.substring(end ? pos1 + 2 : pos1 + 1, pos2);
            this._readPos = pos2 + 1;
            attr = null;
            repl = null;
            pos3 = tag.indexOf("=");

            if (pos3 != -1) {
              attr = tag.substring(pos3 + 1);
              tag = tag.substring(0, pos3);
            }

            tag = tag.toLowerCase();
            func = this._handlers[tag];

            if (func != null) {
              repl = func.call(this, tag, end, attr);
              if (repl != null && !remove) result += repl;
            } else result += this._text.substring(pos1, this._readPos);

            pos1 = this._readPos;
          }

          if (pos1 < this._text.length) result += this._text.substring(pos1);
          this._text = null;
          return result;
        };

        return UBBParser;
      }());
      var defaultParser = new UBBParser();
      var GTextField = exports('GTextField', /*#__PURE__*/function (_GObject5) {
        _inheritsLoose(GTextField, _GObject5);

        function GTextField() {
          var _this10;

          _this10 = _GObject5.call(this) || this;
          _this10._label = void 0;
          _this10._fontSize = 0;
          _this10._leading = 0;
          _this10._node.name = "GTextField";
          _this10._touchDisabled = true;
          _this10._text = "";
          _this10._color = new Color(255, 255, 255, 255);

          _this10.createRenderer();

          _this10.fontSize = 12;
          _this10.leading = 3;
          _this10.singleLine = false;
          _this10._sizeDirty = false;

          _this10._node.on(Node.EventType.SIZE_CHANGED, _this10.onLabelSizeChanged, _assertThisInitialized(_this10));

          return _this10;
        }

        var _proto30 = GTextField.prototype;

        _proto30.createRenderer = function createRenderer() {
          this._label = this._node.addComponent(Label);
          this._label.cacheMode = CacheMode.CHAR;
          this._label.string = "";
          this.autoSize = AutoSizeType.Both;
        };

        _proto30.parseTemplate = function parseTemplate(template) {
          var pos1 = 0,
              pos2,
              pos3;
          var tag;
          var value;
          var result = "";

          while ((pos2 = template.indexOf("{", pos1)) != -1) {
            if (pos2 > 0 && template.charCodeAt(pos2 - 1) == 92) //\
              {
                result += template.substring(pos1, pos2 - 1);
                result += "{";
                pos1 = pos2 + 1;
                continue;
              }

            result += template.substring(pos1, pos2);
            pos1 = pos2;
            pos2 = template.indexOf("}", pos1);
            if (pos2 == -1) break;

            if (pos2 == pos1 + 1) {
              result += template.substring(pos1, pos1 + 2);
              pos1 = pos2 + 1;
              continue;
            }

            tag = template.substring(pos1 + 1, pos2);
            pos3 = tag.indexOf("=");

            if (pos3 != -1) {
              value = this._templateVars[tag.substring(0, pos3)];
              if (value == null) result += tag.substring(pos3 + 1);else result += value;
            } else {
              value = this._templateVars[tag];
              if (value != null) result += value;
            }

            pos1 = pos2 + 1;
          }

          if (pos1 < template.length) result += template.substring(pos1);
          return result;
        };

        _proto30.setVar = function setVar(name, value) {
          if (!this._templateVars) this._templateVars = {};
          this._templateVars[name] = value;
          return this;
        };

        _proto30.flushVars = function flushVars() {
          this.markSizeChanged();
          this.updateText();
        };

        _proto30.ensureSizeCorrect = function ensureSizeCorrect() {
          if (this._sizeDirty) {
            this._label.updateRenderData(true);

            this._sizeDirty = false;
          }
        };

        _proto30.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled) //不支持同一个文本不同样式
            text2 = defaultParser.parse(text2, true);
          this._label.string = text2;
        };

        _proto30.assignFont = function assignFont(label, value) {
          if (value instanceof Font) label.font = value;else {
            var font = getFontByName(value);

            if (!font) {
              label.fontFamily = value;
              label.useSystemFont = true;
            } else label.font = font;
          }
        };

        _proto30.assignFontColor = function assignFontColor(label, value) {
          var font = label.font;
          if (font instanceof BitmapFont && !font.fntConfig.canTint) value = Color.WHITE;
          if (this._grayed) value = toGrayedColor(value);
          label.color = value;
        };

        _proto30.updateFont = function updateFont() {
          this.assignFont(this._label, this._realFont);
        };

        _proto30.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._label, this._color);
        };

        _proto30.updateStrokeColor = function updateStrokeColor() {
          if (!this._label || !this._label.enableOutline) return;
          if (!this._strokeColor) this._strokeColor = new Color();
          if (this._grayed) this._label.outlineColor = toGrayedColor(this._strokeColor);else this._label.outlineColor = this._strokeColor;
        };

        _proto30.updateShadowColor = function updateShadowColor() {
          if (!this._label || !this._label.enableShadow) return;
          if (!this._shadowColor) this._shadowColor = new Color();
          if (this._grayed) this._label.shadowColor = toGrayedColor(this._shadowColor);else this._label.shadowColor = this._shadowColor;
        };

        _proto30.updateFontSize = function updateFontSize() {
          var font = this._label.font;

          if (font instanceof BitmapFont) {
            var fntConfig = font.fntConfig;
            if (fntConfig.resizable) this._label.fontSize = this._fontSize;else this._label.fontSize = fntConfig.fontSize;
            this._label.lineHeight = fntConfig.fontSize + (this._leading + 4) * fntConfig.fontSize / this._label.fontSize;
          } else {
            this._label.fontSize = this._fontSize;
            this._label.lineHeight = this._fontSize + this._leading;
          }
        };

        _proto30.updateOverflow = function updateOverflow() {
          if (this._autoSize == AutoSizeType.Both) this._label.overflow = Label.Overflow.NONE;else if (this._autoSize == AutoSizeType.Height) {
            this._label.overflow = Label.Overflow.RESIZE_HEIGHT;
            this._uiTrans.width = this._width;
          } else if (this._autoSize == AutoSizeType.Shrink) {
            this._label.overflow = Label.Overflow.SHRINK;

            this._uiTrans.setContentSize(this._width, this._height);
          } else {
            this._label.overflow = Label.Overflow.CLAMP;

            this._uiTrans.setContentSize(this._width, this._height);
          }
        };

        _proto30.markSizeChanged = function markSizeChanged() {
          if (this._underConstruct) return;

          if (this._autoSize == AutoSizeType.Both || this._autoSize == AutoSizeType.Height) {
            if (!this._sizeDirty) {
              this._node.emit(Event.SIZE_DELAY_CHANGE);

              this._sizeDirty = true;
            }
          }
        };

        _proto30.onLabelSizeChanged = function onLabelSizeChanged() {
          this._sizeDirty = false;
          if (this._underConstruct) return;

          if (this._autoSize == AutoSizeType.Both || this._autoSize == AutoSizeType.Height) {
            this._updatingSize = true;
            this.setSize(this._uiTrans.width, this._uiTrans.height);
            this._updatingSize = false;
          }
        };

        _proto30.handleSizeChanged = function handleSizeChanged() {
          if (this._updatingSize) return;

          if (this._autoSize == AutoSizeType.None || this._autoSize == AutoSizeType.Shrink) {
            this._uiTrans.setContentSize(this._width, this._height);
          } else if (this._autoSize == AutoSizeType.Height) this._uiTrans.width = this._width;
        };

        _proto30.handleGrayedChanged = function handleGrayedChanged() {
          this.updateFontColor();
          this.updateStrokeColor();
        };

        _proto30.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;

            case ObjectPropID.OutlineColor:
              return this.strokeColor;

            case ObjectPropID.FontSize:
              return this.fontSize;

            default:
              return _GObject5.prototype.getProp.call(this, index);
          }
        };

        _proto30.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;

            case ObjectPropID.OutlineColor:
              this.strokeColor = value;
              break;

            case ObjectPropID.FontSize:
              this.fontSize = value;
              break;

            default:
              _GObject5.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto30.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject5.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this.font = buffer.readS();
          this.fontSize = buffer.readShort();
          this.color = buffer.readColor();
          this.align = buffer.readByte();
          this.verticalAlign = buffer.readByte();
          this.leading = buffer.readShort();
          this.letterSpacing = buffer.readShort();
          this._ubbEnabled = buffer.readBool();
          this.autoSize = buffer.readByte();
          this.underline = buffer.readBool();
          this.italic = buffer.readBool();
          this.bold = buffer.readBool();
          this.singleLine = buffer.readBool();

          if (buffer.readBool()) {
            this.strokeColor = buffer.readColor();
            this.stroke = buffer.readFloat();
          }

          if (buffer.readBool()) {
            this.shadowColor = buffer.readColor();
            var f1 = buffer.readFloat();
            var f2 = buffer.readFloat();
            this.shadowOffset = new Vec2(f1, f2);
          }

          if (buffer.readBool()) this._templateVars = {};
        };

        _proto30.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject5.prototype.setup_afterAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 6);
          var str = buffer.readS();

          if (str != null) {
            this.text = str;
          } else {
            this.text = "";
          }
        };

        _createClass(GTextField, [{
          key: "text",
          get: function get() {
            return this._text;
          },
          set: function set(value) {
            this._text = value;
            if (this._text == null) this._text = "";
            this.updateGear(6);
            this.markSizeChanged();
            this.updateText();
          }
        }, {
          key: "font",
          get: function get() {
            return this._font;
          },
          set: function set(value) {
            if (this._font != value || !value) {
              this._font = value;
              this.markSizeChanged();
              var newFont = value ? UIPackage.getFont(value) : null;

              if (newFont) {
                this._realFont = newFont;
              } else {
                newFont = value ? value : UIConfig.defaultFont;

                if (newFont.startsWith("ui://")) {
                  var pi = UIPackage.getItemByURL(newFont);
                  if (pi) newFont = pi.owner.getItemAsset(pi);else newFont = UIConfig.defaultFont;
                }
              }

              this._realFont = newFont;
              this.updateFont();
            }
          }
        }, {
          key: "fontSize",
          get: function get() {
            return this._fontSize;
          },
          set: function set(value) {
            if (value < 0) return;

            if (this._fontSize != value) {
              this._fontSize = value;
              this.markSizeChanged();
              this.updateFontSize();
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);

            this.updateGear(4);
            this.updateFontColor();
          }
        }, {
          key: "align",
          get: function get() {
            return this._label ? this._label.horizontalAlign : 0;
          },
          set: function set(value) {
            if (this._label) this._label.horizontalAlign = value;
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._label ? this._label.verticalAlign : 0;
          },
          set: function set(value) {
            if (this._label) this._label.verticalAlign = value;
          }
        }, {
          key: "leading",
          get: function get() {
            return this._leading;
          },
          set: function set(value) {
            if (this._leading != value) {
              this._leading = value;
              this.markSizeChanged();
              this.updateFontSize();
            }
          }
        }, {
          key: "letterSpacing",
          get: function get() {
            return this._label ? this._label.spacingX : 0;
          },
          set: function set(value) {
            if (this._label && this._label.spacingX != value) {
              this.markSizeChanged();
              this._label.spacingX = value;
            }
          }
        }, {
          key: "underline",
          get: function get() {
            return this._label ? this._label.isUnderline : false;
          },
          set: function set(value) {
            if (this._label) this._label.isUnderline = value;
          }
        }, {
          key: "bold",
          get: function get() {
            return this._label ? this._label.isBold : false;
          },
          set: function set(value) {
            if (this._label) this._label.isBold = value;
          }
        }, {
          key: "italic",
          get: function get() {
            return this._label ? this._label.isItalic : false;
          },
          set: function set(value) {
            if (this._label) this._label.isItalic = value;
          }
        }, {
          key: "singleLine",
          get: function get() {
            return this._label ? !this._label.enableWrapText : false;
          },
          set: function set(value) {
            if (this._label) this._label.enableWrapText = !value;
          }
        }, {
          key: "stroke",
          get: function get() {
            return this._label ? this._label.outlineWidth : 0;
          },
          set: function set(value) {
            if (!this._label) return;
            this._label.outlineWidth = value;
            this._label.enableOutline = value > 0;
            if (value > 0) this.updateStrokeColor();
          }
        }, {
          key: "strokeColor",
          get: function get() {
            return this._strokeColor;
          },
          set: function set(value) {
            if (!this._strokeColor) this._strokeColor = new Color();

            this._strokeColor.set(value);

            this.updateGear(4);
            this.updateStrokeColor();
          }
        }, {
          key: "shadowOffset",
          get: function get() {
            return this._shadowOffset;
          },
          set: function set(value) {
            if (!this._shadowOffset) this._shadowOffset = new Vec2();

            this._shadowOffset.set(value);

            if (!this._label) return;
            this._label.shadowOffset = new Vec2(this._shadowOffset.x, -this._shadowOffset.y);
            this._label.enableShadow = value.x != 0 || value.y != 0;
            if (this._label.enableShadow) this.updateShadowColor();
          }
        }, {
          key: "shadowColor",
          get: function get() {
            return this._shadowColor;
          },
          set: function set(value) {
            if (!this._shadowColor) this._shadowColor = new Color();

            this._shadowColor.set(value);

            this.updateShadowColor();
          }
        }, {
          key: "ubbEnabled",
          get: function get() {
            return this._ubbEnabled;
          },
          set: function set(value) {
            if (this._ubbEnabled != value) {
              this._ubbEnabled = value;
              this.markSizeChanged();
              this.updateText();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.markSizeChanged();
              this.updateOverflow();
            }
          }
        }, {
          key: "templateVars",
          get: function get() {
            return this._templateVars;
          },
          set: function set(value) {
            if (this._templateVars == null && value == null) return;
            this._templateVars = value;
            this.flushVars();
          }
        }, {
          key: "textWidth",
          get: function get() {
            this.ensureSizeCorrect();
            return this._uiTrans.width;
          }
        }]);

        return GTextField;
      }(GObject));

      var RichTextImageAtlas = /*#__PURE__*/function (_SpriteAtlas) {
        _inheritsLoose(RichTextImageAtlas, _SpriteAtlas);

        function RichTextImageAtlas() {
          return _SpriteAtlas.apply(this, arguments) || this;
        }

        var _proto31 = RichTextImageAtlas.prototype;

        _proto31.getSpriteFrame = function getSpriteFrame(key) {
          var pi = UIPackage.getItemByURL(key);

          if (pi) {
            pi.load();
            if (pi.type == PackageItemType.Image) return pi.asset;else if (pi.type == PackageItemType.MovieClip) return pi.frames[0].texture;
          }

          return _SpriteAtlas.prototype.getSpriteFrame.call(this, key);
        };

        return RichTextImageAtlas;
      }(SpriteAtlas);

      var imageAtlas = new RichTextImageAtlas();
      var GRichTextField = exports('GRichTextField', /*#__PURE__*/function (_GTextField) {
        _inheritsLoose(GRichTextField, _GTextField);

        function GRichTextField() {
          var _this11;

          _this11 = _GTextField.call(this) || this;
          _this11._node.name = "GRichTextField";
          _this11._touchDisabled = false;
          _this11.linkUnderline = UIConfig.linkUnderline;
          return _this11;
        }

        var _proto32 = GRichTextField.prototype;

        _proto32.createRenderer = function createRenderer() {
          this._richText = this._node.addComponent(RichText);
          this._richText.handleTouchEvent = false;
          this.autoSize = AutoSizeType.None;
          this._richText.imageAtlas = imageAtlas;
        };

        _proto32.markSizeChanged = function markSizeChanged() {//RichText貌似没有延迟重建文本，所以这里不需要
        };

        _proto32.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);

          if (this._ubbEnabled) {
            defaultParser.linkUnderline = this.linkUnderline;
            defaultParser.linkColor = this.linkColor;
            text2 = defaultParser.parse(text2);
          }

          if (this._bold) text2 = "<b>" + text2 + "</b>";
          if (this._italics) text2 = "<i>" + text2 + "</i>";
          if (this._underline) text2 = "<u>" + text2 + "</u>";
          var c = this._color;
          if (this._grayed) c = toGrayedColor(c);
          text2 = "<color=" + c.toHEX("#rrggbb") + ">" + text2 + "</color>";

          if (this._autoSize == AutoSizeType.Both) {
            if (this._richText.maxWidth != 0) this._richText["_maxWidth"] = 0;
            this._richText.string = text2;
            if (this.maxWidth != 0 && this._uiTrans.contentSize.width > this.maxWidth) this._richText.maxWidth = this.maxWidth;
          } else this._richText.string = text2;
        };

        _proto32.updateFont = function updateFont() {
          this.assignFont(this._richText, this._realFont);
        };

        _proto32.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._richText, this._color);
        };

        _proto32.updateFontSize = function updateFontSize() {
          var fontSize = this._fontSize;
          var font = this._richText.font;

          if (font instanceof BitmapFont) {
            if (!font.fntConfig.resizable) fontSize = font.fntConfig.fontSize;
          }

          this._richText.fontSize = fontSize;
          this._richText.lineHeight = fontSize + this._leading * 2;
        };

        _proto32.updateOverflow = function updateOverflow() {
          if (this._autoSize == AutoSizeType.Both) this._richText.maxWidth = 0;else this._richText.maxWidth = this._width;
        };

        _proto32.handleSizeChanged = function handleSizeChanged() {
          if (this._updatingSize) return;
          if (this._autoSize != AutoSizeType.Both) this._richText.maxWidth = this._width;
        };

        _createClass(GRichTextField, [{
          key: "align",
          get: function get() {
            return this._richText.horizontalAlign;
          },
          set: function set(value) {
            this._richText.horizontalAlign = value;
          }
        }, {
          key: "underline",
          get: function get() {
            return this._underline;
          },
          set: function set(value) {
            if (this._underline != value) {
              this._underline = value;
              this.updateText();
            }
          }
        }, {
          key: "bold",
          get: function get() {
            return this._bold;
          },
          set: function set(value) {
            if (this._bold != value) {
              this._bold = value;
              this.updateText();
            }
          }
        }, {
          key: "italic",
          get: function get() {
            return this._italics;
          },
          set: function set(value) {
            if (this._italics != value) {
              this._italics = value;
              this.updateText();
            }
          }
        }]);

        return GRichTextField;
      }(GTextField));

      var InputProcessor = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InputProcessor, _Component);

        function InputProcessor() {
          var _this12;

          _this12 = _Component.call(this) || this;
          _this12._touches = new Array();
          _this12._rollOutChain = new Array();
          _this12._rollOverChain = new Array();
          _this12._touchPos = new Vec2();
          return _this12;
        }

        var _proto33 = InputProcessor.prototype;

        _proto33.onLoad = function onLoad() {
          this._owner = GObject.cast(this.node);
        };

        _proto33.onEnable = function onEnable() {
          var node = this.node;
          node.on(Node.EventType.TOUCH_START, this.touchBeginHandler, this);
          node.on(Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
          node.on(Node.EventType.TOUCH_END, this.touchEndHandler, this);
          node.on(Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
          node.on(Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
          node.on(Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
          node.on(Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
          node.on(Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
          this._touchListener = this.node.eventProcessor.touchListener;
        };

        _proto33.onDisable = function onDisable() {
          var node = this.node;
          node.off(Node.EventType.TOUCH_START, this.touchBeginHandler, this);
          node.off(Node.EventType.TOUCH_MOVE, this.touchMoveHandler, this);
          node.off(Node.EventType.TOUCH_END, this.touchEndHandler, this);
          node.off(Node.EventType.TOUCH_CANCEL, this.touchCancelHandler, this);
          node.off(Node.EventType.MOUSE_DOWN, this.mouseDownHandler, this);
          node.off(Node.EventType.MOUSE_MOVE, this.mouseMoveHandler, this);
          node.off(Node.EventType.MOUSE_UP, this.mouseUpHandler, this);
          node.off(Node.EventType.MOUSE_WHEEL, this.mouseWheelHandler, this);
          this._touchListener = null;
        };

        _proto33.getAllTouches = function getAllTouches(touchIds) {
          touchIds = touchIds || new Array();
          var cnt = this._touches.length;

          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1) touchIds.push(ti.touchId);
          }

          return touchIds;
        };

        _proto33.getTouchPosition = function getTouchPosition(touchId) {
          if (touchId === undefined) touchId = -1;
          var cnt = this._touches.length;

          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1 && (touchId == -1 || ti.touchId == touchId)) return ti.pos;
          }

          return Vec2.ZERO;
        };

        _proto33.getTouchTarget = function getTouchTarget() {
          var cnt = this._touches.length;

          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId != -1) return ti.target;
          }

          return null;
        };

        _proto33.addTouchMonitor = function addTouchMonitor(touchId, target) {
          var ti = this.getInfo(touchId, false);
          if (!ti) return;
          var index = ti.touchMonitors.indexOf(target);
          if (index == -1) ti.touchMonitors.push(target);
        };

        _proto33.removeTouchMonitor = function removeTouchMonitor(target) {
          var cnt = this._touches.length;

          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];

            var _index2 = ti.touchMonitors.indexOf(target);

            if (_index2 != -1) ti.touchMonitors.splice(_index2, 1);
          }
        };

        _proto33.cancelClick = function cancelClick(touchId) {
          var ti = this.getInfo(touchId, false);
          if (ti) ti.clickCancelled = true;
        };

        _proto33.simulateClick = function simulateClick(target) {
          var evt;
          evt = borrowEvent(Event.TOUCH_BEGIN, true);
          evt.initiator = target;
          evt.pos.set(target.localToGlobal());
          evt.touchId = 0;
          evt.clickCount = 1;
          evt.button = 0;
          evt._processor = this;
          if (this._captureCallback) this._captureCallback.call(this._owner, evt);
          target.node.dispatchEvent(evt);
          evt.unuse();
          evt.type = Event.TOUCH_END;
          evt.bubbles = true;
          target.node.dispatchEvent(evt);
          evt.unuse();
          evt.type = Event.CLICK;
          evt.bubbles = true;
          target.node.dispatchEvent(evt);
          returnEvent(evt);
        };

        _proto33.touchBeginHandler = function touchBeginHandler(evt) {
          var ti = this.updateInfo(evt.getID(), evt.getLocation());
          this.setBegin(ti);

          if (this._touchListener) {
            this._touchListener.setSwallowTouches(ti.target != this._owner);
          } else {
            // since cc3.4.0, setSwallowTouches removed
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }

          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_BEGIN, true);
          if (this._captureCallback) this._captureCallback.call(this._owner, evt2);
          ti.target.node.dispatchEvent(evt2);
          this.handleRollOver(ti, ti.target);
          return true;
        };

        _proto33.touchMoveHandler = function touchMoveHandler(evt) {
          var ti = this.updateInfo(evt.getID(), evt.getLocation());

          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }

          this.handleRollOver(ti, ti.target);

          if (ti.began) {
            var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_MOVE, false);
            var done = false;
            var cnt = ti.touchMonitors.length;

            for (var i = 0; i < cnt; i++) {
              var mm = ti.touchMonitors[i];
              if (mm.node == null || !mm.node.activeInHierarchy) continue;
              evt2.unuse();
              evt2.type = Event.TOUCH_MOVE;
              mm.node.dispatchEvent(evt2);
              if (mm == this._owner) done = true;
            }

            if (!done && this.node) {
              evt2.unuse();
              evt2.type = Event.TOUCH_MOVE;
              this.node.dispatchEvent(evt2);
            }

            returnEvent(evt2);
          }
        };

        _proto33.touchEndHandler = function touchEndHandler(evt) {
          var ti = this.updateInfo(evt.getID(), evt.getLocation());

          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }

          this.setEnd(ti);
          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_END, false);
          var cnt = ti.touchMonitors.length;

          for (var i = 0; i < cnt; i++) {
            var mm = ti.touchMonitors[i];
            if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || 'isAncestorOf' in mm && mm.isAncestorOf(ti.target)) continue;
            evt2.unuse();
            evt2.type = Event.TOUCH_END;
            mm.node.dispatchEvent(evt2);
          }

          ti.touchMonitors.length = 0;

          if (ti.target && ti.target.node) {
            if (ti.target instanceof GRichTextField) ti.target.node.getComponent(RichText)["_onTouchEnded"](evt);
            evt2.unuse();
            evt2.type = Event.TOUCH_END;
            evt2.bubbles = true;
            ti.target.node.dispatchEvent(evt2);
          }

          returnEvent(evt2);
          ti.target = this.clickTest(ti);

          if (ti.target) {
            evt2 = this.getEvent(ti, ti.target, Event.CLICK, true);
            ti.target.node.dispatchEvent(evt2);
            returnEvent(evt2);
          }

          if (sys.isMobile) //on mobile platform, trigger RollOut on up event, but not on PC
            this.handleRollOver(ti, null);else this.handleRollOver(ti, ti.target);
          ti.target = null;
          ti.touchId = -1;
          ti.button = -1;
        };

        _proto33.touchCancelHandler = function touchCancelHandler(evt) {
          var ti = this.updateInfo(evt.getID(), evt.getLocation());

          if (!this._touchListener) {
            var e = evt;
            e.preventSwallow = ti.target == this._owner;
          }

          var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_END, false);
          var cnt = ti.touchMonitors.length;

          for (var i = 0; i < cnt; i++) {
            var mm = ti.touchMonitors[i];
            if (mm == ti.target || mm.node == null || !mm.node.activeInHierarchy || 'isAncestorOf' in mm && mm.isAncestorOf(ti.target)) continue;
            evt2.initiator = mm;
            mm.node.dispatchEvent(evt2);
          }

          ti.touchMonitors.length = 0;

          if (ti.target && ti.target.node) {
            evt2.bubbles = true;
            ti.target.node.dispatchEvent(evt2);
          }

          returnEvent(evt2);
          this.handleRollOver(ti, null);
          ti.target = null;
          ti.touchId = -1;
          ti.button = -1;
        };

        _proto33.mouseDownHandler = function mouseDownHandler(evt) {
          var ti = this.getInfo(0, true);
          ti.button = evt.getButton();
        };

        _proto33.mouseUpHandler = function mouseUpHandler(evt) {
          var ti = this.getInfo(0, true);
          ti.button = evt.getButton();
        };

        _proto33.mouseMoveHandler = function mouseMoveHandler(evt) {
          var ti = this.getInfo(0, false);
          if (ti && Math.abs(ti.pos.x - evt.getLocationX()) < 1 && Math.abs(ti.pos.y - (UIContentScaler.rootSize.height - evt.getLocationY())) < 1) return;
          ti = this.updateInfo(0, evt.getLocation());
          this.handleRollOver(ti, ti.target);

          if (ti.began) {
            var evt2 = this.getEvent(ti, ti.target, Event.TOUCH_MOVE, false);
            var done = false;
            var cnt = ti.touchMonitors.length;

            for (var i = 0; i < cnt; i++) {
              var mm = ti.touchMonitors[i];
              if (mm.node == null || !mm.node.activeInHierarchy) continue;
              evt2.initiator = mm;
              mm.node.dispatchEvent(evt2);
              if (mm == this._owner) done = true;
            }

            if (!done && this.node) {
              evt2.initiator = this._owner;
              this.node.dispatchEvent(evt2);
              returnEvent(evt2);
            }

            returnEvent(evt2);
          }
        };

        _proto33.mouseWheelHandler = function mouseWheelHandler(evt) {
          var ti = this.updateInfo(0, evt.getLocation());
          ti.mouseWheelDelta = Math.max(evt.getScrollX(), evt.getScrollY());
          var evt2 = this.getEvent(ti, ti.target, Event.MOUSE_WHEEL, true);
          ti.target.node.dispatchEvent(evt2);
          returnEvent(evt2);
        };

        _proto33.updateInfo = function updateInfo(touchId, pos) {
          var camera = director.root.batcher2D.getFirstRenderCamera(this.node);

          if (camera) {
            s_vec3.set(pos.x, pos.y);
            camera.screenToWorld(s_vec3_2, s_vec3);

            this._touchPos.set(s_vec3_2.x, s_vec3_2.y);
          } else this._touchPos.set(pos);

          this._touchPos.y = UIContentScaler.rootSize.height - this._touchPos.y;

          var target = this._owner.hitTest(this._touchPos);

          if (!target) target = this._owner;
          var ti = this.getInfo(touchId);
          ti.target = target;
          ti.pos.set(this._touchPos);
          ti.button = EventMouse.BUTTON_LEFT;
          ti.touchId = touchId;
          return ti;
        };

        _proto33.getInfo = function getInfo(touchId, createIfNotExisits) {
          if (createIfNotExisits === undefined) createIfNotExisits = true;
          var ret = null;
          var cnt = this._touches.length;

          for (var i = 0; i < cnt; i++) {
            var ti = this._touches[i];
            if (ti.touchId == touchId) return ti;else if (ti.touchId == -1) ret = ti;
          }

          if (!ret) {
            if (!createIfNotExisits) return null;
            ret = new TouchInfo();

            this._touches.push(ret);
          }

          ret.touchId = touchId;
          return ret;
        };

        _proto33.setBegin = function setBegin(ti) {
          ti.began = true;
          ti.clickCancelled = false;
          ti.downPos.set(ti.pos);
          ti.downTargets.length = 0;
          var obj = ti.target;

          while (obj) {
            ti.downTargets.push(obj);
            obj = obj.findParent();
          }
        };

        _proto33.setEnd = function setEnd(ti) {
          ti.began = false;
          var now = game.totalTime / 1000;
          var elapsed = now - ti.lastClickTime;

          if (elapsed < 0.45) {
            if (ti.clickCount == 2) ti.clickCount = 1;else ti.clickCount++;
          } else ti.clickCount = 1;

          ti.lastClickTime = now;
        };

        _proto33.clickTest = function clickTest(ti) {
          if (ti.downTargets.length == 0 || ti.clickCancelled || Math.abs(ti.pos.x - ti.downPos.x) > 50 || Math.abs(ti.pos.y - ti.downPos.y) > 50) return null;
          var obj = ti.downTargets[0];
          if (obj && obj.node && obj.node.activeInHierarchy) return obj;
          obj = ti.target;

          while (obj) {
            var _index3 = ti.downTargets.indexOf(obj);

            if (_index3 != -1 && obj.node && obj.node.activeInHierarchy) break;
            obj = obj.findParent();
          }

          return obj;
        };

        _proto33.handleRollOver = function handleRollOver(ti, target) {
          if (ti.lastRollOver == target) return;
          var element = ti.lastRollOver;

          while (element && element.node) {
            this._rollOutChain.push(element);

            element = element.findParent();
          }

          element = target;

          while (element && element.node) {
            var i = this._rollOutChain.indexOf(element);

            if (i != -1) {
              this._rollOutChain.length = i;
              break;
            }

            this._rollOverChain.push(element);

            element = element.findParent();
          }

          ti.lastRollOver = target;
          var cnt = this._rollOutChain.length;

          for (var _i = 0; _i < cnt; _i++) {
            element = this._rollOutChain[_i];

            if (element.node && element.node.activeInHierarchy) {
              var evt = this.getEvent(ti, element, Event.ROLL_OUT, false);
              element.node.dispatchEvent(evt);
              returnEvent(evt);
            }
          }

          cnt = this._rollOverChain.length;

          for (var _i2 = 0; _i2 < cnt; _i2++) {
            element = this._rollOverChain[_i2];

            if (element.node && element.node.activeInHierarchy) {
              var _evt = this.getEvent(ti, element, Event.ROLL_OVER, false);

              element.node.dispatchEvent(_evt);
              returnEvent(_evt);
            }
          }

          this._rollOutChain.length = 0;
          this._rollOverChain.length = 0;
        };

        _proto33.getEvent = function getEvent(ti, target, type, bubbles) {
          var evt = borrowEvent(type, bubbles);
          evt.initiator = target;
          evt.pos.set(ti.pos);
          evt.touchId = ti.touchId;
          evt.clickCount = ti.clickCount;
          evt.button = ti.button;
          evt.mouseWheelDelta = ti.mouseWheelDelta;
          evt._processor = this;
          return evt;
        };

        return InputProcessor;
      }(Component);

      var TouchInfo = function TouchInfo() {
        this.pos = new Vec2();
        this.touchId = 0;
        this.clickCount = 0;
        this.mouseWheelDelta = 0;
        this.button = -1;
        this.downPos = new Vec2();
        this.began = false;
        this.clickCancelled = false;
        this.lastClickTime = 0;
        this.downTargets = new Array();
        this.touchMonitors = new Array();
      };

      var s_vec3 = new Vec3();
      var s_vec3_2 = new Vec3();

      var ControllerAction = /*#__PURE__*/function () {
        function ControllerAction() {}

        var _proto34 = ControllerAction.prototype;

        _proto34.run = function run(controller, prevPage, curPage) {
          if ((!this.fromPage || this.fromPage.length == 0 || this.fromPage.indexOf(prevPage) != -1) && (!this.toPage || this.toPage.length == 0 || this.toPage.indexOf(curPage) != -1)) this.enter(controller);else this.leave(controller);
        };

        _proto34.enter = function enter(controller) {};

        _proto34.leave = function leave(controller) {};

        _proto34.setup = function setup(buffer) {
          var cnt;
          var i;
          cnt = buffer.readShort();
          this.fromPage = [];

          for (i = 0; i < cnt; i++) this.fromPage[i] = buffer.readS();

          cnt = buffer.readShort();
          this.toPage = [];

          for (i = 0; i < cnt; i++) this.toPage[i] = buffer.readS();
        };

        return ControllerAction;
      }();

      var PlayTransitionAction = /*#__PURE__*/function (_ControllerAction) {
        _inheritsLoose(PlayTransitionAction, _ControllerAction);

        function PlayTransitionAction() {
          var _this13;

          _this13 = _ControllerAction.call(this) || this;
          _this13.playTimes = 1;
          _this13.delay = 0;
          return _this13;
        }

        var _proto35 = PlayTransitionAction.prototype;

        _proto35.enter = function enter(controller) {
          var trans = controller.parent.getTransition(this.transitionName);

          if (trans) {
            if (this._currentTransition && this._currentTransition.playing) trans.changePlayTimes(this.playTimes);else trans.play(null, this.playTimes, this.delay);
            this._currentTransition = trans;
          }
        };

        _proto35.leave = function leave(controller) {
          if (this.stopOnExit && this._currentTransition) {
            this._currentTransition.stop();

            this._currentTransition = null;
          }
        };

        _proto35.setup = function setup(buffer) {
          _ControllerAction.prototype.setup.call(this, buffer);

          this.transitionName = buffer.readS();
          this.playTimes = buffer.readInt();
          this.delay = buffer.readFloat();
          this.stopOnExit = buffer.readBool();
        };

        return PlayTransitionAction;
      }(ControllerAction);

      var ChangePageAction = /*#__PURE__*/function (_ControllerAction2) {
        _inheritsLoose(ChangePageAction, _ControllerAction2);

        function ChangePageAction() {
          return _ControllerAction2.call(this) || this;
        }

        var _proto36 = ChangePageAction.prototype;

        _proto36.enter = function enter(controller) {
          if (!this.controllerName) return;
          var gcom;
          if (this.objectId) gcom = controller.parent.getChildById(this.objectId);else gcom = controller.parent;

          if (gcom) {
            var cc = gcom.getController(this.controllerName);

            if (cc && cc != controller && !cc.changing) {
              if (this.targetPage == "~1") {
                if (controller.selectedIndex < cc.pageCount) cc.selectedIndex = controller.selectedIndex;
              } else if (this.targetPage == "~2") cc.selectedPage = controller.selectedPage;else cc.selectedPageId = this.targetPage;
            }
          }
        };

        _proto36.setup = function setup(buffer) {
          _ControllerAction2.prototype.setup.call(this, buffer);

          this.objectId = buffer.readS();
          this.controllerName = buffer.readS();
          this.targetPage = buffer.readS();
        };

        return ChangePageAction;
      }(ControllerAction);

      var _nextPageId = 0;
      var Controller = exports('Controller', /*#__PURE__*/function (_EventTarget) {
        _inheritsLoose(Controller, _EventTarget);

        function Controller() {
          var _this14;

          _this14 = _EventTarget.call(this) || this;
          _this14._pageIds = [];
          _this14._pageNames = [];
          _this14._selectedIndex = -1;
          _this14._previousIndex = -1;
          return _this14;
        }

        var _proto37 = Controller.prototype;

        _proto37.dispose = function dispose() {};

        _proto37.onChanged = function onChanged(callback, thisArg) {
          this.on(Event.STATUS_CHANGED, callback, thisArg);
        };

        _proto37.offChanged = function offChanged(callback, thisArg) {
          this.off(Event.STATUS_CHANGED, callback, thisArg);
        } //功能和设置selectedIndex一样，但不会触发事件
        ;

        _proto37.setSelectedIndex = function setSelectedIndex(value) {
          if (this._selectedIndex != value) {
            if (value > this._pageIds.length - 1) throw new Error("index out of bounds: " + value);
            this.changing = true;
            this._previousIndex = this._selectedIndex;
            this._selectedIndex = value;
            this.parent.applyController(this);
            this.changing = false;
          }
        }; //功能和设置selectedPage一样，但不会触发事件


        _proto37.setSelectedPage = function setSelectedPage(value) {
          var i = this._pageNames.indexOf(value);

          if (i == -1) i = 0;
          this.setSelectedIndex(i);
        };

        _proto37.getPageName = function getPageName(index) {
          return this._pageNames[index];
        };

        _proto37.addPage = function addPage(name) {
          name = name || "";
          this.addPageAt(name, this._pageIds.length);
        };

        _proto37.addPageAt = function addPageAt(name, index) {
          name = name || "";
          var nid = "" + _nextPageId++;

          if (index == null || index == this._pageIds.length) {
            this._pageIds.push(nid);

            this._pageNames.push(name);
          } else {
            this._pageIds.splice(index, 0, nid);

            this._pageNames.splice(index, 0, name);
          }
        };

        _proto37.removePage = function removePage(name) {
          var i = this._pageNames.indexOf(name);

          if (i != -1) {
            this._pageIds.splice(i, 1);

            this._pageNames.splice(i, 1);

            if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
          }
        };

        _proto37.removePageAt = function removePageAt(index) {
          this._pageIds.splice(index, 1);

          this._pageNames.splice(index, 1);

          if (this._selectedIndex >= this._pageIds.length) this.selectedIndex = this._selectedIndex - 1;else this.parent.applyController(this);
        };

        _proto37.clearPages = function clearPages() {
          this._pageIds.length = 0;
          this._pageNames.length = 0;
          if (this._selectedIndex != -1) this.selectedIndex = -1;else this.parent.applyController(this);
        };

        _proto37.hasPage = function hasPage(aName) {
          return this._pageNames.indexOf(aName) != -1;
        };

        _proto37.getPageIndexById = function getPageIndexById(aId) {
          return this._pageIds.indexOf(aId);
        };

        _proto37.getPageIdByName = function getPageIdByName(aName) {
          var i = this._pageNames.indexOf(aName);

          if (i != -1) return this._pageIds[i];else return null;
        };

        _proto37.getPageNameById = function getPageNameById(aId) {
          var i = this._pageIds.indexOf(aId);

          if (i != -1) return this._pageNames[i];else return null;
        };

        _proto37.getPageId = function getPageId(index) {
          return this._pageIds[index];
        };

        _proto37.runActions = function runActions() {
          if (this._actions) {
            var cnt = this._actions.length;

            for (var i = 0; i < cnt; i++) {
              this._actions[i].run(this, this.previousPageId, this.selectedPageId);
            }
          }
        };

        _proto37.setup = function setup(buffer) {
          var beginPos = buffer.position;
          buffer.seek(beginPos, 0);
          this.name = buffer.readS();
          if (buffer.readBool()) this.autoRadioGroupDepth = true;
          buffer.seek(beginPos, 1);
          var i;
          var nextPos;
          var cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) {
            this._pageIds.push(buffer.readS());

            this._pageNames.push(buffer.readS());
          }

          var homePageIndex = 0;

          if (buffer.version >= 2) {
            var homePageType = buffer.readByte();

            switch (homePageType) {
              case 1:
                homePageIndex = buffer.readShort();
                break;

              case 2:
                homePageIndex = this._pageNames.indexOf(UIPackage.branch);
                if (homePageIndex == -1) homePageIndex = 0;
                break;

              case 3:
                homePageIndex = this._pageNames.indexOf(UIPackage.getVar(buffer.readS()));
                if (homePageIndex == -1) homePageIndex = 0;
                break;
            }
          }

          buffer.seek(beginPos, 2);
          cnt = buffer.readShort();

          if (cnt > 0) {
            if (!this._actions) this._actions = new Array();

            for (i = 0; i < cnt; i++) {
              nextPos = buffer.readShort();
              nextPos += buffer.position;
              var action = createAction(buffer.readByte());
              action.setup(buffer);

              this._actions.push(action);

              buffer.position = nextPos;
            }
          }

          if (this.parent && this._pageIds.length > 0) this._selectedIndex = homePageIndex;else this._selectedIndex = -1;
        };

        _createClass(Controller, [{
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          },
          set: function set(value) {
            if (this._selectedIndex != value) {
              if (value > this._pageIds.length - 1) throw new Error("index out of bounds: " + value);
              this.changing = true;
              this._previousIndex = this._selectedIndex;
              this._selectedIndex = value;
              this.parent.applyController(this);
              this.emit(Event.STATUS_CHANGED, this);
              this.changing = false;
            }
          }
        }, {
          key: "previsousIndex",
          get: function get() {
            return this._previousIndex;
          }
        }, {
          key: "selectedPage",
          get: function get() {
            if (this._selectedIndex == -1) return null;else return this._pageNames[this._selectedIndex];
          },
          set: function set(val) {
            var i = this._pageNames.indexOf(val);

            if (i == -1) i = 0;
            this.selectedIndex = i;
          }
        }, {
          key: "previousPage",
          get: function get() {
            if (this._previousIndex == -1) return null;else return this._pageNames[this._previousIndex];
          }
        }, {
          key: "pageCount",
          get: function get() {
            return this._pageIds.length;
          }
        }, {
          key: "selectedPageId",
          get: function get() {
            if (this._selectedIndex == -1) return null;else return this._pageIds[this._selectedIndex];
          },
          set: function set(val) {
            var i = this._pageIds.indexOf(val);

            this.selectedIndex = i;
          }
        }, {
          key: "oppositePageId",
          set: function set(val) {
            var i = this._pageIds.indexOf(val);

            if (i > 0) this.selectedIndex = 0;else if (this._pageIds.length > 1) this.selectedIndex = 1;
          }
        }, {
          key: "previousPageId",
          get: function get() {
            if (this._previousIndex == -1) return null;else return this._pageIds[this._previousIndex];
          }
        }]);

        return Controller;
      }(EventTarget));

      function createAction(type) {
        switch (type) {
          case 0:
            return new PlayTransitionAction();

          case 1:
            return new ChangePageAction();
        }

        return null;
      }

      var Margin = /*#__PURE__*/function () {
        function Margin() {
          this.left = 0;
          this.right = 0;
          this.top = 0;
          this.bottom = 0;
        }

        var _proto38 = Margin.prototype;

        _proto38.copy = function copy(source) {
          this.top = source.top;
          this.bottom = source.bottom;
          this.left = source.left;
          this.right = source.right;
        };

        _proto38.isNone = function isNone() {
          return this.left == 0 && this.right == 0 && this.top == 0 && this.bottom == 0;
        };

        return Margin;
      }();

      var ScrollPane = exports('ScrollPane', (_dec = ccclass('ScrollPane'), _dec(_class = /*#__PURE__*/function (_Component2) {
        _inheritsLoose(ScrollPane, _Component2);

        function ScrollPane() {
          var _this15;

          _this15 = _Component2.apply(this, arguments) || this;
          _this15._aniFlag = 0;
          return _this15;
        }

        var _proto39 = ScrollPane.prototype;

        _proto39.setup = function setup(buffer) {
          var o = this._owner = GObject.cast(this.node);
          this._maskContainer = new Node("ScrollPane");
          this._maskContainer.layer = UIConfig.defaultUILayer;
          this._maskContainerUITrans = this._maskContainer.addComponent(UITransform);

          this._maskContainerUITrans.setAnchorPoint(0, 1);

          this._maskContainer.parent = o.node;
          this._container = o._container;
          this._container.parent = this._maskContainer;
          this._scrollBarMargin = new Margin();
          this._mouseWheelEnabled = true;
          this._xPos = 0;
          this._yPos = 0;
          this._aniFlag = 0;
          this._tweening = 0;
          this._footerLockedSize = 0;
          this._headerLockedSize = 0;
          this._viewSize = new Vec2();
          this._contentSize = new Vec2();
          this._pageSize = new Vec2(1, 1);
          this._overlapSize = new Vec2();
          this._tweenTime = new Vec2();
          this._tweenStart = new Vec2();
          this._tweenDuration = new Vec2();
          this._tweenChange = new Vec2();
          this._velocity = new Vec2();
          this._containerPos = new Vec2();
          this._beginTouchPos = new Vec2();
          this._lastTouchPos = new Vec2();
          this._lastTouchGlobalPos = new Vec2();
          this._scrollStep = UIConfig.defaultScrollStep;
          this._mouseWheelStep = this._scrollStep * 2;
          this._decelerationRate = UIConfig.defaultScrollDecelerationRate;
          this._snappingPolicy = 0;
          o.on(Event.TOUCH_BEGIN, this.onTouchBegin, this);
          o.on(Event.TOUCH_MOVE, this.onTouchMove, this);
          o.on(Event.TOUCH_END, this.onTouchEnd, this);
          o.on(Event.MOUSE_WHEEL, this.onMouseWheel, this);
          this._scrollType = buffer.readByte();
          var scrollBarDisplay = buffer.readByte();
          var flags = buffer.readInt();

          if (buffer.readBool()) {
            this._scrollBarMargin.top = buffer.readInt();
            this._scrollBarMargin.bottom = buffer.readInt();
            this._scrollBarMargin.left = buffer.readInt();
            this._scrollBarMargin.right = buffer.readInt();
          }

          var vtScrollBarRes = buffer.readS();
          var hzScrollBarRes = buffer.readS();
          var headerRes = buffer.readS();
          var footerRes = buffer.readS();
          if ((flags & 1) != 0) this._displayOnLeft = true;
          if ((flags & 2) != 0) this._snapToItem = true;
          if ((flags & 4) != 0) this._displayInDemand = true;
          if ((flags & 8) != 0) this._pageMode = true;
          if (flags & 16) this._touchEffect = true;else if (flags & 32) this._touchEffect = false;else this._touchEffect = UIConfig.defaultScrollTouchEffect;
          if (flags & 64) this._bouncebackEffect = true;else if (flags & 128) this._bouncebackEffect = false;else this._bouncebackEffect = UIConfig.defaultScrollBounceEffect;
          if ((flags & 256) != 0) this._inertiaDisabled = true;
          if ((flags & 512) != 0) this._dontClip = true;
          if ((flags & 1024) != 0) this._floating = true;
          if ((flags & 2048) != 0) this._dontClipMargin = true;
          if (!this._dontClip) this._maskContainer.addComponent(Mask);
          if (scrollBarDisplay == ScrollBarDisplayType.Default) scrollBarDisplay = UIConfig.defaultScrollBarDisplay;

          if (scrollBarDisplay != ScrollBarDisplayType.Hidden) {
            if (this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Vertical) {
              var res = vtScrollBarRes ? vtScrollBarRes : UIConfig.verticalScrollBar;

              if (res) {
                this._vtScrollBar = UIPackage.createObjectFromURL(res);
                if (!this._vtScrollBar) throw new Error("cannot create scrollbar from " + res);

                this._vtScrollBar.setScrollPane(this, true);

                this._vtScrollBar.node.parent = o.node;
              }
            }

            if (this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Horizontal) {
              var res = hzScrollBarRes ? hzScrollBarRes : UIConfig.horizontalScrollBar;

              if (res) {
                this._hzScrollBar = UIPackage.createObjectFromURL(res);
                if (!this._hzScrollBar) throw new Error("cannot create scrollbar from " + res);

                this._hzScrollBar.setScrollPane(this, false);

                this._hzScrollBar.node.parent = o.node;
              }
            }

            if (scrollBarDisplay == ScrollBarDisplayType.Auto) this._scrollBarDisplayAuto = true;

            if (this._scrollBarDisplayAuto) {
              if (this._vtScrollBar) this._vtScrollBar.node.active = false;
              if (this._hzScrollBar) this._hzScrollBar.node.active = false;
              o.on(Event.ROLL_OVER, this.onRollOver, this);
              o.on(Event.ROLL_OUT, this.onRollOut, this);
            }
          }

          if (headerRes) {
            this._header = UIPackage.createObjectFromURL(headerRes);
            if (this._header == null) throw new Error("cannot create scrollPane header from " + headerRes);else this._maskContainer.insertChild(this._header.node, 0);
          }

          if (footerRes) {
            this._footer = UIPackage.createObjectFromURL(footerRes);
            if (this._footer == null) throw new Error("cannot create scrollPane footer from " + footerRes);else this._maskContainer.insertChild(this._footer.node, 0);
          }

          this._refreshBarAxis = this._scrollType == ScrollType.Both || this._scrollType == ScrollType.Vertical ? "y" : "x";
          this.setSize(o.width, o.height);
        };

        _proto39.onDestroy = function onDestroy() {
          delete this._pageController;
          if (this._hzScrollBar) this._hzScrollBar.dispose();
          if (this._vtScrollBar) this._vtScrollBar.dispose();
          if (this._header) this._header.dispose();
          if (this._footer) this._footer.dispose();
        };

        _proto39.hitTest = function hitTest(pt, globalPt) {
          var target;

          if (this._vtScrollBar) {
            target = this._vtScrollBar.hitTest(globalPt);
            if (target) return target;
          }

          if (this._hzScrollBar) {
            target = this._hzScrollBar.hitTest(globalPt);
            if (target) return target;
          }

          if (this._header && this._header.node.activeInHierarchy) {
            target = this._header.hitTest(globalPt);
            if (target) return target;
          }

          if (this._footer && this._footer.node.activeInHierarchy) {
            target = this._footer.hitTest(globalPt);
            if (target) return target;
          }

          if (this._dontClip) return this._owner;else if (this._dontClipMargin) {
            if (pt.x >= 0 && pt.y >= 0 && pt.x < this._owner.width && pt.y < this._owner.height) return this._owner;
          } else {
            if (pt.x >= this._owner.margin.left && pt.y >= this._owner.margin.top && pt.x < this._owner.margin.left + this._viewSize.x && pt.y < this._owner.margin.top + this._viewSize.y) return this._owner;
          }
          return null;
        };

        _proto39.setPercX = function setPercX(value, ani) {
          this._owner.ensureBoundsCorrect();

          this.setPosX(this._overlapSize.x * math.clamp01(value), ani);
        };

        _proto39.setPercY = function setPercY(value, ani) {
          this._owner.ensureBoundsCorrect();

          this.setPosY(this._overlapSize.y * math.clamp01(value), ani);
        };

        _proto39.setPosX = function setPosX(value, ani) {
          this._owner.ensureBoundsCorrect();

          if (this._loop == 1) value = this.loopCheckingNewPos(value, "x");
          value = math.clamp(value, 0, this._overlapSize.x);

          if (value != this._xPos) {
            this._xPos = value;
            this.posChanged(ani);
          }
        };

        _proto39.setPosY = function setPosY(value, ani) {
          this._owner.ensureBoundsCorrect();

          if (this._loop == 1) value = this.loopCheckingNewPos(value, "y");
          value = math.clamp(value, 0, this._overlapSize.y);

          if (value != this._yPos) {
            this._yPos = value;
            this.posChanged(ani);
          }
        };

        _proto39.setCurrentPageX = function setCurrentPageX(value, ani) {
          if (!this._pageMode) return;

          this._owner.ensureBoundsCorrect();

          if (this._overlapSize.x > 0) this.setPosX(value * this._pageSize.x, ani);
        };

        _proto39.setCurrentPageY = function setCurrentPageY(value, ani) {
          if (!this._pageMode) return;

          this._owner.ensureBoundsCorrect();

          if (this._overlapSize.y > 0) this.setPosY(value * this._pageSize.y, ani);
        };

        _proto39.scrollTop = function scrollTop(ani) {
          this.setPercY(0, ani);
        };

        _proto39.scrollBottom = function scrollBottom(ani) {
          this.setPercY(1, ani);
        };

        _proto39.scrollUp = function scrollUp(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosY(this._yPos - this._pageSize.y * ratio, ani);else this.setPosY(this._yPos - this._scrollStep * ratio, ani);
        };

        _proto39.scrollDown = function scrollDown(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * ratio, ani);else this.setPosY(this._yPos + this._scrollStep * ratio, ani);
        };

        _proto39.scrollLeft = function scrollLeft(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosX(this._xPos - this._pageSize.x * ratio, ani);else this.setPosX(this._xPos - this._scrollStep * ratio, ani);
        };

        _proto39.scrollRight = function scrollRight(ratio, ani) {
          if (ratio == undefined) ratio = 1;
          if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * ratio, ani);else this.setPosX(this._xPos + this._scrollStep * ratio, ani);
        };

        _proto39.scrollToView = function scrollToView(target, ani, setFirst) {
          this._owner.ensureBoundsCorrect();

          if (this._needRefresh) this.refresh();
          var rect;

          if (target instanceof GObject) {
            if (target.parent != this._owner) {
              target.parent.localToGlobalRect(target.x, target.y, target.width, target.height, s_rect);
              rect = this._owner.globalToLocalRect(s_rect.x, s_rect.y, s_rect.width, s_rect.height, s_rect);
            } else {
              rect = s_rect;
              rect.x = target.x;
              rect.y = target.y;
              rect.width = target.width;
              rect.height = target.height;
            }
          } else rect = target;

          if (this._overlapSize.y > 0) {
            var bottom = this._yPos + this._viewSize.y;

            if (setFirst || rect.y <= this._yPos || rect.height >= this._viewSize.y) {
              if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else this.setPosY(rect.y, ani);
            } else if (rect.y + rect.height > bottom) {
              if (this._pageMode) this.setPosY(Math.floor(rect.y / this._pageSize.y) * this._pageSize.y, ani);else if (rect.height <= this._viewSize.y / 2) this.setPosY(rect.y + rect.height * 2 - this._viewSize.y, ani);else this.setPosY(rect.y + rect.height - this._viewSize.y, ani);
            }
          }

          if (this._overlapSize.x > 0) {
            var right = this._xPos + this._viewSize.x;

            if (setFirst || rect.x <= this._xPos || rect.width >= this._viewSize.x) {
              if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else this.setPosX(rect.x, ani);
            } else if (rect.x + rect.width > right) {
              if (this._pageMode) this.setPosX(Math.floor(rect.x / this._pageSize.x) * this._pageSize.x, ani);else if (rect.width <= this._viewSize.x / 2) this.setPosX(rect.x + rect.width * 2 - this._viewSize.x, ani);else this.setPosX(rect.x + rect.width - this._viewSize.x, ani);
            }
          }

          if (!ani && this._needRefresh) this.refresh();
        };

        _proto39.isChildInView = function isChildInView(obj) {
          if (this._overlapSize.y > 0) {
            var dist = obj.y + -this._container.position.y;
            if (dist < -obj.height || dist > this._viewSize.y) return false;
          }

          if (this._overlapSize.x > 0) {
            dist = obj.x + this._container.position.x;
            if (dist < -obj.width || dist > this._viewSize.x) return false;
          }

          return true;
        };

        _proto39.cancelDragging = function cancelDragging() {
          if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
          _gestureFlag = 0;
          this._dragged = false;
        };

        _proto39.lockHeader = function lockHeader(size) {
          if (this._headerLockedSize == size) return;
          var cx = this._container.position.x;
          var cy = -this._container.position.y;
          var cr = this._refreshBarAxis == "x" ? cx : cy;
          this._headerLockedSize = size;

          if (!this._refreshEventDispatching && cr >= 0) {
            this._tweenStart.x = cx;
            this._tweenStart.y = cy;

            this._tweenChange.set(Vec2.ZERO);

            this._tweenChange[this._refreshBarAxis] = this._headerLockedSize - this._tweenStart[this._refreshBarAxis];
            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
            this.startTween(2);
          }
        };

        _proto39.lockFooter = function lockFooter(size) {
          if (this._footerLockedSize == size) return;
          var cx = this._container.position.x;
          var cy = -this._container.position.y;
          var cr = this._refreshBarAxis == "x" ? cx : cy;
          this._footerLockedSize = size;

          if (!this._refreshEventDispatching && cr <= -this._overlapSize[this._refreshBarAxis]) {
            this._tweenStart.x = cx;
            this._tweenStart.y = cy;

            this._tweenChange.set(Vec2.ZERO);

            var max = this._overlapSize[this._refreshBarAxis];
            if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
            this._tweenChange[this._refreshBarAxis] = -max - this._tweenStart[this._refreshBarAxis];
            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
            this.startTween(2);
          }
        };

        _proto39.onOwnerSizeChanged = function onOwnerSizeChanged() {
          this.setSize(this._owner.width, this._owner.height);
          this.posChanged(false);
        };

        _proto39.handleControllerChanged = function handleControllerChanged(c) {
          if (this._pageController == c) {
            if (this._scrollType == ScrollType.Horizontal) this.setCurrentPageX(c.selectedIndex, true);else this.setCurrentPageY(c.selectedIndex, true);
          }
        };

        _proto39.updatePageController = function updatePageController() {
          if (this._pageController && !this._pageController.changing) {
            var index;
            if (this._scrollType == ScrollType.Horizontal) index = this.currentPageX;else index = this.currentPageY;

            if (index < this._pageController.pageCount) {
              var c = this._pageController;
              this._pageController = null; //防止HandleControllerChanged的调用

              c.selectedIndex = index;
              this._pageController = c;
            }
          }
        };

        _proto39.adjustMaskContainer = function adjustMaskContainer() {
          var mx = 0;
          if (this._displayOnLeft && this._vtScrollBar && !this._floating) mx = this._vtScrollBar.width;
          var o = this._owner;
          if (this._dontClipMargin) this._maskContainerUITrans.setAnchorPoint((o.margin.left + o._alignOffset.x) / o.width, 1 - (o.margin.top + o._alignOffset.y) / o.height);else this._maskContainerUITrans.setAnchorPoint(o._alignOffset.x / this._viewSize.x, 1 - o._alignOffset.y / this._viewSize.y);
          if (o._customMask) this._maskContainer.setPosition(mx + o._alignOffset.x, -o._alignOffset.y);else this._maskContainer.setPosition(o._pivotCorrectX + mx + o._alignOffset.x, o._pivotCorrectY - o._alignOffset.y);
        };

        _proto39.setSize = function setSize(aWidth, aHeight) {
          if (this._hzScrollBar) {
            this._hzScrollBar.y = aHeight - this._hzScrollBar.height;

            if (this._vtScrollBar) {
              this._hzScrollBar.width = aWidth - this._vtScrollBar.width - this._scrollBarMargin.left - this._scrollBarMargin.right;
              if (this._displayOnLeft) this._hzScrollBar.x = this._scrollBarMargin.left + this._vtScrollBar.width;else this._hzScrollBar.x = this._scrollBarMargin.left;
            } else {
              this._hzScrollBar.width = aWidth - this._scrollBarMargin.left - this._scrollBarMargin.right;
              this._hzScrollBar.x = this._scrollBarMargin.left;
            }
          }

          if (this._vtScrollBar) {
            if (!this._displayOnLeft) this._vtScrollBar.x = aWidth - this._vtScrollBar.width;
            if (this._hzScrollBar) this._vtScrollBar.height = aHeight - this._hzScrollBar.height - this._scrollBarMargin.top - this._scrollBarMargin.bottom;else this._vtScrollBar.height = aHeight - this._scrollBarMargin.top - this._scrollBarMargin.bottom;
            this._vtScrollBar.y = this._scrollBarMargin.top;
          }

          this._viewSize.x = aWidth;
          this._viewSize.y = aHeight;
          if (this._hzScrollBar && !this._floating) this._viewSize.y -= this._hzScrollBar.height;
          if (this._vtScrollBar && !this._floating) this._viewSize.x -= this._vtScrollBar.width;
          this._viewSize.x -= this._owner.margin.left + this._owner.margin.right;
          this._viewSize.y -= this._owner.margin.top + this._owner.margin.bottom;
          this._viewSize.x = Math.max(1, this._viewSize.x);
          this._viewSize.y = Math.max(1, this._viewSize.y);
          this._pageSize.x = this._viewSize.x;
          this._pageSize.y = this._viewSize.y;
          this.adjustMaskContainer();
          this.handleSizeChanged();
        };

        _proto39.setContentSize = function setContentSize(aWidth, aHeight) {
          if (this._contentSize.x == aWidth && this._contentSize.y == aHeight) return;
          this._contentSize.x = aWidth;
          this._contentSize.y = aHeight;
          this.handleSizeChanged();
          if (this._snapToItem && this._snappingPolicy != 0 && this._xPos == 0 && this._yPos == 0) this.posChanged(false);
        };

        _proto39.changeContentSizeOnScrolling = function changeContentSizeOnScrolling(deltaWidth, deltaHeight, deltaPosX, deltaPosY) {
          var isRightmost = this._xPos == this._overlapSize.x;
          var isBottom = this._yPos == this._overlapSize.y;
          this._contentSize.x += deltaWidth;
          this._contentSize.y += deltaHeight;
          this.handleSizeChanged();

          if (this._tweening == 1) {
            //如果原来滚动位置是贴边，加入处理继续贴边。
            if (deltaWidth != 0 && isRightmost && this._tweenChange.x < 0) {
              this._xPos = this._overlapSize.x;
              this._tweenChange.x = -this._xPos - this._tweenStart.x;
            }

            if (deltaHeight != 0 && isBottom && this._tweenChange.y < 0) {
              this._yPos = this._overlapSize.y;
              this._tweenChange.y = -this._yPos - this._tweenStart.y;
            }
          } else if (this._tweening == 2) {
            //重新调整起始位置，确保能够顺滑滚下去
            if (deltaPosX != 0) {
              this._container.setPosition(this._container.position.x - deltaPosX, this._container.position.y);

              this._tweenStart.x -= deltaPosX;
              this._xPos = -this._container.position.x;
            }

            if (deltaPosY != 0) {
              this._container.setPosition(this._container.position.x, this._container.position.y + deltaPosY);

              this._tweenStart.y -= deltaPosY;
              this._yPos = - -this._container.position.y;
            }
          } else if (this._dragged) {
            if (deltaPosX != 0) {
              this._container.setPosition(this._container.position.x - deltaPosX, this._container.position.y);

              this._containerPos.x -= deltaPosX;
              this._xPos = -this._container.position.x;
            }

            if (deltaPosY != 0) {
              this._container.setPosition(this._container.position.x, this._container.position.y + deltaPosY);

              this._containerPos.y -= deltaPosY;
              this._yPos = - -this._container.position.y;
            }
          } else {
            //如果原来滚动位置是贴边，加入处理继续贴边。
            if (deltaWidth != 0 && isRightmost) {
              this._xPos = this._overlapSize.x;

              this._container.setPosition(-this._xPos, this._container.position.y);
            }

            if (deltaHeight != 0 && isBottom) {
              this._yPos = this._overlapSize.y;

              this._container.setPosition(this._container.position.x, this._yPos);
            }
          }

          if (this._pageMode) this.updatePageController();
        };

        _proto39.handleSizeChanged = function handleSizeChanged() {
          if (this._displayInDemand) {
            this._vScrollNone = this._contentSize.y <= this._viewSize.y;
            this._hScrollNone = this._contentSize.x <= this._viewSize.x;
          }

          if (this._vtScrollBar) {
            if (this._contentSize.y == 0) this._vtScrollBar.setDisplayPerc(0);else this._vtScrollBar.setDisplayPerc(Math.min(1, this._viewSize.y / this._contentSize.y));
          }

          if (this._hzScrollBar) {
            if (this._contentSize.x == 0) this._hzScrollBar.setDisplayPerc(0);else this._hzScrollBar.setDisplayPerc(Math.min(1, this._viewSize.x / this._contentSize.x));
          }

          this.updateScrollBarVisible();
          var maskWidth = this._viewSize.x;
          var maskHeight = this._viewSize.y;
          if (this._vScrollNone && this._vtScrollBar) maskWidth += this._vtScrollBar.width;
          if (this._hScrollNone && this._hzScrollBar) maskHeight += this._hzScrollBar.height;

          if (this._dontClipMargin) {
            maskWidth += this._owner.margin.left + this._owner.margin.right;
            maskHeight += this._owner.margin.top + this._owner.margin.bottom;
          }

          this._maskContainerUITrans.setContentSize(maskWidth, maskHeight);

          if (this._vtScrollBar) this._vtScrollBar.handlePositionChanged();
          if (this._hzScrollBar) this._hzScrollBar.handlePositionChanged();
          if (this._header) this._header.handlePositionChanged();
          if (this._footer) this._footer.handlePositionChanged();
          if (this._scrollType == ScrollType.Horizontal || this._scrollType == ScrollType.Both) this._overlapSize.x = Math.ceil(Math.max(0, this._contentSize.x - this._viewSize.x));else this._overlapSize.x = 0;
          if (this._scrollType == ScrollType.Vertical || this._scrollType == ScrollType.Both) this._overlapSize.y = Math.ceil(Math.max(0, this._contentSize.y - this._viewSize.y));else this._overlapSize.y = 0; //边界检查

          this._xPos = math.clamp(this._xPos, 0, this._overlapSize.x);
          this._yPos = math.clamp(this._yPos, 0, this._overlapSize.y);
          var max = this._overlapSize[this._refreshBarAxis];
          if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
          if (this._refreshBarAxis == "x") this._container.setPosition(math.clamp(this._container.position.x, -max, this._headerLockedSize), -math.clamp(-this._container.position.y, -this._overlapSize.y, 0));else this._container.setPosition(math.clamp(this._container.position.x, -this._overlapSize.x, 0), -math.clamp(-this._container.position.y, -max, this._headerLockedSize));

          if (this._header) {
            if (this._refreshBarAxis == "x") this._header.height = this._viewSize.y;else this._header.width = this._viewSize.x;
          }

          if (this._footer) {
            if (this._refreshBarAxis == "y") this._footer.height = this._viewSize.y;else this._footer.width = this._viewSize.x;
          }

          this.updateScrollBarPos();
          if (this._pageMode) this.updatePageController();
        };

        _proto39.posChanged = function posChanged(ani) {
          if (this._aniFlag == 0) this._aniFlag = ani ? 1 : -1;else if (this._aniFlag == 1 && !ani) this._aniFlag = -1;
          this._needRefresh = true;
          if (!director.getScheduler().isScheduled(this.refresh, this)) this.scheduleOnce(this.refresh);
        };

        _proto39.refresh = function refresh(dt) {
          this._needRefresh = false;
          this.unschedule(this.refresh);

          if (this._pageMode || this._snapToItem) {
            sEndPos.x = -this._xPos;
            sEndPos.y = -this._yPos;
            this.alignPosition(sEndPos, false);
            this._xPos = -sEndPos.x;
            this._yPos = -sEndPos.y;
          }

          this.refresh2();

          this._owner.node.emit(Event.SCROLL, this._owner);

          if (this._needRefresh) //在onScroll事件里开发者可能修改位置，这里再刷新一次，避免闪烁
            {
              this._needRefresh = false;
              this.unschedule(this.refresh);
              this.refresh2();
            }

          this.updateScrollBarPos();
          this._aniFlag = 0;
        };

        _proto39.refresh2 = function refresh2() {
          if (this._aniFlag == 1 && !this._dragged) {
            var posX;
            var posY;
            if (this._overlapSize.x > 0) posX = -Math.floor(this._xPos);else {
              if (this._container.position.x != 0) this._container.setPosition(0, this._container.position.y);
              posX = 0;
            }
            if (this._overlapSize.y > 0) posY = -Math.floor(this._yPos);else {
              if (this._container.position.y != 0) this._container.setPosition(this._container.position.x, 0);
              posY = 0;
            }

            if (posX != this._container.position.x || posY != -this._container.position.y) {
              this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_GO;
              this._tweenStart.x = this._container.position.x;
              this._tweenStart.y = -this._container.position.y;
              this._tweenChange.x = posX - this._tweenStart.x;
              this._tweenChange.y = posY - this._tweenStart.y;
              this.startTween(1);
            } else if (this._tweening != 0) this.killTween();
          } else {
            if (this._tweening != 0) this.killTween();

            this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));

            this.loopCheckingCurrent();
          }

          if (this._pageMode) this.updatePageController();
        };

        _proto39.onTouchBegin = function onTouchBegin(evt) {
          if (!this._touchEffect) return;
          evt.captureTouch();

          if (this._tweening != 0) {
            this.killTween();
            Decls$1.GRoot.inst.inputProcessor.cancelClick(evt.touchId);
            this._dragged = true;
          } else this._dragged = false;

          var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$3);

          this._containerPos.x = this._container.position.x;
          this._containerPos.y = -this._container.position.y;

          this._beginTouchPos.set(pt);

          this._lastTouchPos.set(pt);

          this._lastTouchGlobalPos.set(evt.pos);

          this._isHoldAreaDone = false;

          this._velocity.set(Vec2.ZERO);

          this._velocityScale = 1;
          this._lastMoveTime = game.totalTime / 1000;
        };

        _proto39.onTouchMove = function onTouchMove(evt) {
          if (!isValid(this._owner.node)) return;
          if (!this._touchEffect) return;
          if (GObject.draggingObject && GObject.draggingObject.onStage) return;
          if (ScrollPane.draggingPane && ScrollPane.draggingPane != this && ScrollPane.draggingPane._owner.onStage) return;

          var pt = this._owner.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$3);

          var sensitivity = UIConfig.touchScrollSensitivity;
          var diff, diff2;
          var sv, sh;

          if (this._scrollType == ScrollType.Vertical) {
            if (!this._isHoldAreaDone) {
              //表示正在监测垂直方向的手势
              _gestureFlag |= 1;
              diff = Math.abs(this._beginTouchPos.y - pt.y);
              if (diff < sensitivity) return;

              if ((_gestureFlag & 2) != 0) //已经有水平方向的手势在监测，那么我们用严格的方式检查是不是按垂直方向移动，避免冲突
                {
                  diff2 = Math.abs(this._beginTouchPos.x - pt.x);
                  if (diff < diff2) //不通过则不允许滚动了
                    return;
                }
            }

            sv = true;
          } else if (this._scrollType == ScrollType.Horizontal) {
            if (!this._isHoldAreaDone) {
              _gestureFlag |= 2;
              diff = Math.abs(this._beginTouchPos.x - pt.x);
              if (diff < sensitivity) return;

              if ((_gestureFlag & 1) != 0) {
                diff2 = Math.abs(this._beginTouchPos.y - pt.y);
                if (diff < diff2) return;
              }
            }

            sh = true;
          } else {
            _gestureFlag = 3;

            if (!this._isHoldAreaDone) {
              diff = Math.abs(this._beginTouchPos.y - pt.y);

              if (diff < sensitivity) {
                diff = Math.abs(this._beginTouchPos.x - pt.x);
                if (diff < sensitivity) return;
              }
            }

            sv = sh = true;
          }

          var newPosX = Math.floor(this._containerPos.x + pt.x - this._beginTouchPos.x);
          var newPosY = Math.floor(this._containerPos.y + pt.y - this._beginTouchPos.y);

          if (sv) {
            if (newPosY > 0) {
              if (!this._bouncebackEffect) this._container.setPosition(this._container.position.x, 0);else if (this._header && this._header.maxHeight != 0) this._container.setPosition(this._container.position.x, -Math.floor(Math.min(newPosY * 0.5, this._header.maxHeight)));else this._container.setPosition(this._container.position.x, -Math.floor(Math.min(newPosY * 0.5, this._viewSize.y * PULL_RATIO)));
            } else if (newPosY < -this._overlapSize.y) {
              if (!this._bouncebackEffect) this._container.setPosition(this._container.position.x, this._overlapSize.y);else if (this._footer && this._footer.maxHeight > 0) this._container.setPosition(this._container.position.x, -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._footer.maxHeight) - this._overlapSize.y));else this._container.setPosition(this._container.position.x, -Math.floor(Math.max((newPosY + this._overlapSize.y) * 0.5, -this._viewSize.y * PULL_RATIO) - this._overlapSize.y));
            } else this._container.setPosition(this._container.position.x, -newPosY);
          }

          if (sh) {
            if (newPosX > 0) {
              if (!this._bouncebackEffect) this._container.setPosition(0, this._container.position.y);else if (this._header && this._header.maxWidth != 0) this._container.setPosition(Math.floor(Math.min(newPosX * 0.5, this._header.maxWidth)), this._container.position.y);else this._container.setPosition(Math.floor(Math.min(newPosX * 0.5, this._viewSize.x * PULL_RATIO)), this._container.position.y);
            } else if (newPosX < 0 - this._overlapSize.x) {
              if (!this._bouncebackEffect) this._container.setPosition(-this._overlapSize.x, this._container.position.y);else if (this._footer && this._footer.maxWidth > 0) this._container.setPosition(Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._footer.maxWidth) - this._overlapSize.x), this._container.position.y);else this._container.setPosition(Math.floor(Math.max((newPosX + this._overlapSize.x) * 0.5, -this._viewSize.x * PULL_RATIO) - this._overlapSize.x), this._container.position.y);
            } else this._container.setPosition(newPosX, this._container.position.y);
          } //更新速度


          var now = game.totalTime / 1000;
          var deltaTime = Math.max(now - this._lastMoveTime, 1 / 60);
          var deltaPositionX = pt.x - this._lastTouchPos.x;
          var deltaPositionY = pt.y - this._lastTouchPos.y;
          if (!sh) deltaPositionX = 0;
          if (!sv) deltaPositionY = 0;

          if (deltaTime != 0) {
            var frameRate = 60;
            var elapsed = deltaTime * frameRate - 1;

            if (elapsed > 1) //速度衰减
              {
                var factor = Math.pow(0.833, elapsed);
                this._velocity.x = this._velocity.x * factor;
                this._velocity.y = this._velocity.y * factor;
              }

            this._velocity.x = math.lerp(this._velocity.x, deltaPositionX * 60 / frameRate / deltaTime, deltaTime * 10);
            this._velocity.y = math.lerp(this._velocity.y, deltaPositionY * 60 / frameRate / deltaTime, deltaTime * 10);
          }
          /*速度计算使用的是本地位移，但在后续的惯性滚动判断中需要用到屏幕位移，所以这里要记录一个位移的比例。
          */


          var deltaGlobalPositionX = this._lastTouchGlobalPos.x - evt.pos.x;
          var deltaGlobalPositionY = this._lastTouchGlobalPos.y - evt.pos.y;
          if (deltaPositionX != 0) this._velocityScale = Math.abs(deltaGlobalPositionX / deltaPositionX);else if (deltaPositionY != 0) this._velocityScale = Math.abs(deltaGlobalPositionY / deltaPositionY);

          this._lastTouchPos.set(pt);

          this._lastTouchGlobalPos.set(evt.pos);

          this._lastMoveTime = now; //同步更新pos值

          if (this._overlapSize.x > 0) this._xPos = math.clamp(-this._container.position.x, 0, this._overlapSize.x);
          if (this._overlapSize.y > 0) this._yPos = math.clamp(- -this._container.position.y, 0, this._overlapSize.y); //循环滚动特别检查

          if (this._loop != 0) {
            newPosX = this._container.position.x;
            newPosY = -this._container.position.y;

            if (this.loopCheckingCurrent()) {
              this._containerPos.x += this._container.position.x - newPosX;
              this._containerPos.y += -this._container.position.y - newPosY;
            }
          }

          ScrollPane.draggingPane = this;
          this._isHoldAreaDone = true;
          this._dragged = true;
          this.updateScrollBarPos();
          this.updateScrollBarVisible();
          if (this._pageMode) this.updatePageController();

          this._owner.node.emit(Event.SCROLL);
        };

        _proto39.onTouchEnd = function onTouchEnd(evt) {
          if (ScrollPane.draggingPane == this) ScrollPane.draggingPane = null;
          _gestureFlag = 0;

          if (!this._dragged || !this._touchEffect || !this._owner.node.activeInHierarchy) {
            this._dragged = false;
            return;
          }

          this._dragged = false;
          this._tweenStart.x = this._container.position.x;
          this._tweenStart.y = -this._container.position.y;
          sEndPos.set(this._tweenStart);
          var flag = false;

          if (this._container.position.x > 0) {
            sEndPos.x = 0;
            flag = true;
          } else if (this._container.position.x < -this._overlapSize.x) {
            sEndPos.x = -this._overlapSize.x;
            flag = true;
          }

          if (-this._container.position.y > 0) {
            sEndPos.y = 0;
            flag = true;
          } else if (-this._container.position.y < -this._overlapSize.y) {
            sEndPos.y = -this._overlapSize.y;
            flag = true;
          }

          if (flag) {
            this._tweenChange.x = sEndPos.x - this._tweenStart.x;
            this._tweenChange.y = sEndPos.y - this._tweenStart.y;

            if (this._tweenChange.x < -UIConfig.touchDragSensitivity || this._tweenChange.y < -UIConfig.touchDragSensitivity) {
              this._refreshEventDispatching = true;
              this._owner.node.emit(Event.PULL_DOWN_RELEASE), this._owner;
              this._refreshEventDispatching = false;
            } else if (this._tweenChange.x > UIConfig.touchDragSensitivity || this._tweenChange.y > UIConfig.touchDragSensitivity) {
              this._refreshEventDispatching = true;

              this._owner.node.emit(Event.PULL_UP_RELEASE, this._owner);

              this._refreshEventDispatching = false;
            }

            if (this._headerLockedSize > 0 && sEndPos[this._refreshBarAxis] == 0) {
              sEndPos[this._refreshBarAxis] = this._headerLockedSize;
              this._tweenChange.x = sEndPos.x - this._tweenStart.x;
              this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            } else if (this._footerLockedSize > 0 && sEndPos[this._refreshBarAxis] == -this._overlapSize[this._refreshBarAxis]) {
              var max = this._overlapSize[this._refreshBarAxis];
              if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
              sEndPos[this._refreshBarAxis] = -max;
              this._tweenChange.x = sEndPos.x - this._tweenStart.x;
              this._tweenChange.y = sEndPos.y - this._tweenStart.y;
            }

            this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;
          } else {
            //更新速度
            if (!this._inertiaDisabled) {
              var frameRate = 60;
              var elapsed = (game.totalTime / 1000 - this._lastMoveTime) * frameRate - 1;

              if (elapsed > 1) {
                var factor = Math.pow(0.833, elapsed);
                this._velocity.x = this._velocity.x * factor;
                this._velocity.y = this._velocity.y * factor;
              } //根据速度计算目标位置和需要时间


              this.updateTargetAndDuration(this._tweenStart, sEndPos);
            } else this._tweenDuration.x = this._tweenDuration.y = TWEEN_TIME_DEFAULT;

            sOldChange.x = sEndPos.x - this._tweenStart.x;
            sOldChange.y = sEndPos.y - this._tweenStart.y; //调整目标位置

            this.loopCheckingTarget(sEndPos);
            if (this._pageMode || this._snapToItem) this.alignPosition(sEndPos, true);
            this._tweenChange.x = sEndPos.x - this._tweenStart.x;
            this._tweenChange.y = sEndPos.y - this._tweenStart.y;

            if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
              this.updateScrollBarVisible();
              return;
            } //如果目标位置已调整，随之调整需要时间


            if (this._pageMode || this._snapToItem) {
              this.fixDuration("x", sOldChange.x);
              this.fixDuration("y", sOldChange.y);
            }
          }

          this.startTween(2);
        };

        _proto39.onRollOver = function onRollOver() {
          this._hover = true;
          this.updateScrollBarVisible();
        };

        _proto39.onRollOut = function onRollOut() {
          this._hover = false;
          this.updateScrollBarVisible();
        };

        _proto39.onMouseWheel = function onMouseWheel(evt) {
          if (!this._mouseWheelEnabled) return;
          var delta = evt.mouseWheelDelta > 0 ? -1 : 1;

          if (this._overlapSize.x > 0 && this._overlapSize.y == 0) {
            if (this._pageMode) this.setPosX(this._xPos + this._pageSize.x * delta, false);else this.setPosX(this._xPos + this._mouseWheelStep * delta, false);
          } else {
            if (this._pageMode) this.setPosY(this._yPos + this._pageSize.y * delta, false);else this.setPosY(this._yPos + this._mouseWheelStep * delta, false);
          }
        };

        _proto39.updateScrollBarPos = function updateScrollBarPos() {
          if (this._vtScrollBar) this._vtScrollBar.setScrollPerc(this._overlapSize.y == 0 ? 0 : math.clamp(this._container.position.y, 0, this._overlapSize.y) / this._overlapSize.y);
          if (this._hzScrollBar) this._hzScrollBar.setScrollPerc(this._overlapSize.x == 0 ? 0 : math.clamp(-this._container.position.x, 0, this._overlapSize.x) / this._overlapSize.x);
          this.checkRefreshBar();
        };

        _proto39.updateScrollBarVisible = function updateScrollBarVisible() {
          if (this._vtScrollBar) {
            if (this._viewSize.y <= this._vtScrollBar.minSize || this._vScrollNone) this._vtScrollBar.node.active = false;else this.updateScrollBarVisible2(this._vtScrollBar);
          }

          if (this._hzScrollBar) {
            if (this._viewSize.x <= this._hzScrollBar.minSize || this._hScrollNone) this._hzScrollBar.node.active = false;else this.updateScrollBarVisible2(this._hzScrollBar);
          }
        };

        _proto39.updateScrollBarVisible2 = function updateScrollBarVisible2(bar) {
          if (this._scrollBarDisplayAuto) GTween.kill(bar, false, "alpha");

          if (this._scrollBarDisplayAuto && !this._hover && this._tweening == 0 && !this._dragged && !bar.gripDragging) {
            if (bar.node.active) GTween.to(1, 0, 0.5).setDelay(0.5).onComplete(this.__barTweenComplete, this).setTarget(bar, "alpha");
          } else {
            bar.alpha = 1;
            bar.node.active = true;
          }
        };

        _proto39.__barTweenComplete = function __barTweenComplete(tweener) {
          var bar = tweener.target;
          bar.alpha = 1;
          bar.node.active = false;
        };

        _proto39.getLoopPartSize = function getLoopPartSize(division, axis) {
          return (this._contentSize[axis] + (axis == "x" ? this._owner.columnGap : this._owner.lineGap)) / division;
        };

        _proto39.loopCheckingCurrent = function loopCheckingCurrent() {
          var changed = false;

          if (this._loop == 1 && this._overlapSize.x > 0) {
            if (this._xPos < 0.001) {
              this._xPos += this.getLoopPartSize(2, "x");
              changed = true;
            } else if (this._xPos >= this._overlapSize.x) {
              this._xPos -= this.getLoopPartSize(2, "x");
              changed = true;
            }
          } else if (this._loop == 2 && this._overlapSize.y > 0) {
            if (this._yPos < 0.001) {
              this._yPos += this.getLoopPartSize(2, "y");
              changed = true;
            } else if (this._yPos >= this._overlapSize.y) {
              this._yPos -= this.getLoopPartSize(2, "y");
              changed = true;
            }
          }

          if (changed) {
            this._container.setPosition(Math.floor(-this._xPos), -Math.floor(-this._yPos));
          }

          return changed;
        };

        _proto39.loopCheckingTarget = function loopCheckingTarget(endPos) {
          if (this._loop == 1) this.loopCheckingTarget2(endPos, "x");
          if (this._loop == 2) this.loopCheckingTarget2(endPos, "y");
        };

        _proto39.loopCheckingTarget2 = function loopCheckingTarget2(endPos, axis) {
          var halfSize;
          var tmp;

          if (endPos[axis] > 0) {
            halfSize = this.getLoopPartSize(2, axis);
            tmp = this._tweenStart[axis] - halfSize;

            if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
              endPos[axis] -= halfSize;
              this._tweenStart[axis] = tmp;
            }
          } else if (endPos[axis] < -this._overlapSize[axis]) {
            halfSize = this.getLoopPartSize(2, axis);
            tmp = this._tweenStart[axis] + halfSize;

            if (tmp <= 0 && tmp >= -this._overlapSize[axis]) {
              endPos[axis] += halfSize;
              this._tweenStart[axis] = tmp;
            }
          }
        };

        _proto39.loopCheckingNewPos = function loopCheckingNewPos(value, axis) {
          if (this._overlapSize[axis] == 0) return value;
          var pos = axis == "x" ? this._xPos : this._yPos;
          var changed = false;
          var v;

          if (value < 0.001) {
            value += this.getLoopPartSize(2, axis);

            if (value > pos) {
              v = this.getLoopPartSize(6, axis);
              v = Math.ceil((value - pos) / v) * v;
              pos = math.clamp(pos + v, 0, this._overlapSize[axis]);
              changed = true;
            }
          } else if (value >= this._overlapSize[axis]) {
            value -= this.getLoopPartSize(2, axis);

            if (value < pos) {
              v = this.getLoopPartSize(6, axis);
              v = Math.ceil((pos - value) / v) * v;
              pos = math.clamp(pos - v, 0, this._overlapSize[axis]);
              changed = true;
            }
          }

          if (changed) {
            if (axis == "x") this._container.setPosition(-Math.floor(pos), this._container.position.y);else this._container.setPosition(this._container.position.x, Math.floor(pos));
          }

          return value;
        };

        _proto39.alignPosition = function alignPosition(pos, inertialScrolling) {
          var ax = 0,
              ay = 0;

          if (this._snappingPolicy == 1) {
            if (this._owner.numChildren > 0) {
              //assume all children are same size
              var obj = this._owner.getChildAt(0);

              ax = Math.floor(this._viewSize.x * 0.5 - obj.width * 0.5);
              ay = Math.floor(this._viewSize.y * 0.5 - obj.height * 0.5);
            }
          } else if (this._snappingPolicy == 2) {
            if (this._owner.numChildren > 0) {
              //assume all children are same size
              var _obj = this._owner.getChildAt(0);

              ax = Math.floor(this._viewSize.x - _obj.width);
              ay = Math.floor(this._viewSize.y - _obj.height);
            }
          }

          pos.x -= ax;
          pos.y -= ay;

          if (this._pageMode) {
            pos.x = this.alignByPage(pos.x, "x", inertialScrolling);
            pos.y = this.alignByPage(pos.y, "y", inertialScrolling);
          } else if (this._snapToItem) {
            var pt = this._owner.getSnappingPosition(-pos.x, -pos.y, s_vec2$3);

            if (pos.x < 0 && pos.x > -this._overlapSize.x) pos.x = -pt.x;
            if (pos.y < 0 && pos.y > -this._overlapSize.y) pos.y = -pt.y;
          }

          pos.x += ax;
          pos.y += ay;
        };

        _proto39.alignByPage = function alignByPage(pos, axis, inertialScrolling) {
          var page;
          if (pos > 0) page = 0;else if (pos < -this._overlapSize[axis]) page = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else {
            page = Math.floor(-pos / this._pageSize[axis]);
            var change = inertialScrolling ? pos - this._containerPos[axis] : pos - (axis == "x" ? this._container.position.x : -this._container.position.y);
            var testPageSize = Math.min(this._pageSize[axis], this._contentSize[axis] - (page + 1) * this._pageSize[axis]);
            var delta = -pos - page * this._pageSize[axis]; //页面吸附策略

            if (Math.abs(change) > this._pageSize[axis]) //如果滚动距离超过1页,则需要超过页面的一半，才能到更下一页
              {
                if (delta > testPageSize * 0.5) page++;
              } else //否则只需要页面的1/3，当然，需要考虑到左移和右移的情况
              {
                if (delta > testPageSize * (change < 0 ? 0.3 : 0.7)) page++;
              } //重新计算终点


            pos = -page * this._pageSize[axis];
            if (pos < -this._overlapSize[axis]) //最后一页未必有pageSize那么大
              pos = -this._overlapSize[axis];
          } //惯性滚动模式下，会增加判断尽量不要滚动超过一页

          if (inertialScrolling) {
            var oldPos = this._tweenStart[axis];
            var oldPage;
            if (oldPos > 0) oldPage = 0;else if (oldPos < -this._overlapSize[axis]) oldPage = Math.ceil(this._contentSize[axis] / this._pageSize[axis]) - 1;else oldPage = Math.floor(-oldPos / this._pageSize[axis]);
            var startPage = Math.floor(-this._containerPos[axis] / this._pageSize[axis]);

            if (Math.abs(page - startPage) > 1 && Math.abs(oldPage - startPage) <= 1) {
              if (page > startPage) page = startPage + 1;else page = startPage - 1;
              pos = -page * this._pageSize[axis];
            }
          }

          return pos;
        };

        _proto39.updateTargetAndDuration = function updateTargetAndDuration(orignPos, resultPos) {
          resultPos.x = this.updateTargetAndDuration2(orignPos.x, "x");
          resultPos.y = this.updateTargetAndDuration2(orignPos.y, "y");
        };

        _proto39.updateTargetAndDuration2 = function updateTargetAndDuration2(pos, axis) {
          var v = this._velocity[axis];
          var duration = 0;
          if (pos > 0) pos = 0;else if (pos < -this._overlapSize[axis]) pos = -this._overlapSize[axis];else {
            //以屏幕像素为基准
            var isMobile = sys.isMobile;

            var v2 = Math.abs(v) * this._velocityScale;

            var winSize = screen.windowSize; //在移动设备上，需要对不同分辨率做一个适配，我们的速度判断以1136分辨率为基准

            if (isMobile) v2 *= 1136 / Math.max(winSize.width, winSize.height); //这里有一些阈值的处理，因为在低速内，不希望产生较大的滚动（甚至不滚动）

            var ratio = 0;

            if (this._pageMode || !isMobile) {
              if (v2 > 50) ratio = Math.pow((v2 - 50) / 50, 2);
            } else {
              if (v2 > 100) ratio = Math.pow((v2 - 100) / 100, 2);
            }

            if (ratio != 0) {
              if (ratio > 1) ratio = 1;
              v2 *= ratio;
              v *= ratio;
              this._velocity[axis] = v; //算法：v*（this._decelerationRate的n次幂）= 60，即在n帧后速度降为60（假设每秒60帧）。

              duration = Math.log(60 / v2) / Math.log(this._decelerationRate) / 60; //计算距离要使用本地速度
              //理论公式貌似滚动的距离不够，改为经验公式
              //var change:number = (v/ 60 - 1) / (1 - this._decelerationRate);

              var change = Math.floor(v * duration * 0.4);
              pos += change;
            }
          }
          if (duration < TWEEN_TIME_DEFAULT) duration = TWEEN_TIME_DEFAULT;
          this._tweenDuration[axis] = duration;
          return pos;
        };

        _proto39.fixDuration = function fixDuration(axis, oldChange) {
          if (this._tweenChange[axis] == 0 || Math.abs(this._tweenChange[axis]) >= Math.abs(oldChange)) return;

          var newDuration = Math.abs(this._tweenChange[axis] / oldChange) * this._tweenDuration[axis];

          if (newDuration < TWEEN_TIME_DEFAULT) newDuration = TWEEN_TIME_DEFAULT;
          this._tweenDuration[axis] = newDuration;
        };

        _proto39.startTween = function startTween(type) {
          this._tweenTime.set(Vec2.ZERO);

          this._tweening = type;
          this.updateScrollBarVisible();
        };

        _proto39.killTween = function killTween() {
          if (this._tweening == 1) //取消类型为1的tween需立刻设置到终点
            {
              this._container.setPosition(this._tweenStart.x + this._tweenChange.x, -(this._tweenStart.y + this._tweenChange.y));

              this._owner.node.emit(Event.SCROLL, this._owner);
            }

          this._tweening = 0;
          this.updateScrollBarVisible();

          this._owner.node.emit(Event.SCROLL_END, this._owner);
        };

        _proto39.checkRefreshBar = function checkRefreshBar() {
          if (this._header == null && this._footer == null) return;
          var pos = this._refreshBarAxis == "x" ? this._container.position.x : -this._container.position.y;

          if (this._header) {
            if (pos > 0) {
              this._header.node.active = true;
              var pt = s_vec2$3;
              pt.x = this._header.width;
              pt.y = this._header.height;
              pt[this._refreshBarAxis] = pos;

              this._header.setSize(pt.x, pt.y);
            } else {
              this._header.node.active = false;
            }
          }

          if (this._footer) {
            var max = this._overlapSize[this._refreshBarAxis];

            if (pos < -max || max == 0 && this._footerLockedSize > 0) {
              this._footer.node.active = true;
              pt = s_vec2$3;
              pt.x = this._footer.x;
              pt.y = this._footer.y;
              if (max > 0) pt[this._refreshBarAxis] = pos + this._contentSize[this._refreshBarAxis];else pt[this._refreshBarAxis] = Math.max(Math.min(pos + this._viewSize[this._refreshBarAxis], this._viewSize[this._refreshBarAxis] - this._footerLockedSize), this._viewSize[this._refreshBarAxis] - this._contentSize[this._refreshBarAxis]);

              this._footer.setPosition(pt.x, pt.y);

              pt.x = this._footer.width;
              pt.y = this._footer.height;
              if (max > 0) pt[this._refreshBarAxis] = -max - pos;else pt[this._refreshBarAxis] = this._viewSize[this._refreshBarAxis] - this._footer[this._refreshBarAxis];

              this._footer.setSize(pt.x, pt.y);
            } else {
              this._footer.node.active = false;
            }
          }
        };

        _proto39.update = function update(dt) {
          if (this._tweening == 0) return;
          var nx = this.runTween("x", dt);
          var ny = this.runTween("y", dt);

          this._container.setPosition(nx, -ny);

          if (this._tweening == 2) {
            if (this._overlapSize.x > 0) this._xPos = math.clamp(-nx, 0, this._overlapSize.x);
            if (this._overlapSize.y > 0) this._yPos = math.clamp(-ny, 0, this._overlapSize.y);
            if (this._pageMode) this.updatePageController();
          }

          if (this._tweenChange.x == 0 && this._tweenChange.y == 0) {
            this._tweening = 0;
            this.loopCheckingCurrent();
            this.updateScrollBarPos();
            this.updateScrollBarVisible();

            this._owner.node.emit(Event.SCROLL, this._owner);

            this._owner.node.emit(Event.SCROLL_END, this._owner);
          } else {
            this.updateScrollBarPos();

            this._owner.node.emit(Event.SCROLL, this._owner);
          }

          return true;
        };

        _proto39.runTween = function runTween(axis, dt) {
          var newValue;

          if (this._tweenChange[axis] != 0) {
            this._tweenTime[axis] += dt;

            if (this._tweenTime[axis] >= this._tweenDuration[axis]) {
              newValue = this._tweenStart[axis] + this._tweenChange[axis];
              this._tweenChange[axis] = 0;
            } else {
              var ratio = easeFunc(this._tweenTime[axis], this._tweenDuration[axis]);
              newValue = this._tweenStart[axis] + Math.floor(this._tweenChange[axis] * ratio);
            }

            var threshold1 = 0;
            var threshold2 = -this._overlapSize[axis];
            if (this._headerLockedSize > 0 && this._refreshBarAxis == axis) threshold1 = this._headerLockedSize;

            if (this._footerLockedSize > 0 && this._refreshBarAxis == axis) {
              var max = this._overlapSize[this._refreshBarAxis];
              if (max == 0) max = Math.max(this._contentSize[this._refreshBarAxis] + this._footerLockedSize - this._viewSize[this._refreshBarAxis], 0);else max += this._footerLockedSize;
              threshold2 = -max;
            }

            if (this._tweening == 2 && this._bouncebackEffect) {
              if (newValue > 20 + threshold1 && this._tweenChange[axis] > 0 || newValue > threshold1 && this._tweenChange[axis] == 0) //开始回弹
                {
                  this._tweenTime[axis] = 0;
                  this._tweenDuration[axis] = TWEEN_TIME_DEFAULT;
                  this._tweenChange[axis] = -newValue + threshold1;
                  this._tweenStart[axis] = newValue;
                } else if (newValue < threshold2 - 20 && this._tweenChange[axis] < 0 || newValue < threshold2 && this._tweenChange[axis] == 0) //开始回弹
                {
                  this._tweenTime[axis] = 0;
                  this._tweenDuration[axis] = TWEEN_TIME_DEFAULT;
                  this._tweenChange[axis] = threshold2 - newValue;
                  this._tweenStart[axis] = newValue;
                }
            } else {
              if (newValue > threshold1) {
                newValue = threshold1;
                this._tweenChange[axis] = 0;
              } else if (newValue < threshold2) {
                newValue = threshold2;
                this._tweenChange[axis] = 0;
              }
            }
          } else newValue = axis == "x" ? this._container.position.x : -this._container.position.y;

          return newValue;
        };

        _createClass(ScrollPane, [{
          key: "owner",
          get: function get() {
            return this._owner;
          }
        }, {
          key: "hzScrollBar",
          get: function get() {
            return this._hzScrollBar;
          }
        }, {
          key: "vtScrollBar",
          get: function get() {
            return this._vtScrollBar;
          }
        }, {
          key: "header",
          get: function get() {
            return this._header;
          }
        }, {
          key: "footer",
          get: function get() {
            return this._footer;
          }
        }, {
          key: "bouncebackEffect",
          get: function get() {
            return this._bouncebackEffect;
          },
          set: function set(sc) {
            this._bouncebackEffect = sc;
          }
        }, {
          key: "touchEffect",
          get: function get() {
            return this._touchEffect;
          },
          set: function set(sc) {
            this._touchEffect = sc;
          }
        }, {
          key: "scrollStep",
          get: function get() {
            return this._scrollStep;
          },
          set: function set(val) {
            this._scrollStep = val;
            if (this._scrollStep == 0) this._scrollStep = UIConfig.defaultScrollStep;
            this._mouseWheelStep = this._scrollStep * 2;
          }
        }, {
          key: "decelerationRate",
          get: function get() {
            return this._decelerationRate;
          },
          set: function set(val) {
            this._decelerationRate = val;
          }
        }, {
          key: "snapToItem",
          get: function get() {
            return this._snapToItem;
          },
          set: function set(value) {
            this._snapToItem = value;
          }
        }, {
          key: "snappingPolicy",
          get: function get() {
            return this._snappingPolicy;
          },
          set: function set(value) {
            this._snappingPolicy = value;
          }
        }, {
          key: "mouseWheelEnabled",
          get: function get() {
            return this._mouseWheelEnabled;
          },
          set: function set(value) {
            this._mouseWheelEnabled = value;
          }
        }, {
          key: "isDragged",
          get: function get() {
            return this._dragged;
          }
        }, {
          key: "percX",
          get: function get() {
            return this._overlapSize.x == 0 ? 0 : this._xPos / this._overlapSize.x;
          },
          set: function set(value) {
            this.setPercX(value, false);
          }
        }, {
          key: "percY",
          get: function get() {
            return this._overlapSize.y == 0 ? 0 : this._yPos / this._overlapSize.y;
          },
          set: function set(value) {
            this.setPercY(value, false);
          }
        }, {
          key: "posX",
          get: function get() {
            return this._xPos;
          },
          set: function set(value) {
            this.setPosX(value, false);
          }
        }, {
          key: "posY",
          get: function get() {
            return this._yPos;
          },
          set: function set(value) {
            this.setPosY(value, false);
          }
        }, {
          key: "contentWidth",
          get: function get() {
            return this._contentSize.x;
          }
        }, {
          key: "contentHeight",
          get: function get() {
            return this._contentSize.y;
          }
        }, {
          key: "viewWidth",
          get: function get() {
            return this._viewSize.x;
          },
          set: function set(value) {
            value = value + this._owner.margin.left + this._owner.margin.right;
            if (this._vtScrollBar && !this._floating) value += this._vtScrollBar.width;
            this._owner.width = value;
          }
        }, {
          key: "viewHeight",
          get: function get() {
            return this._viewSize.y;
          },
          set: function set(value) {
            value = value + this._owner.margin.top + this._owner.margin.bottom;
            if (this._hzScrollBar && !this._floating) value += this._hzScrollBar.height;
            this._owner.height = value;
          }
        }, {
          key: "currentPageX",
          get: function get() {
            if (!this._pageMode) return 0;
            var page = Math.floor(this._xPos / this._pageSize.x);
            if (this._xPos - page * this._pageSize.x > this._pageSize.x * 0.5) page++;
            return page;
          },
          set: function set(value) {
            this.setCurrentPageX(value, false);
          }
        }, {
          key: "currentPageY",
          get: function get() {
            if (!this._pageMode) return 0;
            var page = Math.floor(this._yPos / this._pageSize.y);
            if (this._yPos - page * this._pageSize.y > this._pageSize.y * 0.5) page++;
            return page;
          },
          set: function set(value) {
            this.setCurrentPageY(value, false);
          }
        }, {
          key: "isBottomMost",
          get: function get() {
            return this._yPos == this._overlapSize.y || this._overlapSize.y == 0;
          }
        }, {
          key: "isRightMost",
          get: function get() {
            return this._xPos == this._overlapSize.x || this._overlapSize.x == 0;
          }
        }, {
          key: "pageController",
          get: function get() {
            return this._pageController;
          },
          set: function set(value) {
            this._pageController = value;
          }
        }, {
          key: "scrollingPosX",
          get: function get() {
            return math.clamp(-this._container.position.x, 0, this._overlapSize.x);
          }
        }, {
          key: "scrollingPosY",
          get: function get() {
            return math.clamp(- -this._container.position.y, 0, this._overlapSize.y);
          }
        }]);

        return ScrollPane;
      }(Component)) || _class));
      var _gestureFlag = 0;
      var TWEEN_TIME_GO = 0.5; //调用SetPos(ani)时使用的缓动时间

      var TWEEN_TIME_DEFAULT = 0.3; //惯性滚动的最小缓动时间

      var PULL_RATIO = 0.5; //下拉过顶或者上拉过底时允许超过的距离占显示区域的比例

      var s_vec2$3 = new Vec2();
      var s_rect = new Rect();
      var sEndPos = new Vec2();
      var sOldChange = new Vec2();

      function easeFunc(t, d) {
        return (t = t / d - 1) * t * t + 1; //cubicOut
      }

      var CurveType;

      (function (CurveType) {
        CurveType[CurveType["CRSpline"] = 0] = "CRSpline";
        CurveType[CurveType["Bezier"] = 1] = "Bezier";
        CurveType[CurveType["CubicBezier"] = 2] = "CubicBezier";
        CurveType[CurveType["Straight"] = 3] = "Straight";
      })(CurveType || (CurveType = {}));

      var GPathPoint = /*#__PURE__*/function () {
        function GPathPoint() {
          this.x = 0;
          this.y = 0;
          this.control1_x = 0;
          this.control1_y = 0;
          this.control2_x = 0;
          this.control2_y = 0;
          this.curveType = 0;
        }

        GPathPoint.newPoint = function newPoint(x, y, curveType) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = 0;
          pt.control1_y = 0;
          pt.control2_x = 0;
          pt.control2_y = 0;
          pt.curveType = curveType || CurveType.CRSpline;
          return pt;
        };

        GPathPoint.newBezierPoint = function newBezierPoint(x, y, control1_x, control1_y) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = control1_x || 0;
          pt.control1_y = control1_y || 0;
          pt.control2_x = 0;
          pt.control2_y = 0;
          pt.curveType = CurveType.Bezier;
          return pt;
        };

        GPathPoint.newCubicBezierPoint = function newCubicBezierPoint(x, y, control1_x, control1_y, control2_x, control2_y) {
          var pt = new GPathPoint();
          pt.x = x || 0;
          pt.y = y || 0;
          pt.control1_x = control1_x || 0;
          pt.control1_y = control1_y || 0;
          pt.control2_x = control2_x || 0;
          pt.control2_y = control2_y || 0;
          pt.curveType = CurveType.CubicBezier;
          return pt;
        };

        var _proto40 = GPathPoint.prototype;

        _proto40.clone = function clone() {
          var ret = new GPathPoint();
          ret.x = this.x;
          ret.y = this.y;
          ret.control1_x = this.control1_x;
          ret.control1_y = this.control1_y;
          ret.control2_x = this.control2_x;
          ret.control2_y = this.control2_y;
          ret.curveType = this.curveType;
          return ret;
        };

        return GPathPoint;
      }();

      var GPath = /*#__PURE__*/function () {
        function GPath() {
          this._segments = new Array();
          this._points = new Array();
        }

        var _proto41 = GPath.prototype;

        _proto41.create2 = function create2(pt1, pt2, pt3, pt4) {
          var points = new Array();
          points.push(pt1);
          points.push(pt2);
          if (pt3) points.push(pt3);
          if (pt4) points.push(pt4);
          this.create(points);
        };

        _proto41.create = function create(points) {
          this._segments.length = 0;
          this._points.length = 0;
          this._fullLength = 0;
          var cnt = points.length;
          if (cnt == 0) return;
          var splinePoints = [];
          var prev = points[0];
          if (prev.curveType == CurveType.CRSpline) splinePoints.push(new Vec2(prev.x, prev.y));

          for (var i = 1; i < cnt; i++) {
            var current = points[i];

            if (prev.curveType != CurveType.CRSpline) {
              var seg = {};
              seg.type = prev.curveType;
              seg.ptStart = this._points.length;

              if (prev.curveType == CurveType.Straight) {
                seg.ptCount = 2;

                this._points.push(new Vec2(prev.x, prev.y));

                this._points.push(new Vec2(current.x, current.y));
              } else if (prev.curveType == CurveType.Bezier) {
                seg.ptCount = 3;

                this._points.push(new Vec2(prev.x, prev.y));

                this._points.push(new Vec2(current.x, current.y));

                this._points.push(new Vec2(prev.control1_x, prev.control1_y));
              } else if (prev.curveType == CurveType.CubicBezier) {
                seg.ptCount = 4;

                this._points.push(new Vec2(prev.x, prev.y));

                this._points.push(new Vec2(current.x, current.y));

                this._points.push(new Vec2(prev.control1_x, prev.control1_y));

                this._points.push(new Vec2(prev.control2_x, prev.control2_y));
              }

              seg.length = distance(prev.x, prev.y, current.x, current.y);
              this._fullLength += seg.length;

              this._segments.push(seg);
            }

            if (current.curveType != CurveType.CRSpline) {
              if (splinePoints.length > 0) {
                splinePoints.push(new Vec2(current.x, current.y));
                this.createSplineSegment(splinePoints);
              }
            } else splinePoints.push(new Vec2(current.x, current.y));

            prev = current;
          }

          if (splinePoints.length > 1) this.createSplineSegment(splinePoints);
        };

        _proto41.createSplineSegment = function createSplineSegment(splinePoints) {
          var cnt = splinePoints.length;
          splinePoints.splice(0, 0, splinePoints[0]);
          splinePoints.push(splinePoints[cnt]);
          splinePoints.push(splinePoints[cnt]);
          cnt += 3;
          var seg = {};
          seg.type = CurveType.CRSpline;
          seg.ptStart = this._points.length;
          seg.ptCount = cnt;
          this._points = this._points.concat(splinePoints);
          seg.length = 0;

          for (var i = 1; i < cnt; i++) {
            seg.length += distance(splinePoints[i - 1].x, splinePoints[i - 1].y, splinePoints[i].x, splinePoints[i].y);
          }

          this._fullLength += seg.length;

          this._segments.push(seg);

          splinePoints.length = 0;
        };

        _proto41.clear = function clear() {
          this._segments.length = 0;
          this._points.length = 0;
        };

        _proto41.getPointAt = function getPointAt(t, result) {
          if (!result) result = new Vec2();else result.set(0, 0);
          t = math.clamp01(t);
          var cnt = this._segments.length;

          if (cnt == 0) {
            return result;
          }

          var seg;

          if (t == 1) {
            seg = this._segments[cnt - 1];

            if (seg.type == CurveType.Straight) {
              result.x = math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
              result.y = math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
              return result;
            } else if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) return this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else return this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);
          }

          var len = t * this._fullLength;

          for (var i = 0; i < cnt; i++) {
            seg = this._segments[i];
            len -= seg.length;

            if (len < 0) {
              t = 1 + len / seg.length;

              if (seg.type == CurveType.Straight) {
                result.x = math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t);
                result.y = math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t);
              } else if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) result = this.onBezierCurve(seg.ptStart, seg.ptCount, t, result);else result = this.onCRSplineCurve(seg.ptStart, seg.ptCount, t, result);

              break;
            }
          }

          return result;
        };

        _proto41.getAnchorsInSegment = function getAnchorsInSegment(segmentIndex, points) {
          if (points == null) points = new Array();
          var seg = this._segments[segmentIndex];

          for (var i = 0; i < seg.ptCount; i++) points.push(new Vec2(this._points[seg.ptStart + i].x, this._points[seg.ptStart + i].y));

          return points;
        };

        _proto41.getPointsInSegment = function getPointsInSegment(segmentIndex, t0, t1, points, ts, pointDensity) {
          if (points == null) points = new Array();
          if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
          if (ts) ts.push(t0);
          var seg = this._segments[segmentIndex];

          if (seg.type == CurveType.Straight) {
            points.push(new Vec2(math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t0), math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t0)));
            points.push(new Vec2(math.lerp(this._points[seg.ptStart].x, this._points[seg.ptStart + 1].x, t1), math.lerp(this._points[seg.ptStart].y, this._points[seg.ptStart + 1].y, t1)));
          } else {
            var func;
            if (seg.type == CurveType.Bezier || seg.type == CurveType.CubicBezier) func = this.onBezierCurve;else func = this.onCRSplineCurve;
            points.push(func.call(this, seg.ptStart, seg.ptCount, t0, new Vec2()));
            var SmoothAmount = Math.min(seg.length * pointDensity, 50);

            for (var j = 0; j <= SmoothAmount; j++) {
              var t = j / SmoothAmount;

              if (t > t0 && t < t1) {
                points.push(func.call(this, seg.ptStart, seg.ptCount, t, new Vec2()));
                if (ts) ts.push(t);
              }
            }

            points.push(func.call(this, seg.ptStart, seg.ptCount, t1, new Vec2()));
          }

          if (ts) ts.push(t1);
          return points;
        };

        _proto41.getAllPoints = function getAllPoints(points, ts, pointDensity) {
          if (points == null) points = new Array();
          if (!pointDensity || isNaN(pointDensity)) pointDensity = 0.1;
          var cnt = this._segments.length;

          for (var i = 0; i < cnt; i++) this.getPointsInSegment(i, 0, 1, points, ts, pointDensity);

          return points;
        };

        _proto41.onCRSplineCurve = function onCRSplineCurve(ptStart, ptCount, t, result) {
          var adjustedIndex = Math.floor(t * (ptCount - 4)) + ptStart; //Since the equation works with 4 points, we adjust the starting point depending on t to return a point on the specific segment

          var p0x = this._points[adjustedIndex].x;
          var p0y = this._points[adjustedIndex].y;
          var p1x = this._points[adjustedIndex + 1].x;
          var p1y = this._points[adjustedIndex + 1].y;
          var p2x = this._points[adjustedIndex + 2].x;
          var p2y = this._points[adjustedIndex + 2].y;
          var p3x = this._points[adjustedIndex + 3].x;
          var p3y = this._points[adjustedIndex + 3].y;
          var adjustedT = t == 1 ? 1 : math.repeat(t * (ptCount - 4), 1); // Then we adjust t to be that value on that new piece of segment... for t == 1f don't use repeat (that would return 0f);

          var t0 = ((-adjustedT + 2) * adjustedT - 1) * adjustedT * 0.5;
          var t1 = ((3 * adjustedT - 5) * adjustedT * adjustedT + 2) * 0.5;
          var t2 = ((-3 * adjustedT + 4) * adjustedT + 1) * adjustedT * 0.5;
          var t3 = (adjustedT - 1) * adjustedT * adjustedT * 0.5;
          result.x = p0x * t0 + p1x * t1 + p2x * t2 + p3x * t3;
          result.y = p0y * t0 + p1y * t1 + p2y * t2 + p3y * t3;
          return result;
        };

        _proto41.onBezierCurve = function onBezierCurve(ptStart, ptCount, t, result) {
          var t2 = 1 - t;
          var p0x = this._points[ptStart].x;
          var p0y = this._points[ptStart].y;
          var p1x = this._points[ptStart + 1].x;
          var p1y = this._points[ptStart + 1].y;
          var cp0x = this._points[ptStart + 2].x;
          var cp0y = this._points[ptStart + 2].y;

          if (ptCount == 4) {
            var cp1x = this._points[ptStart + 3].x;
            var cp1y = this._points[ptStart + 3].y;
            result.x = t2 * t2 * t2 * p0x + 3 * t2 * t2 * t * cp0x + 3 * t2 * t * t * cp1x + t * t * t * p1x;
            result.y = t2 * t2 * t2 * p0y + 3 * t2 * t2 * t * cp0y + 3 * t2 * t * t * cp1y + t * t * t * p1y;
          } else {
            result.x = t2 * t2 * p0x + 2 * t2 * t * cp0x + t * t * p1x;
            result.y = t2 * t2 * p0y + 2 * t2 * t * cp0y + t * t * p1y;
          }

          return result;
        };

        _createClass(GPath, [{
          key: "length",
          get: function get() {
            return this._fullLength;
          }
        }, {
          key: "segmentCount",
          get: function get() {
            return this._segments.length;
          }
        }]);

        return GPath;
      }();

      function distance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
      }

      var Transition = exports('Transition', /*#__PURE__*/function () {
        function Transition(owner) {
          this._ownerBaseX = 0;
          this._ownerBaseY = 0;
          this._totalTimes = 0;
          this._totalTasks = 0;
          this._options = 0;
          this._totalDuration = 0;
          this._autoPlayTimes = 1;
          this._autoPlayDelay = 0;
          this._timeScale = 1;
          this._startTime = 0;
          this._endTime = 0;
          this._owner = owner;
          this._items = new Array();
        }

        var _proto42 = Transition.prototype;

        _proto42.play = function play(onComplete, times, delay, startTime, endTime) {
          this._play(onComplete, times, delay, startTime, endTime, false);
        };

        _proto42.playReverse = function playReverse(onComplete, times, delay) {
          this._play(onComplete, times, delay, 0, -1, true);
        };

        _proto42.changePlayTimes = function changePlayTimes(value) {
          this._totalTimes = value;
        };

        _proto42.setAutoPlay = function setAutoPlay(value, times, delay) {
          if (times == undefined) times = -1;
          if (delay == undefined) delay = 0;

          if (this._autoPlay != value) {
            this._autoPlay = value;
            this._autoPlayTimes = times;
            this._autoPlayDelay = delay;

            if (this._autoPlay) {
              if (this._owner.onStage) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
            } else {
              if (!this._owner.onStage) this.stop(false, true);
            }
          }
        };

        _proto42._play = function _play(onComplete, times, delay, startTime, endTime, reversed) {
          if (times == undefined) times = 1;
          if (delay == undefined) delay = 0;
          if (startTime == undefined) startTime = 0;
          if (endTime == undefined) endTime = -1;
          this.stop(true, true);
          this._totalTimes = times;
          this._reversed = reversed;
          this._startTime = startTime;
          this._endTime = endTime;
          this._playing = true;
          this._paused = false;
          this._onComplete = onComplete;
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.target == null) {
              if (item.targetId) item.target = this._owner.getChildById(item.targetId);else item.target = this._owner;
            } else if (item.target != this._owner && item.target.parent != this._owner) item.target = null;

            if (item.target && item.type == ActionType.Transition) {
              var trans = item.target.getTransition(item.value.transName);
              if (trans == this) trans = null;

              if (trans) {
                if (item.value.playTimes == 0) //stop
                  {
                    var j;

                    for (j = i - 1; j >= 0; j--) {
                      var item2 = this._items[j];

                      if (item2.type == ActionType.Transition) {
                        if (item2.value.trans == trans) {
                          item2.value.stopTime = item.time - item2.time;
                          break;
                        }
                      }
                    }

                    if (j < 0) item.value.stopTime = 0;else trans = null; //no need to handle stop anymore
                  } else item.value.stopTime = -1;
              }

              item.value.trans = trans;
            }
          }

          if (delay == 0) this.onDelayedPlay();else GTween.delayedCall(delay).setTarget(this).onComplete(this.onDelayedPlay, this);
        };

        _proto42.stop = function stop(setToComplete, processCallback) {
          if (setToComplete == undefined) setToComplete = true;
          if (!this._playing) return;
          this._playing = false;
          this._totalTasks = 0;
          this._totalTimes = 0;
          var func = this._onComplete;
          this._onComplete = null;
          GTween.kill(this); //delay start

          var cnt = this._items.length;

          if (this._reversed) {
            for (var i = cnt - 1; i >= 0; i--) {
              var item = this._items[i];
              if (item.target == null) continue;
              this.stopItem(item, setToComplete);
            }
          } else {
            for (i = 0; i < cnt; i++) {
              item = this._items[i];
              if (item.target == null) continue;
              this.stopItem(item, setToComplete);
            }
          }

          if (processCallback && func != null) {
            func();
          }
        };

        _proto42.stopItem = function stopItem(item, setToComplete) {
          if (item.displayLockToken != 0) {
            item.target.releaseDisplayLock(item.displayLockToken);
            item.displayLockToken = 0;
          }

          if (item.tweener) {
            item.tweener.kill(setToComplete);
            item.tweener = null;

            if (item.type == ActionType.Shake && !setToComplete) //震动必须归位，否则下次就越震越远了。
              {
                item.target._gearLocked = true;
                item.target.setPosition(item.target.x - item.value.lastOffsetX, item.target.y - item.value.lastOffsetY);
                item.target._gearLocked = false;
              }
          }

          if (item.type == ActionType.Transition) {
            var trans = item.value.trans;
            if (trans) trans.stop(setToComplete, false);
          }
        };

        _proto42.setPaused = function setPaused(paused) {
          if (!this._playing || this._paused == paused) return;
          this._paused = paused;
          var tweener = GTween.getTween(this);
          if (tweener) tweener.setPaused(paused);
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.target == null) continue;

            if (item.type == ActionType.Transition) {
              if (item.value.trans) item.value.trans.setPaused(paused);
            } else if (item.type == ActionType.Animation) {
              if (paused) {
                item.value.flag = item.target.getProp(ObjectPropID.Playing);
                item.target.setProp(ObjectPropID.Playing, false);
              } else item.target.setProp(ObjectPropID.Playing, item.value.flag);
            }

            if (item.tweener) item.tweener.setPaused(paused);
          }
        };

        _proto42.dispose = function dispose() {
          if (this._playing) GTween.kill(this); //delay start

          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.tweener) {
              item.tweener.kill();
              item.tweener = null;
            }

            item.target = null;
            item.hook = null;
            if (item.tweenConfig) item.tweenConfig.endHook = null;
          }

          this._items.length = 0;
          this._playing = false;
          this._onComplete = null;
        };

        _proto42.setValue = function setValue(label) {
          var cnt = this._items.length;
          var value;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.label == label) {
              if (item.tweenConfig) value = item.tweenConfig.startValue;else value = item.value;
            } else if (item.tweenConfig && item.tweenConfig.endLabel == label) {
              value = item.tweenConfig.endValue;
            } else continue;

            switch (item.type) {
              case ActionType.XY:
              case ActionType.Size:
              case ActionType.Pivot:
              case ActionType.Scale:
              case ActionType.Skew:
                value.b1 = true;
                value.b2 = true;
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                value.f2 = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;

              case ActionType.Alpha:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;

              case ActionType.Rotation:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;

              case ActionType.Color:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                break;

              case ActionType.Animation:
                value.frame = parseInt(arguments.length <= 1 ? undefined : arguments[1]);
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.playing = arguments.length <= 2 ? undefined : arguments[2];
                break;

              case ActionType.Visible:
                value.visible = arguments.length <= 1 ? undefined : arguments[1];
                break;

              case ActionType.Sound:
                value.sound = arguments.length <= 1 ? undefined : arguments[1];
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.volume = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;

              case ActionType.Transition:
                value.transName = arguments.length <= 1 ? undefined : arguments[1];
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.playTimes = parseInt(arguments.length <= 2 ? undefined : arguments[2]);
                break;

              case ActionType.Shake:
                value.amplitude = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                if ((arguments.length <= 1 ? 0 : arguments.length - 1) > 1) value.duration = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                break;

              case ActionType.ColorFilter:
                value.f1 = parseFloat(arguments.length <= 1 ? undefined : arguments[1]);
                value.f2 = parseFloat(arguments.length <= 2 ? undefined : arguments[2]);
                value.f3 = parseFloat(arguments.length <= 3 ? undefined : arguments[3]);
                value.f4 = parseFloat(arguments.length <= 4 ? undefined : arguments[4]);
                break;

              case ActionType.Text:
              case ActionType.Icon:
                value.text = arguments.length <= 1 ? undefined : arguments[1];
                break;
            }
          }
        };

        _proto42.setHook = function setHook(label, callback) {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.label == label) {
              item.hook = callback;
              break;
            } else if (item.tweenConfig && item.tweenConfig.endLabel == label) {
              item.tweenConfig.endHook = callback;
              break;
            }
          }
        };

        _proto42.clearHooks = function clearHooks() {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            item.hook = null;
            if (item.tweenConfig) item.tweenConfig.endHook = null;
          }
        };

        _proto42.setTarget = function setTarget(label, newTarget) {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.label == label) {
              item.targetId = newTarget.id;
              item.target = null;
            }
          }
        };

        _proto42.setDuration = function setDuration(label, value) {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.tweenConfig && item.label == label) item.tweenConfig.duration = value;
          }
        };

        _proto42.getLabelTime = function getLabelTime(label) {
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];
            if (item.label == label) return item.time;else if (item.tweenConfig && item.tweenConfig.endLabel == label) return item.time + item.tweenConfig.duration;
          }

          return Number.NaN;
        };

        _proto42.updateFromRelations = function updateFromRelations(targetId, dx, dy) {
          var cnt = this._items.length;
          if (cnt == 0) return;

          for (var i = 0; i < cnt; i++) {
            var item = this._items[i];

            if (item.type == ActionType.XY && item.targetId == targetId) {
              if (item.tweenConfig) {
                item.tweenConfig.startValue.f1 += dx;
                item.tweenConfig.startValue.f2 += dy;
                item.tweenConfig.endValue.f1 += dx;
                item.tweenConfig.endValue.f2 += dy;
              } else {
                item.value.f1 += dx;
                item.value.f2 += dy;
              }
            }
          }
        };

        _proto42.onEnable = function onEnable() {
          if (this._autoPlay && !this._playing) this.play(null, this._autoPlayTimes, this._autoPlayDelay);
        };

        _proto42.onDisable = function onDisable() {
          if ((this._options & OPTION_AUTO_STOP_DISABLED) == 0) this.stop((this._options & OPTION_AUTO_STOP_AT_END) != 0 ? true : false, false);
        };

        _proto42.onDelayedPlay = function onDelayedPlay() {
          this.internalPlay();
          this._playing = this._totalTasks > 0;

          if (this._playing) {
            if ((this._options & OPTION_IGNORE_DISPLAY_CONTROLLER) != 0) {
              var cnt = this._items.length;

              for (var i = 0; i < cnt; i++) {
                var item = this._items[i];
                if (item.target && item.target != this._owner) item.displayLockToken = item.target.addDisplayLock();
              }
            }
          } else if (this._onComplete != null) {
            var func = this._onComplete;
            this._onComplete = null;
            func();
          }
        };

        _proto42.internalPlay = function internalPlay() {
          this._ownerBaseX = this._owner.x;
          this._ownerBaseY = this._owner.y;
          this._totalTasks = 1;
          var cnt = this._items.length;
          var item;
          var needSkipAnimations = false;
          var i;

          if (!this._reversed) {
            for (i = 0; i < cnt; i++) {
              item = this._items[i];
              if (item.target == null) continue;

              if (item.type == ActionType.Animation && this._startTime != 0 && item.time <= this._startTime) {
                needSkipAnimations = true;
                item.value.flag = false;
              } else this.playItem(item);
            }
          } else {
            for (i = cnt - 1; i >= 0; i--) {
              item = this._items[i];
              if (item.target == null) continue;
              this.playItem(item);
            }
          }

          if (needSkipAnimations) this.skipAnimations();
          this._totalTasks--;
        };

        _proto42.playItem = function playItem(item) {
          var time;

          if (item.tweenConfig) {
            if (this._reversed) time = this._totalDuration - item.time - item.tweenConfig.duration;else time = item.time;

            if (this._endTime == -1 || time <= this._endTime) {
              var startValue;
              var endValue;

              if (this._reversed) {
                startValue = item.tweenConfig.endValue;
                endValue = item.tweenConfig.startValue;
              } else {
                startValue = item.tweenConfig.startValue;
                endValue = item.tweenConfig.endValue;
              }

              item.value.b1 = startValue.b1 || endValue.b1;
              item.value.b2 = startValue.b2 || endValue.b2;

              switch (item.type) {
                case ActionType.XY:
                case ActionType.Size:
                case ActionType.Scale:
                case ActionType.Skew:
                  item.tweener = GTween.to2(startValue.f1, startValue.f2, endValue.f1, endValue.f2, item.tweenConfig.duration);
                  break;

                case ActionType.Alpha:
                case ActionType.Rotation:
                  item.tweener = GTween.to(startValue.f1, endValue.f1, item.tweenConfig.duration);
                  break;

                case ActionType.Color:
                  item.tweener = GTween.toColor(startValue.f1, endValue.f1, item.tweenConfig.duration);
                  break;

                case ActionType.ColorFilter:
                  item.tweener = GTween.to4(startValue.f1, startValue.f2, startValue.f3, startValue.f4, endValue.f1, endValue.f2, endValue.f3, endValue.f4, item.tweenConfig.duration);
                  break;
              }

              item.tweener.setDelay(time).setEase(item.tweenConfig.easeType).setRepeat(item.tweenConfig.repeat, item.tweenConfig.yoyo).setTimeScale(this._timeScale).setTarget(item).onStart(this.onTweenStart, this).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
              if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - time);
              this._totalTasks++;
            }
          } else if (item.type == ActionType.Shake) {
            if (this._reversed) time = this._totalDuration - item.time - item.value.duration;else time = item.time;
            item.value.offsetX = item.value.offsetY = 0;
            item.value.lastOffsetX = item.value.lastOffsetY = 0;
            item.tweener = GTween.shake(0, 0, item.value.amplitude, item.value.duration).setDelay(time).setTimeScale(this._timeScale).setTarget(item).onUpdate(this.onTweenUpdate, this).onComplete(this.onTweenComplete, this);
            if (this._endTime >= 0) item.tweener.setBreakpoint(this._endTime - item.time);
            this._totalTasks++;
          } else {
            if (this._reversed) time = this._totalDuration - item.time;else time = item.time;

            if (time <= this._startTime) {
              this.applyValue(item);
              this.callHook(item, false);
            } else if (this._endTime == -1 || time <= this._endTime) {
              this._totalTasks++;
              item.tweener = GTween.delayedCall(time).setTimeScale(this._timeScale).setTarget(item).onComplete(this.onDelayedPlayItem, this);
            }
          }

          if (item.tweener) item.tweener.seek(this._startTime);
        };

        _proto42.skipAnimations = function skipAnimations() {
          var frame;
          var playStartTime;
          var playTotalTime;
          var value;
          var target;
          var item;
          var cnt = this._items.length;

          for (var i = 0; i < cnt; i++) {
            item = this._items[i];
            if (item.type != ActionType.Animation || item.time > this._startTime) continue;
            value = item.value;
            if (value.flag) continue;
            target = item.target;
            frame = target.getProp(ObjectPropID.Frame);
            playStartTime = target.getProp(ObjectPropID.Playing) ? 0 : -1;
            playTotalTime = 0;

            for (var j = i; j < cnt; j++) {
              item = this._items[j];
              if (item.type != ActionType.Animation || item.target != target || item.time > this._startTime) continue;
              value = item.value;
              value.flag = true;

              if (value.frame != -1) {
                frame = value.frame;
                if (value.playing) playStartTime = item.time;else playStartTime = -1;
                playTotalTime = 0;
              } else {
                if (value.playing) {
                  if (playStartTime < 0) playStartTime = item.time;
                } else {
                  if (playStartTime >= 0) playTotalTime += item.time - playStartTime;
                  playStartTime = -1;
                }
              }

              this.callHook(item, false);
            }

            if (playStartTime >= 0) playTotalTime += this._startTime - playStartTime;
            target.setProp(ObjectPropID.Playing, playStartTime >= 0);
            target.setProp(ObjectPropID.Frame, frame);
            if (playTotalTime > 0) target.setProp(ObjectPropID.DeltaTime, playTotalTime);
          }
        };

        _proto42.onDelayedPlayItem = function onDelayedPlayItem(tweener) {
          var item = tweener.target;
          item.tweener = null;
          this._totalTasks--;
          this.applyValue(item);
          this.callHook(item, false);
          this.checkAllComplete();
        };

        _proto42.onTweenStart = function onTweenStart(tweener) {
          var item = tweener.target;

          if (item.type == ActionType.XY || item.type == ActionType.Size) //位置和大小要到start才最终确认起始值
            {
              var startValue;
              var endValue;

              if (this._reversed) {
                startValue = item.tweenConfig.endValue;
                endValue = item.tweenConfig.startValue;
              } else {
                startValue = item.tweenConfig.startValue;
                endValue = item.tweenConfig.endValue;
              }

              if (item.type == ActionType.XY) {
                if (item.target != this._owner) {
                  if (!startValue.b1) tweener.startValue.x = item.target.x;else if (startValue.b3) //percent
                    tweener.startValue.x = startValue.f1 * this._owner.width;
                  if (!startValue.b2) tweener.startValue.y = item.target.y;else if (startValue.b3) //percent
                    tweener.startValue.y = startValue.f2 * this._owner.height;
                  if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;else if (endValue.b3) tweener.endValue.x = endValue.f1 * this._owner.width;
                  if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;else if (endValue.b3) tweener.endValue.y = endValue.f2 * this._owner.height;
                } else {
                  if (!startValue.b1) tweener.startValue.x = item.target.x - this._ownerBaseX;
                  if (!startValue.b2) tweener.startValue.y = item.target.y - this._ownerBaseY;
                  if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                  if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
                }
              } else {
                if (!startValue.b1) tweener.startValue.x = item.target.width;
                if (!startValue.b2) tweener.startValue.y = item.target.height;
                if (!endValue.b1) tweener.endValue.x = tweener.startValue.x;
                if (!endValue.b2) tweener.endValue.y = tweener.startValue.y;
              }

              if (item.tweenConfig.path) {
                item.value.b1 = item.value.b2 = true;
                tweener.setPath(item.tweenConfig.path);
              }
            }

          this.callHook(item, false);
        };

        _proto42.onTweenUpdate = function onTweenUpdate(tweener) {
          var item = tweener.target;

          switch (item.type) {
            case ActionType.XY:
            case ActionType.Size:
            case ActionType.Scale:
            case ActionType.Skew:
              item.value.f1 = tweener.value.x;
              item.value.f2 = tweener.value.y;

              if (item.tweenConfig.path) {
                item.value.f1 += tweener.startValue.x;
                item.value.f2 += tweener.startValue.y;
              }

              break;

            case ActionType.Alpha:
            case ActionType.Rotation:
              item.value.f1 = tweener.value.x;
              break;

            case ActionType.Color:
              item.value.f1 = tweener.value.color;
              break;

            case ActionType.ColorFilter:
              item.value.f1 = tweener.value.x;
              item.value.f2 = tweener.value.y;
              item.value.f3 = tweener.value.z;
              item.value.f4 = tweener.value.w;
              break;

            case ActionType.Shake:
              item.value.offsetX = tweener.deltaValue.x;
              item.value.offsetY = tweener.deltaValue.y;
              break;
          }

          this.applyValue(item);
        };

        _proto42.onTweenComplete = function onTweenComplete(tweener) {
          var item = tweener.target;
          item.tweener = null;
          this._totalTasks--;
          if (tweener.allCompleted) //当整体播放结束时间在这个tween的中间时不应该调用结尾钩子
            this.callHook(item, true);
          this.checkAllComplete();
        };

        _proto42.onPlayTransCompleted = function onPlayTransCompleted(item) {
          this._totalTasks--;
          this.checkAllComplete();
        };

        _proto42.callHook = function callHook(item, tweenEnd) {
          if (tweenEnd) {
            if (item.tweenConfig && item.tweenConfig.endHook != null) item.tweenConfig.endHook(item.label);
          } else {
            if (item.time >= this._startTime && item.hook != null) item.hook(item.label);
          }
        };

        _proto42.checkAllComplete = function checkAllComplete() {
          if (this._playing && this._totalTasks == 0) {
            if (this._totalTimes < 0) {
              this.internalPlay();
              if (this._totalTasks == 0) GTween.delayedCall(0).setTarget(this).onComplete(this.checkAllComplete, this);
            } else {
              this._totalTimes--;

              if (this._totalTimes > 0) {
                this.internalPlay();
                if (this._totalTasks == 0) GTween.delayedCall(0).setTarget(this).onComplete(this.checkAllComplete, this);
              } else {
                this._playing = false;
                var cnt = this._items.length;

                for (var i = 0; i < cnt; i++) {
                  var item = this._items[i];

                  if (item.target && item.displayLockToken != 0) {
                    item.target.releaseDisplayLock(item.displayLockToken);
                    item.displayLockToken = 0;
                  }
                }

                if (this._onComplete != null) {
                  var func = this._onComplete;
                  this._onComplete = null;
                  func();
                }
              }
            }
          }
        };

        _proto42.applyValue = function applyValue(item) {
          item.target._gearLocked = true;
          var value = item.value;

          switch (item.type) {
            case ActionType.XY:
              if (item.target == this._owner) {
                if (value.b1 && value.b2) item.target.setPosition(value.f1 + this._ownerBaseX, value.f2 + this._ownerBaseY);else if (value.b1) item.target.x = value.f1 + this._ownerBaseX;else item.target.y = value.f2 + this._ownerBaseY;
              } else {
                if (value.b3) //position in percent
                  {
                    if (value.b1 && value.b2) item.target.setPosition(value.f1 * this._owner.width, value.f2 * this._owner.height);else if (value.b1) item.target.x = value.f1 * this._owner.width;else if (value.b2) item.target.y = value.f2 * this._owner.height;
                  } else {
                  if (value.b1 && value.b2) item.target.setPosition(value.f1, value.f2);else if (value.b1) item.target.x = value.f1;else if (value.b2) item.target.y = value.f2;
                }
              }

              break;

            case ActionType.Size:
              if (!value.b1) value.f1 = item.target.width;
              if (!value.b2) value.f2 = item.target.height;
              item.target.setSize(value.f1, value.f2);
              break;

            case ActionType.Pivot:
              item.target.setPivot(value.f1, value.f2, item.target.pivotAsAnchor);
              break;

            case ActionType.Alpha:
              item.target.alpha = value.f1;
              break;

            case ActionType.Rotation:
              item.target.rotation = value.f1;
              break;

            case ActionType.Scale:
              item.target.setScale(value.f1, value.f2);
              break;

            case ActionType.Skew:
              //item.target.setSkew(value.f1, value.f2);
              break;

            case ActionType.Color:
              var color = item.target.getProp(ObjectPropID.Color);

              if (color instanceof Color) {
                var i = Math.floor(value.f1);
                color.r = i >> 16 & 0xFF;
                color.g = i >> 8 & 0xFF;
                color.b = i & 0xFF;
                item.target.setProp(ObjectPropID.Color, color);
              }

              break;

            case ActionType.Animation:
              if (value.frame >= 0) item.target.setProp(ObjectPropID.Frame, value.frame);
              item.target.setProp(ObjectPropID.Playing, value.playing);
              item.target.setProp(ObjectPropID.TimeScale, this._timeScale);
              break;

            case ActionType.Visible:
              item.target.visible = value.visible;
              break;

            case ActionType.Transition:
              if (this._playing) {
                var trans = value.trans;

                if (trans) {
                  this._totalTasks++;
                  var startTime = this._startTime > item.time ? this._startTime - item.time : 0;
                  var endTime = this._endTime >= 0 ? this._endTime - item.time : -1;
                  if (value.stopTime >= 0 && (endTime < 0 || endTime > value.stopTime)) endTime = value.stopTime;
                  trans.timeScale = this._timeScale;
                  var localThis = this;

                  trans._play(function () {
                    localThis.onPlayTransCompleted(item);
                  }, value.playTimes, 0, startTime, endTime, this._reversed);
                }
              }

              break;

            case ActionType.Sound:
              if (this._playing && item.time >= this._startTime) {
                if (value.audioClip == null) {
                  var pi = UIPackage.getItemByURL(value.sound);
                  if (pi) value.audioClip = pi.owner.getItemAsset(pi);
                }

                if (value.audioClip) Decls$1.GRoot.inst.playOneShotSound(value.audioClip, value.volume);
              }

              break;

            case ActionType.Shake:
              item.target.setPosition(item.target.x - value.lastOffsetX + value.offsetX, item.target.y - value.lastOffsetY + value.offsetY);
              value.lastOffsetX = value.offsetX;
              value.lastOffsetY = value.offsetY;
              break;

            case ActionType.ColorFilter:
              {
                //TODO: filter support
                break;
              }

            case ActionType.Text:
              item.target.text = value.text;
              break;

            case ActionType.Icon:
              item.target.icon = value.text;
              break;
          }

          item.target._gearLocked = false;
        };

        _proto42.setup = function setup(buffer) {
          this.name = buffer.readS();
          this._options = buffer.readInt();
          this._autoPlay = buffer.readBool();
          this._autoPlayTimes = buffer.readInt();
          this._autoPlayDelay = buffer.readFloat();
          var cnt = buffer.readShort();

          for (var i = 0; i < cnt; i++) {
            var dataLen = buffer.readShort();
            var curPos = buffer.position;
            buffer.seek(curPos, 0);
            var item = new Item(buffer.readByte());
            this._items[i] = item;
            item.time = buffer.readFloat();
            var targetId = buffer.readShort();
            if (targetId < 0) item.targetId = "";else item.targetId = this._owner.getChildAt(targetId).id;
            item.label = buffer.readS();

            if (buffer.readBool()) {
              buffer.seek(curPos, 1);
              item.tweenConfig = new TweenConfig();
              item.tweenConfig.duration = buffer.readFloat();
              if (item.time + item.tweenConfig.duration > this._totalDuration) this._totalDuration = item.time + item.tweenConfig.duration;
              item.tweenConfig.easeType = buffer.readByte();
              item.tweenConfig.repeat = buffer.readInt();
              item.tweenConfig.yoyo = buffer.readBool();
              item.tweenConfig.endLabel = buffer.readS();
              buffer.seek(curPos, 2);
              this.decodeValue(item, buffer, item.tweenConfig.startValue);
              buffer.seek(curPos, 3);
              this.decodeValue(item, buffer, item.tweenConfig.endValue);

              if (buffer.version >= 2) {
                var pathLen = buffer.readInt();

                if (pathLen > 0) {
                  item.tweenConfig.path = new GPath();
                  var pts = new Array();

                  for (var j = 0; j < pathLen; j++) {
                    var curveType = buffer.readByte();

                    switch (curveType) {
                      case CurveType.Bezier:
                        pts.push(GPathPoint.newBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                        break;

                      case CurveType.CubicBezier:
                        pts.push(GPathPoint.newCubicBezierPoint(buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat(), buffer.readFloat()));
                        break;

                      default:
                        pts.push(GPathPoint.newPoint(buffer.readFloat(), buffer.readFloat(), curveType));
                        break;
                    }
                  }

                  item.tweenConfig.path.create(pts);
                }
              }
            } else {
              if (item.time > this._totalDuration) this._totalDuration = item.time;
              buffer.seek(curPos, 2);
              this.decodeValue(item, buffer, item.value);
            }

            buffer.position = curPos + dataLen;
          }
        };

        _proto42.decodeValue = function decodeValue(item, buffer, value) {
          switch (item.type) {
            case ActionType.XY:
            case ActionType.Size:
            case ActionType.Pivot:
            case ActionType.Skew:
              value.b1 = buffer.readBool();
              value.b2 = buffer.readBool();
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              if (buffer.version >= 2 && item.type == ActionType.XY) value.b3 = buffer.readBool(); //percent

              break;

            case ActionType.Alpha:
            case ActionType.Rotation:
              value.f1 = buffer.readFloat();
              break;

            case ActionType.Scale:
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              break;

            case ActionType.Color:
              var color = buffer.readColor();
              value.f1 = (color.r << 16) + (color.g << 8) + color.b;
              break;

            case ActionType.Animation:
              value.playing = buffer.readBool();
              value.frame = buffer.readInt();
              break;

            case ActionType.Visible:
              value.visible = buffer.readBool();
              break;

            case ActionType.Sound:
              value.sound = buffer.readS();
              value.volume = buffer.readFloat();
              break;

            case ActionType.Transition:
              value.transName = buffer.readS();
              value.playTimes = buffer.readInt();
              break;

            case ActionType.Shake:
              value.amplitude = buffer.readFloat();
              value.duration = buffer.readFloat();
              break;

            case ActionType.ColorFilter:
              value.f1 = buffer.readFloat();
              value.f2 = buffer.readFloat();
              value.f3 = buffer.readFloat();
              value.f4 = buffer.readFloat();
              break;

            case ActionType.Text:
            case ActionType.Icon:
              value.text = buffer.readS();
              break;
          }
        };

        _createClass(Transition, [{
          key: "playing",
          get: function get() {
            return this._playing;
          }
        }, {
          key: "timeScale",
          get: function get() {
            return this._timeScale;
          },
          set: function set(value) {
            if (this._timeScale != value) {
              this._timeScale = value;

              if (this._playing) {
                var cnt = this._items.length;

                for (var i = 0; i < cnt; i++) {
                  var item = this._items[i];
                  if (item.tweener) item.tweener.setTimeScale(value);else if (item.type == ActionType.Transition) {
                    if (item.value.trans) item.value.trans.timeScale = value;
                  } else if (item.type == ActionType.Animation) {
                    if (item.target) item.target.setProp(ObjectPropID.TimeScale, value);
                  }
                }
              }
            }
          }
        }]);

        return Transition;
      }());
      var OPTION_IGNORE_DISPLAY_CONTROLLER = 1;
      var OPTION_AUTO_STOP_DISABLED = 2;
      var OPTION_AUTO_STOP_AT_END = 4;
      var ActionType;

      (function (ActionType) {
        ActionType[ActionType["XY"] = 0] = "XY";
        ActionType[ActionType["Size"] = 1] = "Size";
        ActionType[ActionType["Scale"] = 2] = "Scale";
        ActionType[ActionType["Pivot"] = 3] = "Pivot";
        ActionType[ActionType["Alpha"] = 4] = "Alpha";
        ActionType[ActionType["Rotation"] = 5] = "Rotation";
        ActionType[ActionType["Color"] = 6] = "Color";
        ActionType[ActionType["Animation"] = 7] = "Animation";
        ActionType[ActionType["Visible"] = 8] = "Visible";
        ActionType[ActionType["Sound"] = 9] = "Sound";
        ActionType[ActionType["Transition"] = 10] = "Transition";
        ActionType[ActionType["Shake"] = 11] = "Shake";
        ActionType[ActionType["ColorFilter"] = 12] = "ColorFilter";
        ActionType[ActionType["Skew"] = 13] = "Skew";
        ActionType[ActionType["Text"] = 14] = "Text";
        ActionType[ActionType["Icon"] = 15] = "Icon";
        ActionType[ActionType["Unknown"] = 16] = "Unknown";
      })(ActionType || (ActionType = {}));

      var Item = function Item(type) {
        this.type = type;
        this.value = {};
        this.displayLockToken = 0;
      };

      var TweenConfig = function TweenConfig() {
        this.easeType = EaseType.QuadOut;
        this.startValue = {
          b1: true,
          b2: true
        };
        this.endValue = {
          b1: true,
          b2: true
        };
      };

      var GComponent = exports('GComponent', /*#__PURE__*/function (_GObject6) {
        _inheritsLoose(GComponent, _GObject6);

        function GComponent() {
          var _this16;

          _this16 = _GObject6.call(this) || this;
          _this16.hitArea = void 0;
          _this16._sortingChildCount = 0;
          _this16._opaque = void 0;
          _this16._applyingController = void 0;
          _this16._rectMask = void 0;
          _this16._maskContent = void 0;
          _this16._invertedMask = false;
          _this16._containerUITrans = void 0;
          _this16._margin = void 0;
          _this16._trackBounds = void 0;
          _this16._boundsChanged = void 0;
          _this16._childrenRenderOrder = ChildrenRenderOrder.Ascent;
          _this16._apexIndex = 0;
          _this16._buildingDisplayList = void 0;
          _this16._children = void 0;
          _this16._controllers = void 0;
          _this16._transitions = void 0;
          _this16._container = void 0;
          _this16._scrollPane = void 0;
          _this16._alignOffset = void 0;
          _this16._customMask = void 0;
          _this16._sortingChildCount = 0;
          _this16._invertedMask = false;
          _this16._childrenRenderOrder = ChildrenRenderOrder.Ascent;
          _this16._apexIndex = 0;
          _this16._node.name = "GComponent";
          _this16._children = new Array();
          _this16._controllers = new Array();
          _this16._transitions = new Array();
          _this16._margin = new Margin();
          _this16._alignOffset = new Vec2();
          _this16._container = new Node("Container");
          _this16._container.layer = UIConfig.defaultUILayer;
          _this16._containerUITrans = _this16._container.addComponent(UITransform);

          _this16._containerUITrans.setAnchorPoint(0, 1);

          _this16._node.addChild(_this16._container);

          return _this16;
        }

        var _proto43 = GComponent.prototype;

        _proto43.dispose = function dispose() {
          var i;
          var cnt;
          cnt = this._transitions.length;

          for (i = 0; i < cnt; ++i) {
            var trans = this._transitions[i];
            trans.dispose();
          }

          cnt = this._controllers.length;

          for (i = 0; i < cnt; ++i) {
            var cc = this._controllers[i];
            cc.dispose();
          }

          if (this._scrollPane) this._scrollPane.destroy();
          cnt = this._children.length;

          for (i = cnt - 1; i >= 0; --i) {
            var obj = this._children[i];
            obj._parent = null; //avoid removeFromParent call

            obj.dispose();
          }

          this._boundsChanged = false;

          _GObject6.prototype.dispose.call(this);
        };

        _proto43.addChild = function addChild(child) {
          this.addChildAt(child, this._children.length);
          return child;
        };

        _proto43.addChildAt = function addChildAt(child, index) {
          if (!child) throw new Error("child is null");
          var numChildren = this._children.length;

          if (index >= 0 && index <= numChildren) {
            if (child.parent == this) {
              this.setChildIndex(child, index);
            } else {
              child.removeFromParent();
              child._parent = this;
              var cnt = this._children.length;

              if (child.sortingOrder != 0) {
                this._sortingChildCount++;
                index = this.getInsertPosForSortingChild(child);
              } else if (this._sortingChildCount > 0) {
                if (index > cnt - this._sortingChildCount) index = cnt - this._sortingChildCount;
              }

              if (index == cnt) this._children.push(child);else this._children.splice(index, 0, child);
              this.onChildAdd(child, index);
              this.setBoundsChangedFlag();
            }

            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };

        _proto43.getInsertPosForSortingChild = function getInsertPosForSortingChild(target) {
          var cnt = this._children.length;
          var i = 0;

          for (i = 0; i < cnt; i++) {
            var child = this._children[i];
            if (child == target) continue;
            if (target.sortingOrder < child.sortingOrder) break;
          }

          return i;
        };

        _proto43.removeChild = function removeChild(child, dispose) {
          var childIndex = this._children.indexOf(child);

          if (childIndex != -1) {
            this.removeChildAt(childIndex, dispose);
          }

          return child;
        };

        _proto43.removeChildAt = function removeChildAt(index, dispose) {
          if (index >= 0 && index < this.numChildren) {
            var child = this._children[index];
            child._parent = null;
            if (child.sortingOrder != 0) this._sortingChildCount--;

            this._children.splice(index, 1);

            child.group = null;

            this._container.removeChild(child.node);

            if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) this._partner.callLater(this.buildNativeDisplayList);
            if (dispose) child.dispose();else child.node.parent = null;
            this.setBoundsChangedFlag();
            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };

        _proto43.removeChildren = function removeChildren(beginIndex, endIndex, dispose) {
          if (beginIndex == undefined) beginIndex = 0;
          if (endIndex == undefined) endIndex = -1;
          if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;

          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildAt(beginIndex, dispose);
        };

        _proto43.getChildAt = function getChildAt(index, classType) {
          if (index >= 0 && index < this.numChildren) return this._children[index];else throw new Error("Invalid child index");
        };

        _proto43.getChild = function getChild(name, classType) {
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            if (this._children[i].name == name) return this._children[i];
          }

          return null;
        };

        _proto43.getChildByPath = function getChildByPath(path, classType) {
          var arr = path.split(".");
          var cnt = arr.length;
          var gcom = this;
          var obj;

          for (var i = 0; i < cnt; ++i) {
            obj = gcom.getChild(arr[i]);
            if (!obj) break;

            if (i != cnt - 1) {
              if (!(obj instanceof GComponent)) {
                obj = null;
                break;
              } else gcom = obj;
            }
          }

          return obj;
        };

        _proto43.getVisibleChild = function getVisibleChild(name) {
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (child._finalVisible && child.name == name) return child;
          }

          return null;
        };

        _proto43.getChildInGroup = function getChildInGroup(name, group) {
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (child.group == group && child.name == name) return child;
          }

          return null;
        };

        _proto43.getChildById = function getChildById(id) {
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            if (this._children[i]._id == id) return this._children[i];
          }

          return null;
        };

        _proto43.getChildIndex = function getChildIndex(child) {
          return this._children.indexOf(child);
        };

        _proto43.setChildIndex = function setChildIndex(child, index) {
          var oldIndex = this._children.indexOf(child);

          if (oldIndex == -1) throw new Error("Not a child of this container");
          if (child.sortingOrder != 0) //no effect
            return;
          var cnt = this._children.length;

          if (this._sortingChildCount > 0) {
            if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
          }

          this._setChildIndex(child, oldIndex, index);
        };

        _proto43.setChildIndexBefore = function setChildIndexBefore(child, index) {
          var oldIndex = this._children.indexOf(child);

          if (oldIndex == -1) throw new Error("Not a child of this container");
          if (child.sortingOrder != 0) //no effect
            return oldIndex;
          var cnt = this._children.length;

          if (this._sortingChildCount > 0) {
            if (index > cnt - this._sortingChildCount - 1) index = cnt - this._sortingChildCount - 1;
          }

          if (oldIndex < index) return this._setChildIndex(child, oldIndex, index - 1);else return this._setChildIndex(child, oldIndex, index);
        };

        _proto43._setChildIndex = function _setChildIndex(child, oldIndex, index) {
          var cnt = this._children.length;
          if (index > cnt) index = cnt;
          if (oldIndex == index) return oldIndex;

          this._children.splice(oldIndex, 1);

          this._children.splice(index, 0, child);

          if (this._childrenRenderOrder == ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
          this.setBoundsChangedFlag();
          return index;
        };

        _proto43.swapChildren = function swapChildren(child1, child2) {
          var index1 = this._children.indexOf(child1);

          var index2 = this._children.indexOf(child2);

          if (index1 == -1 || index2 == -1) throw new Error("Not a child of this container");
          this.swapChildrenAt(index1, index2);
        };

        _proto43.swapChildrenAt = function swapChildrenAt(index1, index2) {
          var child1 = this._children[index1];
          var child2 = this._children[index2];
          this.setChildIndex(child1, index2);
          this.setChildIndex(child2, index1);
        };

        _proto43.isAncestorOf = function isAncestorOf(child) {
          if (child == null) return false;
          var p = child.parent;

          while (p) {
            if (p == this) return true;
            p = p.parent;
          }

          return false;
        };

        _proto43.addController = function addController(controller) {
          this._controllers.push(controller);

          controller.parent = this;
          this.applyController(controller);
        };

        _proto43.getControllerAt = function getControllerAt(index) {
          return this._controllers[index];
        };

        _proto43.getController = function getController(name) {
          var cnt = this._controllers.length;

          for (var i = 0; i < cnt; ++i) {
            var c = this._controllers[i];
            if (c.name == name) return c;
          }

          return null;
        };

        _proto43.removeController = function removeController(c) {
          var index = this._controllers.indexOf(c);

          if (index == -1) throw new Error("controller not exists");
          c.parent = null;

          this._controllers.splice(index, 1);

          var length = this._children.length;

          for (var i = 0; i < length; i++) {
            var child = this._children[i];
            child.handleControllerChanged(c);
          }
        };

        _proto43.onChildAdd = function onChildAdd(child, index) {
          child.node.parent = this._container;
          child.node.active = child._finalVisible;
          if (this._buildingDisplayList) return;
          var cnt = this._children.length;
          if (this._childrenRenderOrder == ChildrenRenderOrder.Ascent) child.node.setSiblingIndex(index);else if (this._childrenRenderOrder == ChildrenRenderOrder.Descent) child.node.setSiblingIndex(cnt - index);else this._partner.callLater(this.buildNativeDisplayList);
        };

        _proto43.buildNativeDisplayList = function buildNativeDisplayList(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);

            _t.buildNativeDisplayList();

            return;
          }

          var cnt = this._children.length;
          if (cnt == 0) return;
          var child;

          switch (this._childrenRenderOrder) {
            case ChildrenRenderOrder.Ascent:
              {
                var j = 0;

                for (var i = 0; i < cnt; i++) {
                  child = this._children[i];
                  child.node.setSiblingIndex(j++);
                }
              }
              break;

            case ChildrenRenderOrder.Descent:
              {
                var _j = 0;

                for (var _i3 = cnt - 1; _i3 >= 0; _i3--) {
                  child = this._children[_i3];
                  child.node.setSiblingIndex(_j++);
                }
              }
              break;

            case ChildrenRenderOrder.Arch:
              {
                var _j2 = 0;

                for (var _i4 = 0; _i4 < this._apexIndex; _i4++) {
                  child = this._children[_i4];
                  child.node.setSiblingIndex(_j2++);
                }

                for (var _i5 = cnt - 1; _i5 >= this._apexIndex; _i5--) {
                  child = this._children[_i5];
                  child.node.setSiblingIndex(_j2++);
                }
              }
              break;
          }
        };

        _proto43.applyController = function applyController(c) {
          this._applyingController = c;
          var child;
          var length = this._children.length;

          for (var i = 0; i < length; i++) {
            child = this._children[i];
            child.handleControllerChanged(c);
          }

          this._applyingController = null;
          c.runActions();
        };

        _proto43.applyAllControllers = function applyAllControllers() {
          var cnt = this._controllers.length;

          for (var i = 0; i < cnt; ++i) {
            this.applyController(this._controllers[i]);
          }
        };

        _proto43.adjustRadioGroupDepth = function adjustRadioGroupDepth(obj, c) {
          var cnt = this._children.length;
          var i;
          var child;
          var myIndex = -1,
              maxIndex = -1;

          for (i = 0; i < cnt; i++) {
            child = this._children[i];

            if (child == obj) {
              myIndex = i;
            } else if ("relatedController" in child
            /*is button*/
            && child.relatedController == c) {
              if (i > maxIndex) maxIndex = i;
            }
          }

          if (myIndex < maxIndex) {
            if (this._applyingController) this._children[maxIndex].handleControllerChanged(this._applyingController);
            this.swapChildrenAt(myIndex, maxIndex);
          }
        };

        _proto43.getTransitionAt = function getTransitionAt(index) {
          return this._transitions[index];
        };

        _proto43.getTransition = function getTransition(transName) {
          var cnt = this._transitions.length;

          for (var i = 0; i < cnt; ++i) {
            var trans = this._transitions[i];
            if (trans.name == transName) return trans;
          }

          return null;
        };

        _proto43.isChildInView = function isChildInView(child) {
          if (this._rectMask) {
            return child.x + child.width >= 0 && child.x <= this.width && child.y + child.height >= 0 && child.y <= this.height;
          } else if (this._scrollPane) {
            return this._scrollPane.isChildInView(child);
          } else return true;
        };

        _proto43.getFirstChildInView = function getFirstChildInView() {
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            var child = this._children[i];
            if (this.isChildInView(child)) return i;
          }

          return -1;
        };

        _proto43.setMask = function setMask(value, inverted) {
          if (this._maskContent) {
            this._maskContent.node.off(Node.EventType.TRANSFORM_CHANGED, this.onMaskContentChanged, this);

            this._maskContent.node.off(Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);

            this._maskContent.node.off(Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);

            this._maskContent.visible = true;
          }

          this._maskContent = value;

          if (this._maskContent) {
            if (!(value instanceof GImage) && !(value instanceof GGraph)) return;

            if (!this._customMask) {
              var maskNode = new Node("Mask");
              maskNode.layer = UIConfig.defaultUILayer;
              maskNode.addComponent(UITransform);
              maskNode.parent = this._node;
              if (this._scrollPane) this._container.parent.parent = maskNode;else this._container.parent = maskNode;
              this._customMask = maskNode.addComponent(Mask);
            }

            value.visible = false;
            value.node.on(Node.EventType.TRANSFORM_CHANGED, this.onMaskContentChanged, this);
            value.node.on(Node.EventType.SIZE_CHANGED, this.onMaskContentChanged, this);
            value.node.on(Node.EventType.ANCHOR_CHANGED, this.onMaskContentChanged, this);
            this._invertedMask = inverted;
            if (this._node.activeInHierarchy) this.onMaskReady();else this.on(Event.DISPLAY, this.onMaskReady, this);
            this.onMaskContentChanged();
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(0, 0);
          } else if (this._customMask) {
            if (this._scrollPane) this._container.parent.parent = this._node;else this._container.parent = this._node;

            this._customMask.node.destroy();

            this._customMask = null;
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
          }
        };

        _proto43.onMaskReady = function onMaskReady() {
          this.off(Event.DISPLAY, this.onMaskReady, this);

          if (this._maskContent instanceof GImage) {
            this._customMask.type = Mask.Type.SPRITE_STENCIL;
            this._customMask.alphaThreshold = 0.0001;
            this._customMask.spriteFrame = this._maskContent._content.spriteFrame;
          } else if (this._maskContent instanceof GGraph) {
            if (this._maskContent.type == 2) this._customMask.type = Mask.Type.GRAPHICS_ELLIPSE;else this._customMask.type = Mask.Type.GRAPHICS_RECT;
          }

          this._customMask.inverted = this._invertedMask;
        };

        _proto43.onMaskContentChanged = function onMaskContentChanged() {
          var maskNode = this._customMask.node;
          var maskUITrans = maskNode.getComponent(UITransform);
          var contentNode = this._maskContent.node;
          var contentUITrans = this._maskContent._uiTrans;
          var w = this._maskContent.width * this._maskContent.scaleX;
          var h = this._maskContent.height * this._maskContent.scaleY;
          maskUITrans.setContentSize(w, h);
          var left = contentNode.position.x - contentUITrans.anchorX * w;
          var top = contentNode.position.y - contentUITrans.anchorY * h;
          maskUITrans.setAnchorPoint(-left / maskUITrans.width, -top / maskUITrans.height);
          maskNode.setPosition(this._pivotCorrectX, this._pivotCorrectY);
        };

        _proto43.setupScroll = function setupScroll(buffer) {
          this._scrollPane = this._node.addComponent(ScrollPane);

          this._scrollPane.setup(buffer);
        };

        _proto43.setupOverflow = function setupOverflow(overflow) {
          if (overflow == OverflowType.Hidden) this._rectMask = this._container.addComponent(Mask);
          if (!this._margin.isNone) this.handleSizeChanged();
        };

        _proto43.handleAnchorChanged = function handleAnchorChanged() {
          _GObject6.prototype.handleAnchorChanged.call(this);

          if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
        };

        _proto43.handleSizeChanged = function handleSizeChanged() {
          _GObject6.prototype.handleSizeChanged.call(this);

          if (this._customMask) this._customMask.node.setPosition(this._pivotCorrectX, this._pivotCorrectY);else if (!this._scrollPane) this._container.setPosition(this._pivotCorrectX, this._pivotCorrectY);
          if (this._scrollPane) this._scrollPane.onOwnerSizeChanged();else this._containerUITrans.setContentSize(this.viewWidth, this.viewHeight);
        };

        _proto43.handleGrayedChanged = function handleGrayedChanged() {
          var c = this.getController("grayed");

          if (c) {
            c.selectedIndex = this.grayed ? 1 : 0;
            return;
          }

          var v = this.grayed;
          var cnt = this._children.length;

          for (var i = 0; i < cnt; ++i) {
            this._children[i].grayed = v;
          }
        };

        _proto43.handleControllerChanged = function handleControllerChanged(c) {
          _GObject6.prototype.handleControllerChanged.call(this, c);

          if (this._scrollPane) this._scrollPane.handleControllerChanged(c);
        };

        _proto43._hitTest = function _hitTest(pt, globalPt) {
          if (this._customMask) {
            s_vec2$2.set(globalPt);
            s_vec2$2.y = UIContentScaler.rootSize.height - globalPt.y;
            var b = this._customMask.isHit(s_vec2$2) || false;
            if (!b) return null;
          }

          if (this.hitArea) {
            if (!this.hitArea.hitTest(pt, globalPt)) return null;
          } else if (this._rectMask) {
            s_vec2$2.set(pt);
            s_vec2$2.x += this._container.position.x;
            s_vec2$2.y += this._container.position.y;
            var clippingSize = this._containerUITrans.contentSize;
            if (s_vec2$2.x < 0 || s_vec2$2.y < 0 || s_vec2$2.x >= clippingSize.width || s_vec2$2.y >= clippingSize.height) return null;
          }

          if (this._scrollPane) {
            var _target = this._scrollPane.hitTest(pt, globalPt);

            if (!_target) return null;
            if (_target != this) return _target;
          }

          var target = null;
          var cnt = this._children.length;

          for (var i = cnt - 1; i >= 0; i--) {
            var child = this._children[i];
            if (this._maskContent == child || child._touchDisabled) continue;
            target = child.hitTest(globalPt);
            if (target) break;
          }

          if (!target && this._opaque && (this.hitArea || pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height)) target = this;
          return target;
        };

        _proto43.setBoundsChangedFlag = function setBoundsChangedFlag() {
          if (!this._scrollPane && !this._trackBounds) return;

          if (!this._boundsChanged) {
            this._boundsChanged = true;

            this._partner.callLater(this.refresh);
          }
        };

        _proto43.refresh = function refresh(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);

            _t.refresh();

            return;
          }

          if (this._boundsChanged) {
            var len = this._children.length;

            if (len > 0) {
              for (var i = 0; i < len; i++) {
                var child = this._children[i];
                child.ensureSizeCorrect();
              }
            }

            this.updateBounds();
          }
        };

        _proto43.ensureBoundsCorrect = function ensureBoundsCorrect() {
          var len = this._children.length;

          if (len > 0) {
            for (var i = 0; i < len; i++) {
              var child = this._children[i];
              child.ensureSizeCorrect();
            }
          }

          if (this._boundsChanged) this.updateBounds();
        };

        _proto43.updateBounds = function updateBounds() {
          var ax = 0,
              ay = 0,
              aw = 0,
              ah = 0;
          var len = this._children.length;

          if (len > 0) {
            ax = Number.POSITIVE_INFINITY, ay = Number.POSITIVE_INFINITY;
            var ar = Number.NEGATIVE_INFINITY,
                ab = Number.NEGATIVE_INFINITY;
            var tmp = 0;
            var i = 0;

            for (var i = 0; i < len; i++) {
              var child = this._children[i];
              tmp = child.x;
              if (tmp < ax) ax = tmp;
              tmp = child.y;
              if (tmp < ay) ay = tmp;
              tmp = child.x + child.actualWidth;
              if (tmp > ar) ar = tmp;
              tmp = child.y + child.actualHeight;
              if (tmp > ab) ab = tmp;
            }

            aw = ar - ax;
            ah = ab - ay;
          }

          this.setBounds(ax, ay, aw, ah);
        };

        _proto43.setBounds = function setBounds(ax, ay, aw, ah) {
          if (ah === void 0) {
            ah = 0;
          }

          this._boundsChanged = false;
          if (this._scrollPane) this._scrollPane.setContentSize(Math.round(ax + aw), Math.round(ay + ah));
        };

        _proto43.getSnappingPosition = function getSnappingPosition(xValue, yValue, resultPoint) {
          if (!resultPoint) resultPoint = new Vec2();
          var cnt = this._children.length;

          if (cnt == 0) {
            resultPoint.x = 0;
            resultPoint.y = 0;
            return resultPoint;
          }

          this.ensureBoundsCorrect();
          var obj = null;
          var prev = null;
          var i = 0;

          if (yValue != 0) {
            for (; i < cnt; i++) {
              obj = this._children[i];

              if (yValue < obj.y) {
                if (i == 0) {
                  yValue = 0;
                  break;
                } else {
                  prev = this._children[i - 1];
                  if (yValue < prev.y + prev.actualHeight / 2) //top half part
                    yValue = prev.y;else //bottom half part
                    yValue = obj.y;
                  break;
                }
              }
            }

            if (i == cnt) yValue = obj.y;
          }

          if (xValue != 0) {
            if (i > 0) i--;

            for (; i < cnt; i++) {
              obj = this._children[i];

              if (xValue < obj.x) {
                if (i == 0) {
                  xValue = 0;
                  break;
                } else {
                  prev = this._children[i - 1];
                  if (xValue < prev.x + prev.actualWidth / 2) //top half part
                    xValue = prev.x;else //bottom half part
                    xValue = obj.x;
                  break;
                }
              }
            }

            if (i == cnt) xValue = obj.x;
          }

          resultPoint.x = xValue;
          resultPoint.y = yValue;
          return resultPoint;
        };

        _proto43.childSortingOrderChanged = function childSortingOrderChanged(child, oldValue, newValue) {
          if (newValue === void 0) {
            newValue = 0;
          }

          if (newValue == 0) {
            this._sortingChildCount--;
            this.setChildIndex(child, this._children.length);
          } else {
            if (oldValue == 0) this._sortingChildCount++;

            var oldIndex = this._children.indexOf(child);

            var index = this.getInsertPosForSortingChild(child);
            if (oldIndex < index) this._setChildIndex(child, oldIndex, index - 1);else this._setChildIndex(child, oldIndex, index);
          }
        };

        _proto43.constructFromResource = function constructFromResource() {
          this.constructFromResource2(null, 0);
        };

        _proto43.constructFromResource2 = function constructFromResource2(objectPool, poolIndex) {
          var contentItem = this.packageItem.getBranch();

          if (!contentItem.decoded) {
            contentItem.decoded = true;
            TranslationHelper.translateComponent(contentItem);
          }

          var i;
          var dataLen;
          var curPos;
          var nextPos;
          var f1;
          var f2;
          var i1;
          var i2;
          var buffer = contentItem.rawData;
          buffer.seek(0, 0);
          this._underConstruct = true;
          this.sourceWidth = buffer.readInt();
          this.sourceHeight = buffer.readInt();
          this.initWidth = this.sourceWidth;
          this.initHeight = this.sourceHeight;
          this.setSize(this.sourceWidth, this.sourceHeight);

          if (buffer.readBool()) {
            this.minWidth = buffer.readInt();
            this.maxWidth = buffer.readInt();
            this.minHeight = buffer.readInt();
            this.maxHeight = buffer.readInt();
          }

          if (buffer.readBool()) {
            f1 = buffer.readFloat();
            f2 = buffer.readFloat();
            this.setPivot(f1, f2, buffer.readBool());
          }

          if (buffer.readBool()) {
            this._margin.top = buffer.readInt();
            this._margin.bottom = buffer.readInt();
            this._margin.left = buffer.readInt();
            this._margin.right = buffer.readInt();
          }

          var overflow = buffer.readByte();

          if (overflow == OverflowType.Scroll) {
            var savedPos = buffer.position;
            buffer.seek(0, 7);
            this.setupScroll(buffer);
            buffer.position = savedPos;
          } else this.setupOverflow(overflow);

          if (buffer.readBool()) buffer.skip(8);
          this._buildingDisplayList = true;
          buffer.seek(0, 1);
          var controllerCount = buffer.readShort();

          for (i = 0; i < controllerCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var controller = new Controller();

            this._controllers.push(controller);

            controller.parent = this;
            controller.setup(buffer);
            buffer.position = nextPos;
          }

          buffer.seek(0, 2);
          var child;
          var childCount = buffer.readShort();

          for (i = 0; i < childCount; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            if (objectPool) child = objectPool[poolIndex + i];else {
              buffer.seek(curPos, 0);
              var type = buffer.readByte();
              var src = buffer.readS();
              var pkgId = buffer.readS();
              var pi = null;

              if (src != null) {
                var pkg;
                if (pkgId != null) pkg = UIPackage.getById(pkgId);else pkg = contentItem.owner;
                pi = pkg ? pkg.getItemById(src) : null;
              }

              if (pi) {
                child = Decls.UIObjectFactory.newObject(pi);
                child.constructFromResource();
              } else child = Decls.UIObjectFactory.newObject(type);
            }
            child._underConstruct = true;
            child.setup_beforeAdd(buffer, curPos);
            child._parent = this;
            child.node.parent = this._container;

            this._children.push(child);

            buffer.position = curPos + dataLen;
          }

          buffer.seek(0, 3);
          this.relations.setup(buffer, true);
          buffer.seek(0, 2);
          buffer.skip(2);

          for (i = 0; i < childCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            buffer.seek(buffer.position, 3);

            this._children[i].relations.setup(buffer, false);

            buffer.position = nextPos;
          }

          buffer.seek(0, 2);
          buffer.skip(2);

          for (i = 0; i < childCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            child = this._children[i];
            child.setup_afterAdd(buffer, buffer.position);
            child._underConstruct = false;
            buffer.position = nextPos;
          }

          buffer.seek(0, 4);
          buffer.skip(2); //customData

          this.opaque = buffer.readBool();
          var maskId = buffer.readShort();

          if (maskId != -1) {
            this.setMask(this.getChildAt(maskId), buffer.readBool());
          }

          var hitTestId = buffer.readS();
          i1 = buffer.readInt();
          i2 = buffer.readInt();

          if (hitTestId != null) {
            pi = contentItem.owner.getItemById(hitTestId);
            if (pi && pi.hitTestData) this.hitArea = new PixelHitTest(pi.hitTestData, i1, i2);
          } else if (i1 != 0 && i2 != -1) {
            this.hitArea = new ChildHitArea(this.getChildAt(i2));
          }

          buffer.seek(0, 5);
          var transitionCount = buffer.readShort();

          for (i = 0; i < transitionCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            var trans = new Transition(this);
            trans.setup(buffer);

            this._transitions.push(trans);

            buffer.position = nextPos;
          }

          this.applyAllControllers();
          this._buildingDisplayList = false;
          this._underConstruct = false;
          this.buildNativeDisplayList();
          this.setBoundsChangedFlag();
          if (contentItem.objectType != ObjectType.Component) this.constructExtension(buffer);
          this.onConstruct();
        };

        _proto43.constructExtension = function constructExtension(buffer) {};

        _proto43.onConstruct = function onConstruct() {};

        _proto43.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GObject6.prototype.setup_afterAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 4);
          var pageController = buffer.readShort();
          if (pageController != -1 && this._scrollPane) this._scrollPane.pageController = this._parent.getControllerAt(pageController);
          var cnt = buffer.readShort();

          for (var i = 0; i < cnt; i++) {
            var cc = this.getController(buffer.readS());
            var pageId = buffer.readS();
            if (cc) cc.selectedPageId = pageId;
          }

          if (buffer.version >= 2) {
            cnt = buffer.readShort();

            for (i = 0; i < cnt; i++) {
              var target = buffer.readS();
              var propertyId = buffer.readShort();
              var value = buffer.readS();
              var obj = this.getChildByPath(target);
              if (obj) obj.setProp(propertyId, value);
            }
          }
        };

        _proto43.onEnable = function onEnable() {
          var cnt = this._transitions.length;

          for (var i = 0; i < cnt; ++i) this._transitions[i].onEnable();
        };

        _proto43.onDisable = function onDisable() {
          var cnt = this._transitions.length;

          for (var i = 0; i < cnt; ++i) this._transitions[i].onDisable();
        };

        _createClass(GComponent, [{
          key: "UITrans",
          get: function get() {
            return this._containerUITrans;
          }
        }, {
          key: "displayListContainer",
          get: function get() {
            return this._container;
          }
        }, {
          key: "numChildren",
          get: function get() {
            return this._children.length;
          }
        }, {
          key: "controllers",
          get: function get() {
            return this._controllers;
          }
        }, {
          key: "scrollPane",
          get: function get() {
            return this._scrollPane;
          }
        }, {
          key: "opaque",
          get: function get() {
            return this._opaque;
          },
          set: function set(value) {
            this._opaque = value;
          }
        }, {
          key: "margin",
          get: function get() {
            return this._margin;
          },
          set: function set(value) {
            this._margin.copy(value);

            this.handleSizeChanged();
          }
        }, {
          key: "childrenRenderOrder",
          get: function get() {
            return this._childrenRenderOrder;
          },
          set: function set(value) {
            if (this._childrenRenderOrder != value) {
              this._childrenRenderOrder = value;
              this.buildNativeDisplayList();
            }
          }
        }, {
          key: "apexIndex",
          get: function get() {
            return this._apexIndex;
          },
          set: function set(value) {
            if (this._apexIndex != value) {
              this._apexIndex = value;
              if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) this.buildNativeDisplayList();
            }
          }
        }, {
          key: "mask",
          get: function get() {
            return this._maskContent;
          },
          set: function set(value) {
            this.setMask(value, false);
          }
        }, {
          key: "_pivotCorrectX",
          get: function get() {
            return -this.pivotX * this._width + this._margin.left;
          }
        }, {
          key: "_pivotCorrectY",
          get: function get() {
            return this.pivotY * this._height - this._margin.top;
          }
        }, {
          key: "baseUserData",
          get: function get() {
            var buffer = this.packageItem.rawData;
            buffer.seek(0, 4);
            return buffer.readS();
          }
        }, {
          key: "viewWidth",
          get: function get() {
            if (this._scrollPane) return this._scrollPane.viewWidth;else return this.width - this._margin.left - this._margin.right;
          },
          set: function set(value) {
            if (this._scrollPane) this._scrollPane.viewWidth = value;else this.width = value + this._margin.left + this._margin.right;
          }
        }, {
          key: "viewHeight",
          get: function get() {
            if (this._scrollPane) return this._scrollPane.viewHeight;else return this.height - this._margin.top - this._margin.bottom;
          },
          set: function set(value) {
            if (this._scrollPane) this._scrollPane.viewHeight = value;else this.height = value + this._margin.top + this._margin.bottom;
          }
        }]);

        return GComponent;
      }(GObject));
      var s_vec2$2 = new Vec2();
      var Window = exports('Window', /*#__PURE__*/function (_GComponent) {
        _inheritsLoose(Window, _GComponent);

        function Window() {
          var _this17;

          _this17 = _GComponent.call(this) || this;
          _this17._requestingCmd = 0;
          _this17._uiSources = new Array();
          _this17.bringToFontOnClick = UIConfig.bringWindowToFrontOnClick;

          _this17._node.on(Event.TOUCH_BEGIN, _this17.onTouchBegin_1, _assertThisInitialized(_this17), true);

          return _this17;
        }

        var _proto44 = Window.prototype;

        _proto44.addUISource = function addUISource(source) {
          this._uiSources.push(source);
        };

        _proto44.show = function show() {
          GRoot.inst.showWindow(this);
        };

        _proto44.showOn = function showOn(root) {
          root.showWindow(this);
        };

        _proto44.hide = function hide() {
          if (this.isShowing) this.doHideAnimation();
        };

        _proto44.hideImmediately = function hideImmediately() {
          var r = this.parent instanceof GRoot ? this.parent : null;
          if (!r) r = GRoot.inst;
          r.hideWindowImmediately(this);
        };

        _proto44.centerOn = function centerOn(r, restraint) {
          this.setPosition(Math.round((r.width - this.width) / 2), Math.round((r.height - this.height) / 2));

          if (restraint) {
            this.addRelation(r, RelationType.Center_Center);
            this.addRelation(r, RelationType.Middle_Middle);
          }
        };

        _proto44.toggleStatus = function toggleStatus() {
          if (this.isTop) this.hide();else this.show();
        };

        _proto44.bringToFront = function bringToFront() {
          GRoot.inst.bringToFront(this);
        };

        _proto44.showModalWait = function showModalWait(requestingCmd) {
          if (requestingCmd != null) this._requestingCmd = requestingCmd;

          if (UIConfig.windowModalWaiting) {
            if (!this._modalWaitPane) this._modalWaitPane = UIPackage.createObjectFromURL(UIConfig.windowModalWaiting);
            this.layoutModalWaitPane();
            this.addChild(this._modalWaitPane);
          }
        };

        _proto44.layoutModalWaitPane = function layoutModalWaitPane() {
          if (this._contentArea) {
            var pt = this._frame.localToGlobal();

            pt = this.globalToLocal(pt.x, pt.y, pt);

            this._modalWaitPane.setPosition(pt.x + this._contentArea.x, pt.y + this._contentArea.y);

            this._modalWaitPane.setSize(this._contentArea.width, this._contentArea.height);
          } else this._modalWaitPane.setSize(this.width, this.height);
        };

        _proto44.closeModalWait = function closeModalWait(requestingCmd) {
          if (requestingCmd != null) {
            if (this._requestingCmd != requestingCmd) return false;
          }

          this._requestingCmd = 0;
          if (this._modalWaitPane && this._modalWaitPane.parent) this.removeChild(this._modalWaitPane);
          return true;
        };

        _proto44.init = function init() {
          if (this._inited || this._loading) return;

          if (this._uiSources.length > 0) {
            this._loading = false;
            var cnt = this._uiSources.length;

            for (var i = 0; i < cnt; i++) {
              var lib = this._uiSources[i];

              if (!lib.loaded) {
                lib.load(this.__uiLoadComplete, this);
                this._loading = true;
              }
            }

            if (!this._loading) this._init();
          } else this._init();
        };

        _proto44.onInit = function onInit() {};

        _proto44.onShown = function onShown() {};

        _proto44.onHide = function onHide() {};

        _proto44.doShowAnimation = function doShowAnimation() {
          this.onShown();
        };

        _proto44.doHideAnimation = function doHideAnimation() {
          this.hideImmediately();
        };

        _proto44.__uiLoadComplete = function __uiLoadComplete() {
          var cnt = this._uiSources.length;

          for (var i = 0; i < cnt; i++) {
            var lib = this._uiSources[i];
            if (!lib.loaded) return;
          }

          this._loading = false;

          this._init();
        };

        _proto44._init = function _init() {
          this._inited = true;
          this.onInit();
          if (this.isShowing) this.doShowAnimation();
        };

        _proto44.dispose = function dispose() {
          if (this.parent) this.hideImmediately();

          _GComponent.prototype.dispose.call(this);
        };

        _proto44.closeEventHandler = function closeEventHandler(evt) {
          this.hide();
        };

        _proto44.onEnable = function onEnable() {
          _GComponent.prototype.onEnable.call(this);

          if (!this._inited) this.init();else this.doShowAnimation();
        };

        _proto44.onDisable = function onDisable() {
          _GComponent.prototype.onDisable.call(this);

          this.closeModalWait();
          this.onHide();
        };

        _proto44.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (this.isShowing && this.bringToFontOnClick) this.bringToFront();
        };

        _proto44.onDragStart_1 = function onDragStart_1(evt) {
          var original = GObject.cast(evt.currentTarget);
          original.stopDrag();
          this.startDrag(evt.touchId);
        };

        _createClass(Window, [{
          key: "contentPane",
          get: function get() {
            return this._contentPane;
          },
          set: function set(val) {
            if (this._contentPane != val) {
              if (this._contentPane) this.removeChild(this._contentPane);
              this._contentPane = val;

              if (this._contentPane) {
                this.addChild(this._contentPane);
                this.setSize(this._contentPane.width, this._contentPane.height);

                this._contentPane.addRelation(this, RelationType.Size);

                this._frame = this._contentPane.getChild("frame");

                if (this._frame) {
                  this.closeButton = this._frame.getChild("closeButton");
                  this.dragArea = this._frame.getChild("dragArea");
                  this.contentArea = this._frame.getChild("contentArea");
                }
              }
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          }
        }, {
          key: "closeButton",
          get: function get() {
            return this._closeButton;
          },
          set: function set(value) {
            if (this._closeButton) this._closeButton.offClick(this.closeEventHandler, this);
            this._closeButton = value;
            if (this._closeButton) this._closeButton.onClick(this.closeEventHandler, this);
          }
        }, {
          key: "dragArea",
          get: function get() {
            return this._dragArea;
          },
          set: function set(value) {
            if (this._dragArea != value) {
              if (this._dragArea) {
                this._dragArea.draggable = false;

                this._dragArea.off(Event.DRAG_START, this.onDragStart_1, this);
              }

              this._dragArea = value;

              if (this._dragArea) {
                this._dragArea.draggable = true;

                this._dragArea.on(Event.DRAG_START, this.onDragStart_1, this);
              }
            }
          }
        }, {
          key: "contentArea",
          get: function get() {
            return this._contentArea;
          },
          set: function set(value) {
            this._contentArea = value;
          }
        }, {
          key: "isShowing",
          get: function get() {
            return this.parent != null;
          }
        }, {
          key: "isTop",
          get: function get() {
            return this.parent && this.parent.getChildIndex(this) == this.parent.numChildren - 1;
          }
        }, {
          key: "modal",
          get: function get() {
            return this._modal;
          },
          set: function set(val) {
            this._modal = val;
          }
        }, {
          key: "modalWaiting",
          get: function get() {
            return this._modalWaitPane && this._modalWaitPane.parent != null;
          }
        }]);

        return Window;
      }(GComponent));
      var GRoot = exports('GRoot', /*#__PURE__*/function (_GComponent2) {
        _inheritsLoose(GRoot, _GComponent2);

        GRoot.create = function create() {
          GRoot._inst = new GRoot();
          director.getScene().getChildByName('Canvas').addChild(GRoot._inst.node);

          GRoot._inst.onWinResize();

          return GRoot._inst;
        };

        function GRoot() {
          var _this18;

          _this18 = _GComponent2.call(this) || this;
          _this18._node.name = "GRoot";
          _this18.opaque = false;
          _this18._volumeScale = 1;
          _this18._popupStack = new Array();
          _this18._justClosedPopups = new Array();
          _this18._modalLayer = new GGraph();

          _this18._modalLayer.setSize(_this18.width, _this18.height);

          _this18._modalLayer.drawRect(0, Color.TRANSPARENT, UIConfig.modalLayerColor);

          _this18._modalLayer.addRelation(_assertThisInitialized(_this18), RelationType.Size);

          _this18._thisOnResized = _this18.onWinResize.bind(_assertThisInitialized(_this18));
          _this18._inputProcessor = _this18.node.addComponent(InputProcessor);
          _this18._inputProcessor._captureCallback = _this18.onTouchBegin_1;
          View.instance.on('design-resolution-changed', _this18.onWinResize, _assertThisInitialized(_this18));
          {
            View.instance.on('canvas-resize', _this18._thisOnResized);
            window.addEventListener('orientationchange', _this18._thisOnResized);
          }
          return _this18;
        }

        var _proto45 = GRoot.prototype;

        _proto45.onDestroy = function onDestroy() {
          View.instance.off('design-resolution-changed', this.onWinResize, this);
          {
            View.instance.off('canvas-resize', this._thisOnResized);
            window.removeEventListener('orientationchange', this._thisOnResized);
          }
          if (this == GRoot._inst) GRoot._inst = null;
        };

        _proto45.getTouchPosition = function getTouchPosition(touchId) {
          return this._inputProcessor.getTouchPosition(touchId);
        };

        _proto45.showWindow = function showWindow(win) {
          this.addChild(win);
          win.requestFocus();
          if (win.x > this.width) win.x = this.width - win.width;else if (win.x + win.width < 0) win.x = 0;
          if (win.y > this.height) win.y = this.height - win.height;else if (win.y + win.height < 0) win.y = 0;
          this.adjustModalLayer();
        };

        _proto45.hideWindow = function hideWindow(win) {
          win.hide();
        };

        _proto45.hideWindowImmediately = function hideWindowImmediately(win) {
          if (win.parent == this) this.removeChild(win);
          this.adjustModalLayer();
        };

        _proto45.bringToFront = function bringToFront(win) {
          var cnt = this.numChildren;
          var i;
          if (this._modalLayer.parent && !win.modal) i = this.getChildIndex(this._modalLayer) - 1;else i = cnt - 1;

          for (; i >= 0; i--) {
            var g = this.getChildAt(i);
            if (g == win) return;
            if (g instanceof Window) break;
          }

          if (i >= 0) this.setChildIndex(win, i);
        };

        _proto45.showModalWait = function showModalWait(msg) {
          if (UIConfig.globalModalWaiting != null) {
            if (this._modalWaitPane == null) this._modalWaitPane = UIPackage.createObjectFromURL(UIConfig.globalModalWaiting);

            this._modalWaitPane.setSize(this.width, this.height);

            this._modalWaitPane.addRelation(this, RelationType.Size);

            this.addChild(this._modalWaitPane);
            this._modalWaitPane.text = msg;
          }
        };

        _proto45.closeModalWait = function closeModalWait() {
          if (this._modalWaitPane && this._modalWaitPane.parent) this.removeChild(this._modalWaitPane);
        };

        _proto45.closeAllExceptModals = function closeAllExceptModals() {
          var arr = this._children.slice();

          var cnt = arr.length;

          for (var i = 0; i < cnt; i++) {
            var g = arr[i];
            if (g instanceof Window && !g.modal) g.hide();
          }
        };

        _proto45.closeAllWindows = function closeAllWindows() {
          var arr = this._children.slice();

          var cnt = arr.length;

          for (var i = 0; i < cnt; i++) {
            var g = arr[i];
            if (g instanceof Window) g.hide();
          }
        };

        _proto45.getTopWindow = function getTopWindow() {
          var cnt = this.numChildren;

          for (var i = cnt - 1; i >= 0; i--) {
            var g = this.getChildAt(i);

            if (g instanceof Window) {
              return g;
            }
          }

          return null;
        };

        _proto45.getPopupPosition = function getPopupPosition(popup, target, dir, result) {
          var pos = result || new Vec2();
          var sizeW = 0,
              sizeH = 0;

          if (target) {
            pos = target.localToGlobal();
            this.globalToLocal(pos.x, pos.y, pos);
            var pos2 = target.localToGlobal(target.width, target.height);
            this.globalToLocal(pos2.x, pos2.y, pos2);
            sizeW = pos2.x - pos.x;
            sizeH = pos2.y - pos.y;
          } else {
            pos = this.getTouchPosition();
            pos = this.globalToLocal(pos.x, pos.y);
          }

          if (pos.x + popup.width > this.width) pos.x = pos.x + sizeW - popup.width;
          pos.y += sizeH;

          if ((dir === undefined || dir === PopupDirection.Auto) && pos.y + popup.height > this.height || dir === false || dir === PopupDirection.Up) {
            pos.y = pos.y - sizeH - popup.height - 1;

            if (pos.y < 0) {
              pos.y = 0;
              pos.x += sizeW / 2;
            }
          }

          return pos;
        };

        _proto45.showPopup = function showPopup(popup, target, dir) {
          if (this._popupStack.length > 0) {
            var k = this._popupStack.indexOf(popup);

            if (k != -1) {
              for (var i = this._popupStack.length - 1; i >= k; i--) this.removeChild(this._popupStack.pop());
            }
          }

          this._popupStack.push(popup);

          if (target) {
            var p = target;

            while (p) {
              if (p.parent == this) {
                if (popup.sortingOrder < p.sortingOrder) {
                  popup.sortingOrder = p.sortingOrder;
                }

                break;
              }

              p = p.parent;
            }
          }

          this.addChild(popup);
          this.adjustModalLayer();
          var pt = this.getPopupPosition(popup, target, dir);
          popup.setPosition(pt.x, pt.y);
        };

        _proto45.togglePopup = function togglePopup(popup, target, dir) {
          if (this._justClosedPopups.indexOf(popup) != -1) return;
          this.showPopup(popup, target, dir);
        };

        _proto45.hidePopup = function hidePopup(popup) {
          if (popup) {
            var k = this._popupStack.indexOf(popup);

            if (k != -1) {
              for (var i = this._popupStack.length - 1; i >= k; i--) this.closePopup(this._popupStack.pop());
            }
          } else {
            var cnt = this._popupStack.length;

            for (i = cnt - 1; i >= 0; i--) this.closePopup(this._popupStack[i]);

            this._popupStack.length = 0;
          }
        };

        _proto45.closePopup = function closePopup(target) {
          if (target.parent) {
            if (target instanceof Window) target.hide();else this.removeChild(target);
          }
        };

        _proto45.showTooltips = function showTooltips(msg) {
          if (this._defaultTooltipWin == null) {
            var resourceURL = UIConfig.tooltipsWin;

            if (!resourceURL) {
              console.error("UIConfig.tooltipsWin not defined");
              return;
            }

            this._defaultTooltipWin = UIPackage.createObjectFromURL(resourceURL);
          }

          this._defaultTooltipWin.text = msg;
          this.showTooltipsWin(this._defaultTooltipWin);
        };

        _proto45.showTooltipsWin = function showTooltipsWin(tooltipWin) {
          this.hideTooltips();
          this._tooltipWin = tooltipWin;
          var pt = this.getTouchPosition();
          pt.x += 10;
          pt.y += 20;
          this.globalToLocal(pt.x, pt.y, pt);

          if (pt.x + this._tooltipWin.width > this.width) {
            pt.x = pt.x - this._tooltipWin.width - 1;
            if (pt.x < 0) pt.x = 10;
          }

          if (pt.y + this._tooltipWin.height > this.height) {
            pt.y = pt.y - this._tooltipWin.height - 1;
            if (pt.y < 0) pt.y = 10;
          }

          this._tooltipWin.setPosition(pt.x, pt.y);

          this.addChild(this._tooltipWin);
        };

        _proto45.hideTooltips = function hideTooltips() {
          if (this._tooltipWin) {
            if (this._tooltipWin.parent) this.removeChild(this._tooltipWin);
            this._tooltipWin = null;
          }
        };

        _proto45.playOneShotSound = function playOneShotSound(clip, volumeScale) {
          if (!this.audioEngine) {
            this.audioEngine = this.node.addComponent(AudioSourceComponent);
          }

          if (volumeScale === undefined) volumeScale = 1;

          if (this.audioEngine.isValid) {
            this.audioEngine.clip = clip;
            this.audioEngine.volume = this._volumeScale * volumeScale;
            this.audioEngine.loop = false;
            this.audioEngine.play();
          }
        };

        _proto45.adjustModalLayer = function adjustModalLayer() {
          var cnt = this.numChildren;
          if (this._modalWaitPane && this._modalWaitPane.parent) this.setChildIndex(this._modalWaitPane, cnt - 1);

          for (var i = cnt - 1; i >= 0; i--) {
            var g = this.getChildAt(i);

            if (g instanceof Window && g.modal) {
              if (this._modalLayer.parent == null) this.addChildAt(this._modalLayer, i);else this.setChildIndexBefore(this._modalLayer, i);
              return;
            }
          }

          if (this._modalLayer.parent) this.removeChild(this._modalLayer);
        };

        _proto45.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (this._tooltipWin) this.hideTooltips();
          this._justClosedPopups.length = 0;

          if (this._popupStack.length > 0) {
            var mc = evt.initiator;

            while (mc && mc != this) {
              var pindex = this._popupStack.indexOf(mc);

              if (pindex != -1) {
                for (var i = this._popupStack.length - 1; i > pindex; i--) {
                  var popup = this._popupStack.pop();

                  this.closePopup(popup);

                  this._justClosedPopups.push(popup);
                }

                return;
              }

              mc = mc.findParent();
            }

            var cnt = this._popupStack.length;

            for (var _i6 = cnt - 1; _i6 >= 0; _i6--) {
              popup = this._popupStack[_i6];
              this.closePopup(popup);

              this._justClosedPopups.push(popup);
            }

            this._popupStack.length = 0;
          }
        };

        _proto45.onWinResize = function onWinResize() {
          updateScaler();
          this.setSize(UIContentScaler.rootSize.width, UIContentScaler.rootSize.height);
          var anchorPoint = this.node.getParent().getComponent(UITransform).anchorPoint;
          this.node.setPosition(-this._width * anchorPoint.x, this._height * (1 - anchorPoint.y));
        };

        _proto45.handlePositionChanged = function handlePositionChanged() {//nothing here
        };

        _createClass(GRoot, [{
          key: "touchTarget",
          get: function get() {
            return this._inputProcessor.getTouchTarget();
          }
        }, {
          key: "inputProcessor",
          get: function get() {
            return this._inputProcessor;
          }
        }, {
          key: "modalLayer",
          get: function get() {
            return this._modalLayer;
          }
        }, {
          key: "hasModalWindow",
          get: function get() {
            return this._modalLayer.parent != null;
          }
        }, {
          key: "modalWaiting",
          get: function get() {
            return this._modalWaitPane && this._modalWaitPane.node.activeInHierarchy;
          }
        }, {
          key: "hasAnyPopup",
          get: function get() {
            return this._popupStack.length != 0;
          }
        }, {
          key: "volumeScale",
          get: function get() {
            return this._volumeScale;
          },
          set: function set(value) {
            this._volumeScale = value;
          }
        }], [{
          key: "inst",
          get: function get() {
            if (!GRoot._inst) throw 'Call GRoot.create first!';
            return GRoot._inst;
          }
        }]);

        return GRoot;
      }(GComponent));
      GRoot._inst = void 0;
      Decls$1.GRoot = GRoot;
      var GTextInput = exports('GTextInput', /*#__PURE__*/function (_GTextField2) {
        _inheritsLoose(GTextInput, _GTextField2);

        function GTextInput() {
          var _this19;

          _this19 = _GTextField2.call(this) || this;
          _this19._node.name = "GTextInput";
          _this19._touchDisabled = false;
          return _this19;
        }

        var _proto46 = GTextInput.prototype;

        _proto46.createRenderer = function createRenderer() {
          this._editBox = this._node.addComponent(MyEditBox);
          this._editBox.maxLength = -1;

          this._editBox["_updateTextLabel"]();

          this._node.on('text-changed', this.onTextChanged, this);

          this.on(Event.TOUCH_END, this.onTouchEnd1, this);
          this.autoSize = AutoSizeType.None;
        };

        _proto46.requestFocus = function requestFocus() {
          this._editBox.focus();
        };

        _proto46.markSizeChanged = function markSizeChanged() {//不支持自动大小，所以这里空
        };

        _proto46.updateText = function updateText() {
          var text2 = this._text;
          if (this._templateVars) text2 = this.parseTemplate(text2);
          if (this._ubbEnabled) //不支持同一个文本不同样式
            text2 = defaultParser.parse(text2, true);
          this._editBox.string = text2;
        };

        _proto46.updateFont = function updateFont() {
          this.assignFont(this._editBox.textLabel, this._realFont);
          if (this._editBox.placeholderLabel) this.assignFont(this._editBox.placeholderLabel, this._realFont);
        };

        _proto46.updateFontColor = function updateFontColor() {
          this.assignFontColor(this._editBox.textLabel, this._color);
        };

        _proto46.updateFontSize = function updateFontSize() {
          this._editBox.textLabel.fontSize = this._fontSize;
          this._editBox.textLabel.lineHeight = this._fontSize + this._leading;
          if (this._editBox.placeholderLabel) this._editBox.placeholderLabel.fontSize = this._editBox.textLabel.fontSize;
        };

        _proto46.updateOverflow = function updateOverflow() {//not supported
        };

        _proto46.onTextChanged = function onTextChanged() {
          this._text = this._editBox.string;
        };

        _proto46.onTouchEnd1 = function onTouchEnd1(evt) {
          this._editBox.openKeyboard();

          evt.propagationStopped = true;
        };

        _proto46.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GTextField2.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 4);
          var str = buffer.readS();
          if (str != null) this.promptText = str;else if (this._editBox.placeholderLabel) this._editBox.placeholderLabel.string = "";
          str = buffer.readS();
          if (str != null) this.restrict = str;
          var iv = buffer.readInt();
          if (iv != 0) this.maxLength = iv;
          iv = buffer.readInt();
          if (buffer.readBool()) this.password = true; //同步一下对齐方式

          if (this._editBox.placeholderLabel) {
            var hAlign = this._editBox.textLabel.horizontalAlign;
            this._editBox.placeholderLabel.horizontalAlign = hAlign;
            var vAlign = this._editBox.textLabel.verticalAlign;
            this._editBox.placeholderLabel.verticalAlign = vAlign;
          }
        };

        _createClass(GTextInput, [{
          key: "editable",
          get: function get() {
            return this._editBox.enabled;
          },
          set: function set(val) {
            this._editBox.enabled = val;
          }
        }, {
          key: "maxLength",
          get: function get() {
            return this._editBox.maxLength;
          },
          set: function set(val) {
            if (val == 0) val = -1;
            this._editBox.maxLength = val;
          }
        }, {
          key: "promptText",
          get: function get() {
            return this._promptText;
          },
          set: function set(val) {
            this._promptText = val;
            var newCreate = !this._editBox.placeholderLabel;

            this._editBox["_updatePlaceholderLabel"]();

            if (newCreate) this.assignFont(this._editBox.placeholderLabel, this._realFont);
            this._editBox.placeholderLabel.string = defaultParser.parse(this._promptText, true);

            if (defaultParser.lastColor) {
              var c = this._editBox.placeholderLabel.color;
              if (!c) c = new Color();
              c.fromHEX(defaultParser.lastColor);
              this.assignFontColor(this._editBox.placeholderLabel, c);
            } else this.assignFontColor(this._editBox.placeholderLabel, this._color);

            if (defaultParser.lastSize) this._editBox.placeholderLabel.fontSize = parseInt(defaultParser.lastSize);else this._editBox.placeholderLabel.fontSize = this._fontSize;
          }
        }, {
          key: "restrict",
          get: function get() {
            return "";
          },
          set: function set(value) {//not supported
          }
        }, {
          key: "password",
          get: function get() {
            return this._editBox.inputFlag == EditBox.InputFlag.PASSWORD;
          },
          set: function set(val) {
            this._editBox.inputFlag = val ? EditBox.InputFlag.PASSWORD : EditBox.InputFlag.DEFAULT;
          }
        }, {
          key: "align",
          get: function get() {
            return this._editBox.textLabel.horizontalAlign;
          },
          set: function set(value) {
            this._editBox.textLabel.horizontalAlign = value;

            if (this._editBox.placeholderLabel) {
              this._editBox.placeholderLabel.horizontalAlign = value;
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._editBox.textLabel.verticalAlign;
          },
          set: function set(value) {
            this._editBox.textLabel.verticalAlign = value;

            if (this._editBox.placeholderLabel) {
              this._editBox.placeholderLabel.verticalAlign = value;
            }
          }
        }, {
          key: "singleLine",
          get: function get() {
            return this._editBox.inputMode != EditBox.InputMode.ANY;
          },
          set: function set(value) {
            this._editBox.inputMode = value ? EditBox.InputMode.SINGLE_LINE : EditBox.InputMode.ANY;
          }
        }]);

        return GTextInput;
      }(GTextField));

      var MyEditBox = /*#__PURE__*/function (_EditBox) {
        _inheritsLoose(MyEditBox, _EditBox);

        function MyEditBox() {
          return _EditBox.apply(this, arguments) || this;
        }

        var _proto47 = MyEditBox.prototype;

        _proto47._init = function _init() {
          _EditBox.prototype._init.call(this);

          this.placeholderLabel.getComponent(UITransform).setAnchorPoint(0, 1);
          this.textLabel.getComponent(UITransform).setAnchorPoint(0, 1);
          this.placeholderLabel.overflow = Overflow.CLAMP;
          this.textLabel.overflow = Overflow.CLAMP;
        };

        _proto47._registerEvent = function _registerEvent() {//取消掉原来的事件处理
        };

        _proto47.openKeyboard = function openKeyboard() {
          var impl = this["_impl"];

          if (impl) {
            impl.beginEditing();
          }
        };

        return MyEditBox;
      }(EditBox);

      var GObjectPool = exports('GObjectPool', /*#__PURE__*/function () {
        function GObjectPool() {
          this._count = 0;
          this._pool = {};
        }

        var _proto48 = GObjectPool.prototype;

        _proto48.clear = function clear() {
          for (var i1 in this._pool) {
            var arr = this._pool[i1];
            var cnt = arr.length;

            for (var i = 0; i < cnt; i++) arr[i].dispose();
          }

          this._pool = {};
          this._count = 0;
        };

        _proto48.getObject = function getObject(url) {
          url = UIPackage.normalizeURL(url);
          if (url == null) return null;
          var arr = this._pool[url];

          if (arr && arr.length) {
            this._count--;
            return arr.shift();
          }

          var child = UIPackage.createObjectFromURL(url);
          return child;
        };

        _proto48.returnObject = function returnObject(obj) {
          var url = obj.resourceURL;
          if (!url) return;
          var arr = this._pool[url];

          if (arr == null) {
            arr = new Array();
            this._pool[url] = arr;
          }

          this._count++;
          arr.push(obj);
        };

        _createClass(GObjectPool, [{
          key: "count",
          get: function get() {
            return this._count;
          }
        }]);

        return GObjectPool;
      }());
      var GLoader = exports('GLoader', /*#__PURE__*/function (_GObject7) {
        _inheritsLoose(GLoader, _GObject7);

        function GLoader() {
          var _this20;

          _this20 = _GObject7.call(this) || this;
          _this20._frame = 0;
          _this20._node.name = "GLoader";
          _this20._playing = true;
          _this20._url = "";
          _this20._fill = LoaderFillType.None;
          _this20._align = AlignType.Left;
          _this20._verticalAlign = VertAlignType.Top;
          _this20._showErrorSign = true;
          _this20._color = new Color(255, 255, 255, 255);
          _this20._container = new Node("Image");
          _this20._container.layer = UIConfig.defaultUILayer;
          _this20._containerUITrans = _this20._container.addComponent(UITransform);

          _this20._containerUITrans.setAnchorPoint(0, 1);

          _this20._node.addChild(_this20._container); // this._container.addComponent(Sprite);


          _this20._content = _this20._container.addComponent(MovieClip);
          _this20._content.sizeMode = Sprite.SizeMode.CUSTOM;
          _this20._content.trim = false;

          _this20._content.setPlaySettings();

          return _this20;
        }

        var _proto49 = GLoader.prototype;

        _proto49.dispose = function dispose() {
          if (this._contentItem == null) {
            if (this._content.spriteFrame) this.freeExternal(this._content.spriteFrame);
          }

          if (this._content2) this._content2.dispose();

          _GObject7.prototype.dispose.call(this);
        };
        /**
        * 设置图片
        * @param url
        * @param bundleStr 远程包名称
        */


        _proto49.setUrlWithBundle = function setUrlWithBundle(url, bundleStr) {
          if (bundleStr === void 0) {
            bundleStr = '';
          }

          this.bundle = bundleStr;
          this.url = url;
        };

        _proto49.loadContent = function loadContent() {
          this.clearContent();
          if (!this._url) return;
          if (this._url.startsWith("ui://")) this.loadFromPackage(this._url);else this.loadExternal();
        };

        _proto49.loadFromPackage = function loadFromPackage(itemURL) {
          var contentItem = UIPackage.getItemByURL(itemURL);
          this._contentItem = contentItem;

          if (!contentItem) {
            this.setErrorState();
            return;
          }

          contentItem = contentItem.getBranch();
          this.sourceWidth = contentItem.width;
          this.sourceHeight = contentItem.height;
          contentItem = contentItem.getHighResolution();
          contentItem.load();
          if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);

          if (contentItem.type == PackageItemType.Image) {
            if (!contentItem.asset) {
              this.setErrorState();
            } else {
              this._content.spriteFrame = contentItem.asset;

              if (this._content.fillMethod == 0) {
                if (contentItem.scale9Grid) this._content.type = Sprite.Type.SLICED;else if (contentItem.scaleByTile) this._content.type = Sprite.Type.TILED;else this._content.type = Sprite.Type.SIMPLE;
              } else {
                this._content.type = Sprite.Type.FILLED;
              }

              this.updateLayout();
            }
          } else if (contentItem.type == PackageItemType.MovieClip) {
            this._content.interval = contentItem.interval;
            this._content.swing = contentItem.swing;
            this._content.repeatDelay = contentItem.repeatDelay;
            this._content.frames = contentItem.frames;
            this.updateLayout();
          } else if (contentItem.type == PackageItemType.Component) {
            var obj = UIPackage.createObjectFromURL(itemURL);
            if (!obj) this.setErrorState();else if (!(obj instanceof GComponent)) {
              obj.dispose();
              this.setErrorState();
            } else {
              this._content2 = obj;

              this._container.addChild(this._content2.node);

              this.updateLayout();
            }
          } else this.setErrorState();
        };

        _proto49.loadExternal = function loadExternal() {
          var _this21 = this;

          var url = this.url;

          var callback = function callback(err, asset) {
            //因为是异步返回的，而这时可能url已经被改变，所以不能直接用返回的结果
            if (_this21._url != url || !isValid(_this21._node)) return;
            if (err) console.warn(err);
            if (asset instanceof SpriteFrame) _this21.onExternalLoadSuccess(asset);else if (asset instanceof Texture2D) {
              var sf = new SpriteFrame();
              sf.texture = asset;

              _this21.onExternalLoadSuccess(sf);
            } else if (asset instanceof ImageAsset) {
              var texture = new Texture2D();
              texture.image = asset;

              var _sf = new SpriteFrame();

              _sf.texture = texture;

              _this21.onExternalLoadSuccess(_sf);
            } else {
              console.warn("GLoader:cant load", _this21.url);
            }
          };

          if (this._url.startsWith("http://") || this._url.startsWith("https://") || this._url.startsWith('/')) assetManager.loadRemote(this._url, callback);else if (this._url.startsWith('data:image/')) {
            var img = new Image();
            img.src = this._url;

            img.onload = function () {
              var tex = new Texture2D();
              tex.reset({
                width: img.width,
                height: img.height
              });
              tex.uploadData(img, 0, 0);
              callback(null, tex);
            };
          } else {
            var bundle = resources; //如果有设置远程包 从远程包加载

            if (this.bundle && assetManager.bundles.has(this.bundle)) {
              bundle = assetManager.getBundle(this.bundle);
            }

            bundle.load(this._url + "/spriteFrame", Asset, callback);
          }
        };

        _proto49.freeExternal = function freeExternal(texture) {};

        _proto49.onExternalLoadSuccess = function onExternalLoadSuccess(texture) {
          this._content.spriteFrame = texture;
          this._content.type = Sprite.Type.SIMPLE;
          this.sourceWidth = texture.originalSize.width;
          this.sourceHeight = texture.originalSize.height;
          if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);
          this.updateLayout();
        };

        _proto49.onExternalLoadFailed = function onExternalLoadFailed() {
          this.setErrorState();
        };

        _proto49.setErrorState = function setErrorState() {
          if (!this._showErrorSign) return;

          if (this._errorSign == null) {
            if (UIConfig.loaderErrorSign != null) {
              this._errorSign = GLoader._errorSignPool.getObject(UIConfig.loaderErrorSign);
            }
          }

          if (this._errorSign) {
            this._errorSign.setSize(this.width, this.height);

            this._container.addChild(this._errorSign.node);
          }
        };

        _proto49.clearErrorState = function clearErrorState() {
          if (this._errorSign) {
            this._container.removeChild(this._errorSign.node);

            GLoader._errorSignPool.returnObject(this._errorSign);

            this._errorSign = null;
          }
        };

        _proto49.updateLayout = function updateLayout() {
          if (this._content2 == null && this._content == null) {
            if (this._autoSize) {
              this._updatingLayout = true;
              this.setSize(50, 30);
              this._updatingLayout = false;
            }

            return;
          }

          var cw = this.sourceWidth;
          var ch = this.sourceHeight;
          var pivotCorrectX = -this.pivotX * this._width;
          var pivotCorrectY = this.pivotY * this._height;

          if (this._autoSize) {
            this._updatingLayout = true;
            if (cw == 0) cw = 50;
            if (ch == 0) ch = 30;
            this.setSize(cw, ch);
            this._updatingLayout = false;

            this._containerUITrans.setContentSize(this._width, this._height);

            this._container.setPosition(pivotCorrectX, pivotCorrectY);

            if (this._content2) {
              this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);

              this._content2.setScale(1, 1);
            }

            if (cw == this._width && ch == this._height) return;
          }

          var sx = 1,
              sy = 1;

          if (this._fill != LoaderFillType.None) {
            sx = this.width / this.sourceWidth;
            sy = this.height / this.sourceHeight;

            if (sx != 1 || sy != 1) {
              if (this._fill == LoaderFillType.ScaleMatchHeight) sx = sy;else if (this._fill == LoaderFillType.ScaleMatchWidth) sy = sx;else if (this._fill == LoaderFillType.Scale) {
                if (sx > sy) sx = sy;else sy = sx;
              } else if (this._fill == LoaderFillType.ScaleNoBorder) {
                if (sx > sy) sy = sx;else sx = sy;
              }

              if (this._shrinkOnly) {
                if (sx > 1) sx = 1;
                if (sy > 1) sy = 1;
              }

              cw = this.sourceWidth * sx;
              ch = this.sourceHeight * sy;
            }
          }

          this._containerUITrans.setContentSize(cw, ch);

          if (this._content2) {
            this._content2.setPosition(pivotCorrectX + this._width * this.pivotX, pivotCorrectY - this._height * this.pivotY);

            this._content2.setScale(sx, sy);
          }

          var nx, ny;
          if (this._align == AlignType.Left) nx = 0;else if (this._align == AlignType.Center) nx = Math.floor((this._width - cw) / 2);else nx = this._width - cw;
          if (this._verticalAlign == VertAlignType.Top) ny = 0;else if (this._verticalAlign == VertAlignType.Middle) ny = Math.floor((this._height - ch) / 2);else ny = this._height - ch;
          ny = -ny;

          this._container.setPosition(pivotCorrectX + nx, pivotCorrectY + ny);
        };

        _proto49.clearContent = function clearContent() {
          this.clearErrorState();

          if (!this._contentItem) {
            var texture = this._content.spriteFrame;
            if (texture) this.freeExternal(texture);
          }

          if (this._content2) {
            this._container.removeChild(this._content2.node);

            this._content2.dispose();

            this._content2 = null;
          }

          this._content.frames = null;
          this._content.spriteFrame = null;
          this._contentItem = null;
        };

        _proto49.handleSizeChanged = function handleSizeChanged() {
          _GObject7.prototype.handleSizeChanged.call(this);

          if (!this._updatingLayout) this.updateLayout();
        };

        _proto49.handleAnchorChanged = function handleAnchorChanged() {
          _GObject7.prototype.handleAnchorChanged.call(this);

          if (!this._updatingLayout) this.updateLayout();
        };

        _proto49.handleGrayedChanged = function handleGrayedChanged() {
          this._content.grayscale = this._grayed;
        };

        _proto49._hitTest = function _hitTest(pt, globalPt) {
          if (this._content2) {
            var obj = this._content2.hitTest(globalPt);

            if (obj) return obj;
          }

          if (pt.x >= 0 && pt.y >= 0 && pt.x < this._width && pt.y < this._height) return this;else return null;
        };

        _proto49.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;

            case ObjectPropID.Playing:
              return this.playing;

            case ObjectPropID.Frame:
              return this.frame;

            case ObjectPropID.TimeScale:
              return this._content.timeScale;

            default:
              return _GObject7.prototype.getProp.call(this, index);
          }
        };

        _proto49.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;

            case ObjectPropID.Playing:
              this.playing = value;
              break;

            case ObjectPropID.Frame:
              this.frame = value;
              break;

            case ObjectPropID.TimeScale:
              this._content.timeScale = value;
              break;

            case ObjectPropID.DeltaTime:
              this._content.advance(value);

              break;

            default:
              _GObject7.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto49.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject7.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this._url = buffer.readS();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._fill = buffer.readByte();
          this._shrinkOnly = buffer.readBool();
          this._autoSize = buffer.readBool();
          this._showErrorSign = buffer.readBool();
          this._playing = buffer.readBool();
          this._frame = buffer.readInt();
          if (buffer.readBool()) this.color = buffer.readColor();
          this._content.fillMethod = buffer.readByte();

          if (this._content.fillMethod != 0) {
            this._content.fillOrigin = buffer.readByte();
            this._content.fillClockwise = buffer.readBool();
            this._content.fillAmount = buffer.readFloat();
          }

          if (this._url) this.loadContent();
        };

        _createClass(GLoader, [{
          key: "url",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            if (this._url == value) return;
            this._url = value;
            this.loadContent();
            this.updateGear(7);
          }
        }, {
          key: "bundle",
          get: function get() {
            if (this._assetBundle) {
              return this._assetBundle;
            }

            return UIConfig.loaderAssetsBundleName;
          },
          set: function set(val) {
            this._assetBundle = val;
          }
        }, {
          key: "icon",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            this.url = value;
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.updateLayout();
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.updateLayout();
            }
          }
        }, {
          key: "fill",
          get: function get() {
            return this._fill;
          },
          set: function set(value) {
            if (this._fill != value) {
              this._fill = value;
              this.updateLayout();
            }
          }
        }, {
          key: "shrinkOnly",
          get: function get() {
            return this._shrinkOnly;
          },
          set: function set(value) {
            if (this._shrinkOnly != value) {
              this._shrinkOnly = value;
              this.updateLayout();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.updateLayout();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
              if (this._content instanceof MovieClip) this._content.playing = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              this._frame = value;
              if (this._content instanceof MovieClip) this._content.frame = value;
              this.updateGear(5);
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);

            this.updateGear(4);
            this._content.color = value;
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._content.fillMethod;
          },
          set: function set(value) {
            this._content.fillMethod = value;
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._content.fillOrigin;
          },
          set: function set(value) {
            this._content.fillOrigin = value;
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._content.fillClockwise;
          },
          set: function set(value) {
            this._content.fillClockwise = value;
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._content.fillAmount;
          },
          set: function set(value) {
            this._content.fillAmount = value;
          }
        }, {
          key: "showErrorSign",
          get: function get() {
            return this._showErrorSign;
          },
          set: function set(value) {
            this._showErrorSign = value;
          }
        }, {
          key: "component",
          get: function get() {
            return this._content2;
          }
        }, {
          key: "texture",
          get: function get() {
            return this._content.spriteFrame;
          },
          set: function set(value) {
            this.url = null;
            this._content.spriteFrame = value;
            this._content.type = Sprite.Type.SIMPLE;

            if (value != null) {
              this.sourceWidth = value.rect.width;
              this.sourceHeight = value.rect.height;
            } else {
              this.sourceWidth = this.sourceHeight = 0;
            }

            this.updateLayout();
          }
        }]);

        return GLoader;
      }(GObject));
      GLoader._errorSignPool = new GObjectPool();
      var GLoader3D = exports('GLoader3D', /*#__PURE__*/function (_GObject8) {
        _inheritsLoose(GLoader3D, _GObject8);

        function GLoader3D() {
          var _this22;

          _this22 = _GObject8.call(this) || this;
          _this22._frame = 0;
          _this22._node.name = "GLoader3D";
          _this22._playing = true;
          _this22._url = "";
          _this22._fill = LoaderFillType.None;
          _this22._align = AlignType.Left;
          _this22._verticalAlign = VertAlignType.Top;
          _this22._color = new Color(255, 255, 255, 255);
          _this22._container = new Node("Wrapper");
          _this22._container.layer = UIConfig.defaultUILayer;

          _this22._container.addComponent(UITransform).setAnchorPoint(0, 1);

          _this22._node.addChild(_this22._container);

          return _this22;
        }

        var _proto50 = GLoader3D.prototype;

        _proto50.dispose = function dispose() {
          _GObject8.prototype.dispose.call(this);
        };

        _proto50.loadContent = function loadContent() {
          this.clearContent();
          if (!this._url) return;
          if (this._url.startsWith("ui://")) this.loadFromPackage(this._url);else this.loadExternal();
        };

        _proto50.loadFromPackage = function loadFromPackage(itemURL) {
          this._contentItem = UIPackage.getItemByURL(itemURL);

          if (this._contentItem) {
            this._contentItem = this._contentItem.getBranch();
            this.sourceWidth = this._contentItem.width;
            this.sourceHeight = this._contentItem.height;
            this._contentItem = this._contentItem.getHighResolution();
            if (this._autoSize) this.setSize(this.sourceWidth, this.sourceHeight);
            if (this._contentItem.type == PackageItemType.Spine || this._contentItem.type == PackageItemType.DragonBones) this._contentItem.owner.getItemAssetAsync(this._contentItem, this.onLoaded.bind(this));
          }
        };

        _proto50.onLoaded = function onLoaded(err, item) {
          if (this._contentItem != item) return;
          if (err) console.warn(err);
          if (!this._contentItem.asset) return;
          if (this._contentItem.type == PackageItemType.Spine) this.setSpine(this._contentItem.asset, this._contentItem.skeletonAnchor);else if (this._contentItem.type == PackageItemType.DragonBones) this.setDragonBones(this._contentItem.asset, this._contentItem.atlasAsset, this._contentItem.skeletonAnchor);
        };

        _proto50.setSpine = function setSpine(asset, anchor, pma) {
          this.freeSpine();
          var node = new Node();

          this._container.addChild(node);

          node.layer = UIConfig.defaultUILayer;
          node.setPosition(anchor.x, -anchor.y);
          this._content = node.addComponent(sp.Skeleton);
          this._content.premultipliedAlpha = pma;
          this._content.skeletonData = asset;
          this._content.color = this._color;
          this.onChangeSpine();
          this.updateLayout();
        };

        _proto50.freeSpine = function freeSpine() {
          if (this._content) {
            this._content.destroy();
          }
        };

        _proto50.setDragonBones = function setDragonBones(asset, atlasAsset, anchor, pma) {
          this.freeDragonBones();
          var node = new Node();
          node.layer = UIConfig.defaultUILayer;

          this._container.addChild(node);

          node.setPosition(anchor.x, -anchor.y);
          this._content = node.addComponent(dragonBones.ArmatureDisplay);
          this._content.premultipliedAlpha = pma;
          this._content.dragonAsset = asset;
          this._content.dragonAtlasAsset = atlasAsset;
          this._content.color = this._color;
          var armatureKey = asset["init"](dragonBones.CCFactory.getInstance(), atlasAsset["_uuid"]);

          var dragonBonesData = this._content["_factory"].getDragonBonesData(armatureKey);

          this._content.armatureName = dragonBonesData.armatureNames[0];
          this.onChangeDragonBones();
          this.updateLayout();
        };

        _proto50.freeDragonBones = function freeDragonBones() {
          if (this._content) {
            this._content.destroy();
          }
        };

        _proto50.onChange = function onChange() {
          if (this._contentItem == null) return;

          if (this._contentItem.type == PackageItemType.Spine) {
            this.onChangeSpine();
          }

          if (this._contentItem.type == PackageItemType.DragonBones) {
            this.onChangeDragonBones();
          }
        };

        _proto50.onChangeSpine = function onChangeSpine() {
          var _a;

          if (!(this._content instanceof sp.Skeleton)) return;

          if (this._animationName) {
            var trackEntry = this._content.getCurrent(0);

            if (!trackEntry || trackEntry.animation.name != this._animationName || trackEntry.isComplete() && !trackEntry.loop) {
              this._content.animation = this._animationName;
              trackEntry = this._content.setAnimation(0, this._animationName, this._loop);
            }

            if (this._playing) this._content.paused = false;else {
              this._content.paused = true;
              trackEntry.trackTime = math.lerp(0, trackEntry.animationEnd - trackEntry.animationStart, this._frame / 100);
            }
          } else this._content.clearTrack(0);

          var skin = this._skinName || this._content.skeletonData.getRuntimeData().skins[0].name;

          if (((_a = this._content["_skeleton"].skin) === null || _a === void 0 ? void 0 : _a.name) != skin) this._content.setSkin(skin);
        };

        _proto50.onChangeDragonBones = function onChangeDragonBones() {
          if (!(this._content instanceof dragonBones.ArmatureDisplay)) return;

          if (this._animationName) {
            if (this._playing) this._content.playAnimation(this._animationName, this._loop ? 0 : 1);else this._content.armature().animation.gotoAndStopByFrame(this._animationName, this._frame);
          } else this._content.armature().animation.reset();
        };

        _proto50.loadExternal = function loadExternal() {
          if (this._url.startsWith("http://") || this._url.startsWith("https://") || this._url.startsWith('/')) assetManager.loadRemote(this._url, sp.SkeletonData, this.onLoaded2.bind(this));else resources.load(this._url, sp.SkeletonData, this.onLoaded2.bind(this));
        };

        _proto50.onLoaded2 = function onLoaded2(err, asset) {
          //因为是异步返回的，而这时可能url已经被改变，所以不能直接用返回的结果
          if (!this._url || !isValid(this._node)) return;
          if (err) console.warn(err);
        };

        _proto50.updateLayout = function updateLayout() {
          var cw = this.sourceWidth;
          var ch = this.sourceHeight;
          var pivotCorrectX = -this.pivotX * this._width;
          var pivotCorrectY = this.pivotY * this._height;

          if (this._autoSize) {
            this._updatingLayout = true;
            if (cw == 0) cw = 50;
            if (ch == 0) ch = 30;
            this.setSize(cw, ch);
            this._updatingLayout = false;

            if (cw == this._width && ch == this._height) {
              this._container.setScale(1, 1);

              this._container.setPosition(pivotCorrectX, pivotCorrectY);

              return;
            }
          }

          var sx = 1,
              sy = 1;

          if (this._fill != LoaderFillType.None) {
            sx = this.width / this.sourceWidth;
            sy = this.height / this.sourceHeight;

            if (sx != 1 || sy != 1) {
              if (this._fill == LoaderFillType.ScaleMatchHeight) sx = sy;else if (this._fill == LoaderFillType.ScaleMatchWidth) sy = sx;else if (this._fill == LoaderFillType.Scale) {
                if (sx > sy) sx = sy;else sy = sx;
              } else if (this._fill == LoaderFillType.ScaleNoBorder) {
                if (sx > sy) sy = sx;else sx = sy;
              }

              if (this._shrinkOnly) {
                if (sx > 1) sx = 1;
                if (sy > 1) sy = 1;
              }

              cw = this.sourceWidth * sx;
              ch = this.sourceHeight * sy;
            }
          }

          this._container.setScale(sx, sy);

          var nx, ny;
          if (this._align == AlignType.Left) nx = 0;else if (this._align == AlignType.Center) nx = Math.floor((this._width - cw) / 2);else nx = this._width - cw;
          if (this._verticalAlign == VertAlignType.Top) ny = 0;else if (this._verticalAlign == VertAlignType.Middle) ny = Math.floor((this._height - ch) / 2);else ny = this._height - ch;
          ny = -ny;

          this._container.setPosition(pivotCorrectX + nx, pivotCorrectY + ny);
        };

        _proto50.clearContent = function clearContent() {
          this._contentItem = null;

          if (this._content) {
            this._content.node.destroy();

            this._content = null;
          }
        };

        _proto50.handleSizeChanged = function handleSizeChanged() {
          _GObject8.prototype.handleSizeChanged.call(this);

          if (!this._updatingLayout) this.updateLayout();
        };

        _proto50.handleAnchorChanged = function handleAnchorChanged() {
          _GObject8.prototype.handleAnchorChanged.call(this);

          if (!this._updatingLayout) this.updateLayout();
        };

        _proto50.handleGrayedChanged = function handleGrayedChanged() {};

        _proto50.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.color;

            case ObjectPropID.Playing:
              return this.playing;

            case ObjectPropID.Frame:
              return this.frame;

            case ObjectPropID.TimeScale:
              return 1;

            default:
              return _GObject8.prototype.getProp.call(this, index);
          }
        };

        _proto50.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.color = value;
              break;

            case ObjectPropID.Playing:
              this.playing = value;
              break;

            case ObjectPropID.Frame:
              this.frame = value;
              break;

            case ObjectPropID.TimeScale:
              break;

            case ObjectPropID.DeltaTime:
              break;

            default:
              _GObject8.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto50.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GObject8.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this._url = buffer.readS();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._fill = buffer.readByte();
          this._shrinkOnly = buffer.readBool();
          this._autoSize = buffer.readBool();
          this._animationName = buffer.readS();
          this._skinName = buffer.readS();
          this._playing = buffer.readBool();
          this._frame = buffer.readInt();
          this._loop = buffer.readBool();
          if (buffer.readBool()) this.color = buffer.readColor();
          if (this._url) this.loadContent();
        };

        _createClass(GLoader3D, [{
          key: "url",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            if (this._url == value) return;
            this._url = value;
            this.loadContent();
            this.updateGear(7);
          }
        }, {
          key: "icon",
          get: function get() {
            return this._url;
          },
          set: function set(value) {
            this.url = value;
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.updateLayout();
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.updateLayout();
            }
          }
        }, {
          key: "fill",
          get: function get() {
            return this._fill;
          },
          set: function set(value) {
            if (this._fill != value) {
              this._fill = value;
              this.updateLayout();
            }
          }
        }, {
          key: "shrinkOnly",
          get: function get() {
            return this._shrinkOnly;
          },
          set: function set(value) {
            if (this._shrinkOnly != value) {
              this._shrinkOnly = value;
              this.updateLayout();
            }
          }
        }, {
          key: "autoSize",
          get: function get() {
            return this._autoSize;
          },
          set: function set(value) {
            if (this._autoSize != value) {
              this._autoSize = value;
              this.updateLayout();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
              this.updateGear(5);
              this.onChange();
            }
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              this._frame = value;
              this.updateGear(5);
              this.onChange();
            }
          }
        }, {
          key: "animationName",
          get: function get() {
            return this._animationName;
          },
          set: function set(value) {
            if (this._animationName != value) {
              this._animationName = value;
              this.onChange();
            }
          }
        }, {
          key: "skinName",
          get: function get() {
            return this._skinName;
          },
          set: function set(value) {
            if (this._skinName != value) {
              this._skinName = value;
              this.onChange();
            }
          }
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          },
          set: function set(value) {
            if (this._loop != value) {
              this._loop = value;
              this.onChange();
            }
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            this._color.set(value);

            this.updateGear(4);
            if (this._content) this._content.color = value;
          }
        }, {
          key: "content",
          get: function get() {
            return this._content;
          }
        }]);

        return GLoader3D;
      }(GObject));
      var GLabel = exports('GLabel', /*#__PURE__*/function (_GComponent3) {
        _inheritsLoose(GLabel, _GComponent3);

        function GLabel() {
          var _this23;

          _this23 = _GComponent3.call(this) || this;
          _this23._node.name = "GLabel";
          return _this23;
        }

        var _proto51 = GLabel.prototype;

        _proto51.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };

        _proto51.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }

            case ObjectPropID.FontSize:
              return this.titleFontSize;

            default:
              return _GComponent3.prototype.getProp.call(this, index);
          }
        };

        _proto51.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;

            case ObjectPropID.FontSize:
              this.titleFontSize = value;
              break;

            default:
              _GComponent3.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto51.constructExtension = function constructExtension(buffer) {
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
        };

        _proto51.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent3.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var str;
          str = buffer.readS();
          if (str != null) this.title = str;
          str = buffer.readS();
          if (str != null) this.icon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          var iv = buffer.readInt();
          if (iv != 0) this.titleFontSize = iv;

          if (buffer.readBool()) {
            var input = this.getTextField();

            if (input instanceof GTextInput) {
              str = buffer.readS();
              if (str != null) input.promptText = str;
              str = buffer.readS();
              if (str != null) input.restrict = str;
              iv = buffer.readInt();
              if (iv != 0) input.maxLength = iv;
              iv = buffer.readInt();
              if (buffer.readBool()) input.password = true;
            } else buffer.skip(13);
          }

          str = buffer.readS();

          if (str != null) {
            this._sound = str;

            if (buffer.readBool()) {
              this._soundVolumeScale = buffer.readFloat();
            }

            this._node.on(Event.CLICK, this.onClick_1, this);
          }
        };

        _proto51.onClick_1 = function onClick_1() {
          if (this._sound) {
            var pi = UIPackage.getItemByURL(this._sound);

            if (pi) {
              var sound = pi.owner.getItemAsset(pi);
              if (sound) GRoot.inst.playOneShotSound(sound, this._soundVolumeScale);
            }
          }
        };

        _createClass(GLabel, [{
          key: "icon",
          get: function get() {
            if (this._iconObject) return this._iconObject.icon;
          },
          set: function set(value) {
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "title",
          get: function get() {
            if (this._titleObject) return this._titleObject.text;else return null;
          },
          set: function set(value) {
            if (this._titleObject) this._titleObject.text = value;
            this.updateGear(6);
          }
        }, {
          key: "text",
          get: function get() {
            return this.title;
          },
          set: function set(value) {
            this.title = value;
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.WHITE;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
            this.updateGear(4);
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "editable",
          get: function get() {
            if (this._titleObject && this._titleObject instanceof GTextInput) return this._titleObject.editable;else return false;
          },
          set: function set(val) {
            if (this._titleObject && this._titleObject instanceof GTextInput) this._titleObject.editable = val;
          }
        }]);

        return GLabel;
      }(GComponent));
      var GButton = exports('GButton', /*#__PURE__*/function (_GComponent4) {
        _inheritsLoose(GButton, _GComponent4);

        function GButton() {
          var _this24;

          _this24 = _GComponent4.call(this) || this;
          _this24._node.name = "GButton";
          _this24._mode = ButtonMode.Common;
          _this24._title = "";
          _this24._icon = "";
          _this24._sound = UIConfig.buttonSound;
          _this24._soundVolumeScale = UIConfig.buttonSoundVolumeScale;
          _this24._changeStateOnClick = true;
          _this24._downEffect = 0;
          _this24._downEffectValue = 0.8;
          return _this24;
        }

        var _proto52 = GButton.prototype;

        _proto52.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };

        _proto52.fireClick = function fireClick() {
          GRoot.inst.inputProcessor.simulateClick(this);
        };

        _proto52.setState = function setState(val) {
          if (this._buttonController) this._buttonController.selectedPage = val;

          if (this._downEffect == 1) {
            var cnt = this.numChildren;

            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
              if (!this._downColor) this._downColor = new Color();
              var r = this._downEffectValue * 255;
              this._downColor.r = this._downColor.g = this._downColor.b = r;

              for (var i = 0; i < cnt; i++) {
                var obj = this.getChildAt(i);
                if (!(obj instanceof GTextField)) obj.setProp(ObjectPropID.Color, this._downColor);
              }
            } else {
              for (var i = 0; i < cnt; i++) {
                var obj = this.getChildAt(i);
                if (!(obj instanceof GTextField)) obj.setProp(ObjectPropID.Color, Color.WHITE);
              }
            }
          } else if (this._downEffect == 2) {
            if (val == GButton.DOWN || val == GButton.SELECTED_OVER || val == GButton.SELECTED_DISABLED) {
              if (!this._downScaled) {
                this._downScaled = true;
                this.setScale(this.scaleX * this._downEffectValue, this.scaleY * this._downEffectValue);
              }
            } else {
              if (this._downScaled) {
                this._downScaled = false;
                this.setScale(this.scaleX / this._downEffectValue, this.scaleY / this._downEffectValue);
              }
            }
          }
        };

        _proto52.setCurrentState = function setCurrentState() {
          if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
            if (this._selected) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
          } else {
            if (this._selected) this.setState(this._over ? GButton.SELECTED_OVER : GButton.DOWN);else this.setState(this._over ? GButton.OVER : GButton.UP);
          }
        };

        _proto52.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent4.prototype.handleControllerChanged.call(this, c);

          if (this._relatedController == c) this.selected = this._relatedPageId == c.selectedPageId;
        };

        _proto52.handleGrayedChanged = function handleGrayedChanged() {
          if (this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) {
            if (this.grayed) {
              if (this._selected && this._buttonController.hasPage(GButton.SELECTED_DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DISABLED);
            } else if (this._selected) this.setState(GButton.DOWN);else this.setState(GButton.UP);
          } else _GComponent4.prototype.handleGrayedChanged.call(this);
        };

        _proto52.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }

            case ObjectPropID.FontSize:
              return this.titleFontSize;

            case ObjectPropID.Selected:
              return this.selected;

            default:
              return _GComponent4.prototype.getProp.call(this, index);
          }
        };

        _proto52.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;

            case ObjectPropID.FontSize:
              this.titleFontSize = value;
              break;

            case ObjectPropID.Selected:
              this.selected = value;
              break;

            default:
              _GComponent4.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto52.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._mode = buffer.readByte();
          var str = buffer.readS();
          if (str) this._sound = str;
          this._soundVolumeScale = buffer.readFloat();
          this._downEffect = buffer.readByte();
          this._downEffectValue = buffer.readFloat();
          if (this._downEffect == 2) this.setPivot(0.5, 0.5, this.pivotAsAnchor);
          this._buttonController = this.getController("button");
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
          if (this._titleObject) this._title = this._titleObject.text;
          if (this._iconObject) this._icon = this._iconObject.icon;
          if (this._mode == ButtonMode.Common) this.setState(GButton.UP);

          this._node.on(Event.TOUCH_BEGIN, this.onTouchBegin_1, this);

          this._node.on(Event.TOUCH_END, this.onTouchEnd_1, this);

          this._node.on(Event.ROLL_OVER, this.onRollOver_1, this);

          this._node.on(Event.ROLL_OUT, this.onRollOut_1, this);

          this._node.on(Event.CLICK, this.onClick_1, this);
        };

        _proto52.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent4.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var str;
          var iv;
          str = buffer.readS();
          if (str != null) this.title = str;
          str = buffer.readS();
          if (str != null) this.selectedTitle = str;
          str = buffer.readS();
          if (str != null) this.icon = str;
          str = buffer.readS();
          if (str != null) this.selectedIcon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          iv = buffer.readInt();
          if (iv != 0) this.titleFontSize = iv;
          iv = buffer.readShort();
          if (iv >= 0) this._relatedController = this.parent.getControllerAt(iv);
          this._relatedPageId = buffer.readS();
          str = buffer.readS();
          if (str != null) this._sound = str;
          if (buffer.readBool()) this._soundVolumeScale = buffer.readFloat();
          this.selected = buffer.readBool();
        };

        _proto52.onRollOver_1 = function onRollOver_1() {
          if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
          this._over = true;
          if (this._down) return;
          if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
          this.setState(this._selected ? GButton.SELECTED_OVER : GButton.OVER);
        };

        _proto52.onRollOut_1 = function onRollOut_1() {
          if (!this._buttonController || !this._buttonController.hasPage(GButton.OVER)) return;
          this._over = false;
          if (this._down) return;
          if (this.grayed && this._buttonController.hasPage(GButton.DISABLED)) return;
          this.setState(this._selected ? GButton.DOWN : GButton.UP);
        };

        _proto52.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          this._down = true;
          evt.captureTouch();

          if (this._mode == ButtonMode.Common) {
            if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.SELECTED_DISABLED);else this.setState(GButton.DOWN);
          }

          if (this._linkedPopup) {
            if (this._linkedPopup instanceof Window) this._linkedPopup.toggleStatus();else GRoot.inst.togglePopup(this._linkedPopup, this);
          }
        };

        _proto52.onTouchEnd_1 = function onTouchEnd_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;

          if (this._down) {
            this._down = false;
            if (this._node == null) return;

            if (this._mode == ButtonMode.Common) {
              if (this.grayed && this._buttonController && this._buttonController.hasPage(GButton.DISABLED)) this.setState(GButton.DISABLED);else if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
            } else {
              if (!this._over && this._buttonController != null && (this._buttonController.selectedPage == GButton.OVER || this._buttonController.selectedPage == GButton.SELECTED_OVER)) {
                this.setCurrentState();
              }
            }
          }
        };

        _proto52.onClick_1 = function onClick_1() {
          if (this._sound) {
            var pi = UIPackage.getItemByURL(this._sound);

            if (pi) {
              var sound = pi.owner.getItemAsset(pi);
              if (sound) GRoot.inst.playOneShotSound(sound, this._soundVolumeScale);
            }
          }

          if (this._mode == ButtonMode.Check) {
            if (this._changeStateOnClick) {
              this.selected = !this._selected;

              this._node.emit(Event.STATUS_CHANGED, this);
            }
          } else if (this._mode == ButtonMode.Radio) {
            if (this._changeStateOnClick && !this._selected) {
              this.selected = true;

              this._node.emit(Event.STATUS_CHANGED, this);
            }
          } else {
            if (this._relatedController) this._relatedController.selectedPageId = this._relatedPageId;
          }
        };

        _createClass(GButton, [{
          key: "icon",
          get: function get() {
            return this._icon;
          },
          set: function set(value) {
            this._icon = value;
            value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "selectedIcon",
          get: function get() {
            return this._selectedIcon;
          },
          set: function set(value) {
            this._selectedIcon = value;
            value = this._selected && this._selectedIcon ? this._selectedIcon : this._icon;
            if (this._iconObject) this._iconObject.icon = value;
          }
        }, {
          key: "title",
          get: function get() {
            return this._title;
          },
          set: function set(value) {
            this._title = value;
            if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
            this.updateGear(6);
          }
        }, {
          key: "text",
          get: function get() {
            return this.title;
          },
          set: function set(value) {
            this.title = value;
          }
        }, {
          key: "selectedTitle",
          get: function get() {
            return this._selectedTitle;
          },
          set: function set(value) {
            this._selectedTitle = value;
            if (this._titleObject) this._titleObject.text = this._selected && this._selectedTitle ? this._selectedTitle : this._title;
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.BLACK;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "sound",
          get: function get() {
            return this._sound;
          },
          set: function set(val) {
            this._sound = val;
          }
        }, {
          key: "soundVolumeScale",
          get: function get() {
            return this._soundVolumeScale;
          },
          set: function set(value) {
            this._soundVolumeScale = value;
          }
        }, {
          key: "selected",
          get: function get() {
            return this._selected;
          },
          set: function set(val) {
            if (this._mode == ButtonMode.Common) return;

            if (this._selected != val) {
              this._selected = val;
              this.setCurrentState();
              if (this._selectedTitle && this._titleObject) this._titleObject.text = this._selected ? this._selectedTitle : this._title;

              if (this._selectedIcon) {
                var str = this._selected ? this._selectedIcon : this._icon;
                if (this._iconObject) this._iconObject.icon = str;
              }

              if (this._relatedController && this._parent && !this._parent._buildingDisplayList) {
                if (this._selected) {
                  this._relatedController.selectedPageId = this._relatedPageId;
                  if (this._relatedController.autoRadioGroupDepth) this._parent.adjustRadioGroupDepth(this, this._relatedController);
                } else if (this._mode == ButtonMode.Check && this._relatedController.selectedPageId == this._relatedPageId) this._relatedController.oppositePageId = this._relatedPageId;
              }
            }
          }
        }, {
          key: "mode",
          get: function get() {
            return this._mode;
          },
          set: function set(value) {
            if (this._mode != value) {
              if (value == ButtonMode.Common) this.selected = false;
              this._mode = value;
            }
          }
        }, {
          key: "relatedController",
          get: function get() {
            return this._relatedController;
          },
          set: function set(val) {
            this._relatedController = val;
          }
        }, {
          key: "relatedPageId",
          get: function get() {
            return this._relatedPageId;
          },
          set: function set(val) {
            this._relatedPageId = val;
          }
        }, {
          key: "changeStateOnClick",
          get: function get() {
            return this._changeStateOnClick;
          },
          set: function set(value) {
            this._changeStateOnClick = value;
          }
        }, {
          key: "linkedPopup",
          get: function get() {
            return this._linkedPopup;
          },
          set: function set(value) {
            this._linkedPopup = value;
          }
        }]);

        return GButton;
      }(GComponent));
      GButton.UP = "up";
      GButton.DOWN = "down";
      GButton.OVER = "over";
      GButton.SELECTED_OVER = "selectedOver";
      GButton.DISABLED = "disabled";
      GButton.SELECTED_DISABLED = "selectedDisabled";
      var GList = exports('GList', /*#__PURE__*/function (_GComponent5) {
        _inheritsLoose(GList, _GComponent5); //Virtual List support
        //the top left index
        //item count in one line
        //只用在页面模式，表示垂直方向的项目数
        //1-content changed, 2-size changed


        function GList() {
          var _this25;

          _this25 = _GComponent5.call(this) || this;
          _this25.itemRenderer = void 0;
          _this25.itemProvider = void 0;
          _this25.scrollItemToViewOnClick = true;
          _this25.foldInvisibleItems = false;
          _this25._layout = void 0;
          _this25._lineCount = 0;
          _this25._columnCount = 0;
          _this25._lineGap = 0;
          _this25._columnGap = 0;
          _this25._defaultItem = void 0;
          _this25._autoResizeItem = void 0;
          _this25._selectionMode = void 0;
          _this25._align = void 0;
          _this25._verticalAlign = void 0;
          _this25._selectionController = void 0;
          _this25._lastSelectedIndex = 0;
          _this25._pool = void 0;
          _this25._virtual = void 0;
          _this25._loop = void 0;
          _this25._numItems = 0;
          _this25._realNumItems = 0;
          _this25._firstIndex = 0;
          _this25._curLineItemCount = 0;
          _this25._curLineItemCount2 = 0;
          _this25._itemSize = void 0;
          _this25._virtualListChanged = 0;
          _this25._virtualItems = void 0;
          _this25._eventLocked = void 0;
          _this25.itemInfoVer = 0;
          _this25.getInfo = undefined;
          _this25.scrollItemToViewOnClick = true;
          _this25.foldInvisibleItems = false;
          _this25._lineCount = 0;
          _this25._columnCount = 0;
          _this25._lineGap = 0;
          _this25._columnGap = 0;
          _this25._lastSelectedIndex = 0;
          _this25._numItems = 0;
          _this25._realNumItems = 0;
          _this25._firstIndex = 0; //the top left index

          _this25._curLineItemCount = 0; //item count in one line

          _this25._curLineItemCount2 = 0; //只用在页面模式，表示垂直方向的项目数

          _this25._virtualListChanged = 0; //1-content changed, 2-size changed

          _this25.itemInfoVer = 0; //用来标志item是否在本次处理中已经被重用了

          _this25._node.name = "GList";
          _this25._trackBounds = true;
          _this25._pool = new GObjectPool();
          _this25._layout = ListLayoutType.SingleColumn;
          _this25._autoResizeItem = true;
          _this25._lastSelectedIndex = -1;
          _this25._selectionMode = ListSelectionMode.Single;
          _this25.opaque = true;
          _this25._align = AlignType.Left;
          _this25._verticalAlign = VertAlignType.Top;
          return _this25;
        }

        var _proto53 = GList.prototype;

        _proto53.dispose = function dispose() {
          this._partner.unschedule(this._refreshVirtualList);

          this._pool.clear();

          _GComponent5.prototype.dispose.call(this);
        };

        _proto53.getFromPool = function getFromPool(url) {
          if (url === void 0) {
            url = undefined;
          }

          if (!url) url = this._defaultItem;

          var obj = this._pool.getObject(url);

          if (obj) obj.visible = true;
          obj.countRefresh = 0;
          return obj;
        };

        _proto53.returnToPool = function returnToPool(obj) {
          this._pool.returnObject(obj);
        };

        _proto53.addChildAt = function addChildAt(child, index) {
          _GComponent5.prototype.addChildAt.call(this, child, index);

          if (child instanceof GButton) {
            child.selected = false;
            child.changeStateOnClick = false;
          }

          child.on(Event.CLICK, this.onClickItem, this);
          return child;
        };

        _proto53.addItem = function addItem(url) {
          if (!url) url = this._defaultItem;
          return this.addChild(UIPackage.createObjectFromURL(url));
        };

        _proto53.addItemFromPool = function addItemFromPool(url) {
          return this.addChild(this.getFromPool(url));
        };

        _proto53.removeChildAt = function removeChildAt(index, dispose) {
          var child = _GComponent5.prototype.removeChildAt.call(this, index, dispose);

          if (!dispose) child.off(Event.CLICK, this.onClickItem, this);
          return child;
        };

        _proto53.removeChildToPoolAt = function removeChildToPoolAt(index) {
          var child = _GComponent5.prototype.removeChildAt.call(this, index);

          this.returnToPool(child);
        };

        _proto53.removeChildToPool = function removeChildToPool(child) {
          _GComponent5.prototype.removeChild.call(this, child);

          this.returnToPool(child);
        };

        _proto53.removeChildrenToPool = function removeChildrenToPool(beginIndex, endIndex) {
          if (beginIndex == undefined) beginIndex = 0;
          if (endIndex == undefined) endIndex = -1;
          if (endIndex < 0 || endIndex >= this._children.length) endIndex = this._children.length - 1;

          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildToPoolAt(beginIndex);
        };

        _proto53.getSelection = function getSelection(result) {
          if (!result) result = new Array();
          var i;

          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];

              if (ii.obj instanceof GButton && ii.obj.selected || !ii.obj && ii.selected) {
                var j = i;

                if (this._loop) {
                  j = i % this._numItems;
                  if (result.indexOf(j) != -1) continue;
                }

                result.push(j);
              }
            }
          } else {
            var cnt = this._children.length;

            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton && obj.selected) result.push(i);
            }
          }

          return result;
        };

        _proto53.addSelection = function addSelection(index, scrollItToView) {
          if (this._selectionMode == ListSelectionMode.None) return;
          this.checkVirtualList();
          if (this._selectionMode == ListSelectionMode.Single) this.clearSelection();
          if (scrollItToView) this.scrollToView(index);
          this._lastSelectedIndex = index;
          var obj;

          if (this._virtual) {
            var ii = this._virtualItems[index];
            if (ii.obj) obj = ii.obj;
            ii.selected = true;
          } else obj = this.getChildAt(index);

          if (obj instanceof GButton && !obj.selected) {
            obj.selected = true;
            this.updateSelectionController(index);
          }
        };

        _proto53.removeSelection = function removeSelection(index) {
          if (this._selectionMode == ListSelectionMode.None) return;
          var obj;

          if (this._virtual) {
            var ii = this._virtualItems[index];
            if (ii.obj) obj = ii.obj;
            ii.selected = false;
          } else obj = this.getChildAt(index);

          if (obj instanceof GButton) obj.selected = false;
        };

        _proto53.clearSelection = function clearSelection() {
          var i;

          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];
              if (ii.obj instanceof GButton) ii.obj.selected = false;
              ii.selected = false;
            }
          } else {
            var cnt = this._children.length;

            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton) obj.selected = false;
            }
          }
        };

        _proto53.clearSelectionExcept = function clearSelectionExcept(g) {
          var i;

          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];

              if (ii.obj != g) {
                if (ii.obj instanceof GButton) ii.obj.selected = false;
                ii.selected = false;
              }
            }
          } else {
            var cnt = this._children.length;

            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];
              if (obj instanceof GButton && obj != g) obj.selected = false;
            }
          }
        };

        _proto53.selectAll = function selectAll() {
          this.checkVirtualList();
          var last = -1;
          var i;

          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];

              if (ii.obj instanceof GButton && !ii.obj.selected) {
                ii.obj.selected = true;
                last = i;
              }

              ii.selected = true;
            }
          } else {
            var cnt = this._children.length;

            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];

              if (obj instanceof GButton && !obj.selected) {
                obj.selected = true;
                last = i;
              }
            }
          }

          if (last != -1) this.updateSelectionController(last);
        };

        _proto53.selectNone = function selectNone() {
          this.clearSelection();
        };

        _proto53.selectReverse = function selectReverse() {
          this.checkVirtualList();
          var last = -1;
          var i;

          if (this._virtual) {
            for (i = 0; i < this._realNumItems; i++) {
              var ii = this._virtualItems[i];

              if (ii.obj instanceof GButton) {
                ii.obj.selected = !ii.obj.selected;
                if (ii.obj.selected) last = i;
              }

              ii.selected = !ii.selected;
            }
          } else {
            var cnt = this._children.length;

            for (i = 0; i < cnt; i++) {
              var obj = this._children[i];

              if (obj instanceof GButton) {
                obj.selected = !obj.selected;
                if (obj.selected) last = i;
              }
            }
          }

          if (last != -1) this.updateSelectionController(last);
        };

        _proto53.handleArrowKey = function handleArrowKey(dir) {
          var index = this.selectedIndex;
          if (index == -1) return;

          switch (dir) {
            case 1:
              //up
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowVertical) {
                index--;

                if (index >= 0) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                var current = this._children[index];
                var k = 0;

                for (var i = index - 1; i >= 0; i--) {
                  var obj = this._children[i];

                  if (obj.y != current.y) {
                    current = obj;
                    break;
                  }

                  k++;
                }

                for (; i >= 0; i--) {
                  obj = this._children[i];

                  if (obj.y != current.y) {
                    this.clearSelection();
                    this.addSelection(i + k + 1, true);
                    break;
                  }
                }
              }

              break;

            case 3:
              //right
              if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                index++;

                if (index < this._children.length) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowVertical) {
                current = this._children[index];
                k = 0;
                var cnt = this._children.length;

                for (i = index + 1; i < cnt; i++) {
                  obj = this._children[i];

                  if (obj.x != current.x) {
                    current = obj;
                    break;
                  }

                  k++;
                }

                for (; i < cnt; i++) {
                  obj = this._children[i];

                  if (obj.x != current.x) {
                    this.clearSelection();
                    this.addSelection(i - k - 1, true);
                    break;
                  }
                }
              }

              break;

            case 5:
              //down
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowVertical) {
                index++;

                if (index < this._children.length) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                current = this._children[index];
                k = 0;
                cnt = this._children.length;

                for (i = index + 1; i < cnt; i++) {
                  obj = this._children[i];

                  if (obj.y != current.y) {
                    current = obj;
                    break;
                  }

                  k++;
                }

                for (; i < cnt; i++) {
                  obj = this._children[i];

                  if (obj.y != current.y) {
                    this.clearSelection();
                    this.addSelection(i - k - 1, true);
                    break;
                  }
                }
              }

              break;

            case 7:
              //left
              if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.Pagination) {
                index--;

                if (index >= 0) {
                  this.clearSelection();
                  this.addSelection(index, true);
                }
              } else if (this._layout == ListLayoutType.FlowVertical) {
                current = this._children[index];
                k = 0;

                for (i = index - 1; i >= 0; i--) {
                  obj = this._children[i];

                  if (obj.x != current.x) {
                    current = obj;
                    break;
                  }

                  k++;
                }

                for (; i >= 0; i--) {
                  obj = this._children[i];

                  if (obj.x != current.x) {
                    this.clearSelection();
                    this.addSelection(i + k + 1, true);
                    break;
                  }
                }
              }

              break;
          }
        };

        _proto53.onClickItem = function onClickItem(evt) {
          if (this._scrollPane && this._scrollPane.isDragged) return;
          var item = GObject.cast(evt.currentTarget);
          this.setSelectionOnEvent(item, evt);
          if (this._scrollPane && this.scrollItemToViewOnClick) this._scrollPane.scrollToView(item, true);
          this.dispatchItemEvent(item, evt);
        };

        _proto53.dispatchItemEvent = function dispatchItemEvent(item, evt) {
          this._node.emit(Event.CLICK_ITEM, item, evt);
        };

        _proto53.setSelectionOnEvent = function setSelectionOnEvent(item, evt) {
          if (!(item instanceof GButton) || this._selectionMode == ListSelectionMode.None) return;
          var dontChangeLastIndex = false;
          var index = this.childIndexToItemIndex(this.getChildIndex(item));

          if (this._selectionMode == ListSelectionMode.Single) {
            if (!item.selected) {
              this.clearSelectionExcept(item);
              item.selected = true;
            }
          } else {
            if (evt.isShiftDown) {
              if (!item.selected) {
                if (this._lastSelectedIndex != -1) {
                  var min = Math.min(this._lastSelectedIndex, index);
                  var max = Math.max(this._lastSelectedIndex, index);
                  max = Math.min(max, this.numItems - 1);
                  var i;

                  if (this._virtual) {
                    for (i = min; i <= max; i++) {
                      var ii = this._virtualItems[i];
                      if (ii.obj instanceof GButton) ii.obj.selected = true;
                      ii.selected = true;
                    }
                  } else {
                    for (i = min; i <= max; i++) {
                      var obj = this.getChildAt(i);
                      if (obj instanceof GButton) obj.selected = true;
                    }
                  }

                  dontChangeLastIndex = true;
                } else {
                  item.selected = true;
                }
              }
            } else if (evt.isCtrlDown || this._selectionMode == ListSelectionMode.Multiple_SingleClick) {
              item.selected = !item.selected;
            } else {
              if (!item.selected) {
                this.clearSelectionExcept(item);
                item.selected = true;
              } else this.clearSelectionExcept(item);
            }
          }

          if (!dontChangeLastIndex) this._lastSelectedIndex = index;
          if (item.selected) this.updateSelectionController(index);
        };

        _proto53.resizeToFit = function resizeToFit(itemCount, minSize) {
          if (itemCount === void 0) {
            itemCount = Number.POSITIVE_INFINITY;
          }

          if (minSize === void 0) {
            minSize = 0;
          }

          this.ensureBoundsCorrect();
          var curCount = this.numItems;
          if (itemCount > curCount) itemCount = curCount;

          if (this._virtual) {
            var lineCount = Math.ceil(itemCount / this._curLineItemCount);
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = lineCount * this._itemSize.height + Math.max(0, lineCount - 1) * this._lineGap;else this.viewWidth = lineCount * this._itemSize.width + Math.max(0, lineCount - 1) * this._columnGap;
          } else if (itemCount == 0) {
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
          } else {
            var i = itemCount - 1;
            var obj = null;

            while (i >= 0) {
              obj = this.getChildAt(i);
              if (!this.foldInvisibleItems || obj.visible) break;
              i--;
            }

            if (i < 0) {
              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) this.viewHeight = minSize;else this.viewWidth = minSize;
            } else {
              var size = 0;

              if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
                size = obj.y + obj.height;
                if (size < minSize) size = minSize;
                this.viewHeight = size;
              } else {
                size = obj.x + obj.width;
                if (size < minSize) size = minSize;
                this.viewWidth = size;
              }
            }
          }
        };

        _proto53.getMaxItemWidth = function getMaxItemWidth() {
          var cnt = this._children.length;
          var max = 0;

          for (var i = 0; i < cnt; i++) {
            var child = this.getChildAt(i);
            if (child.width > max) max = child.width;
          }

          return max;
        };

        _proto53.handleSizeChanged = function handleSizeChanged() {
          _GComponent5.prototype.handleSizeChanged.call(this);

          this.setBoundsChangedFlag();
          if (this._virtual) this.setVirtualListChangedFlag(true);
        };

        _proto53.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent5.prototype.handleControllerChanged.call(this, c);

          if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };

        _proto53.updateSelectionController = function updateSelectionController(index) {
          if (this._selectionController && !this._selectionController.changing && index < this._selectionController.pageCount) {
            var c = this._selectionController;
            this._selectionController = null;
            c.selectedIndex = index;
            this._selectionController = c;
          }
        };

        _proto53.getSnappingPosition = function getSnappingPosition(xValue, yValue, resultPoint) {
          if (this._virtual) {
            resultPoint = resultPoint || new Vec2();
            var saved;
            var index;

            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              saved = yValue;
              s_n = yValue;
              index = this.getIndexOnPos1(false);
              yValue = s_n;
              if (index < this._virtualItems.length && saved - yValue > this._virtualItems[index].height / 2 && index < this._realNumItems) yValue += this._virtualItems[index].height + this._lineGap;
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              saved = xValue;
              s_n = xValue;
              index = this.getIndexOnPos2(false);
              xValue = s_n;
              if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
            } else {
              saved = xValue;
              s_n = xValue;
              index = this.getIndexOnPos3(false);
              xValue = s_n;
              if (index < this._virtualItems.length && saved - xValue > this._virtualItems[index].width / 2 && index < this._realNumItems) xValue += this._virtualItems[index].width + this._columnGap;
            }

            resultPoint.x = xValue;
            resultPoint.y = yValue;
            return resultPoint;
          } else {
            return _GComponent5.prototype.getSnappingPosition.call(this, xValue, yValue, resultPoint);
          }
        };

        _proto53.scrollToView = function scrollToView(index, ani, setFirst) {
          if (this._virtual) {
            if (this._numItems == 0) return;
            this.checkVirtualList();
            if (index >= this._virtualItems.length) throw new Error("Invalid child index: " + index + ">" + this._virtualItems.length);
            if (this._loop) index = Math.floor(this._firstIndex / this._numItems) * this._numItems + index;
            var rect;
            var ii = this._virtualItems[index];
            var pos = 0;
            var i;

            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) pos += this._virtualItems[i].height + this._lineGap;

              rect = new Rect(0, pos, this._itemSize.width, ii.height);
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              for (i = this._curLineItemCount - 1; i < index; i += this._curLineItemCount) pos += this._virtualItems[i].width + this._columnGap;

              rect = new Rect(pos, 0, ii.width, this._itemSize.height);
            } else {
              var page = index / (this._curLineItemCount * this._curLineItemCount2);
              rect = new Rect(page * this.viewWidth + index % this._curLineItemCount * (ii.width + this._columnGap), index / this._curLineItemCount % this._curLineItemCount2 * (ii.height + this._lineGap), ii.width, ii.height);
            }

            if (this._scrollPane) this._scrollPane.scrollToView(rect, ani, setFirst);
          } else {
            var obj = this.getChildAt(index);

            if (obj) {
              if (this._scrollPane) this._scrollPane.scrollToView(obj, ani, setFirst);else if (this.parent && this.parent.scrollPane) this.parent.scrollPane.scrollToView(obj, ani, setFirst);
            }
          }
        };

        _proto53.getFirstChildInView = function getFirstChildInView() {
          return this.childIndexToItemIndex(_GComponent5.prototype.getFirstChildInView.call(this));
        };

        _proto53.childIndexToItemIndex = function childIndexToItemIndex(index) {
          if (!this._virtual) return index;

          if (this._layout == ListLayoutType.Pagination) {
            for (var i = this._firstIndex; i < this._realNumItems; i++) {
              if (this._virtualItems[i].obj) {
                index--;
                if (index < 0) return i;
              }
            }

            return index;
          } else {
            index += this._firstIndex;
            if (this._loop && this._numItems > 0) index = index % this._numItems;
            return index;
          }
        };

        _proto53.itemIndexToChildIndex = function itemIndexToChildIndex(index) {
          if (!this._virtual) return index;

          if (this._layout == ListLayoutType.Pagination) {
            return this.getChildIndex(this._virtualItems[index].obj);
          } else {
            if (this._loop && this._numItems > 0) {
              var j = this._firstIndex % this._numItems;
              if (index >= j) index = index - j;else index = this._numItems - j + index;
            } else index -= this._firstIndex;

            return index;
          }
        };

        _proto53.setVirtual = function setVirtual() {
          this._setVirtual(false);
        } /// <summary>
        /// Set the list to be virtual list, and has loop behavior.
        /// </summary>
        ;

        _proto53.setVirtualAndLoop = function setVirtualAndLoop() {
          this._setVirtual(true);
        } /// <summary>
        /// Set the list to be virtual list.
        /// </summary>
        ;

        _proto53._setVirtual = function _setVirtual(loop) {
          if (!this._virtual) {
            if (!this._scrollPane) throw new Error("Virtual list must be scrollable!");

            if (loop) {
              if (this._layout == ListLayoutType.FlowHorizontal || this._layout == ListLayoutType.FlowVertical) throw new Error("Loop list is not supported for FlowHorizontal or FlowVertical layout!");
              this._scrollPane.bouncebackEffect = false;
            }

            this._virtual = true;
            this._loop = loop;
            this._virtualItems = new Array();
            this.removeChildrenToPool();

            if (this._itemSize == null) {
              this._itemSize = new Size(0, 0);
              var obj = this.getFromPool(null);

              if (!obj) {
                throw new Error("Virtual List must have a default list item resource.");
              } else {
                this._itemSize.width = obj.width;
                this._itemSize.height = obj.height;
              }

              this.returnToPool(obj);
            }

            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              this._scrollPane.scrollStep = this._itemSize.height;
              if (this._loop) this._scrollPane._loop = 2;
            } else {
              this._scrollPane.scrollStep = this._itemSize.width;
              if (this._loop) this._scrollPane._loop = 1;
            }

            this._node.on(Event.SCROLL, this.__scrolled, this);

            this.setVirtualListChangedFlag(true);
          }
        } /// <summary>
        /// Set the list item count. 
        /// If the list is not virtual, specified number of items will be created. 
        /// If the list is virtual, only items in view will be created.
        /// </summary>
        ;

        _proto53.refreshVirtualList = function refreshVirtualList() {
          this.setVirtualListChangedFlag(false);
        };

        _proto53.checkVirtualList = function checkVirtualList() {
          if (this._virtualListChanged != 0) {
            this._refreshVirtualList();

            this._partner.unschedule(this._refreshVirtualList);
          }
        };

        _proto53.setVirtualListChangedFlag = function setVirtualListChangedFlag(layoutChanged) {
          if (layoutChanged) this._virtualListChanged = 2;else if (this._virtualListChanged == 0) this._virtualListChanged = 1;

          this._partner.callLater(this._refreshVirtualList);
        };

        _proto53._refreshVirtualList = function _refreshVirtualList(dt) {
          if (!isNaN(dt)) {
            var _t = GObject.cast(this.node);

            _t._refreshVirtualList();

            return;
          }

          var layoutChanged = this._virtualListChanged == 2;
          this._virtualListChanged = 0;
          this._eventLocked = true;

          if (layoutChanged) {
            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.SingleRow) this._curLineItemCount = 1;else if (this._layout == ListLayoutType.FlowHorizontal) {
              if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
              }
            } else if (this._layout == ListLayoutType.FlowVertical) {
              if (this._lineCount > 0) this._curLineItemCount = this._lineCount;else {
                this._curLineItemCount = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
              }
            } else //pagination
              {
                if (this._columnCount > 0) this._curLineItemCount = this._columnCount;else {
                  this._curLineItemCount = Math.floor((this._scrollPane.viewWidth + this._columnGap) / (this._itemSize.width + this._columnGap));
                  if (this._curLineItemCount <= 0) this._curLineItemCount = 1;
                }
                if (this._lineCount > 0) this._curLineItemCount2 = this._lineCount;else {
                  this._curLineItemCount2 = Math.floor((this._scrollPane.viewHeight + this._lineGap) / (this._itemSize.height + this._lineGap));
                  if (this._curLineItemCount2 <= 0) this._curLineItemCount2 = 1;
                }
              }
          }

          var ch = 0,
              cw = 0;

          if (this._realNumItems > 0) {
            var i;

            var len = Math.ceil(this._realNumItems / this._curLineItemCount) * this._curLineItemCount;

            var len2 = Math.min(this._curLineItemCount, this._realNumItems);

            if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
              for (i = 0; i < len; i += this._curLineItemCount) ch += this._virtualItems[i].height + this._lineGap;

              if (ch > 0) ch -= this._lineGap;
              if (this._autoResizeItem) cw = this._scrollPane.viewWidth;else {
                for (i = 0; i < len2; i++) cw += this._virtualItems[i].width + this._columnGap;

                if (cw > 0) cw -= this._columnGap;
              }
            } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
              for (i = 0; i < len; i += this._curLineItemCount) cw += this._virtualItems[i].width + this._columnGap;

              if (cw > 0) cw -= this._columnGap;
              if (this._autoResizeItem) ch = this._scrollPane.viewHeight;else {
                for (i = 0; i < len2; i++) ch += this._virtualItems[i].height + this._lineGap;

                if (ch > 0) ch -= this._lineGap;
              }
            } else {
              var pageCount = Math.ceil(len / (this._curLineItemCount * this._curLineItemCount2));
              cw = pageCount * this.viewWidth;
              ch = this.viewHeight;
            }
          }

          this.handleAlign(cw, ch);

          this._scrollPane.setContentSize(cw, ch);

          this._eventLocked = false;
          this.handleScroll(true);
        };

        _proto53.__scrolled = function __scrolled(evt) {
          this.handleScroll(false);
        };

        _proto53.getIndexOnPos1 = function getIndexOnPos1(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }

          var i;
          var pos2;
          var pos3;

          if (this.numChildren > 0 && !forceUpdate) {
            pos2 = this.getChildAt(0).y;

            if (pos2 > s_n) {
              for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                pos2 -= this._virtualItems[i].height + this._lineGap;

                if (pos2 <= s_n) {
                  s_n = pos2;
                  return i;
                }
              }

              s_n = 0;
              return 0;
            } else {
              for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                pos3 = pos2 + this._virtualItems[i].height + this._lineGap;

                if (pos3 > s_n) {
                  s_n = pos2;
                  return i;
                }

                pos2 = pos3;
              }

              s_n = pos2;
              return this._realNumItems - this._curLineItemCount;
            }
          } else {
            pos2 = 0;

            for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
              pos3 = pos2 + this._virtualItems[i].height + this._lineGap;

              if (pos3 > s_n) {
                s_n = pos2;
                return i;
              }

              pos2 = pos3;
            }

            s_n = pos2;
            return this._realNumItems - this._curLineItemCount;
          }
        };

        _proto53.getIndexOnPos2 = function getIndexOnPos2(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }

          var i;
          var pos2;
          var pos3;

          if (this.numChildren > 0 && !forceUpdate) {
            pos2 = this.getChildAt(0).x;

            if (pos2 > s_n) {
              for (i = this._firstIndex - this._curLineItemCount; i >= 0; i -= this._curLineItemCount) {
                pos2 -= this._virtualItems[i].width + this._columnGap;

                if (pos2 <= s_n) {
                  s_n = pos2;
                  return i;
                }
              }

              s_n = 0;
              return 0;
            } else {
              for (i = this._firstIndex; i < this._realNumItems; i += this._curLineItemCount) {
                pos3 = pos2 + this._virtualItems[i].width + this._columnGap;

                if (pos3 > s_n) {
                  s_n = pos2;
                  return i;
                }

                pos2 = pos3;
              }

              s_n = pos2;
              return this._realNumItems - this._curLineItemCount;
            }
          } else {
            pos2 = 0;

            for (i = 0; i < this._realNumItems; i += this._curLineItemCount) {
              pos3 = pos2 + this._virtualItems[i].width + this._columnGap;

              if (pos3 > s_n) {
                s_n = pos2;
                return i;
              }

              pos2 = pos3;
            }

            s_n = pos2;
            return this._realNumItems - this._curLineItemCount;
          }
        };

        _proto53.getIndexOnPos3 = function getIndexOnPos3(forceUpdate) {
          if (this._realNumItems < this._curLineItemCount) {
            s_n = 0;
            return 0;
          }

          var viewWidth = this.viewWidth;
          var page = Math.floor(s_n / viewWidth);
          var startIndex = page * (this._curLineItemCount * this._curLineItemCount2);
          var pos2 = page * viewWidth;
          var i;
          var pos3;

          for (i = 0; i < this._curLineItemCount; i++) {
            pos3 = pos2 + this._virtualItems[startIndex + i].width + this._columnGap;

            if (pos3 > s_n) {
              s_n = pos2;
              return startIndex + i;
            }

            pos2 = pos3;
          }

          s_n = pos2;
          return startIndex + this._curLineItemCount - 1;
        };

        _proto53.handleScroll = function handleScroll(forceUpdate) {
          if (this._eventLocked) return;

          if (this._layout == ListLayoutType.SingleColumn || this._layout == ListLayoutType.FlowHorizontal) {
            var enterCounter = 0;

            while (this.handleScroll1(forceUpdate)) {
              enterCounter++;
              forceUpdate = false;

              if (enterCounter > 20) {
                console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                break;
              }
            }

            this.handleArchOrder1();
          } else if (this._layout == ListLayoutType.SingleRow || this._layout == ListLayoutType.FlowVertical) {
            enterCounter = 0;

            while (this.handleScroll2(forceUpdate)) {
              enterCounter++;
              forceUpdate = false;

              if (enterCounter > 20) {
                console.log("FairyGUI: list will never be filled as the item renderer function always returns a different size.");
                break;
              }
            }

            this.handleArchOrder2();
          } else {
            this.handleScroll3(forceUpdate);
          }

          this._boundsChanged = false;
        };

        _proto53.handleScroll1 = function handleScroll1(forceUpdate) {
          var pos = this._scrollPane.scrollingPosY;
          var max = pos + this._scrollPane.viewHeight;
          var end = max == this._scrollPane.contentHeight; //这个标志表示当前需要滚动到最末，无论内容变化大小
          //寻找当前位置的第一条项目

          s_n = pos;
          var newFirstIndex = this.getIndexOnPos1(forceUpdate);
          pos = s_n;

          if (newFirstIndex == this._firstIndex && !forceUpdate) {
            return false;
          }

          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex;
          var curIndex = newFirstIndex;
          var forward = oldFirstIndex > newFirstIndex;
          var childCount = this.numChildren;
          var lastIndex = oldFirstIndex + childCount - 1;
          var reuseIndex = forward ? lastIndex : oldFirstIndex;
          var curX = 0,
              curY = pos;
          var needRender;
          var deltaSize = 0;
          var firstItemDeltaSize = 0;
          var url = this._defaultItem;
          var ii, ii2;
          var i, j;
          var partSize = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          this.itemInfoVer++;

          while (curIndex < this._realNumItems && (end || curY < max)) {
            ii = this._virtualItems[curIndex];

            if (!ii.obj || forceUpdate) {
              if (this.itemProvider != null) {
                url = this.itemProvider(curIndex % this._numItems);
                if (url == null) url = this._defaultItem;
                url = UIPackage.normalizeURL(url);
              }

              if (ii.obj && ii.obj.resourceURL != url) {
                if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
                this.removeChildToPool(ii.obj);
                ii.obj = null;
              }
            }

            if (!ii.obj) {
              //搜索最适合的重用item，保证每次刷新需要新建或者重新render的item最少
              if (forward) {
                for (j = reuseIndex; j >= oldFirstIndex; j--) {
                  ii2 = this._virtualItems[j];

                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex--;
                    break;
                  }
                }
              } else {
                for (j = reuseIndex; j <= lastIndex; j++) {
                  ii2 = this._virtualItems[j];

                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex++;
                    break;
                  }
                }
              }

              if (ii.obj) {
                this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
              } else {
                ii.obj = this._pool.getObject(url);
                if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
              }

              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else needRender = forceUpdate;

            if (needRender) {
              if (this._autoResizeItem && (this._layout == ListLayoutType.SingleColumn || this._columnCount > 0)) ii.obj.setSize(partSize, ii.obj.height, true);
              this.itemRenderer(curIndex % this._numItems, ii.obj);

              if (curIndex % this._curLineItemCount == 0) {
                deltaSize += Math.ceil(ii.obj.height) - ii.height;

                if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                  //当内容向下滚动时，如果新出现的项目大小发生变化，需要做一个位置补偿，才不会导致滚动跳动
                  firstItemDeltaSize = Math.ceil(ii.obj.height) - ii.height;
                }
              }

              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }

            ii.updateFlag = this.itemInfoVer;
            ii.obj.setPosition(curX, curY);
            if (curIndex == newFirstIndex) //要显示多一条才不会穿帮
              max += ii.height;
            curX += ii.width + this._columnGap;

            if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
              curX = 0;
              curY += ii.height + this._lineGap;
            }

            curIndex++;
          }

          for (i = 0; i < childCount; i++) {
            ii = this._virtualItems[oldFirstIndex + i];

            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }

          childCount = this._children.length;

          for (i = 0; i < childCount; i++) {
            var obj = this._virtualItems[newFirstIndex + i].obj;
            if (this._children[i] != obj) this.setChildIndex(obj, i);
          }

          if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(0, deltaSize, 0, firstItemDeltaSize);
          if (curIndex > 0 && this.numChildren > 0 && this._container.position.y <= 0 && this.getChildAt(0).y > -this._container.position.y) //最后一页没填满！
            return true;else return false;
        };

        _proto53.handleScroll2 = function handleScroll2(forceUpdate) {
          var pos = this._scrollPane.scrollingPosX;
          var max = pos + this._scrollPane.viewWidth;
          var end = pos == this._scrollPane.contentWidth; //这个标志表示当前需要滚动到最末，无论内容变化大小
          //寻找当前位置的第一条项目

          s_n = pos;
          var newFirstIndex = this.getIndexOnPos2(forceUpdate);
          pos = s_n;

          if (newFirstIndex == this._firstIndex && !forceUpdate) {
            return false;
          }

          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex;
          var curIndex = newFirstIndex;
          var forward = oldFirstIndex > newFirstIndex;
          var childCount = this.numChildren;
          var lastIndex = oldFirstIndex + childCount - 1;
          var reuseIndex = forward ? lastIndex : oldFirstIndex;
          var curX = pos,
              curY = 0;
          var needRender;
          var deltaSize = 0;
          var firstItemDeltaSize = 0;
          var url = this._defaultItem;
          var ii, ii2;
          var i, j;
          var partSize = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          this.itemInfoVer++;

          while (curIndex < this._realNumItems && (end || curX < max)) {
            ii = this._virtualItems[curIndex];

            if (!ii.obj || forceUpdate) {
              if (this.itemProvider != null) {
                url = this.itemProvider(curIndex % this._numItems);
                if (url == null) url = this._defaultItem;
                url = UIPackage.normalizeURL(url);
              }

              if (ii.obj && ii.obj.resourceURL != url) {
                if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
                this.removeChildToPool(ii.obj);
                ii.obj = null;
              }
            }

            if (!ii.obj) {
              if (forward) {
                for (j = reuseIndex; j >= oldFirstIndex; j--) {
                  ii2 = this._virtualItems[j];

                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex--;
                    break;
                  }
                }
              } else {
                for (j = reuseIndex; j <= lastIndex; j++) {
                  ii2 = this._virtualItems[j];

                  if (ii2.obj && ii2.updateFlag != this.itemInfoVer && ii2.obj.resourceURL == url) {
                    if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                    ii.obj = ii2.obj;
                    ii2.obj = null;
                    if (j == reuseIndex) reuseIndex++;
                    break;
                  }
                }
              }

              if (ii.obj) {
                this.setChildIndex(ii.obj, forward ? curIndex - newFirstIndex : this.numChildren);
              } else {
                ii.obj = this._pool.getObject(url);
                if (forward) this.addChildAt(ii.obj, curIndex - newFirstIndex);else this.addChild(ii.obj);
              }

              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else needRender = forceUpdate;

            if (needRender) {
              if (this._autoResizeItem && (this._layout == ListLayoutType.SingleRow || this._lineCount > 0)) ii.obj.setSize(ii.obj.width, partSize, true);
              this.itemRenderer(curIndex % this._numItems, ii.obj);

              if (curIndex % this._curLineItemCount == 0) {
                deltaSize += Math.ceil(ii.obj.width) - ii.width;

                if (curIndex == newFirstIndex && oldFirstIndex > newFirstIndex) {
                  //当内容向下滚动时，如果新出现的一个项目大小发生变化，需要做一个位置补偿，才不会导致滚动跳动
                  firstItemDeltaSize = Math.ceil(ii.obj.width) - ii.width;
                }
              }

              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }

            ii.updateFlag = this.itemInfoVer;
            ii.obj.setPosition(curX, curY);
            if (curIndex == newFirstIndex) //要显示多一条才不会穿帮
              max += ii.width;
            curY += ii.height + this._lineGap;

            if (curIndex % this._curLineItemCount == this._curLineItemCount - 1) {
              curY = 0;
              curX += ii.width + this._columnGap;
            }

            curIndex++;
          }

          for (i = 0; i < childCount; i++) {
            ii = this._virtualItems[oldFirstIndex + i];

            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }

          childCount = this._children.length;

          for (i = 0; i < childCount; i++) {
            var obj = this._virtualItems[newFirstIndex + i].obj;
            if (this._children[i] != obj) this.setChildIndex(obj, i);
          }

          if (deltaSize != 0 || firstItemDeltaSize != 0) this._scrollPane.changeContentSizeOnScrolling(deltaSize, 0, firstItemDeltaSize, 0);
          if (curIndex > 0 && this.numChildren > 0 && this._container.position.x <= 0 && this.getChildAt(0).x > -this._container.position.x) //最后一页没填满！
            return true;else return false;
        };

        _proto53.handleScroll3 = function handleScroll3(forceUpdate) {
          var pos = this._scrollPane.scrollingPosX; //寻找当前位置的第一条项目

          s_n = pos;
          var newFirstIndex = this.getIndexOnPos3(forceUpdate);
          pos = s_n;
          if (newFirstIndex == this._firstIndex && !forceUpdate) return;
          var oldFirstIndex = this._firstIndex;
          this._firstIndex = newFirstIndex; //分页模式不支持不等高，所以渲染满一页就好了

          var reuseIndex = oldFirstIndex;
          var virtualItemCount = this._virtualItems.length;
          var pageSize = this._curLineItemCount * this._curLineItemCount2;
          var startCol = newFirstIndex % this._curLineItemCount;
          var viewWidth = this.viewWidth;
          var page = Math.floor(newFirstIndex / pageSize);
          var startIndex = page * pageSize;
          var lastIndex = startIndex + pageSize * 2; //测试两页

          var needRender;
          var i;
          var ii, ii2;
          var col;
          var url = this._defaultItem;
          var partWidth = (this._scrollPane.viewWidth - this._columnGap * (this._curLineItemCount - 1)) / this._curLineItemCount;
          var partHeight = (this._scrollPane.viewHeight - this._lineGap * (this._curLineItemCount2 - 1)) / this._curLineItemCount2;
          this.itemInfoVer++; //先标记这次要用到的项目

          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            col = i % this._curLineItemCount;

            if (i - startIndex < pageSize) {
              if (col < startCol) continue;
            } else {
              if (col > startCol) continue;
            }

            ii = this._virtualItems[i];
            ii.updateFlag = this.itemInfoVer;
          }

          var lastObj = null;
          var insertIndex = 0;

          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            ii = this._virtualItems[i];
            if (ii.updateFlag != this.itemInfoVer) continue;

            if (!ii.obj) {
              //寻找看有没有可重用的
              while (reuseIndex < virtualItemCount) {
                ii2 = this._virtualItems[reuseIndex];

                if (ii2.obj && ii2.updateFlag != this.itemInfoVer) {
                  if (ii2.obj instanceof GButton) ii2.selected = ii2.obj.selected;
                  ii.obj = ii2.obj;
                  ii2.obj = null;
                  break;
                }

                reuseIndex++;
              }

              if (insertIndex == -1) insertIndex = this.getChildIndex(lastObj) + 1;

              if (!ii.obj) {
                if (this.itemProvider != null) {
                  url = this.itemProvider(i % this._numItems);
                  if (url == null) url = this._defaultItem;
                  url = UIPackage.normalizeURL(url);
                }

                ii.obj = this._pool.getObject(url);
                this.addChildAt(ii.obj, insertIndex);
              } else {
                insertIndex = this.setChildIndexBefore(ii.obj, insertIndex);
              }

              insertIndex++;
              if (ii.obj instanceof GButton) ii.obj.selected = ii.selected;
              needRender = true;
            } else {
              needRender = forceUpdate;
              insertIndex = -1;
              lastObj = ii.obj;
            }

            if (needRender) {
              if (this._autoResizeItem) {
                if (this._curLineItemCount == this._columnCount && this._curLineItemCount2 == this._lineCount) ii.obj.setSize(partWidth, partHeight, true);else if (this._curLineItemCount == this._columnCount) ii.obj.setSize(partWidth, ii.obj.height, true);else if (this._curLineItemCount2 == this._lineCount) ii.obj.setSize(ii.obj.width, partHeight, true);
              }

              this.itemRenderer(i % this._numItems, ii.obj);
              ii.width = Math.ceil(ii.obj.width);
              ii.height = Math.ceil(ii.obj.height);
            }
          } //排列item


          var borderX = startIndex / pageSize * viewWidth;
          var xx = borderX;
          var yy = 0;
          var lineHeight = 0;

          for (i = startIndex; i < lastIndex; i++) {
            if (i >= this._realNumItems) continue;
            ii = this._virtualItems[i];
            if (ii.updateFlag == this.itemInfoVer) ii.obj.setPosition(xx, yy);
            if (ii.height > lineHeight) lineHeight = ii.height;

            if (i % this._curLineItemCount == this._curLineItemCount - 1) {
              xx = borderX;
              yy += lineHeight + this._lineGap;
              lineHeight = 0;

              if (i == startIndex + pageSize - 1) {
                borderX += viewWidth;
                xx = borderX;
                yy = 0;
              }
            } else xx += ii.width + this._columnGap;
          } //释放未使用的


          for (i = reuseIndex; i < virtualItemCount; i++) {
            ii = this._virtualItems[i];

            if (ii.updateFlag != this.itemInfoVer && ii.obj) {
              if (ii.obj instanceof GButton) ii.selected = ii.obj.selected;
              this.removeChildToPool(ii.obj);
              ii.obj = null;
            }
          }
        };

        _proto53.handleArchOrder1 = function handleArchOrder1() {
          if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) {
            var mid = this._scrollPane.posY + this.viewHeight / 2;
            var minDist = Number.POSITIVE_INFINITY;
            var dist = 0;
            var apexIndex = 0;
            var cnt = this.numChildren;

            for (var i = 0; i < cnt; i++) {
              var obj = this.getChildAt(i);

              if (!this.foldInvisibleItems || obj.visible) {
                dist = Math.abs(mid - obj.y - obj.height / 2);

                if (dist < minDist) {
                  minDist = dist;
                  apexIndex = i;
                }
              }
            }

            this.apexIndex = apexIndex;
          }
        };

        _proto53.handleArchOrder2 = function handleArchOrder2() {
          if (this._childrenRenderOrder == ChildrenRenderOrder.Arch) {
            var mid = this._scrollPane.posX + this.viewWidth / 2;
            var minDist = Number.POSITIVE_INFINITY;
            var dist = 0;
            var apexIndex = 0;
            var cnt = this.numChildren;

            for (var i = 0; i < cnt; i++) {
              var obj = this.getChildAt(i);

              if (!this.foldInvisibleItems || obj.visible) {
                dist = Math.abs(mid - obj.x - obj.width / 2);

                if (dist < minDist) {
                  minDist = dist;
                  apexIndex = i;
                }
              }
            }

            this.apexIndex = apexIndex;
          }
        };

        _proto53.handleAlign = function handleAlign(contentWidth, contentHeight) {
          var newOffsetX = 0;
          var newOffsetY = 0;

          if (contentHeight < this.viewHeight) {
            if (this._verticalAlign == VertAlignType.Middle) newOffsetY = Math.floor((this.viewHeight - contentHeight) / 2);else if (this._verticalAlign == VertAlignType.Bottom) newOffsetY = this.viewHeight - contentHeight;
          }

          if (contentWidth < this.viewWidth) {
            if (this._align == AlignType.Center) newOffsetX = Math.floor((this.viewWidth - contentWidth) / 2);else if (this._align == AlignType.Right) newOffsetX = this.viewWidth - contentWidth;
          }

          if (newOffsetX != this._alignOffset.x || newOffsetY != this._alignOffset.y) {
            this._alignOffset.x = newOffsetX;
            this._alignOffset.y = newOffsetY;
            if (this._scrollPane) this._scrollPane.adjustMaskContainer();else this._container.setPosition(this._pivotCorrectX + this._alignOffset.x, this._pivotCorrectY - this._alignOffset.y);
          }
        };

        _proto53.removeItemEx = function removeItemEx(index) {
          var itemRemove = this._virtualItems[index];

          this._virtualItems.splice(index, 1);

          this.doHide(itemRemove);
        };

        _proto53.addItemByUrl = function addItemByUrl(index, url) {
          if (url === void 0) {
            url = undefined;
          }

          if (!this._virtualItems) {
            var obj = this.getFromPool(url);
            this.addChildAt(obj, index);
            return;
          }

          var c = this._virtualItems.splice(index, this._virtualItems.length - index);

          this._virtualItems.push({
            y: 0,
            width: this.viewWidth,
            height: 0,
            updateFlag: 0
          });

          if (c.length > 0) {
            var _this$_virtualItems;

            (_this$_virtualItems = this._virtualItems).push.apply(_this$_virtualItems, c);
          }
        };

        _proto53.doHide = function doHide(item) {
          if (!item.obj) return;
          var obj = item.obj;
          item.obj = undefined;
          obj.countRefresh = 0;
          GTween.kill(obj, null, null);
          obj.visible = false;
          this.removeChildToPool(obj, false);
          GList.countObjCreate--;
          log("Obj remove", GList.countObjCreate);
        };

        _proto53.fastUpdateHeight = function fastUpdateHeight(numItem, getInfo) {
          var idx;
          var child;
          var curY = 0;
          var cw = 0,
              ch = 0;
          var viewWidth = this.viewWidth;
          var viewHeight = this.viewHeight;
          var lastVirtualItems = this._virtualItems;
          var virtualItems = [];
          this._virtualItems = virtualItems;
          var doHide = this.doHide.bind(this);

          if (lastVirtualItems) {
            for (var _idx = 0; _idx < lastVirtualItems.length; _idx++) {
              var _item = lastVirtualItems[_idx];

              if (_idx >= numItem) {
                doHide(_item);
                continue;
              }

              child = _item.obj;

              var _getInfo = getInfo(_idx),
                  url = _getInfo.url,
                  height = _getInfo.height;

              if (child && child.resourceURL != url) {
                doHide(_item);
              }
            }
          }

          for (idx = 0; idx < numItem; idx++) {
            var _getInfo2 = getInfo(idx),
                _url = _getInfo2.url,
                _height = _getInfo2.height;

            child = lastVirtualItems && idx < lastVirtualItems.length ? lastVirtualItems[idx].obj : undefined;

            if (!child) {
              if (curY != 0) {
                curY += this._lineGap;
              }

              virtualItems.push({
                y: curY,
                width: viewWidth,
                height: _height,
                updateFlag: 0
              });
              curY += _height;
              continue;
            }

            if (curY != 0) curY += this._lineGap;

            if (!child.countRefresh) {
              child.y = curY;
            } else if (child.y != curY) {
              GTween.kill(child, null, null);
              var yFrom = child.countRefresh ? child.y : curY - this._lineGap;
              var d = Math.abs(curY - yFrom) * 0.001;
              if (d < 0.1) d = 0.1;else if (d > 0.5) d = 0.5;
              GTween.to(yFrom, curY, d).setEase(curY > yFrom ? EaseType.QuartIn : EaseType.QuartOut).setTarget(child, child.setNodeY);
              child._y = curY;
            }

            if (!child.countRefresh) {
              child.countRefresh = 1;
            } else {
              child.countRefresh++;
            }

            if (this._autoResizeItem && child.width != viewWidth) {
              child.setSize(viewWidth, child.height, true);
            }

            var curYLast = curY;

            if (child) {
              curY += Math.ceil(child.height);
            } else {
              curY += _height;
            }

            virtualItems.push({
              y: curYLast,
              width: viewWidth,
              height: curY - curYLast,
              updateFlag: 0,
              obj: child
            });
          }

          ch = curY;
          cw = Math.ceil(viewWidth);
          this.handleAlign(cw, ch);
          this.setBounds(0, 0, cw, ch);
          this._boundsChanged = false; // refresh cell

          var gList = this;
          gList.getInfo = getInfo;
          gList.updateBounds = gList.updateBoundsFast.bind(gList);

          if (!gList["$isCheck"]) {
            gList["$isCheck"] = true;
            var listCom = gList._partner;
            var screenH = view.getVisibleSize().height;
            var topL = -gList.localToGlobal(0, screenH).y;
            listCom.schedule(function () {
              var top = -gList.localToGlobal(0, screenH).y;

              if (top != topL) {
                topL = top;
                gList.updateBoundsFast();
              }
            });
          }

          if (numItem <= 0) return;

          gList._partner.callLater(gList.updateBoundsFast.bind(gList));
        };

        _proto53.updateBoundsFast = function updateBoundsFast() {
          var gList = this;
          var viewWidth = this.viewWidth;
          var viewHeight = this.viewHeight;
          var virtualItems = gList._virtualItems;
          var screenH = view.getVisibleSize().height;
          var top = -gList.localToGlobal(0, screenH).y;
          var bottom = top + screenH;
          var isSkip = false;
          var countRender = 0;
          var curY = 0;

          for (var idx = 0; idx < virtualItems.length; idx++) {
            if (curY != 0) {
              curY += this._lineGap;
            }

            var _item2 = virtualItems[idx];

            if (isSkip || _item2.y + _item2.height < top) {
              gList.doHide(_item2);
              curY += _item2.height;
              continue;
            }

            if (_item2.y - _item2.height > bottom) {
              isSkip = true;
              gList.doHide(_item2);
              curY += _item2.height;
              continue;
            } // do render


            var _gList$getInfo = gList.getInfo(idx),
                url = _gList$getInfo.url,
                height = _gList$getInfo.height;

            if (_item2.obj && _item2.obj.resourceURL != url) {
              doHide(_item2);
            }

            var obj = _item2.obj;

            if (obj) {
              obj.visible = true;
            } else {
              obj = gList.getFromPool(url);
              var iP = idx;

              if (iP > gList._children.length) {
                iP = gList._children.length;
              }

              gList.addChildAt(obj, iP);
              obj.y = _item2.y;
              _item2.obj = obj;
              GList.countObjCreate++;
              log("Obj create", GList.countObjCreate);
            }

            var child = _item2.obj;

            if (gList._autoResizeItem && child.width != viewWidth) {
              child.setSize(viewWidth, child.height, true);
            }

            if (!child.countRefresh) {
              child.countRefresh = 1;
            } else {
              child.countRefresh++;
            }

            gList.itemRenderer(idx, obj);
            _item2.height = Math.ceil(child.height);
            countRender++;
            if (child.y == curY) ;else if (!child.countRefresh) {
              child.y = curY;
              _item2.y = curY;
            } else {
              GTween.kill(child, null, null);
              var yFrom = child.countRefresh ? child.y : curY - gList._lineGap;
              var d = Math.abs(curY - yFrom) * 0.001;
              if (d < 0.1) d = 0.1;else if (d > 0.5) d = 0.5;
              GTween.to(yFrom, curY, d).setEase(curY > yFrom ? EaseType.QuartIn : EaseType.QuartOut).setTarget(child, child.setNodeY);
              child._y = curY;
              _item2.y = curY;
            }
            curY += _item2.height;
          }

          gList._boundsChanged = false;
          log("updateBounds", countRender);
        };

        _proto53.updateBounds = function updateBounds() {
          if (this._virtual) return;
          var i;
          var child;
          var curX = 0;
          var curY = 0;
          var maxWidth = 0;
          var maxHeight = 0;
          var cw = 0,
              ch = 0;
          var j = 0;
          var page = 0;
          var k = 0;
          var cnt = this._children.length;
          var viewWidth = this.viewWidth;
          var viewHeight = this.viewHeight;
          var lineSize = 0;
          var lineStart = 0;
          var ratio = 0;

          if (this._layout == ListLayoutType.SingleColumn) {
            for (i = 0; i < cnt; i++) {
              child = this.getChildAt(i);
              if (this.foldInvisibleItems && !child.visible) continue;
              if (curY != 0) curY += this._lineGap;
              child.y = curY;
              if (this._autoResizeItem) child.setSize(viewWidth, child.height, true);
              curY += Math.ceil(child.height);
              if (child.width > maxWidth) maxWidth = child.width;
            }

            ch = curY;

            if (ch <= viewHeight && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.vtScrollBar) {
              viewWidth += this._scrollPane.vtScrollBar.width;

              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                child.setSize(viewWidth, child.height, true);
                if (child.width > maxWidth) maxWidth = child.width;
              }
            }

            cw = Math.ceil(maxWidth);
          } else if (this._layout == ListLayoutType.SingleRow) {
            for (i = 0; i < cnt; i++) {
              child = this.getChildAt(i);
              if (this.foldInvisibleItems && !child.visible) continue;
              if (curX != 0) curX += this._columnGap;
              child.x = curX;
              if (this._autoResizeItem) child.setSize(child.width, viewHeight, true);
              curX += Math.ceil(child.width);
              if (child.height > maxHeight) maxHeight = child.height;
            }

            cw = curX;

            if (cw <= viewWidth && this._autoResizeItem && this._scrollPane && this._scrollPane._displayInDemand && this._scrollPane.hzScrollBar) {
              viewHeight += this._scrollPane.hzScrollBar.height;

              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                child.setSize(child.width, viewHeight, true);
                if (child.height > maxHeight) maxHeight = child.height;
              }
            }

            ch = Math.ceil(maxHeight);
          } else if (this._layout == ListLayoutType.FlowHorizontal) {
            if (this._autoResizeItem && this._columnCount > 0) {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                lineSize += child.sourceWidth;
                j++;

                if (j == this._columnCount || i == cnt - 1) {
                  ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                  curX = 0;

                  for (j = lineStart; j <= i; j++) {
                    child = this.getChildAt(j);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    child.setPosition(curX, curY);

                    if (j < i) {
                      child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), child.height, true);
                      curX += Math.ceil(child.width) + this._columnGap;
                    } else {
                      child.setSize(viewWidth - curX, child.height, true);
                    }

                    if (child.height > maxHeight) maxHeight = child.height;
                  } //new line


                  curY += Math.ceil(maxHeight) + this._lineGap;
                  maxHeight = 0;
                  j = 0;
                  lineStart = i + 1;
                  lineSize = 0;
                }
              }

              ch = curY + Math.ceil(maxHeight);
              cw = viewWidth;
            } else {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                if (curX != 0) curX += this._columnGap;

                if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                  //new line
                  curX = 0;
                  curY += Math.ceil(maxHeight) + this._lineGap;
                  maxHeight = 0;
                  j = 0;
                }

                child.setPosition(curX, curY);
                curX += Math.ceil(child.width);
                if (curX > maxWidth) maxWidth = curX;
                if (child.height > maxHeight) maxHeight = child.height;
                j++;
              }

              ch = curY + Math.ceil(maxHeight);
              cw = Math.ceil(maxWidth);
            }
          } else if (this._layout == ListLayoutType.FlowVertical) {
            if (this._autoResizeItem && this._lineCount > 0) {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                lineSize += child.sourceHeight;
                j++;

                if (j == this._lineCount || i == cnt - 1) {
                  ratio = (viewHeight - lineSize - (j - 1) * this._lineGap) / lineSize;
                  curY = 0;

                  for (j = lineStart; j <= i; j++) {
                    child = this.getChildAt(j);
                    if (this.foldInvisibleItems && !child.visible) continue;
                    child.setPosition(curX, curY);

                    if (j < i) {
                      child.setSize(child.width, child.sourceHeight + Math.round(child.sourceHeight * ratio), true);
                      curY += Math.ceil(child.height) + this._lineGap;
                    } else {
                      child.setSize(child.width, viewHeight - curY, true);
                    }

                    if (child.width > maxWidth) maxWidth = child.width;
                  } //new line


                  curX += Math.ceil(maxWidth) + this._columnGap;
                  maxWidth = 0;
                  j = 0;
                  lineStart = i + 1;
                  lineSize = 0;
                }
              }

              cw = curX + Math.ceil(maxWidth);
              ch = viewHeight;
            } else {
              for (i = 0; i < cnt; i++) {
                child = this.getChildAt(i);
                if (this.foldInvisibleItems && !child.visible) continue;
                if (curY != 0) curY += this._lineGap;

                if (this._lineCount != 0 && j >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0) {
                  curY = 0;
                  curX += Math.ceil(maxWidth) + this._columnGap;
                  maxWidth = 0;
                  j = 0;
                }

                child.setPosition(curX, curY);
                curY += Math.ceil(child.height);
                if (curY > maxHeight) maxHeight = curY;
                if (child.width > maxWidth) maxWidth = child.width;
                j++;
              }

              cw = curX + Math.ceil(maxWidth);
              ch = Math.ceil(maxHeight);
            }
          } else //pagination
            {
              var eachHeight;
              if (this._autoResizeItem && this._lineCount > 0) eachHeight = Math.floor((viewHeight - (this._lineCount - 1) * this._lineGap) / this._lineCount);

              if (this._autoResizeItem && this._columnCount > 0) {
                for (i = 0; i < cnt; i++) {
                  child = this.getChildAt(i);
                  if (this.foldInvisibleItems && !child.visible) continue;

                  if (j == 0 && (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + (this._lineCount > 0 ? eachHeight : child.height) > viewHeight)) {
                    //new page
                    page++;
                    curY = 0;
                    k = 0;
                  }

                  lineSize += child.sourceWidth;
                  j++;

                  if (j == this._columnCount || i == cnt - 1) {
                    ratio = (viewWidth - lineSize - (j - 1) * this._columnGap) / lineSize;
                    curX = 0;

                    for (j = lineStart; j <= i; j++) {
                      child = this.getChildAt(j);
                      if (this.foldInvisibleItems && !child.visible) continue;
                      child.setPosition(page * viewWidth + curX, curY);

                      if (j < i) {
                        child.setSize(child.sourceWidth + Math.round(child.sourceWidth * ratio), this._lineCount > 0 ? eachHeight : child.height, true);
                        curX += Math.ceil(child.width) + this._columnGap;
                      } else {
                        child.setSize(viewWidth - curX, this._lineCount > 0 ? eachHeight : child.height, true);
                      }

                      if (child.height > maxHeight) maxHeight = child.height;
                    } //new line


                    curY += Math.ceil(maxHeight) + this._lineGap;
                    maxHeight = 0;
                    j = 0;
                    lineStart = i + 1;
                    lineSize = 0;
                    k++;
                  }
                }
              } else {
                for (i = 0; i < cnt; i++) {
                  child = this.getChildAt(i);
                  if (this.foldInvisibleItems && !child.visible) continue;
                  if (curX != 0) curX += this._columnGap;
                  if (this._autoResizeItem && this._lineCount > 0) child.setSize(child.width, eachHeight, true);

                  if (this._columnCount != 0 && j >= this._columnCount || this._columnCount == 0 && curX + child.width > viewWidth && maxHeight != 0) {
                    //new line
                    curX = 0;
                    curY += Math.ceil(maxHeight) + this._lineGap;
                    maxHeight = 0;
                    j = 0;
                    k++;

                    if (this._lineCount != 0 && k >= this._lineCount || this._lineCount == 0 && curY + child.height > viewHeight && maxWidth != 0) //new page
                      {
                        page++;
                        curY = 0;
                        k = 0;
                      }
                  }

                  child.setPosition(page * viewWidth + curX, curY);
                  curX += Math.ceil(child.width);
                  if (curX > maxWidth) maxWidth = curX;
                  if (child.height > maxHeight) maxHeight = child.height;
                  j++;
                }
              }

              ch = page > 0 ? viewHeight : curY + Math.ceil(maxHeight);
              cw = (page + 1) * viewWidth;
            }

          this.handleAlign(cw, ch);
          this.setBounds(0, 0, cw, ch);
          this._boundsChanged = false;
        };

        _proto53.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GComponent5.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 5);
          this._layout = buffer.readByte();
          this._selectionMode = buffer.readByte();
          this._align = buffer.readByte();
          this._verticalAlign = buffer.readByte();
          this._lineGap = buffer.readShort();
          this._columnGap = buffer.readShort();
          this._lineCount = buffer.readShort();
          this._columnCount = buffer.readShort();
          this._autoResizeItem = buffer.readBool();
          this._childrenRenderOrder = buffer.readByte();
          this._apexIndex = buffer.readShort();

          if (buffer.readBool()) {
            this._margin.top = buffer.readInt();
            this._margin.bottom = buffer.readInt();
            this._margin.left = buffer.readInt();
            this._margin.right = buffer.readInt();
          }

          var overflow = buffer.readByte();

          if (overflow == OverflowType.Scroll) {
            var savedPos = buffer.position;
            buffer.seek(beginPos, 7);
            this.setupScroll(buffer);
            buffer.position = savedPos;
          } else this.setupOverflow(overflow);

          if (buffer.readBool()) //clipSoftness
            buffer.skip(8);

          if (buffer.version >= 2) {
            this.scrollItemToViewOnClick = buffer.readBool();
            this.foldInvisibleItems = buffer.readBool();
          }

          buffer.seek(beginPos, 8);
          this._defaultItem = buffer.readS();
          this.readItems(buffer);
        };

        _proto53.readItems = function readItems(buffer) {
          var cnt;
          var i;
          var nextPos;
          var str;
          cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            str = buffer.readS();

            if (str == null) {
              str = this._defaultItem;

              if (!str) {
                buffer.position = nextPos;
                continue;
              }
            }

            var obj = this.getFromPool(str);

            if (obj) {
              this.addChild(obj);
              this.setupItem(buffer, obj);
            }

            buffer.position = nextPos;
          }
        };

        _proto53.setupItem = function setupItem(buffer, obj) {
          var str;
          str = buffer.readS();
          if (str != null) obj.text = str;
          str = buffer.readS();
          if (str != null && obj instanceof GButton) obj.selectedTitle = str;
          str = buffer.readS();
          if (str != null) obj.icon = str;
          str = buffer.readS();
          if (str != null && obj instanceof GButton) obj.selectedIcon = str;
          str = buffer.readS();
          if (str != null) obj.name = str;
          var cnt;
          var i;

          if (obj instanceof GComponent) {
            cnt = buffer.readShort();

            for (i = 0; i < cnt; i++) {
              var cc = obj.getController(buffer.readS());
              str = buffer.readS();
              if (cc) cc.selectedPageId = str;
            }

            if (buffer.version >= 2) {
              cnt = buffer.readShort();

              for (i = 0; i < cnt; i++) {
                var target = buffer.readS();
                var propertyId = buffer.readShort();
                var value = buffer.readS();
                var obj2 = obj.getChildByPath(target);
                if (obj2) obj2.setProp(propertyId, value);
              }
            }
          }
        };

        _proto53.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent5.prototype.setup_afterAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 6);
          var i = buffer.readShort();
          if (i != -1) this._selectionController = this.parent.getControllerAt(i);
        };

        _createClass(GList, [{
          key: "layout",
          get: function get() {
            return this._layout;
          },
          set: function set(value) {
            if (this._layout != value) {
              this._layout = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "lineCount",
          get: function get() {
            return this._lineCount;
          },
          set: function set(value) {
            if (this._lineCount != value) {
              this._lineCount = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "columnCount",
          get: function get() {
            return this._columnCount;
          },
          set: function set(value) {
            if (this._columnCount != value) {
              this._columnCount = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "lineGap",
          get: function get() {
            return this._lineGap;
          },
          set: function set(value) {
            if (this._lineGap != value) {
              this._lineGap = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "columnGap",
          get: function get() {
            return this._columnGap;
          },
          set: function set(value) {
            if (this._columnGap != value) {
              this._columnGap = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "align",
          get: function get() {
            return this._align;
          },
          set: function set(value) {
            if (this._align != value) {
              this._align = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign != value) {
              this._verticalAlign = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "virtualItemSize",
          get: function get() {
            return this._itemSize;
          },
          set: function set(value) {
            if (this._virtual) {
              if (this._itemSize == null) this._itemSize = new Size(0, 0);
              this._itemSize.width = value.width;
              this._itemSize.height = value.height;
              this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "defaultItem",
          get: function get() {
            return this._defaultItem;
          },
          set: function set(val) {
            this._defaultItem = UIPackage.normalizeURL(val);
          }
        }, {
          key: "autoResizeItem",
          get: function get() {
            return this._autoResizeItem;
          },
          set: function set(value) {
            if (this._autoResizeItem != value) {
              this._autoResizeItem = value;
              this.setBoundsChangedFlag();
              if (this._virtual) this.setVirtualListChangedFlag(true);
            }
          }
        }, {
          key: "selectionMode",
          get: function get() {
            return this._selectionMode;
          },
          set: function set(value) {
            this._selectionMode = value;
          }
        }, {
          key: "selectionController",
          get: function get() {
            return this._selectionController;
          },
          set: function set(value) {
            this._selectionController = value;
          }
        }, {
          key: "itemPool",
          get: function get() {
            return this._pool;
          }
        }, {
          key: "selectedIndex",
          get: function get() {
            var i;

            if (this._virtual) {
              for (i = 0; i < this._realNumItems; i++) {
                var ii = this._virtualItems[i];

                if (ii.obj instanceof GButton && ii.obj.selected || !ii.obj && ii.selected) {
                  if (this._loop) return i % this._numItems;else return i;
                }
              }
            } else {
              var cnt = this._children.length;

              for (i = 0; i < cnt; i++) {
                var obj = this._children[i];
                if (obj instanceof GButton && obj.selected) return i;
              }
            }

            return -1;
          },
          set: function set(value) {
            if (value >= 0 && value < this.numItems) {
              if (this._selectionMode != ListSelectionMode.Single) this.clearSelection();
              this.addSelection(value);
            } else this.clearSelection();
          }
        }, {
          key: "numItems",
          get: function get() {
            if (this._virtual) return this._numItems;else return this._children.length;
          },
          set: function set(value) {
            if (this._virtual) {
              if (this.itemRenderer == null) throw new Error("Set itemRenderer first!");
              this._numItems = value;
              if (this._loop) this._realNumItems = this._numItems * 6; //设置6倍数量，用于循环滚动
              else this._realNumItems = this._numItems; //_virtualItems的设计是只增不减的

              var oldCount = this._virtualItems.length;

              if (this._realNumItems > oldCount) {
                for (i = oldCount; i < this._realNumItems; i++) {
                  var ii = {
                    width: this._itemSize.width,
                    height: this._itemSize.height,
                    updateFlag: 0
                  };

                  this._virtualItems.push(ii);
                }
              } else {
                for (i = this._realNumItems; i < oldCount; i++) this._virtualItems[i].selected = false;
              }

              if (this._virtualListChanged != 0) this._partner.unschedule(this._refreshVirtualList); //立即刷新

              this._refreshVirtualList();
            } else {
              var cnt = this._children.length;

              if (value > cnt) {
                for (var i = cnt; i < value; i++) {
                  if (this.itemProvider == null) this.addItemFromPool();else this.addItemFromPool(this.itemProvider(i));
                }
              } else {
                this.removeChildrenToPool(value, cnt);
              }

              if (this.itemRenderer != null) {
                for (i = 0; i < value; i++) this.itemRenderer(i, this.getChildAt(i));
              }
            }
          }
        }]);

        return GList;
      }(GComponent));
      GList.countObjCreate = 0;
      var s_n = 0;
      var GComboBox = exports('GComboBox', /*#__PURE__*/function (_GComponent6) {
        _inheritsLoose(GComboBox, _GComponent6);

        function GComboBox() {
          var _this26;

          _this26 = _GComponent6.call(this) || this;
          _this26._visibleItemCount = 0;
          _this26._selectedIndex = 0;
          _this26._popupDirection = PopupDirection.Auto;
          _this26._node.name = "GComboBox";
          _this26._visibleItemCount = UIConfig.defaultComboBoxVisibleItemCount;
          _this26._itemsUpdated = true;
          _this26._selectedIndex = -1;
          _this26._items = [];
          _this26._values = [];
          return _this26;
        }

        var _proto54 = GComboBox.prototype;

        _proto54.getTextField = function getTextField() {
          if (this._titleObject instanceof GTextField) return this._titleObject;else if ('getTextField' in this._titleObject) return this._titleObject.getTextField();else return null;
        };

        _proto54.setState = function setState(val) {
          if (this._buttonController) this._buttonController.selectedPage = val;
        };

        _proto54.getProp = function getProp(index) {
          switch (index) {
            case ObjectPropID.Color:
              return this.titleColor;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) return tf.strokeColor;else return 0;
              }

            case ObjectPropID.FontSize:
              {
                tf = this.getTextField();
                if (tf) return tf.fontSize;else return 0;
              }

            default:
              return _GComponent6.prototype.getProp.call(this, index);
          }
        };

        _proto54.setProp = function setProp(index, value) {
          switch (index) {
            case ObjectPropID.Color:
              this.titleColor = value;
              break;

            case ObjectPropID.OutlineColor:
              {
                var tf = this.getTextField();
                if (tf) tf.strokeColor = value;
              }
              break;

            case ObjectPropID.FontSize:
              {
                tf = this.getTextField();
                if (tf) tf.fontSize = value;
              }
              break;

            default:
              _GComponent6.prototype.setProp.call(this, index, value);

              break;
          }
        };

        _proto54.constructExtension = function constructExtension(buffer) {
          var str;
          this._buttonController = this.getController("button");
          this._titleObject = this.getChild("title");
          this._iconObject = this.getChild("icon");
          str = buffer.readS();

          if (str) {
            var obj = UIPackage.createObjectFromURL(str);

            if (!(obj instanceof GComponent)) {
              console.error("下拉框必须为元件");
              return;
            }

            this.dropdown = obj;
            this.dropdown.name = "this.dropdown";
            this._list = this.dropdown.getChild("list", GList);

            if (this._list == null) {
              console.error(this.resourceURL + ": 下拉框的弹出元件里必须包含名为list的列表");
              return;
            }

            this._list.on(Event.CLICK_ITEM, this.onClickItem, this);

            this._list.addRelation(this.dropdown, RelationType.Width);

            this._list.removeRelation(this.dropdown, RelationType.Height);

            this.dropdown.addRelation(this._list, RelationType.Height);
            this.dropdown.removeRelation(this._list, RelationType.Width);
            this.dropdown.on(Event.UNDISPLAY, this.onPopupClosed, this);
          }

          this._node.on(Event.TOUCH_BEGIN, this.onTouchBegin_1, this);

          this._node.on(Event.TOUCH_END, this.onTouchEnd_1, this);

          this._node.on(Event.ROLL_OVER, this.onRollOver_1, this);

          this._node.on(Event.ROLL_OUT, this.onRollOut_1, this);
        };

        _proto54.handleControllerChanged = function handleControllerChanged(c) {
          _GComponent6.prototype.handleControllerChanged.call(this, c);

          if (this._selectionController == c) this.selectedIndex = c.selectedIndex;
        };

        _proto54.updateSelectionController = function updateSelectionController() {
          if (this._selectionController && !this._selectionController.changing && this._selectedIndex < this._selectionController.pageCount) {
            var c = this._selectionController;
            this._selectionController = null;
            c.selectedIndex = this._selectedIndex;
            this._selectionController = c;
          }
        };

        _proto54.dispose = function dispose() {
          if (this.dropdown) {
            this.dropdown.dispose();
            this.dropdown = null;
          }

          _GComponent6.prototype.dispose.call(this);
        };

        _proto54.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent6.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!buffer.seek(beginPos, 6)) return;
          if (buffer.readByte() != this.packageItem.objectType) return;
          var i;
          var iv;
          var nextPos;
          var str;
          var itemCount = buffer.readShort();

          for (i = 0; i < itemCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            this._items[i] = buffer.readS();
            this._values[i] = buffer.readS();
            str = buffer.readS();

            if (str != null) {
              if (this._icons == null) this._icons = new Array();
              this._icons[i] = str;
            }

            buffer.position = nextPos;
          }

          str = buffer.readS();

          if (str != null) {
            this.text = str;
            this._selectedIndex = this._items.indexOf(str);
          } else if (this._items.length > 0) {
            this._selectedIndex = 0;
            this.text = this._items[0];
          } else this._selectedIndex = -1;

          str = buffer.readS();
          if (str != null) this.icon = str;
          if (buffer.readBool()) this.titleColor = buffer.readColor();
          iv = buffer.readInt();
          if (iv > 0) this._visibleItemCount = iv;
          this._popupDirection = buffer.readByte();
          iv = buffer.readShort();
          if (iv >= 0) this._selectionController = this.parent.getControllerAt(iv);
        };

        _proto54.showDropdown = function showDropdown() {
          if (this._itemsUpdated) {
            this._itemsUpdated = false;

            this._list.removeChildrenToPool();

            var cnt = this._items.length;

            for (var i = 0; i < cnt; i++) {
              var _item3 = this._list.addItemFromPool();

              _item3.name = i < this._values.length ? this._values[i] : "";
              _item3.text = this._items[i];
              _item3.icon = this._icons && i < this._icons.length ? this._icons[i] : null;
            }

            this._list.resizeToFit(this._visibleItemCount);
          }

          this._list.selectedIndex = -1;
          this.dropdown.width = this.width;

          this._list.ensureBoundsCorrect();

          GRoot.inst.togglePopup(this.dropdown, this, this._popupDirection);
          if (this.dropdown.parent) this.setState(GButton.DOWN);
        };

        _proto54.onPopupClosed = function onPopupClosed() {
          if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
        };

        _proto54.onClickItem = function onClickItem(itemObject) {
          var _t = this;

          var index = this._list.getChildIndex(itemObject);

          this._partner.callLater(function (dt) {
            _t.onClickItem2(index);
          }, 0.1);
        };

        _proto54.onClickItem2 = function onClickItem2(index) {
          if (this.dropdown.parent instanceof GRoot) this.dropdown.parent.hidePopup();
          this._selectedIndex = -1;
          this.selectedIndex = index;

          this._node.emit(Event.STATUS_CHANGED, this);
        };

        _proto54.onRollOver_1 = function onRollOver_1() {
          this._over = true;
          if (this._down || this.dropdown && this.dropdown.parent) return;
          this.setState(GButton.OVER);
        };

        _proto54.onRollOut_1 = function onRollOut_1() {
          this._over = false;
          if (this._down || this.dropdown && this.dropdown.parent) return;
          this.setState(GButton.UP);
        };

        _proto54.onTouchBegin_1 = function onTouchBegin_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;
          if (evt.initiator instanceof GTextInput && evt.initiator.editable) return;
          this._down = true;
          evt.captureTouch();
          if (this.dropdown) this.showDropdown();
        };

        _proto54.onTouchEnd_1 = function onTouchEnd_1(evt) {
          if (evt.button != EventMouse.BUTTON_LEFT) return;

          if (this._down) {
            this._down = false;

            if (this.dropdown && !this.dropdown.parent) {
              if (this._over) this.setState(GButton.OVER);else this.setState(GButton.UP);
            }
          }
        };

        _createClass(GComboBox, [{
          key: "text",
          get: function get() {
            if (this._titleObject) return this._titleObject.text;else return null;
          },
          set: function set(value) {
            if (this._titleObject) this._titleObject.text = value;
            this.updateGear(6);
          }
        }, {
          key: "icon",
          get: function get() {
            if (this._iconObject) return this._iconObject.icon;else return null;
          },
          set: function set(value) {
            if (this._iconObject) this._iconObject.icon = value;
            this.updateGear(7);
          }
        }, {
          key: "titleColor",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.color;else return Color.BLACK;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.color = value;
          }
        }, {
          key: "titleFontSize",
          get: function get() {
            var tf = this.getTextField();
            if (tf) return tf.fontSize;else return 0;
          },
          set: function set(value) {
            var tf = this.getTextField();
            if (tf) tf.fontSize = value;
          }
        }, {
          key: "visibleItemCount",
          get: function get() {
            return this._visibleItemCount;
          },
          set: function set(value) {
            this._visibleItemCount = value;
          }
        }, {
          key: "popupDirection",
          get: function get() {
            return this._popupDirection;
          },
          set: function set(value) {
            this._popupDirection = value;
          }
        }, {
          key: "items",
          get: function get() {
            return this._items;
          },
          set: function set(value) {
            if (!value) this._items.length = 0;else this._items = value.concat();

            if (this._items.length > 0) {
              if (this._selectedIndex >= this._items.length) this._selectedIndex = this._items.length - 1;else if (this._selectedIndex == -1) this._selectedIndex = 0;
              this.text = this._items[this._selectedIndex];
              if (this._icons && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
            } else {
              this.text = "";
              if (this._icons) this.icon = null;
              this._selectedIndex = -1;
            }

            this._itemsUpdated = true;
          }
        }, {
          key: "icons",
          get: function get() {
            return this._icons;
          },
          set: function set(value) {
            this._icons = value;
            if (this._icons && this._selectedIndex != -1 && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
          }
        }, {
          key: "values",
          get: function get() {
            return this._values;
          },
          set: function set(value) {
            if (!value) this._values.length = 0;else this._values = value.concat();
          }
        }, {
          key: "selectedIndex",
          get: function get() {
            return this._selectedIndex;
          },
          set: function set(val) {
            if (this._selectedIndex == val) return;
            this._selectedIndex = val;

            if (this._selectedIndex >= 0 && this._selectedIndex < this._items.length) {
              this.text = this._items[this._selectedIndex];
              if (this._icons && this._selectedIndex < this._icons.length) this.icon = this._icons[this._selectedIndex];
            } else {
              this.text = "";
              if (this._icons) this.icon = null;
            }

            this.updateSelectionController();
          }
        }, {
          key: "value",
          get: function get() {
            return this._values[this._selectedIndex];
          },
          set: function set(val) {
            var index = this._values.indexOf(val);

            if (index == -1 && val == null) index = this._values.indexOf("");
            this.selectedIndex = index;
          }
        }, {
          key: "selectionController",
          get: function get() {
            return this._selectionController;
          },
          set: function set(value) {
            this._selectionController = value;
          }
        }]);

        return GComboBox;
      }(GComponent));
      var GSlider = exports('GSlider', /*#__PURE__*/function (_GComponent7) {
        _inheritsLoose(GSlider, _GComponent7);

        function GSlider() {
          var _this27;

          _this27 = _GComponent7.call(this) || this;
          _this27._min = 0;
          _this27._max = 0;
          _this27._value = 0;
          _this27._barMaxWidth = 0;
          _this27._barMaxHeight = 0;
          _this27._barMaxWidthDelta = 0;
          _this27._barMaxHeightDelta = 0;
          _this27._clickPercent = 0;
          _this27._barStartX = 0;
          _this27._barStartY = 0;
          _this27.changeOnClick = true;
          _this27.canDrag = true;
          _this27._node.name = "GSlider";
          _this27._titleType = ProgressTitleType.Percent;
          _this27._value = 50;
          _this27._max = 100;
          _this27._clickPos = new Vec2();
          return _this27;
        }

        var _proto55 = GSlider.prototype;

        _proto55.update = function update() {
          this.updateWithPercent((this._value - this._min) / (this._max - this._min));
        };

        _proto55.updateWithPercent = function updateWithPercent(percent, manual) {
          percent = math.clamp01(percent);

          if (manual) {
            var newValue = math.clamp(this._min + (this._max - this._min) * percent, this._min, this._max);

            if (this._wholeNumbers) {
              newValue = Math.round(newValue);
              percent = math.clamp01((newValue - this._min) / (this._max - this._min));
            }

            if (newValue != this._value) {
              this._value = newValue;

              this._node.emit(Event.STATUS_CHANGED, this);
            }
          }

          if (this._titleObject) {
            switch (this._titleType) {
              case ProgressTitleType.Percent:
                this._titleObject.text = Math.floor(percent * 100) + "%";
                break;

              case ProgressTitleType.ValueAndMax:
                this._titleObject.text = this._value + "/" + this._max;
                break;

              case ProgressTitleType.Value:
                this._titleObject.text = "" + this._value;
                break;

              case ProgressTitleType.Max:
                this._titleObject.text = "" + this._max;
                break;
            }
          }

          var fullWidth = this.width - this._barMaxWidthDelta;
          var fullHeight = this.height - this._barMaxHeightDelta;

          if (!this._reverse) {
            if (this._barObjectH) this._barObjectH.width = Math.round(fullWidth * percent);
            if (this._barObjectV) this._barObjectV.height = Math.round(fullHeight * percent);
          } else {
            if (this._barObjectH) {
              this._barObjectH.width = Math.round(fullWidth * percent);
              this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
            }

            if (this._barObjectV) {
              this._barObjectV.height = Math.round(fullHeight * percent);
              this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
            }
          }
        };

        _proto55.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._titleType = buffer.readByte();
          this._reverse = buffer.readBool();

          if (buffer.version >= 2) {
            this._wholeNumbers = buffer.readBool();
            this.changeOnClick = buffer.readBool();
          }

          this._titleObject = this.getChild("title");
          this._barObjectH = this.getChild("bar");
          this._barObjectV = this.getChild("bar_v");
          this._gripObject = this.getChild("grip");

          if (this._barObjectH) {
            this._barMaxWidth = this._barObjectH.width;
            this._barMaxWidthDelta = this.width - this._barMaxWidth;
            this._barStartX = this._barObjectH.x;
          }

          if (this._barObjectV) {
            this._barMaxHeight = this._barObjectV.height;
            this._barMaxHeightDelta = this.height - this._barMaxHeight;
            this._barStartY = this._barObjectV.y;
          }

          if (this._gripObject) {
            this._gripObject.on(Event.TOUCH_BEGIN, this.onGripTouchBegin, this);

            this._gripObject.on(Event.TOUCH_MOVE, this.onGripTouchMove, this);
          }

          this._node.on(Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };

        _proto55.handleSizeChanged = function handleSizeChanged() {
          _GComponent7.prototype.handleSizeChanged.call(this);

          if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
          if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
          if (!this._underConstruct) this.update();
        };

        _proto55.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent7.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!buffer.seek(beginPos, 6)) {
            this.update();
            return;
          }

          if (buffer.readByte() != this.packageItem.objectType) {
            this.update();
            return;
          }

          this._value = buffer.readInt();
          this._max = buffer.readInt();
          if (buffer.version >= 2) this._min = buffer.readInt();
          this.update();
        };

        _proto55.onGripTouchBegin = function onGripTouchBegin(evt) {
          this.canDrag = true;
          evt.propagationStopped = true;
          evt.captureTouch();
          this._clickPos = this.globalToLocal(evt.pos.x, evt.pos.y);
          this._clickPercent = math.clamp01((this._value - this._min) / (this._max - this._min));
        };

        _proto55.onGripTouchMove = function onGripTouchMove(evt) {
          if (!this.canDrag) {
            return;
          }

          var pt = this.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$1);
          var deltaX = pt.x - this._clickPos.x;
          var deltaY = pt.y - this._clickPos.y;

          if (this._reverse) {
            deltaX = -deltaX;
            deltaY = -deltaY;
          }

          var percent;
          if (this._barObjectH) percent = this._clickPercent + deltaX / this._barMaxWidth;else percent = this._clickPercent + deltaY / this._barMaxHeight;
          this.updateWithPercent(percent, true);
        };

        _proto55.onBarTouchBegin = function onBarTouchBegin(evt) {
          if (!this.changeOnClick) return;

          var pt = this._gripObject.globalToLocal(evt.pos.x, evt.pos.y, s_vec2$1);

          var percent = math.clamp01((this._value - this._min) / (this._max - this._min));
          var delta = 0;
          if (this._barObjectH != null) delta = (pt.x - this._gripObject.width / 2) / this._barMaxWidth;
          if (this._barObjectV != null) delta = (pt.y - this._gripObject.height / 2) / this._barMaxHeight;
          if (this._reverse) percent -= delta;else percent += delta;
          this.updateWithPercent(percent, true);
        };

        _createClass(GSlider, [{
          key: "titleType",
          get: function get() {
            return this._titleType;
          },
          set: function set(value) {
            this._titleType = value;
          }
        }, {
          key: "wholeNumbers",
          get: function get() {
            return this._wholeNumbers;
          },
          set: function set(value) {
            if (this._wholeNumbers != value) {
              this._wholeNumbers = value;
              this.update();
            }
          }
        }, {
          key: "min",
          get: function get() {
            return this._min;
          },
          set: function set(value) {
            if (this._min != value) {
              this._min = value;
              this.update();
            }
          }
        }, {
          key: "max",
          get: function get() {
            return this._max;
          },
          set: function set(value) {
            if (this._max != value) {
              this._max = value;
              this.update();
            }
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            if (this._value != value) {
              this._value = value;
              this.update();
            }
          }
        }]);

        return GSlider;
      }(GComponent));
      var s_vec2$1 = new Vec2();
      var GProgressBar = exports('GProgressBar', /*#__PURE__*/function (_GComponent8) {
        _inheritsLoose(GProgressBar, _GComponent8);

        function GProgressBar() {
          var _this28;

          _this28 = _GComponent8.call(this) || this;
          _this28._min = 0;
          _this28._max = 0;
          _this28._value = 0;
          _this28._barMaxWidth = 0;
          _this28._barMaxHeight = 0;
          _this28._barMaxWidthDelta = 0;
          _this28._barMaxHeightDelta = 0;
          _this28._barStartX = 0;
          _this28._barStartY = 0;
          _this28._node.name = "GProgressBar";
          _this28._titleType = ProgressTitleType.Percent;
          _this28._value = 50;
          _this28._max = 100;
          return _this28;
        }

        var _proto56 = GProgressBar.prototype;

        _proto56.tweenValue = function tweenValue(value, duration) {
          var oldValule;
          var tweener = GTween.getTween(this, this.update);

          if (tweener) {
            oldValule = tweener.value.x;
            tweener.kill();
          } else oldValule = this._value;

          this._value = value;
          return GTween.to(oldValule, this._value, duration).setTarget(this, this.update).setEase(EaseType.Linear);
        };

        _proto56.update = function update(newValue) {
          var percent = math.clamp01((newValue - this._min) / (this._max - this._min));

          if (this._titleObject) {
            switch (this._titleType) {
              case ProgressTitleType.Percent:
                this._titleObject.text = Math.floor(percent * 100) + "%";
                break;

              case ProgressTitleType.ValueAndMax:
                this._titleObject.text = Math.floor(newValue) + "/" + Math.floor(this._max);
                break;

              case ProgressTitleType.Value:
                this._titleObject.text = "" + Math.floor(newValue);
                break;

              case ProgressTitleType.Max:
                this._titleObject.text = "" + Math.floor(this._max);
                break;
            }
          }

          var fullWidth = this.width - this._barMaxWidthDelta;
          var fullHeight = this.height - this._barMaxHeightDelta;

          if (!this._reverse) {
            if (this._barObjectH) {
              if (!this.setFillAmount(this._barObjectH, percent)) this._barObjectH.width = Math.round(fullWidth * percent);
            }

            if (this._barObjectV) {
              if (!this.setFillAmount(this._barObjectV, percent)) this._barObjectV.height = Math.round(fullHeight * percent);
            }
          } else {
            if (this._barObjectH) {
              if (!this.setFillAmount(this._barObjectH, 1 - percent)) {
                this._barObjectH.width = Math.round(fullWidth * percent);
                this._barObjectH.x = this._barStartX + (fullWidth - this._barObjectH.width);
              }
            }

            if (this._barObjectV) {
              if (!this.setFillAmount(this._barObjectV, 1 - percent)) {
                this._barObjectV.height = Math.round(fullHeight * percent);
                this._barObjectV.y = this._barStartY + (fullHeight - this._barObjectV.height);
              }
            }
          }

          if (this._aniObject) this._aniObject.setProp(ObjectPropID.Frame, Math.floor(percent * 100));
        };

        _proto56.setFillAmount = function setFillAmount(bar, percent) {
          if ((bar instanceof GImage || bar instanceof GLoader) && bar.fillMethod != FillMethod.None) {
            bar.fillAmount = percent;
            return true;
          } else return false;
        };

        _proto56.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._titleType = buffer.readByte();
          this._reverse = buffer.readBool();
          this._titleObject = this.getChild("title");
          this._barObjectH = this.getChild("bar");
          this._barObjectV = this.getChild("bar_v");
          this._aniObject = this.getChild("ani");

          if (this._barObjectH) {
            this._barMaxWidth = this._barObjectH.width;
            this._barMaxWidthDelta = this.width - this._barMaxWidth;
            this._barStartX = this._barObjectH.x;
          }

          if (this._barObjectV) {
            this._barMaxHeight = this._barObjectV.height;
            this._barMaxHeightDelta = this.height - this._barMaxHeight;
            this._barStartY = this._barObjectV.y;
          }
        };

        _proto56.handleSizeChanged = function handleSizeChanged() {
          _GComponent8.prototype.handleSizeChanged.call(this);

          if (this._barObjectH) this._barMaxWidth = this.width - this._barMaxWidthDelta;
          if (this._barObjectV) this._barMaxHeight = this.height - this._barMaxHeightDelta;
          if (!this._underConstruct) this.update(this._value);
        };

        _proto56.setup_afterAdd = function setup_afterAdd(buffer, beginPos) {
          _GComponent8.prototype.setup_afterAdd.call(this, buffer, beginPos);

          if (!buffer.seek(beginPos, 6)) {
            this.update(this._value);
            return;
          }

          if (buffer.readByte() != this.packageItem.objectType) {
            this.update(this._value);
            return;
          }

          this._value = buffer.readInt();
          this._max = buffer.readInt();
          if (buffer.version >= 2) this._min = buffer.readInt();
          this.update(this._value);
        };

        _createClass(GProgressBar, [{
          key: "titleType",
          get: function get() {
            return this._titleType;
          },
          set: function set(value) {
            if (this._titleType != value) {
              this._titleType = value;
              this.update(this._value);
            }
          }
        }, {
          key: "min",
          get: function get() {
            return this._min;
          },
          set: function set(value) {
            if (this._min != value) {
              this._min = value;
              this.update(this._value);
            }
          }
        }, {
          key: "max",
          get: function get() {
            return this._max;
          },
          set: function set(value) {
            if (this._max != value) {
              this._max = value;
              this.update(this._value);
            }
          }
        }, {
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(value) {
            if (this._value != value) {
              GTween.kill(this, false, this.update);
              this._value = value;
              this.update(value);
            }
          }
        }]);

        return GProgressBar;
      }(GComponent));
      var GScrollBar = exports('GScrollBar', /*#__PURE__*/function (_GComponent9) {
        _inheritsLoose(GScrollBar, _GComponent9);

        function GScrollBar() {
          var _this29;

          _this29 = _GComponent9.call(this) || this;
          _this29._node.name = "GScrollBar";
          _this29._dragOffset = new Vec2();
          _this29._scrollPerc = 0;
          return _this29;
        }

        var _proto57 = GScrollBar.prototype;

        _proto57.setScrollPane = function setScrollPane(target, vertical) {
          this._target = target;
          this._vertical = vertical;
        };

        _proto57.setDisplayPerc = function setDisplayPerc(value) {
          if (this._vertical) {
            if (!this._fixedGripSize) this._grip.height = Math.floor(value * this._bar.height);
            this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;
          } else {
            if (!this._fixedGripSize) this._grip.width = Math.floor(value * this._bar.width);
            this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
          }

          this._grip.visible = value != 0 && value != 1;
        };

        _proto57.setScrollPerc = function setScrollPerc(val) {
          this._scrollPerc = val;
          if (this._vertical) this._grip.y = this._bar.y + (this._bar.height - this._grip.height) * this._scrollPerc;else this._grip.x = this._bar.x + (this._bar.width - this._grip.width) * this._scrollPerc;
        };

        _proto57.constructExtension = function constructExtension(buffer) {
          buffer.seek(0, 6);
          this._fixedGripSize = buffer.readBool();
          this._grip = this.getChild("grip");

          if (!this._grip) {
            console.error("需要定义grip");
            return;
          }

          this._bar = this.getChild("bar");

          if (!this._bar) {
            console.error("需要定义bar");
            return;
          }

          this._arrowButton1 = this.getChild("arrow1");
          this._arrowButton2 = this.getChild("arrow2");

          this._grip.on(Event.TOUCH_BEGIN, this.onGripTouchDown, this);

          this._grip.on(Event.TOUCH_MOVE, this.onGripTouchMove, this);

          this._grip.on(Event.TOUCH_END, this.onGripTouchEnd, this);

          if (this._arrowButton1) this._arrowButton1.on(Event.TOUCH_BEGIN, this.onClickArrow1, this);
          if (this._arrowButton2) this._arrowButton2.on(Event.TOUCH_BEGIN, this.onClickArrow2, this);
          this.on(Event.TOUCH_BEGIN, this.onBarTouchBegin, this);
        };

        _proto57.onGripTouchDown = function onGripTouchDown(evt) {
          evt.propagationStopped = true;
          evt.captureTouch();
          this._gripDragging = true;

          this._target.updateScrollBarVisible();

          this.globalToLocal(evt.pos.x, evt.pos.y, this._dragOffset);
          this._dragOffset.x -= this._grip.x;
          this._dragOffset.y -= this._grip.y;
        };

        _proto57.onGripTouchMove = function onGripTouchMove(evt) {
          if (!this.onStage) return;
          var pt = this.globalToLocal(evt.pos.x, evt.pos.y, s_vec2);

          if (this._vertical) {
            var curY = pt.y - this._dragOffset.y;

            this._target.setPercY((curY - this._bar.y) / (this._bar.height - this._grip.height), false);
          } else {
            var curX = pt.x - this._dragOffset.x;

            this._target.setPercX((curX - this._bar.x) / (this._bar.width - this._grip.width), false);
          }
        };

        _proto57.onGripTouchEnd = function onGripTouchEnd(evt) {
          if (!this.onStage) return;
          this._gripDragging = false;

          this._target.updateScrollBarVisible();
        };

        _proto57.onClickArrow1 = function onClickArrow1(evt) {
          evt.propagationStopped = true;
          if (this._vertical) this._target.scrollUp();else this._target.scrollLeft();
        };

        _proto57.onClickArrow2 = function onClickArrow2(evt) {
          evt.propagationStopped = true;
          if (this._vertical) this._target.scrollDown();else this._target.scrollRight();
        };

        _proto57.onBarTouchBegin = function onBarTouchBegin(evt) {
          evt.propagationStopped = true;

          var pt = this._grip.globalToLocal(evt.pos.x, evt.pos.y, s_vec2);

          if (this._vertical) {
            if (pt.y < 0) this._target.scrollUp(4);else this._target.scrollDown(4);
          } else {
            if (pt.x < 0) this._target.scrollLeft(4);else this._target.scrollRight(4);
          }
        };

        _createClass(GScrollBar, [{
          key: "minSize",
          get: function get() {
            if (this._vertical) return (this._arrowButton1 ? this._arrowButton1.height : 0) + (this._arrowButton2 ? this._arrowButton2.height : 0);else return (this._arrowButton1 ? this._arrowButton1.width : 0) + (this._arrowButton2 ? this._arrowButton2.width : 0);
          }
        }, {
          key: "gripDragging",
          get: function get() {
            return this._gripDragging;
          }
        }]);

        return GScrollBar;
      }(GComponent));
      var s_vec2 = new Vec2();
      var GTreeNode = exports('GTreeNode', /*#__PURE__*/function () {
        function GTreeNode(hasChild, resURL) {
          this._level = 0;
          this._resURL = resURL;
          if (hasChild) this._children = new Array();
        }

        var _proto58 = GTreeNode.prototype;

        _proto58._setLevel = function _setLevel(value) {
          this._level = value;
        };

        _proto58.addChild = function addChild(child) {
          this.addChildAt(child, this._children.length);
          return child;
        };

        _proto58.addChildAt = function addChildAt(child, index) {
          if (!child) throw new Error("child is null");
          var numChildren = this._children.length;

          if (index >= 0 && index <= numChildren) {
            if (child._parent == this) {
              this.setChildIndex(child, index);
            } else {
              if (child._parent) child._parent.removeChild(child);
              var cnt = this._children.length;
              if (index == cnt) this._children.push(child);else this._children.splice(index, 0, child);
              child._parent = this;
              child._level = this._level + 1;

              child._setTree(this._tree);

              if (this._tree && this == this._tree.rootNode || this._cell && this._cell.parent && this._expanded) this._tree._afterInserted(child);
            }

            return child;
          } else {
            throw new RangeError("Invalid child index");
          }
        };

        _proto58.removeChild = function removeChild(child) {
          var childIndex = this._children.indexOf(child);

          if (childIndex != -1) {
            this.removeChildAt(childIndex);
          }

          return child;
        };

        _proto58.removeChildAt = function removeChildAt(index) {
          if (index >= 0 && index < this.numChildren) {
            var child = this._children[index];

            this._children.splice(index, 1);

            child._parent = null;

            if (this._tree) {
              child._setTree(null);

              this._tree._afterRemoved(child);
            }

            return child;
          } else {
            throw new Error("Invalid child index");
          }
        };

        _proto58.removeChildren = function removeChildren(beginIndex, endIndex) {
          beginIndex = beginIndex || 0;
          if (endIndex == null) endIndex = -1;
          if (endIndex < 0 || endIndex >= this.numChildren) endIndex = this.numChildren - 1;

          for (var i = beginIndex; i <= endIndex; ++i) this.removeChildAt(beginIndex);
        };

        _proto58.getChildAt = function getChildAt(index) {
          if (index >= 0 && index < this.numChildren) return this._children[index];else throw new Error("Invalid child index");
        };

        _proto58.getChildIndex = function getChildIndex(child) {
          return this._children.indexOf(child);
        };

        _proto58.getPrevSibling = function getPrevSibling() {
          if (this._parent == null) return null;

          var i = this._parent._children.indexOf(this);

          if (i <= 0) return null;
          return this._parent._children[i - 1];
        };

        _proto58.getNextSibling = function getNextSibling() {
          if (this._parent == null) return null;

          var i = this._parent._children.indexOf(this);

          if (i < 0 || i >= this._parent._children.length - 1) return null;
          return this._parent._children[i + 1];
        };

        _proto58.setChildIndex = function setChildIndex(child, index) {
          var oldIndex = this._children.indexOf(child);

          if (oldIndex == -1) throw new Error("Not a child of this container");
          var cnt = this._children.length;
          if (index < 0) index = 0;else if (index > cnt) index = cnt;
          if (oldIndex == index) return;

          this._children.splice(oldIndex, 1);

          this._children.splice(index, 0, child);

          if (this._tree && this == this._tree.rootNode || this._cell && this._cell.parent && this._expanded) this._tree._afterMoved(child);
        };

        _proto58.swapChildren = function swapChildren(child1, child2) {
          var index1 = this._children.indexOf(child1);

          var index2 = this._children.indexOf(child2);

          if (index1 == -1 || index2 == -1) throw new Error("Not a child of this container");
          this.swapChildrenAt(index1, index2);
        };

        _proto58.swapChildrenAt = function swapChildrenAt(index1, index2) {
          var child1 = this._children[index1];
          var child2 = this._children[index2];
          this.setChildIndex(child1, index2);
          this.setChildIndex(child2, index1);
        };

        _proto58.expandToRoot = function expandToRoot() {
          var p = this;

          while (p) {
            p.expanded = true;
            p = p.parent;
          }
        };

        _proto58._setTree = function _setTree(value) {
          this._tree = value;
          if (this._tree && this._tree.treeNodeWillExpand && this._expanded) this._tree.treeNodeWillExpand(this, true);

          if (this._children) {
            var cnt = this._children.length;

            for (var i = 0; i < cnt; i++) {
              var node = this._children[i];
              node._level = this._level + 1;

              node._setTree(value);
            }
          }
        };

        _createClass(GTreeNode, [{
          key: "expanded",
          get: function get() {
            return this._expanded;
          },
          set: function set(value) {
            if (this._children == null) return;

            if (this._expanded != value) {
              this._expanded = value;

              if (this._tree) {
                if (this._expanded) this._tree._afterExpanded(this);else this._tree._afterCollapsed(this);
              }
            }
          }
        }, {
          key: "isFolder",
          get: function get() {
            return this._children != null;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }, {
          key: "text",
          get: function get() {
            if (this._cell) return this._cell.text;else return null;
          },
          set: function set(value) {
            if (this._cell) this._cell.text = value;
          }
        }, {
          key: "icon",
          get: function get() {
            if (this._cell) return this._cell.icon;else return null;
          },
          set: function set(value) {
            if (this._cell) this._cell.icon = value;
          }
        }, {
          key: "cell",
          get: function get() {
            return this._cell;
          }
        }, {
          key: "level",
          get: function get() {
            return this._level;
          }
        }, {
          key: "numChildren",
          get: function get() {
            return this._children.length;
          }
        }, {
          key: "tree",
          get: function get() {
            return this._tree;
          }
        }]);

        return GTreeNode;
      }());
      var GTree = exports('GTree', /*#__PURE__*/function (_GList) {
        _inheritsLoose(GTree, _GList);

        function GTree() {
          var _this30;

          _this30 = _GList.call(this) || this;
          _this30._indent = 15;
          _this30._rootNode = new GTreeNode(true);

          _this30._rootNode._setTree(_assertThisInitialized(_this30));

          _this30._rootNode.expanded = true;
          return _this30;
        }

        var _proto59 = GTree.prototype;

        _proto59.getSelectedNode = function getSelectedNode() {
          if (this.selectedIndex != -1) return this.getChildAt(this.selectedIndex)._treeNode;else return null;
        };

        _proto59.getSelectedNodes = function getSelectedNodes(result) {
          if (!result) result = new Array();
          s_list.length = 0;

          _GList.prototype.getSelection.call(this, s_list);

          var cnt = s_list.length;
          var ret = new Array();

          for (var i = 0; i < cnt; i++) {
            var node = this.getChildAt(s_list[i])._treeNode;

            ret.push(node);
          }

          return ret;
        };

        _proto59.selectNode = function selectNode(node, scrollItToView) {
          var parentNode = node.parent;

          while (parentNode && parentNode != this._rootNode) {
            parentNode.expanded = true;
            parentNode = parentNode.parent;
          }

          if (!node._cell) return;
          this.addSelection(this.getChildIndex(node._cell), scrollItToView);
        };

        _proto59.unselectNode = function unselectNode(node) {
          if (!node._cell) return;
          this.removeSelection(this.getChildIndex(node._cell));
        };

        _proto59.expandAll = function expandAll(folderNode) {
          if (!folderNode) folderNode = this._rootNode;
          folderNode.expanded = true;
          var cnt = folderNode.numChildren;

          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node.isFolder) this.expandAll(node);
          }
        };

        _proto59.collapseAll = function collapseAll(folderNode) {
          if (!folderNode) folderNode = this._rootNode;
          if (folderNode != this._rootNode) folderNode.expanded = false;
          var cnt = folderNode.numChildren;

          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node.isFolder) this.collapseAll(node);
          }
        };

        _proto59.createCell = function createCell(node) {
          var child = this.getFromPool(node._resURL);
          if (!(child instanceof GComponent)) throw new Error("cannot create tree node object.");
          child._treeNode = node;
          node._cell = child;
          var indentObj = child.getChild("indent");
          if (indentObj) indentObj.width = (node.level - 1) * this._indent;
          var cc;
          cc = child.getController("expanded");

          if (cc) {
            cc.on(Event.STATUS_CHANGED, this.__expandedStateChanged, this);
            cc.selectedIndex = node.expanded ? 1 : 0;
          }

          cc = child.getController("leaf");
          if (cc) cc.selectedIndex = node.isFolder ? 0 : 1;
          if (node.isFolder) node._cell.on(Event.TOUCH_BEGIN, this.__cellMouseDown, this);
          if (this.treeNodeRender) this.treeNodeRender(node, child);
        };

        _proto59._afterInserted = function _afterInserted(node) {
          if (!node._cell) this.createCell(node);
          var index = this.getInsertIndexForNode(node);
          this.addChildAt(node._cell, index);
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);
          if (node.isFolder && node.expanded) this.checkChildren(node, index);
        };

        _proto59.getInsertIndexForNode = function getInsertIndexForNode(node) {
          var prevNode = node.getPrevSibling();
          if (prevNode == null) prevNode = node.parent;
          var insertIndex = this.getChildIndex(prevNode._cell) + 1;
          var myLevel = node.level;
          var cnt = this.numChildren;

          for (var i = insertIndex; i < cnt; i++) {
            var testNode = this.getChildAt(i)._treeNode;

            if (testNode.level <= myLevel) break;
            insertIndex++;
          }

          return insertIndex;
        };

        _proto59._afterRemoved = function _afterRemoved(node) {
          this.removeNode(node);
        };

        _proto59._afterExpanded = function _afterExpanded(node) {
          if (node == this._rootNode) {
            this.checkChildren(this._rootNode, 0);
            return;
          }

          if (this.treeNodeWillExpand != null) this.treeNodeWillExpand(node, true);
          if (node._cell == null) return;
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);

          var cc = node._cell.getController("expanded");

          if (cc) cc.selectedIndex = 1;
          if (node._cell.parent) this.checkChildren(node, this.getChildIndex(node._cell));
        };

        _proto59._afterCollapsed = function _afterCollapsed(node) {
          if (node == this._rootNode) {
            this.checkChildren(this._rootNode, 0);
            return;
          }

          if (this.treeNodeWillExpand) this.treeNodeWillExpand(node, false);
          if (node._cell == null) return;
          if (this.treeNodeRender) this.treeNodeRender(node, node._cell);

          var cc = node._cell.getController("expanded");

          if (cc) cc.selectedIndex = 0;
          if (node._cell.parent) this.hideFolderNode(node);
        };

        _proto59._afterMoved = function _afterMoved(node) {
          var startIndex = this.getChildIndex(node._cell);
          var endIndex;
          if (node.isFolder) endIndex = this.getFolderEndIndex(startIndex, node.level);else endIndex = startIndex + 1;
          var insertIndex = this.getInsertIndexForNode(node);
          var i;
          var cnt = endIndex - startIndex;
          var obj;

          if (insertIndex < startIndex) {
            for (i = 0; i < cnt; i++) {
              obj = this.getChildAt(startIndex + i);
              this.setChildIndex(obj, insertIndex + i);
            }
          } else {
            for (i = 0; i < cnt; i++) {
              obj = this.getChildAt(startIndex);
              this.setChildIndex(obj, insertIndex);
            }
          }
        };

        _proto59.getFolderEndIndex = function getFolderEndIndex(startIndex, level) {
          var cnt = this.numChildren;

          for (var i = startIndex + 1; i < cnt; i++) {
            var node = this.getChildAt(i)._treeNode;

            if (node.level <= level) return i;
          }

          return cnt;
        };

        _proto59.checkChildren = function checkChildren(folderNode, index) {
          var cnt = folderNode.numChildren;

          for (var i = 0; i < cnt; i++) {
            index++;
            var node = folderNode.getChildAt(i);
            if (node._cell == null) this.createCell(node);
            if (!node._cell.parent) this.addChildAt(node._cell, index);
            if (node.isFolder && node.expanded) index = this.checkChildren(node, index);
          }

          return index;
        };

        _proto59.hideFolderNode = function hideFolderNode(folderNode) {
          var cnt = folderNode.numChildren;

          for (var i = 0; i < cnt; i++) {
            var node = folderNode.getChildAt(i);
            if (node._cell) this.removeChild(node._cell);
            if (node.isFolder && node.expanded) this.hideFolderNode(node);
          }
        };

        _proto59.removeNode = function removeNode(node) {
          if (node._cell) {
            if (node._cell.parent) this.removeChild(node._cell);
            this.returnToPool(node._cell);
            node._cell._treeNode = null;
            node._cell = null;
          }

          if (node.isFolder) {
            var cnt = node.numChildren;

            for (var i = 0; i < cnt; i++) {
              var node2 = node.getChildAt(i);
              this.removeNode(node2);
            }
          }
        };

        _proto59.__cellMouseDown = function __cellMouseDown(evt) {
          var node = GObject.cast(evt.currentTarget)._treeNode;

          this._expandedStatusInEvt = node.expanded;
        };

        _proto59.__expandedStateChanged = function __expandedStateChanged(cc) {
          var node = cc.parent._treeNode;
          node.expanded = cc.selectedIndex == 1;
        };

        _proto59.dispatchItemEvent = function dispatchItemEvent(item, evt) {
          if (this._clickToExpand != 0) {
            var node = item._treeNode;

            if (node && this._expandedStatusInEvt == node.expanded) {
              if (this._clickToExpand == 2) ;else node.expanded = !node.expanded;
            }
          }

          _GList.prototype.dispatchItemEvent.call(this, item, evt);
        };

        _proto59.setup_beforeAdd = function setup_beforeAdd(buffer, beginPos) {
          _GList.prototype.setup_beforeAdd.call(this, buffer, beginPos);

          buffer.seek(beginPos, 9);
          this._indent = buffer.readInt();
          this._clickToExpand = buffer.readByte();
        };

        _proto59.readItems = function readItems(buffer) {
          var cnt;
          var i;
          var nextPos;
          var str;
          var isFolder;
          var lastNode;
          var level;
          var prevLevel = 0;
          cnt = buffer.readShort();

          for (i = 0; i < cnt; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            str = buffer.readS();

            if (str == null) {
              str = this.defaultItem;

              if (!str) {
                buffer.position = nextPos;
                continue;
              }
            }

            isFolder = buffer.readBool();
            level = buffer.readByte();
            var node = new GTreeNode(isFolder, str);
            node.expanded = true;
            if (i == 0) this._rootNode.addChild(node);else {
              if (level > prevLevel) lastNode.addChild(node);else if (level < prevLevel) {
                for (var j = level; j <= prevLevel; j++) lastNode = lastNode.parent;

                lastNode.addChild(node);
              } else lastNode.parent.addChild(node);
            }
            lastNode = node;
            prevLevel = level;
            this.setupItem(buffer, node.cell);
            buffer.position = nextPos;
          }
        };

        _createClass(GTree, [{
          key: "rootNode",
          get: function get() {
            return this._rootNode;
          }
        }, {
          key: "indent",
          get: function get() {
            return this._indent;
          },
          set: function set(value) {
            this._indent = value;
          }
        }, {
          key: "clickToExpand",
          get: function get() {
            return this._clickToExpand;
          },
          set: function set(value) {
            this._clickToExpand = value;
          }
        }]);

        return GTree;
      }(GList));
      var s_list = new Array();
      var PopupMenu = exports('PopupMenu', /*#__PURE__*/function () {
        function PopupMenu(url) {
          if (!url) {
            url = UIConfig.popupMenu;
            if (!url) throw new Error("UIConfig.popupMenu not defined");
          }

          this._contentPane = UIPackage.createObjectFromURL(url);

          this._contentPane.on(Event.DISPLAY, this.onDisplay, this);

          this._list = this._contentPane.getChild("list");

          this._list.removeChildrenToPool();

          this._list.addRelation(this._contentPane, RelationType.Width);

          this._list.removeRelation(this._contentPane, RelationType.Height);

          this._contentPane.addRelation(this._list, RelationType.Height);

          this._list.on(Event.CLICK_ITEM, this.onClickItem, this);
        }

        var _proto60 = PopupMenu.prototype;

        _proto60.dispose = function dispose() {
          this._contentPane.dispose();
        };

        _proto60.addItem = function addItem(caption, callback) {
          var item = this._list.addItemFromPool();

          item.title = caption;
          item.data = callback;
          item.grayed = false;
          var c = item.getController("checked");
          if (c) c.selectedIndex = 0;
          return item;
        };

        _proto60.addItemAt = function addItemAt(caption, index, callback) {
          var item = this._list.getFromPool();

          this._list.addChildAt(item, index);

          item.title = caption;
          item.data = callback;
          item.grayed = false;
          var c = item.getController("checked");
          if (c) c.selectedIndex = 0;
          return item;
        };

        _proto60.addSeperator = function addSeperator() {
          if (UIConfig.popupMenu_seperator == null) throw new Error("UIConfig.popupMenu_seperator not defined");
          this.list.addItemFromPool(UIConfig.popupMenu_seperator);
        };

        _proto60.getItemName = function getItemName(index) {
          var item = this._list.getChildAt(index);

          return item.name;
        };

        _proto60.setItemText = function setItemText(name, caption) {
          var item = this._list.getChild(name);

          item.title = caption;
        };

        _proto60.setItemVisible = function setItemVisible(name, visible) {
          var item = this._list.getChild(name);

          if (item.visible != visible) {
            item.visible = visible;

            this._list.setBoundsChangedFlag();
          }
        };

        _proto60.setItemGrayed = function setItemGrayed(name, grayed) {
          var item = this._list.getChild(name);

          item.grayed = grayed;
        };

        _proto60.setItemCheckable = function setItemCheckable(name, checkable) {
          var item = this._list.getChild(name);

          var c = item.getController("checked");

          if (c) {
            if (checkable) {
              if (c.selectedIndex == 0) c.selectedIndex = 1;
            } else c.selectedIndex = 0;
          }
        };

        _proto60.setItemChecked = function setItemChecked(name, checked) {
          var item = this._list.getChild(name);

          var c = item.getController("checked");
          if (c) c.selectedIndex = checked ? 2 : 1;
        };

        _proto60.isItemChecked = function isItemChecked(name) {
          var item = this._list.getChild(name);

          var c = item.getController("checked");
          if (c) return c.selectedIndex == 2;else return false;
        };

        _proto60.removeItem = function removeItem(name) {
          var item = this._list.getChild(name);

          if (item) {
            var index = this._list.getChildIndex(item);

            this._list.removeChildToPoolAt(index);

            return true;
          } else return false;
        };

        _proto60.clearItems = function clearItems() {
          this._list.removeChildrenToPool();
        };

        _proto60.show = function show(target, dir) {
          GRoot.inst.showPopup(this.contentPane, target instanceof GRoot ? null : target, dir);
        };

        _proto60.onClickItem = function onClickItem(item, evt) {
          var _this31 = this;

          this._list._partner.callLater(function (dt) {
            _this31.onClickItem2(item, evt);
          }, 0.1);
        };

        _proto60.onClickItem2 = function onClickItem2(item, evt) {
          if (!(item instanceof GButton)) return;

          if (item.grayed) {
            this._list.selectedIndex = -1;
            return;
          }

          var c = item.getController("checked");

          if (c && c.selectedIndex != 0) {
            if (c.selectedIndex == 1) c.selectedIndex = 2;else c.selectedIndex = 1;
          }

          var r = this._contentPane.parent;
          r.hidePopup(this.contentPane);
          if (item.data instanceof Function) item.data(item, evt);
        };

        _proto60.onDisplay = function onDisplay() {
          this._list.selectedIndex = -1;

          this._list.resizeToFit(100000, 10);
        };

        _createClass(PopupMenu, [{
          key: "itemCount",
          get: function get() {
            return this._list.numChildren;
          }
        }, {
          key: "contentPane",
          get: function get() {
            return this._contentPane;
          }
        }, {
          key: "list",
          get: function get() {
            return this._list;
          }
        }]);

        return PopupMenu;
      }());
      var UIObjectFactory = exports('UIObjectFactory', /*#__PURE__*/function () {
        function UIObjectFactory() {}

        UIObjectFactory.setExtension = function setExtension(url, type) {
          if (url == null) throw new Error("Invaild url: " + url);
          var pi = UIPackage.getItemByURL(url);
          if (pi) pi.extensionType = type;
          UIObjectFactory.extensions[url] = type;
        };

        UIObjectFactory.setLoaderExtension = function setLoaderExtension(type) {
          UIObjectFactory.loaderType = type;
        };

        UIObjectFactory.resolveExtension = function resolveExtension(pi) {
          var extensionType = UIObjectFactory.extensions["ui://" + pi.owner.id + pi.id];
          if (!extensionType) extensionType = UIObjectFactory.extensions["ui://" + pi.owner.name + "/" + pi.name];
          if (extensionType) pi.extensionType = extensionType;
        };

        UIObjectFactory.newObject = function newObject(type, userClass) {
          var obj;
          UIObjectFactory.counter++;

          if (typeof type === 'number') {
            switch (type) {
              case ObjectType.Image:
                return new GImage();

              case ObjectType.MovieClip:
                return new GMovieClip();

              case ObjectType.Component:
                return new GComponent();

              case ObjectType.Text:
                return new GTextField();

              case ObjectType.RichText:
                return new GRichTextField();

              case ObjectType.InputText:
                return new GTextInput();

              case ObjectType.Group:
                return new GGroup();

              case ObjectType.List:
                return new GList();

              case ObjectType.Graph:
                return new GGraph();

              case ObjectType.Loader:
                if (UIObjectFactory.loaderType) return new UIObjectFactory.loaderType();else return new GLoader();

              case ObjectType.Button:
                return new GButton();

              case ObjectType.Label:
                return new GLabel();

              case ObjectType.ProgressBar:
                return new GProgressBar();

              case ObjectType.Slider:
                return new GSlider();

              case ObjectType.ScrollBar:
                return new GScrollBar();

              case ObjectType.ComboBox:
                return new GComboBox();

              case ObjectType.Tree:
                return new GTree();

              case ObjectType.Loader3D:
                return new GLoader3D();

              default:
                return null;
            }
          } else {
            if (type.type == PackageItemType.Component) {
              if (userClass) obj = new userClass();else if (type.extensionType) obj = new type.extensionType();else obj = UIObjectFactory.newObject(type.objectType);
            } else obj = UIObjectFactory.newObject(type.objectType);

            if (obj) obj.packageItem = type;
          }

          return obj;
        };

        return UIObjectFactory;
      }());
      UIObjectFactory.counter = 0;
      UIObjectFactory.extensions = {};
      Decls.UIObjectFactory = UIObjectFactory;
      var DragDropManager = exports('DragDropManager', /*#__PURE__*/function () {
        function DragDropManager() {
          this._agent = new GLoader();
          this._agent.draggable = true;
          this._agent.touchable = false; //important

          this._agent.setSize(100, 100);

          this._agent.setPivot(0.5, 0.5, true);

          this._agent.align = AlignType.Center;
          this._agent.verticalAlign = VertAlignType.Middle;
          this._agent.sortingOrder = 1000000;

          this._agent.on(Event.DRAG_END, this.onDragEnd, this);
        }

        var _proto61 = DragDropManager.prototype;

        _proto61.startDrag = function startDrag(source, icon, sourceData, touchId) {
          if (this._agent.parent) return;
          this._sourceData = sourceData;
          this._agent.url = icon;
          GRoot.inst.addChild(this._agent);
          var pt = GRoot.inst.getTouchPosition(touchId);
          pt = GRoot.inst.globalToLocal(pt.x, pt.y);

          this._agent.setPosition(pt.x, pt.y);

          this._agent.startDrag(touchId);
        };

        _proto61.cancel = function cancel() {
          if (this._agent.parent) {
            this._agent.stopDrag();

            GRoot.inst.removeChild(this._agent);
            this._sourceData = null;
          }
        };

        _proto61.onDragEnd = function onDragEnd() {
          if (!this._agent.parent) //cancelled
            return;
          GRoot.inst.removeChild(this._agent);
          var sourceData = this._sourceData;
          this._sourceData = null;
          var obj = GRoot.inst.touchTarget;

          while (obj) {
            if (obj.node.hasEventListener(Event.DROP)) {
              obj.requestFocus();
              obj.node.emit(Event.DROP, obj, sourceData);
              return;
            }

            obj = obj.parent;
          }
        };

        _createClass(DragDropManager, [{
          key: "dragAgent",
          get: function get() {
            return this._agent;
          }
        }, {
          key: "dragging",
          get: function get() {
            return this._agent.parent != null;
          }
        }], [{
          key: "inst",
          get: function get() {
            if (!DragDropManager._inst) DragDropManager._inst = new DragDropManager();
            return DragDropManager._inst;
          }
        }]);

        return DragDropManager;
      }());
      var AsyncOperation = exports('AsyncOperation', /*#__PURE__*/function () {
        function AsyncOperation() {}

        var _proto62 = AsyncOperation.prototype;

        _proto62.createObject = function createObject(pkgName, resName) {
          if (this._node) throw 'Already running';
          var pkg = UIPackage.getByName(pkgName);

          if (pkg) {
            var pi = pkg.getItemByName(resName);
            if (!pi) throw new Error("resource not found: " + resName);
            this.internalCreateObject(pi);
          } else throw new Error("package not found: " + pkgName);
        };

        _proto62.createObjectFromURL = function createObjectFromURL(url) {
          if (this._node) throw 'Already running';
          var pi = UIPackage.getItemByURL(url);
          if (pi) this.internalCreateObject(pi);else throw new Error("resource not found: " + url);
        };

        _proto62.cancel = function cancel() {
          if (this._node) {
            this._node.destroy();

            this._node = null;
          }
        };

        _proto62.internalCreateObject = function internalCreateObject(item) {
          this._node = new Node("[AsyncCreating:" + item.name + "]");
          game.addPersistRootNode(this._node);

          this._node.on("#", this.completed, this);

          this._node.addComponent(AsyncOperationRunner).init(item);
        };

        _proto62.completed = function completed(result) {
          this.cancel();
          if (this.callback) this.callback(result);
        };

        return AsyncOperation;
      }());

      var AsyncOperationRunner = /*#__PURE__*/function (_Component3) {
        _inheritsLoose(AsyncOperationRunner, _Component3);

        function AsyncOperationRunner() {
          var _this32;

          _this32 = _Component3.call(this) || this;
          _this32._itemList = new Array();
          _this32._objectPool = new Array();
          return _this32;
        }

        var _proto63 = AsyncOperationRunner.prototype;

        _proto63.init = function init(item) {
          this._itemList.length = 0;
          this._objectPool.length = 0;
          var di = {
            pi: item,
            type: item.objectType
          };
          di.childCount = this.collectComponentChildren(item);

          this._itemList.push(di);

          this._index = 0;
        };

        _proto63.onDestroy = function onDestroy() {
          this._itemList.length = 0;
          var cnt = this._objectPool.length;

          if (cnt > 0) {
            for (var i = 0; i < cnt; i++) this._objectPool[i].dispose();

            this._objectPool.length = 0;
          }
        };

        _proto63.collectComponentChildren = function collectComponentChildren(item) {
          var buffer = item.rawData;
          buffer.seek(0, 2);
          var di;
          var pi;
          var i;
          var dataLen;
          var curPos;
          var pkg;
          var dcnt = buffer.readShort();

          for (i = 0; i < dcnt; i++) {
            dataLen = buffer.readShort();
            curPos = buffer.position;
            buffer.seek(curPos, 0);
            var type = buffer.readByte();
            var src = buffer.readS();
            var pkgId = buffer.readS();
            buffer.position = curPos;

            if (src != null) {
              if (pkgId != null) pkg = UIPackage.getById(pkgId);else pkg = item.owner;
              pi = pkg != null ? pkg.getItemById(src) : null;
              di = {
                pi: pi,
                type: type
              };
              if (pi && pi.type == PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);
            } else {
              di = {
                type: type
              };
              if (type == ObjectType.List) //list
                di.listItemCount = this.collectListChildren(buffer);
            }

            this._itemList.push(di);

            buffer.position = curPos + dataLen;
          }

          return dcnt;
        };

        _proto63.collectListChildren = function collectListChildren(buffer) {
          buffer.seek(buffer.position, 8);
          var listItemCount = 0;
          var i;
          var nextPos;
          var url;
          var pi;
          var di;
          var defaultItem = buffer.readS();
          var itemCount = buffer.readShort();

          for (i = 0; i < itemCount; i++) {
            nextPos = buffer.readShort();
            nextPos += buffer.position;
            url = buffer.readS();
            if (url == null) url = defaultItem;

            if (url) {
              pi = UIPackage.getItemByURL(url);

              if (pi) {
                di = {
                  pi: pi,
                  type: pi.objectType
                };
                if (pi.type == PackageItemType.Component) di.childCount = this.collectComponentChildren(pi);

                this._itemList.push(di);

                listItemCount++;
              }
            }

            buffer.position = nextPos;
          }

          return listItemCount;
        };

        _proto63.update = function update() {
          var obj;
          var di;
          var poolStart;
          var k;
          var t = game.totalTime / 1000;
          var frameTime = UIConfig.frameTimeForAsyncUIConstruction;
          var totalItems = this._itemList.length;

          while (this._index < totalItems) {
            di = this._itemList[this._index];

            if (di.pi) {
              obj = UIObjectFactory.newObject(di.pi);

              this._objectPool.push(obj);

              constructingDepth.n++;

              if (di.pi.type == PackageItemType.Component) {
                poolStart = this._objectPool.length - di.childCount - 1;
                obj.constructFromResource2(this._objectPool, poolStart);

                this._objectPool.splice(poolStart, di.childCount);
              } else {
                obj.constructFromResource();
              }

              constructingDepth.n--;
            } else {
              obj = UIObjectFactory.newObject(di.type);

              this._objectPool.push(obj);

              if (di.type == ObjectType.List && di.listItemCount > 0) {
                poolStart = this._objectPool.length - di.listItemCount - 1;

                for (k = 0; k < di.listItemCount; k++) //把他们都放到pool里，这样GList在创建时就不需要创建对象了
                obj.itemPool.returnObject(this._objectPool[k + poolStart]);

                this._objectPool.splice(poolStart, di.listItemCount);
              }
            }

            this._index++;
            if (this._index % 5 == 0 && game.totalTime / 1000 - t >= frameTime) return;
          }

          var result = this._objectPool[0];
          this._itemList.length = 0;
          this._objectPool.length = 0;
          this.node.emit("#", result);
        };

        return AsyncOperationRunner;
      }(Component);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FaryguiUtil.ts", ['cc', './FaryguiImport.ts', './FaryguiSrc.ts'], function (exports) {
  var cclegacy, assert, Color, Node, view, misc, EventHandler, instantiate, GTween, EaseType, AutoSizeType;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      assert = module.assert;
      Color = module.Color;
      Node = module.Node;
      view = module.view;
      misc = module.misc;
      EventHandler = module.EventHandler;
      instantiate = module.instantiate;
    }, null, function (module) {
      GTween = module.GTween;
      EaseType = module.EaseType;
      AutoSizeType = module.AutoSizeType;
    }],
    execute: function () {
      exports({
        fixSetAnimation: fixSetAnimation,
        isNullOrEmpty: isNullOrEmpty
      });

      cclegacy._RF.push({}, "b80c423ZuBFT4Kt6nwlaGdA", "FaryguiUtil", undefined);

      var EventEX = function EventEX() {
        this.TOUCH_BEGIN = "fui_touch_begin";
        this.TOUCH_MOVE = "fui_touch_move";
        this.TOUCH_END = "fui_touch_end";
        this.CLICK = "fui_click";
        this.ROLL_OVER = "fui_roll_over";
        this.ROLL_OUT = "fui_roll_out";
        this.MOUSE_WHEEL = "fui_mouse_wheel";
        this.DISPLAY = "fui_display";
        this.UNDISPLAY = "fui_undisplay";
        this.GEAR_STOP = "fui_gear_stop";
        this.LINK = "fui_text_link";
        this.Submit = "editing-return";
        this.TEXT_CHANGE = "text-changed";
        this.STATUS_CHANGED = "fui_status_changed";
        this.XY_CHANGED = "fui_xy_changed";
        this.SIZE_CHANGED = "fui_size_changed";
        this.SIZE_DELAY_CHANGE = "fui_size_delay_change";
        this.DRAG_START = "fui_drag_start";
        this.DRAG_MOVE = "fui_drag_move";
        this.DRAG_END = "fui_drag_end";
        this.DROP = "fui_drop";
        this.SCROLL = "fui_scroll";
        this.SCROLL_END = "fui_scroll_end";
        this.PULL_DOWN_RELEASE = "fui_pull_down_release";
        this.PULL_UP_RELEASE = "fui_pull_up_release";
        this.CLICK_ITEM = "fui_click_item";
      };

      var MapPaths = exports('MapPaths', /*#__PURE__*/function () {
        function MapPaths(target) {
          this.map = void 0;
          this.map = {};
          this.doMap(target["_children"], "");
        }

        var _proto = MapPaths.prototype;

        _proto.doMap = function doMap(childs, path) {
          if (!childs || childs.length <= 0) return;

          for (var idx = 0; idx < childs.length; idx++) {
            var c = childs[idx];
            var p = path + c.name;
            this.map[p] = c;
            if (c["_children"]) this.doMap(c["_children"], p + "/");
          }
        };

        _proto.getChild = function getChild(path) {
          var r = this.map[path];
          assert(r, "error get path " + path);
          return r;
        };

        return MapPaths;
      }());
      var FUtil = exports('default', /*#__PURE__*/function () {
        function FUtil() {}

        FUtil.createMapPaths = function createMapPaths(target) {
          return new MapPaths(target);
        };

        FUtil.setOnceTapStart = function setOnceTapStart(com, listener, target) {
          com.node.once(Node.EventType.TOUCH_START, listener, target);
        };

        FUtil.setTapStart = function setTapStart(com, listener, target) {
          com.node.on(Node.EventType.TOUCH_START, listener, target);
        };

        FUtil.setOnceTapEnd = function setOnceTapEnd(com, listener, target) {
          com.node.once(Node.EventType.TOUCH_END, listener, target);
        };

        FUtil.setClick = function setClick(bt, listener, target) {
          if (target === void 0) {
            target = null;
          }

          bt.clearClick();
          bt.onClick(listener, target);
        };

        FUtil.tweenStop = function tweenStop(target) {
          GTween.kill(target, null, null);
        };

        FUtil.stopScroll = function stopScroll(list) {
          var scrollPane = list.scrollPane;
          if (!scrollPane) return;
          scrollPane.percY = scrollPane.percY; // @ts-ignore

          scrollPane.refresh();
        };

        FUtil.forceScrollBottom = function forceScrollBottom(list) {
          list.scrollPane.scrollBottom(false); // @ts-ignore

          list.scrollPane.refresh();
        };

        FUtil.scrollBottomAni = function scrollBottomAni(list) {
          // @ts-ignore
          list.scrollPane.refresh();
          list.scrollPane.scrollBottom(true);
        };

        FUtil.refresh = function refresh(list) {
          // @ts-ignore
          list.scrollPane.refresh();
        };

        FUtil.handleSizeChanged = function handleSizeChanged(list) {
          list.handleSizeChanged();
        };

        FUtil.isBottomMost = function isBottomMost(list) {
          if (list.scrollPane.isBottomMost) return true;
          if (list.scrollPane.percY >= 0.96) return true;
          return false;
        };

        FUtil.fadeIn = function fadeIn(target, delay) {
          GTween.kill(target, null, null);
          return GTween.to(target.alpha, 1, 0.25).setTarget(target, "alpha").setDelay(0.01);
        };

        FUtil.fadeOut = function fadeOut(target) {
          GTween.kill(target, null, null);
          return GTween.to(target.alpha, 0, 0.25).setTarget(target, "alpha");
        };

        FUtil.moveX = function moveX(target, x) {
          return FUtil.moveXY(target, x, target.y);
        };

        FUtil.moveY = function moveY(target, y) {
          return FUtil.moveXY(target, target.x, y);
        };

        FUtil.moveXY = function moveXY(target, x, y, duration, ease) {
          if (duration === void 0) {
            duration = 0.2;
          }

          if (ease === void 0) {
            ease = EaseType.QuartOut;
          }

          GTween.kill(target, null, null);
          return GTween.to2(target.x, target.y, x, y, duration).setEase(ease).setTarget(target, target.setPosition);
        };

        FUtil.toHeight = function toHeight(target, h, duration) {
          if (duration === void 0) {
            duration = 0.2;
          }

          return FUtil.toSize(target, target.width, h, duration);
        };

        FUtil.toHeightByD = function toHeightByD(target, h, fSpeed) {
          if (fSpeed === void 0) {
            fSpeed = 1;
          }

          var duration = 0.01;

          if (h != target.height) {
            var screenSize = view.getVisibleSize();
            var d = Math.abs(h - target.height);

            if (d > screenSize.height) {
              if (h > screenSize.height) {
                h = screenSize.height;
              } else if (target.height > screenSize.height) {
                target.height = screenSize.height;
              }

              duration = Math.abs(h - target.height) * 0.001 * fSpeed;
            } else {
              duration = d * 0.001 * fSpeed;
            }
          }

          return FUtil.toSize(target, target.width, h, misc.clampf(duration, 0.01, 0.5), h > target.height ? EaseType.QuartIn : EaseType.QuartOut);
        };

        FUtil.kill = function kill(target) {
          GTween.kill(target, null, null);
        };

        FUtil.toSize = function toSize(target, w, h, duration, ease) {
          if (duration === void 0) {
            duration = 0.25;
          }

          if (ease === void 0) {
            ease = EaseType.QuartOut;
          }

          GTween.kill(target, null, null);
          return GTween.to2(target.width, target.height, w, h, duration).setEase(ease).setTarget(target, target.setSize);
        };

        FUtil.toScaleY = function toScaleY(target, y, duration, ease) {
          if (duration === void 0) {
            duration = 0.25;
          }

          if (ease === void 0) {
            ease = EaseType.QuartOut;
          }

          GTween.kill(target, null, null);
          return GTween.to(target.scaleY, y, duration).setEase(ease).setTarget(target, target.scaleY);
        };

        FUtil.centerH = function centerH(target, offset) {
          if (offset === void 0) {
            offset = 0;
          }

          target.y = (target.parent.height - target.height) * 0.5 + offset;
        };

        FUtil.getSpriteFrame = function getSpriteFrame(image) {
          //@ts-ignore
          return image._content.spriteFrame;
        };

        FUtil.setSpriteFrame = function setSpriteFrame(image, sf) {
          //@ts-ignore
          image._content.spriteFrame = sf;
        };

        FUtil.oneEditingDidEnded = function oneEditingDidEnded(input, target, component, handler) {
          if (!input["_editBox"]) return;
          var endedEvent = new EventHandler();
          endedEvent.target = target;
          endedEvent.component = component;
          endedEvent.handler = handler;
          input["_editBox"].editingDidEnded.push(endedEvent);
        };

        FUtil.openKeyboard = function openKeyboard(input) {
          // @ts-ignore
          if (!input._editBox) return; // @ts-ignore

          input._editBox.openKeyboard();
        };

        FUtil.hideKeyboard = function hideKeyboard(input) {
          // @ts-ignore
          if (!input._editBox) return; // @ts-ignore

          input._editBox.blur();
        };

        FUtil.isTweening = function isTweening(target, propType) {
          return GTween.isTweening(target, propType);
        };

        FUtil.setCacheMode = function setCacheMode(target, cacheMode) {
          // @ts-ignore
          if (!target._label) return; // @ts-ignore

          target._label.cacheMode = cacheMode;
        };

        FUtil.setContentWidth = function setContentWidth(target, contentWidth) {
          target.width = contentWidth;
          target.autoSize = AutoSizeType.Height; // @ts-ignore

          target.maxWidth = contentWidth;
        };

        FUtil.updateRenderData = function updateRenderData(input) {
          // @ts-ignore
          if (!input._richText) return input.width; // @ts-ignore

          input._richText._layoutDirty = true; // @ts-ignore

          input._richText._updateRichText(); // @ts-ignore


          return input._richText._labelWidth;
        };

        FUtil.getChilds = function getChilds(parent) {
          return parent["_children"];
        };

        FUtil.getNode = function getNode(parent) {
          return parent["_node"];
        };

        FUtil.hideNode = function hideNode(com, hash) {
          var parent = com.node;
          var nn = parent[hash];
          if (nn) nn.active = false;
        };

        FUtil.createNode = function createNode(com, prefabEmoj, hash) {
          var parent = com.node;
          var nn = parent[hash];

          if (nn) {
            nn.active = true;
            return nn;
          }

          nn = instantiate(prefabEmoj);
          parent.addChild(nn);
          parent[hash] = nn;
          return nn;
        };

        return FUtil;
      }());
      FUtil.Event = new EventEX();

      function isNullOrEmpty(text) {
        if (text === undefined || text === null || text === "" || text.length === 0) {
          return true;
        }

        return false;
      }

      function fixSetAnimation(ske, name, loop) {
        var aniCurrent = ske.animation;

        if (aniCurrent && aniCurrent == name) {
          ske.color = Color.WHITE;
          return;
        }

        if (isNullOrEmpty(aniCurrent)) {
          // @ts-ignore
          ske.defaultAnimation = name;
          ske.loop = loop; // @ts-ignore

          ske._needUpdateSkeltonData = true; // @ts-ignore

          ske._updateSkeletonData();

          ske.color = Color.WHITE;
          return;
        }

        ske.color = Color.WHITE;
        ske.setAnimation(0, name, loop);
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FGraphics.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Graphics;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4b2faZvSvNHxL5GmFCN5V2r", "FGraphics", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FGraphics = exports('FGraphics', (_dec = ccclass('FGraphics'), _dec(_class = /*#__PURE__*/function (_Graphics) {
        _inheritsLoose(FGraphics, _Graphics);

        function FGraphics() {
          return _Graphics.apply(this, arguments) || this;
        }

        var _proto = FGraphics.prototype;

        _proto.updateMaterial = function updateMaterial() {
          this_instanceMaterialType = 1;

          _Graphics.prototype.updateMaterial.call(this);
        };

        return FGraphics;
      }(Graphics)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GObjectPartner.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, warn, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      warn = module.warn;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "af1b025D5dGGrs41fDhAeAS", "GObjectPartner", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var Event = function Event() {};

      Event.TOUCH_BEGIN = "fui_touch_begin";
      Event.TOUCH_MOVE = "fui_touch_move";
      Event.TOUCH_END = "fui_touch_end";
      Event.CLICK = "fui_click";
      Event.ROLL_OVER = "fui_roll_over";
      Event.ROLL_OUT = "fui_roll_out";
      Event.MOUSE_WHEEL = "fui_mouse_wheel";
      Event.DISPLAY = "fui_display";
      Event.UNDISPLAY = "fui_undisplay";
      Event.GEAR_STOP = "fui_gear_stop";
      Event.LINK = "fui_text_link";
      Event.Submit = "editing-return";
      Event.TEXT_CHANGE = "text-changed";
      Event.STATUS_CHANGED = "fui_status_changed";
      Event.XY_CHANGED = "fui_xy_changed";
      Event.SIZE_CHANGED = "fui_size_changed";
      Event.SIZE_DELAY_CHANGE = "fui_size_delay_change";
      Event.DRAG_START = "fui_drag_start";
      Event.DRAG_MOVE = "fui_drag_move";
      Event.DRAG_END = "fui_drag_end";
      Event.DROP = "fui_drop";
      Event.SCROLL = "fui_scroll";
      Event.SCROLL_END = "fui_scroll_end";
      Event.PULL_DOWN_RELEASE = "fui_pull_down_release";
      Event.PULL_UP_RELEASE = "fui_pull_up_release";
      Event.CLICK_ITEM = "fui_click_item";
      var GObjectPartner = exports('GObjectPartner', (_dec = ccclass('GObjectPartner'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GObjectPartner, _Component);

        function GObjectPartner() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._emitDisplayEvents = void 0;
          return _this;
        }

        var _proto = GObjectPartner.prototype;

        _proto.callLater = function callLater(callback, delay) {
          if (!director.getScheduler().isScheduled(callback, this)) this.scheduleOnce(callback, delay);
        };

        _proto.onClickLink = function onClickLink(evt, text) {
          this.node.emit(Event.LINK, text, evt);
        };

        _proto.onEnable = function onEnable() {
          if (!this.node["$gobj"]) {
            warn("$gobj not found!");
            return;
          }

          this.node["$gobj"].onEnable();
          if (this._emitDisplayEvents) this.node.emit(Event.DISPLAY);
        };

        _proto.onDisable = function onDisable() {
          if (!this.node["$gobj"]) {
            return;
          }

          this.node["$gobj"].onDisable();
          if (this._emitDisplayEvents) this.node.emit(Event.UNDISPLAY);
        };

        _proto.update = function update(dt) {
          if (!this.node["$gobj"]) {
            return;
          }

          this.node["$gobj"].onUpdate(dt);
        };

        _proto.onDestroy = function onDestroy() {
          if (!this.node["$gobj"]) {
            return;
          }

          this.node["$gobj"].onDestroy();
        };

        return GObjectPartner;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Image1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Sprite, UITransform, Vec2, Component, Node, SpriteFrame, Rect, v3, size;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Vec2 = module.Vec2;
      Component = module.Component;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Rect = module.Rect;
      v3 = module.v3;
      size = module.size;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c2512HOh0RGuYLJz8ksotQW", "Image1", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FillMethod = exports('FillMethod', /*#__PURE__*/function (FillMethod) {
        FillMethod[FillMethod["None"] = 0] = "None";
        FillMethod[FillMethod["Horizontal"] = 1] = "Horizontal";
        FillMethod[FillMethod["Vertical"] = 2] = "Vertical";
        FillMethod[FillMethod["Radial90"] = 3] = "Radial90";
        FillMethod[FillMethod["Radial180"] = 4] = "Radial180";
        FillMethod[FillMethod["Radial360"] = 5] = "Radial360";
        return FillMethod;
      }({}));
      var FillOrigin = exports('FillOrigin', /*#__PURE__*/function (FillOrigin) {
        FillOrigin[FillOrigin["Top"] = 0] = "Top";
        FillOrigin[FillOrigin["Bottom"] = 1] = "Bottom";
        FillOrigin[FillOrigin["Left"] = 2] = "Left";
        FillOrigin[FillOrigin["Right"] = 3] = "Right";
        return FillOrigin;
      }({}));
      var FlipType = exports('FlipType', /*#__PURE__*/function (FlipType) {
        FlipType[FlipType["None"] = 0] = "None";
        FlipType[FlipType["Horizontal"] = 1] = "Horizontal";
        FlipType[FlipType["Vertical"] = 2] = "Vertical";
        FlipType[FlipType["Both"] = 3] = "Both";
        return FlipType;
      }({}));

      function sliceSpriteFrame(node, rawSF) {
        if (!rawSF || !rawSF.insetLeft && !rawSF.insetRight && !rawSF.insetTop && !rawSF.insetBottom) {
          return null;
        }

        var sizeNode = node._uiProps.uiTransformComp.contentSize;
        var ap = node._uiProps.uiTransformComp.anchorPoint;
        var rect = rawSF.rect;
        var rWidth = rect.width;
        var rHeight = rect.height;
        var left = rawSF.insetLeft,
            right = rawSF.insetRight,
            top = rawSF.insetTop,
            bot = rawSF.insetBottom;
        var cW = rWidth - left - right;
        var cH = rHeight - top - bot;
        var left0 = rect.x;
        var left1 = left0 + left;
        var left2 = left1 + cW;
        var top0 = rect.y;
        var top1 = top0 + bot;
        var top2 = top1 + cH; //

        var rL = left;
        var rR = right;

        if (sizeNode.width < left + right) {
          var sW = sizeNode.width / (left + right);
          rL *= sW;
          rR *= sW;
        }

        var rT = top;
        var rB = bot;

        if (sizeNode.height < top + bot) {
          var sH = sizeNode.height / (top + bot);
          rT *= sH;
          rB *= sH;
        }

        rL = Math.round(rL);
        rR = Math.round(rR);
        rT = Math.round(rT);
        rB = Math.round(rB);
        var cWW = Math.round(sizeNode.width - rL - rR);
        var cHH = Math.round(sizeNode.height - rT - rB);
        var x0 = -Math.abs(ap.x) * sizeNode.width;
        var x1 = x0 + rL;
        var x2 = x1 + cWW;
        var y0 = Math.abs(1 - ap.y) * sizeNode.height - rT;
        var y1 = y0 - cHH;
        var y2 = y1 - rB;
        var rects = [// Row 1
        [new Rect(left0, top0, left, top), v3(x0, y0, 0), size(rL, rT)], [new Rect(left1, top0, cW, top), v3(x1, y0, 0), size(cWW, rT)], [new Rect(left2, top0, right, top), v3(x2, y0, 0), size(rR, rT)], // Row 2
        [new Rect(left0, top1, left, cH), v3(x0, y1, 0), size(rL, cHH)], [new Rect(left1, top1, cW, cH), v3(x1, y1, 0), size(cWW, cHH)], [new Rect(left2, top1, right, cH), v3(x2, y1, 0), size(rR, cHH)], // Row 3
        [new Rect(left0, top2, left, bot), v3(x0, y2, 0), size(rL, rB)], [new Rect(left1, top2, cW, bot), v3(x1, y2, 0), size(cWW, rB)], [new Rect(left2, top2, right, bot), v3(x2, y2, 0), size(rR, rB)]];
        return rects;
      }

      function createFixSlice(sprite) {
        var node = sprite.node;
        var holder = [];

        for (var idx = 0; idx < 9; idx++) {
          var n = new Node("" + idx);
          n.layer = node.layer;
          node.addChild(n);
          var tf = n.addComponent(UITransform);
          var s = n.addComponent(Sprite);
          var sf = new SpriteFrame();
          s.spriteFrame = sf;
          holder.push({
            n: n,
            tf: tf,
            s: s,
            sf: sf
          });
        }

        sprite._canRender = function () {
          return false;
        };

        sprite._render = function (render) {};

        function refresh() {
          var rawSF = sprite.spriteFrame;
          var sfs = sliceSpriteFrame(node, rawSF);
          if (!sfs) return;

          for (var _idx = 0; _idx < sfs.length; _idx++) {
            var o = sfs[_idx];
            var rect = o[0];
            var pos = o[1];
            var _size = o[2];
            var _holder$_idx = holder[_idx],
                _n = _holder$_idx.n,
                _tf = _holder$_idx.tf,
                _s = _holder$_idx.s,
                _sf = _holder$_idx.sf;

            _tf.setAnchorPoint(Vec2.ZERO);

            _tf.setContentSize(_size);

            _n.position = pos; // @ts-ignore

            _sf._originalSize.width = rect.width; // @ts-ignore

            _sf._originalSize.height = rect.height; // sf.rotated = rawSF.rotated;
            // @ts-ignore

            _sf._texture = rawSF._texture;
            _sf.rect = rect;
            _s.color = sprite.color;
          }
        }

        refresh(); // @ts-ignore

        sprite._nodeStateChange = function (transformType) {
          refresh();
        }; // @ts-ignore


        sprite._colorDirty = function () {
          refresh();
        };
      }

      var Image1 = exports('Image1', (_dec = ccclass('Image1'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Image1, _Component);

        function Image1() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._flip = FlipType.None;
          _this._fillMethod = FillMethod.None;
          _this._fillOrigin = FillOrigin.Left;
          _this._fillAmount = 0;
          _this._fillClockwise = void 0;
          _this._sprite = null;
          _this._initSlice = false;
          return _this;
        }

        var _proto = Image1.prototype;

        _proto.checkInitSlide = function checkInitSlide(spriteFrame) {
          if (!Image1.UseCustomSliced) return;
          if (this._initSlice) return;
          if (this.type != Sprite.Type.SLICED) return; // if (!this.node.activeInHierarchy) return;

          this._initSlice = true;
          createFixSlice(this.sprite);
        } // _canRender = () => {
        //     if (this._initSlice) {
        //         return false;
        //     }
        //     return super._canRender();
        // }
        // _render(render) {
        //     if (this._initSlice) {
        //         return;
        //     }
        //     super._render(render);
        // }
        // protected _flushAssembler () {
        //     // if (this._initSlice) return;
        //     const assembler = Sprite.Assembler.getAssembler(this);
        //     if (this._assembler !== assembler) {
        //         if (this._assembler) { 
        //             this.destroyRenderData();
        //         }
        //         this._assembler = assembler;
        //     }
        //     if (!this.renderData) {
        //         if (this._assembler && this._assembler.createData) {
        //             this._renderData = this._assembler.createData(this);
        //             this.renderData!.material = this.getRenderMaterial(0);
        //             this.markForUpdateRenderData();
        //             if (this.spriteFrame) {
        //                 this._assembler.updateUVs(this);
        //             }
        //             this._updateColor();
        //         }
        //     }
        //     if (Image1.UseCustomSliced && this._type == Sprite.Type.SLICED) {
        //         this.checkInitSlide();
        //     }
        // }
        ;

        _proto.setupFill = function setupFill() {
          if (this._fillMethod == FillMethod.Horizontal) {
            this._fillClockwise = this._fillOrigin == FillOrigin.Right || this._fillOrigin == FillOrigin.Bottom;
            this.sprite.fillStart = this._fillClockwise ? 1 : 0;
          } else if (this._fillMethod == FillMethod.Vertical) {
            this._fillClockwise = this._fillOrigin == FillOrigin.Left || this._fillOrigin == FillOrigin.Top;
            this.sprite.fillStart = this._fillClockwise ? 1 : 0;
          } else {
            switch (this._fillOrigin) {
              case FillOrigin.Right:
                this.fillOrigin = 0;
                break;

              case FillOrigin.Top:
                this.sprite.fillStart = 0.25;
                break;

              case FillOrigin.Left:
                this.sprite.fillStart = 0.5;
                break;

              case FillOrigin.Bottom:
                this.sprite.fillStart = 0.75;
                break;
            }
          }
        } // add
        ;

        _createClass(Image1, [{
          key: "sprite",
          get: // updateMaterial() {
          //     if (this.getRenderMaterial(0)) {
          //         return;
          //     }
          //     super.updateMaterial();
          // }
          function get() {
            if (!this._sprite) {
              this._sprite = this.node.getComponent(Sprite);

              if (!this._sprite) {
                this._sprite = this.node.addComponent(Sprite);
              }
            }

            return this._sprite;
          }
        }, {
          key: "spriteFrame",
          get: // get type () {
          //     return this._type;
          // }
          // set type (value) {
          //     this._type = value;
          //     // if (!Image1.UseCustomSliced) { 
          //     //     this._type = value;
          //     //     return;
          //     // }
          //     this.checkInitSlide();
          // }
          function get() {
            return this.sprite.spriteFrame;
          },
          set: function set(value) {
            if (this._initSlice) return;
            this.sprite.spriteFrame = value;
            this.checkInitSlide(value);
          }
        }, {
          key: "flip",
          get: function get() {
            return this._flip;
          },
          set: function set(value) {
            if (this._flip != value) {
              this._flip = value;
              var sx = 1,
                  sy = 1;
              if (this._flip == FlipType.Horizontal || this._flip == FlipType.Both) sx = -1;
              if (this._flip == FlipType.Vertical || this._flip == FlipType.Both) sy = -1;

              if (sx != 1 || sy != 1) {
                var uiTrans = this.node.getComponent(UITransform);
                uiTrans.setAnchorPoint(0.5, 0.5);
              }

              this.node.setScale(sx, sy);
            }
          }
        }, {
          key: "fillMethod",
          get: function get() {
            return this._fillMethod;
          },
          set: function set(value) {
            if (this._fillMethod != value) {
              this._fillMethod = value;

              if (this._fillMethod != 0) {
                this.sprite.type = Sprite.Type.FILLED;
                if (this._fillMethod <= 3) this.sprite.fillType = this._fillMethod - 1;else this.sprite.fillType = Sprite.FillType.RADIAL;
                this.sprite.fillCenter = new Vec2(0.5, 0.5);
                this.setupFill();
              } else {
                this.sprite.type = Sprite.Type.SIMPLE;
              }
            }
          }
        }, {
          key: "fillOrigin",
          get: function get() {
            return this._fillOrigin;
          },
          set: function set(value) {
            if (this._fillOrigin != value) {
              this._fillOrigin = value;
              if (this._fillMethod != 0) this.setupFill();
            }
          }
        }, {
          key: "fillClockwise",
          get: function get() {
            return this._fillClockwise;
          },
          set: function set(value) {
            if (this._fillClockwise != value) {
              this._fillClockwise = value;
              if (this._fillMethod != 0) this.setupFill();
            }
          }
        }, {
          key: "fillAmount",
          get: function get() {
            return this._fillAmount;
          },
          set: function set(value) {
            if (this._fillAmount != value) {
              this._fillAmount = value;

              if (this._fillMethod != 0) {
                if (this._fillClockwise) this.sprite.fillRange = -this._fillAmount;else this.sprite.fillRange = this._fillAmount;
              }
            }
          }
        }, {
          key: "spriteAtlas",
          get: function get() {
            return this.sprite.spriteAtlas;
          },
          set: function set(value) {
            this.sprite.spriteAtlas = value;
          }
        }, {
          key: "type",
          get: function get() {
            return this.sprite.type;
          },
          set: function set(value) {
            // if (value == Sprite.Type.SIMPLE || value == Sprite.Type.SLICED) {
            //     this.sprite.type = value;
            // }
            this.sprite.type = value; // this.sprite.type = Sprite.Type.SIMPLE;
          }
        }, {
          key: "fillType",
          get: function get() {
            return this.sprite.fillType;
          },
          set: function set(value) {
            this.sprite.fillType = value;
          }
        }, {
          key: "fillCenter",
          get: function get() {
            return this.sprite.fillCenter;
          },
          set: function set(value) {
            this.sprite.fillCenter = value;
          }
        }, {
          key: "fillStart",
          get: function get() {
            return this.sprite.fillStart;
          },
          set: function set(value) {
            this.sprite.fillStart = value;
          }
        }, {
          key: "fillRange",
          get: function get() {
            return this.sprite.fillRange;
          },
          set: function set(value) {
            this.sprite.fillRange = value;
          }
        }, {
          key: "trim",
          get: function get() {
            return this.sprite.trim;
          },
          set: function set(value) {
            this.sprite.trim = value;
          }
        }, {
          key: "grayscale",
          get: function get() {
            return this.sprite.grayscale;
          },
          set: function set(value) {
            this.sprite.grayscale = value;
          }
        }, {
          key: "sizeMode",
          get: function get() {
            return this.sprite.sizeMode;
          },
          set: function set(value) {
            this.sprite.sizeMode = value;
          }
        }, {
          key: "color",
          get: function get() {
            return this.sprite.color;
          },
          set: function set(value) {
            this.sprite.color = value;
          } // get spriteFrame () {
          //     return this.sprite.spriteFrame;
          // }
          // set spriteFrame (value) {
          //     this.sprite.spriteFrame = value;
          // }

        }]);

        return Image1;
      }(Component), _class2.UseCustomSliced = true, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./debug-view-runtime-control.ts', './FGraphics.ts', './FaryguiConstant.ts', './FaryguiImport.ts', './FaryguiInput.ts', './FaryguiListEx.ts', './FaryguiRichText.ts', './FaryguiSrc.ts', './FaryguiUtil.ts', './GObjectPartner.ts', './Image1.ts', './MovieClip.ts', './Sprite1.ts', './SbLoader.ts', './StaticBatch.ts', './SbPopupBetSuccess.ts', './SbPopupCalculatorBet.ts', './TestScript.ts', './TestScript2.ts', './SbHeaderUI.ts', './SbMenuLeft.ts', './SbMenuTop.ts', './SbTabItem.ts', './SbUITitle.ts', './SbUserInfo.ts', './SbGamePortraitComp.ts', './SbChatSocketHandle.ts', './SbGameHTTPManager.ts', './SbWebSocketConnecter.ts', './SbWebSocketHandle.ts', './SbBase64.ts', './SbBridge.ts', './SbCommonPrefabsManager.ts', './SbNodePoolManager.ts', './SbPrefabsManager.ts', './SbQueue.ts', './SbSkinActive.ts', './SbSkinButtonTransition.ts', './SbSkinCalendar.ts', './SbSkinEditbox.ts', './SbSkinFont.ts', './SbSkinListColor.ts', './SbSkinListSprite.ts', './SbSkinLoginBg.ts', './SbSkinResultHistory.ts', './SbSkinSprite.ts', './SbSoundsManager.ts', './SbUtils.ts', './SbGameUtil.ts', './SbStringUtil.ts', './SbChatCell.ts', './SbChatController.ts', './SbItemChatTicket.ts', './SbItemTicketBetInfo.ts', './SbQuickChatController.ts', './SbLoadingNode.ts', './SbLoadingNodeMini.ts', './SbLoadingUI.ts', './SbRotateObject.ts', './SbPopup1Button.ts', './SbPopup2Button.ts', './SbPopupBase.ts', './SbPopupMessageUtil.ts', './SBHideNodeOutOfView.ts', './SBUIMenuButton.ts', './SbAnimFlash.ts', './SbCalendar.ts', './SbCalendarDay.ts', './SbEmptyInfoComp.ts', './SbNodeColorHelper.ts', './SbNotchManager.ts', './SbProgressBar.ts', './SbProgressCompare2Number.ts', './SbRepeatFadeInOut.ts', './SbRepeatMove.ts', './SbShowHideWithPlatform.ts', './SbSkinProperty.ts', './SbSummaryEvent.ts', './SbToggleTwoNode.ts', './SbTooltips.ts', './SbUIComboBox.ts', './SbUIComboboxItem.ts', './SbUIDropdown.ts', './SbUIMenu.ts', './SbUISafeArea.ts', './SbItemInjury.ts', './SbItemSubPlayer.ts', './SbItemSubstitutions.ts', './SbPlayer.ts', './SbTabFormation.ts', './SbTabStatistic.ts', './SbTabTimeline.ts', './SbTypeDefine.ts', './SbContainerOddsCorrectScore.ts', './SbDefine.ts', './SbDisplayMatchInfo.ts', './SbDisplayNumMatchFavorite.ts', './SbFootballEventDataManager.ts', './SbLeague.ts', './SbMarket.ts', './SbMarket1X2.ts', './SbMarketAsianHandicap.ts', './SbMarketBooking1X2.ts', './SbMarketBookingHandicap.ts', './SbMarketBookingOverUnder.ts', './SbMarketCorner1X2.ts', './SbMarketCornerHandicap.ts', './SbMarketCornerOverUnder.ts', './SbMarketCorrectScore.ts', './SbMarketCorrectScoreExtra.ts', './SbMarketDoubleChance.ts', './SbMarketDrawNoBet.ts', './SbMarketOddOrEven.ts', './SbMarketTotalScore.ts', './SbMarketUO.ts', './SbMatch.ts', './SbMatchFavorite.ts', './SbOdds.ts', './SbOdds1X2.ts', './SbOddsAsianHandicap.ts', './SbOddsBooking1X2.ts', './SbOddsBookingHandicap.ts', './SbOddsBookingOverUnder.ts', './SbOddsCorner1X2.ts', './SbOddsCornerHandicap.ts', './SbOddsCornerOverUnder.ts', './SbOddsCorrectScore.ts', './SbOddsDoubleChance.ts', './SbOddsDrawNoBet.ts', './SbOddsNextGoal.ts', './SbOddsOU.ts', './SbOddsOddOrEven.ts', './SbOddsTotalScore.ts', './SbItemBetHistory.ts', './SbPopupBetHistory.ts', './SbItemBetSlip.ts', './SbItemMiniBetSlip.ts', './SbPopupBetSlip.ts', './SbPopupMiniBetSlip.ts', './SBWatchVideoAndInfoDetailt.ts', './SbItemHighlight.ts', './SbItemVideoLivestream.ts', './SbLive.ts', './SbLivestreamUtils.ts', './SbTabHighlight.ts', './SbTabLiveStream.ts', './SbVideoPlayer.ts', './SBUIMenuButtonSeason.ts', './SbItemMatchSchedule.ts', './SbMatchSchedule.ts', './SbTabMatchStandings.ts', './SbTabSchedule.ts', './SbParlayBetBadge.ts', './SbParlayBetManager.ts', './SbCommonGroupMatchDetail.ts', './SbFootballBettingController.ts', './SbFootballBettingDetails.ts', './SbFootballListLivestreamHighlight.ts', './SbG1Scene.ts', './SbLoginScene.ts', './SplashSceneSB.ts', './SbItemSearch.ts', './SbItemSearchLeague.ts', './SbItemSearchMatch.ts', './SbPopupSearch.ts', './SbPopupSetting.ts', './SbItemStandings.ts', './SbStandings.ts', './SbSportManager.ts', './SbLocalizationComp.ts', './SbLocalizationManager.ts', './SbConfigManager.ts', './AnimFlash.ts', './SbTesting.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/MovieClip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Image1.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Sprite, Image1;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
    }, function (module) {
      Image1 = module.Image1;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ea521FAVZRPYKDwQRWoBzOA", "MovieClip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MovieClip = exports('MovieClip', (_dec = ccclass('MovieClip'), _dec(_class = /*#__PURE__*/function (_Image) {
        _inheritsLoose(MovieClip, _Image);

        function MovieClip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Image.call.apply(_Image, [this].concat(args)) || this;
          _this.interval = 0;
          _this.swing = false;
          _this.repeatDelay = 0;
          _this.timeScale = 1;
          _this._playing = true;
          _this._frameCount = 0;
          _this._frames = void 0;
          _this._frame = 0;
          _this._start = 0;
          _this._end = 0;
          _this._times = 0;
          _this._endAt = 0;
          _this._status = 0; //0-none, 1-next loop, 2-ending, 3-ended

          _this._callback = void 0;
          _this._smoothing = true;
          _this._frameElapsed = 0; //当前帧延迟

          _this._reversed = false;
          _this._repeatedCount = 0;
          return _this;
        }

        var _proto = MovieClip.prototype;

        _proto.rewind = function rewind() {
          this._frame = 0;
          this._frameElapsed = 0;
          this._reversed = false;
          this._repeatedCount = 0;
          this.drawFrame();
        };

        _proto.syncStatus = function syncStatus(anotherMc) {
          this._frame = anotherMc._frame;
          this._frameElapsed = anotherMc._frameElapsed;
          this._reversed = anotherMc._reversed;
          this._repeatedCount = anotherMc._repeatedCount;
          this.drawFrame();
        };

        _proto.advance = function advance(timeInSeconds) {
          var beginFrame = this._frame;
          var beginReversed = this._reversed;
          var backupTime = timeInSeconds;

          while (true) {
            var tt = this.interval + this._frames[this._frame].addDelay;
            if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;

            if (timeInSeconds < tt) {
              this._frameElapsed = 0;
              break;
            }

            timeInSeconds -= tt;

            if (this.swing) {
              if (this._reversed) {
                this._frame--;

                if (this._frame <= 0) {
                  this._frame = 0;
                  this._repeatedCount++;
                  this._reversed = !this._reversed;
                }
              } else {
                this._frame++;

                if (this._frame > this._frameCount - 1) {
                  this._frame = Math.max(0, this._frameCount - 2);
                  this._repeatedCount++;
                  this._reversed = !this._reversed;
                }
              }
            } else {
              this._frame++;

              if (this._frame > this._frameCount - 1) {
                this._frame = 0;
                this._repeatedCount++;
              }
            }

            if (this._frame == beginFrame && this._reversed == beginReversed) //走了一轮了
              {
                var roundTime = backupTime - timeInSeconds; //这就是一轮需要的时间

                timeInSeconds -= Math.floor(timeInSeconds / roundTime) * roundTime; //跳过
              }
          }

          this.drawFrame();
        } //从start帧开始，播放到end帧（-1表示结尾），重复times次（0表示无限循环），循环结束后，停止在endAt帧（-1表示参数end）
        ;

        _proto.setPlaySettings = function setPlaySettings(start, end, times, endAt, endCallback) {
          if (start == undefined) start = 0;
          if (end == undefined) end = -1;
          if (times == undefined) times = 0;
          if (endAt == undefined) endAt = -1;
          this._start = start;
          this._end = end;
          if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
          this._times = times;
          this._endAt = endAt;
          if (this._endAt == -1) this._endAt = this._end;
          this._status = 0;
          this._callback = endCallback;
          this.frame = start;
        };

        _proto.update = function update(dt) {
          if (!this._playing || this._frameCount == 0 || this._status == 3) return;
          if (this.timeScale != 1) dt *= this.timeScale;
          this._frameElapsed += dt;
          var tt = this.interval + this._frames[this._frame].addDelay;
          if (this._frame == 0 && this._repeatedCount > 0) tt += this.repeatDelay;
          if (this._frameElapsed < tt) return;
          this._frameElapsed -= tt;
          if (this._frameElapsed > this.interval) this._frameElapsed = this.interval;

          if (this.swing) {
            if (this._reversed) {
              this._frame--;

              if (this._frame <= 0) {
                this._frame = 0;
                this._repeatedCount++;
                this._reversed = !this._reversed;
              }
            } else {
              this._frame++;

              if (this._frame > this._frameCount - 1) {
                this._frame = Math.max(0, this._frameCount - 2);
                this._repeatedCount++;
                this._reversed = !this._reversed;
              }
            }
          } else {
            this._frame++;

            if (this._frame > this._frameCount - 1) {
              this._frame = 0;
              this._repeatedCount++;
            }
          }

          if (this._status == 1) //new loop
            {
              this._frame = this._start;
              this._frameElapsed = 0;
              this._status = 0;
            } else if (this._status == 2) //ending
            {
              this._frame = this._endAt;
              this._frameElapsed = 0;
              this._status = 3; //ended
              //play end

              if (this._callback != null) {
                var callback = this._callback;
                this._callback = null;
                callback();
              }
            } else {
            if (this._frame == this._end) {
              if (this._times > 0) {
                this._times--;
                if (this._times == 0) this._status = 2; //ending
                else this._status = 1; //new loop
              } else if (this._start != 0) this._status = 1; //new loop

            }
          }

          this.drawFrame();
        };

        _proto.drawFrame = function drawFrame() {
          if (this._frameCount > 0 && this._frame < this._frames.length) {
            var frame = this._frames[this._frame];

            if (this.spriteFrame === frame.texture) {
              return;
            }

            this.spriteFrame = frame.texture;
          }
        };

        _createClass(MovieClip, [{
          key: "frames",
          get: function get() {
            return this._frames;
          },
          set: function set(value) {
            this._frames = value;

            if (this._frames) {
              this._frameCount = this._frames.length;
              if (this._end == -1 || this._end > this._frameCount - 1) this._end = this._frameCount - 1;
              if (this._endAt == -1 || this._endAt > this._frameCount - 1) this._endAt = this._frameCount - 1;
              if (this._frame < 0 || this._frame > this._frameCount - 1) this._frame = this._frameCount - 1;
              this.type = Sprite.Type.SIMPLE;
              this.drawFrame();
              this._frameElapsed = 0;
              this._repeatedCount = 0;
              this._reversed = false;
            } else {
              this._frameCount = 0;
            }
          }
        }, {
          key: "frameCount",
          get: function get() {
            return this._frameCount;
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(value) {
            if (this._frame != value) {
              if (this._frames && value >= this._frameCount) value = this._frameCount - 1;
              this._frame = value;
              this._frameElapsed = 0;
              this.drawFrame();
            }
          }
        }, {
          key: "playing",
          get: function get() {
            return this._playing;
          },
          set: function set(value) {
            if (this._playing != value) {
              this._playing = value;
            }
          }
        }, {
          key: "smoothing",
          get: function get() {
            return this._smoothing;
          },
          set: function set(value) {
            this._smoothing = value;
          }
        }]);

        return MovieClip;
      }(Image1)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbAnimFlash.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, tween, UIOpacity, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "9f93f08yiBLhoKLDzkfa26k", "SbAnimFlash", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbAnimFlash = exports('default', (_dec = ccclass('SbAnimFlash'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbAnimFlash, _Component);

        function SbAnimFlash() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeFlash", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "opacityTarget", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbAnimFlash.prototype;

        _proto.start = function start() {
          var _this2 = this;

          tween(this.node.getComponent(UIOpacity)).call(function () {
            _this2.node.getComponent(UIOpacity).opacity = 0;
          }).delay(this.timeFlash).call(function () {
            _this2.node.getComponent(UIOpacity).opacity = _this2.opacityTarget;
          }).delay(this.timeFlash).union().repeatForever().start();
        };

        return SbAnimFlash;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeFlash", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.2;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "opacityTarget", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 255 * 0.3;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbBase64.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5e9dbhBmMpPAYFcNoC613Ck", "SbBase64", undefined);

      var SbBase64 = exports('default', /*#__PURE__*/function () {
        function SbBase64() {}

        SbBase64.encode = function encode(input) {
          var output = "";
          var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
          var i = 0;
          input = SbBase64._utf8_encode(input);

          while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
            enc3 = (chr2 & 15) << 2 | chr3 >> 6;
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }

            output = output + SbBase64.keyStr.charAt(enc1) + SbBase64.keyStr.charAt(enc2) + SbBase64.keyStr.charAt(enc3) + SbBase64.keyStr.charAt(enc4);
          }

          return output;
        };

        SbBase64.decode = function decode(input) {
          var output = "";
          var chr1, chr2, chr3;
          var enc1, enc2, enc3, enc4;
          var i = 0;
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

          while (i < input.length) {
            enc1 = SbBase64.keyStr.indexOf(input.charAt(i++));
            enc2 = SbBase64.keyStr.indexOf(input.charAt(i++));
            enc3 = SbBase64.keyStr.indexOf(input.charAt(i++));
            enc4 = SbBase64.keyStr.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
            }

            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
            }
          }

          output = SbBase64._utf8_decode(output);
          return output;
        };

        SbBase64._utf8_encode = function _utf8_encode(string) {
          string = string.replace(/\r\n/g, "\n");
          var utftext = "";

          for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);

            if (c < 128) {
              utftext += String.fromCharCode(c);
            } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode(c >> 6 | 192);
              utftext += String.fromCharCode(c & 63 | 128);
            } else {
              utftext += String.fromCharCode(c >> 12 | 224);
              utftext += String.fromCharCode(c >> 6 & 63 | 128);
              utftext += String.fromCharCode(c & 63 | 128);
            }
          }

          return utftext;
        };

        SbBase64._utf8_decode = function _utf8_decode(utftext) {
          var string = "";
          var i = 0;
          var c,
              c3,
              c2 = 0;

          while (i < utftext.length) {
            c = utftext.charCodeAt(i);

            if (c < 128) {
              string += String.fromCharCode(c);
              i++;
            } else if (c > 191 && c < 224) {
              c2 = utftext.charCodeAt(i + 1);
              string += String.fromCharCode((c & 31) << 6 | c2 & 63);
              i += 2;
            } else {
              c2 = utftext.charCodeAt(i + 1);
              c3 = utftext.charCodeAt(i + 2);
              string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
              i += 3;
            }
          }

          return string;
        };

        SbBase64.isBase64 = function isBase64(input) {
          var base64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
          return base64.test(input);
        };

        return SbBase64;
      }());
      SbBase64.keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbBridge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGamePortraitComp.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, Component, SbGamePortraitComp;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbGamePortraitComp = module.SbGamePortraitComp;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fb014EXa8BB86iMdEDzZNlU", "SbBridge", undefined); //@ts-ignore
      // import { MessageBus } from '../../../GameCore/BaseClass/MessageBus';
      //@ts-ignore
      // import { MessageType } from '../../../GameCore/BaseClass/MessageType';


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GAME_EVENT_OPEN_POPUP = "Bridge_OpenPopup"; //event to emit to open a popup, need to submit a valid popup path

      var SbBridge = exports('SbBridge', (_dec = ccclass('SbBridge'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbBridge, _Component);

        function SbBridge() {
          return _Component.apply(this, arguments) || this;
        }

        SbBridge.BackToGame = function BackToGame() {
          // director.loadScene(SbConfigManager.getInstance().sceneHomeName);
          try {
            window["__Game_Bridge"].backToLobby(true);

            if (SbGamePortraitComp.Instance) {
              SbGamePortraitComp.Instance.OnBackingGame();
            }
          } catch (error) {// SbCommonPrefabsManager.getInstance().ShowMessage("Đã có lỗi xảy ra, vui lòng tải lại trang web hoặc tắt và mở lại trò chơi!");
          }
        };

        SbBridge.IsMusicBoxPlaying = function IsMusicBoxPlaying() {
          var isMusicBoxPlaying = false;

          try {
            isMusicBoxPlaying = !window["__Game_Bridge"].shouldPlayMusic();
          } catch (error) {}

          return isMusicBoxPlaying;
        };

        SbBridge.HandleEventForceLogOut = function HandleEventForceLogOut() {// director.off(W79EVENT_FORCE_LOG_OUT);
          // director.on(W79EVENT_FORCE_LOG_OUT, () => {
          //     SbFootballBettingController.getInstance().Clean();
          //     SbBridge.BackToGame();
          // });
        };

        SbBridge.ShowPopupDeposit = function ShowPopupDeposit() {
          director.emit(GAME_EVENT_OPEN_POPUP, "NapTien", {
            tabIndex: 1
          }); //open PopupNapTien and auto select the second tab
        };

        SbBridge.getUserToken = function getUserToken() {
          try {
            return window["__Game_Bridge"].getUSS();
          } catch (error) {
            return null;
          }
        };

        SbBridge.ChangePositionMiniGameNode = function ChangePositionMiniGameNode() {// MessageBus.instance.dispatchMessage(MessageType.MiniGameNode_UpdatePositionOutArea, [-0.42, 0, -0.27, 0, 0, 720, 1560 - 200, 760]);
        };

        return SbBridge;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbCalendar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbFootballEventDataManager.ts', './SbConfigManager.ts', './SbPopupBase.ts', './SbCalendarDay.ts', './SbUserInfo.ts', './SbSportManager.ts', './SbSoundsManager.ts', './SbUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Label, instantiate, log, UIOpacity, SbFootballEventDataManager, SbConfigManager, SbPopupBase, SbCalendarDay, SbUserInfo, SbTypeTimeMatch, SbSoundsManager, SbUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      instantiate = module.instantiate;
      log = module.log;
      UIOpacity = module.UIOpacity;
    }, function (module) {
      SbFootballEventDataManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbCalendarDay = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "6ceb4sCHp1LnKD4NSQlTc1G", "SbCalendar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbCalendar = exports('default', (_dec = ccclass('SbCalendar'), _dec2 = property(SbCalendarDay), _dec3 = property(Node), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbCalendar, _SbPopupBase);

        function SbCalendar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "calendaDayTemplate", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "calendaDayParent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonPre", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonNex", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTitle", _descriptor5, _assertThisInitialized(_this));

          _this.listDays = [];
          _this.month = 0;
          _this.year = 0;
          _this.daySelected = 0;
          _this.monthSelected = 0;
          _this.yearSelected = 0;
          _this.dayCurrent = 0;
          _this.monthCurrent = 0;
          _this.yearCurrent = 0;
          _this.onRequestDataFinish = null;
          _this.dateSelected = null;
          _this.buttonDaySelected = null;
          _this.buttonDaySelectedLast = null;
          _this.timeRequest = 0;
          _this.dateRequest = null;
          _this.sbCommonPrefabsManager = null;
          _this.sbFootballBettingController = null;
          return _this;
        }

        var _proto = SbCalendar.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager;
        };

        _proto.initFootballBettingController = function initFootballBettingController(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.onLoad = function onLoad() {
          //init
          var now = SbUtils.GetDateCurrentTimeZone();
          this.dayCurrent = now.getDate();
          this.monthCurrent = now.getMonth();
          this.yearCurrent = now.getFullYear();
          this.calendaDayTemplate.SetCallbackSelectDay(this.onCallbackSelectDay.bind(this));
          this.listDays.push(this.calendaDayTemplate);

          for (var i = 1; i < 42; i++) {
            var item = instantiate(this.calendaDayTemplate.node).getComponent(SbCalendarDay);
            item.SetCallbackSelectDay(this.onCallbackSelectDay.bind(this));
            item.node.parent = this.calendaDayParent;
            this.listDays.push(item);
          }
        } //click day
        ;

        _proto.onCallbackSelectDay = function onCallbackSelectDay(dateSelected, buttonDay) {
          this.buttonDaySelected = buttonDay;
          if (this.buttonDaySelectedLast == null) this.buttonDaySelectedLast = this.buttonDaySelected;
          this.dateSelected = dateSelected;
          var yyyy = dateSelected.getFullYear();
          var mm = dateSelected.getMonth() + 1;
          var dd = dateSelected.getDate();
          log(yyyy.toString() + "-" + mm.toString() + "-" + dd.toString());
          var a = dateSelected.getMonth();
          var b = dateSelected.getDate();
          var dateRequest = yyyy + "-" + mm + "-" + dd;
          this.requestDataWithDay(dateRequest);
        };

        _proto.checkNextDay = function checkNextDay(day, month, year) {
          var date = this.getNextDay();
          var yyyy = date.getFullYear();
          var mm = date.getMonth();
          var dd = date.getDate();
          if (dd == day && mm == month && yyyy == year) return true;
          return false;
        };

        _proto.getNextDay = function getNextDay() {
          var date = SbUtils.GetDateCurrentTimeZone();
          date.setDate(date.getDate() + 1);
          return date;
        };

        _proto.SetCallbackOnRequestDataFinish = function SetCallbackOnRequestDataFinish(cb) {
          this.onRequestDataFinish = cb;
        };

        _proto.SetDayWithTypeTimeMatch = function SetDayWithTypeTimeMatch(type) {
          if (type == SbTypeTimeMatch.Today || type == SbTypeTimeMatch.Live) this.daySelected = this.dayCurrent;else if (type == SbTypeTimeMatch.Early) {
            var date = this.getNextDay();
            this.daySelected = date.getDate();
            this.monthSelected = date.getMonth();
            this.yearSelected = date.getFullYear();
          }
        };

        _proto.ShowDateSelected = function ShowDateSelected() {
          var now = SbUtils.GetDateCurrentTimeZone();

          if (SbUserInfo.getInstance().GetTypeTimeMatch() == SbTypeTimeMatch.Today) {
            this.showDate(now.getDate(), now.getMonth(), now.getFullYear());
          } else if (SbUserInfo.getInstance().GetTypeTimeMatch() == SbTypeTimeMatch.Live) {
            this.showDate(now.getDate(), now.getMonth(), now.getFullYear());
          } else if (SbUserInfo.getInstance().GetTypeTimeMatch() == SbTypeTimeMatch.Early) {
            var date = this.getNextDay();
            var yyyy = date.getFullYear();
            var mm = date.getMonth();
            var dd = date.getDate();
            this.showDate(dd, mm, yyyy);
          } else if (SbUserInfo.getInstance().GetTypeTimeMatch() == SbTypeTimeMatch.CustomDate) {
            var _date = SbUserInfo.getInstance().GetTimeMatchCurrent();

            if (_date != null) this.showDate(_date.getDate(), _date.getMonth(), _date.getFullYear());else this.showDate(now.getDate(), now.getMonth(), now.getFullYear());
          }

          this.checkButtonNextPreMonthAvailable();
        };

        _proto.requestDataWithDay = function requestDataWithDay(dateRequest) {
          var now = new Date();
          if (now.getTime() - this.timeRequest < 1000) return;
          this.timeRequest = now.getTime();
          this.sbCommonPrefabsManager.ShowLoadingFullScreen();
          SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.CustomDate, dateRequest, this.onRequestDataSuccess.bind(this), this.onRequestDataFail.bind(this));
        };

        _proto.showDate = function showDate(dd, mm, yyyy) {
          this.daySelected = dd;
          this.month = mm;
          this.year = yyyy;
          this.showDateSelected(); // SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.CustomDate, dateRequest, this.onRequestDataSuccess.bind(this), this.onRequestDataFail.bind(this));
        };

        _proto.onRequestDataSuccess = function onRequestDataSuccess() {
          this.sbCommonPrefabsManager.HideLoadingFullScreen();

          if (SbFootballEventDataManager.getInstance().getListLeagueLength() > 0) {
            // let menu = this.sbCommonPrefabsManager.GetMenuLeft().GetMenuTypeTimeMatch();
            SbUserInfo.getInstance().SetTimeMatchCurrent(this.dateSelected);

            if (this.dateSelected.getMonth() == this.monthCurrent && this.dateSelected.getDate() == this.dayCurrent && this.dateSelected.getFullYear() == this.yearCurrent) {
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Today); // menu.SetIndexButton(1);
              // menu.SetPositionButton(1);
            } // else if (this.checkNextDay(this.dateSelected.getDate(), this.dateSelected.getMonth(), this.dateSelected.getFullYear()))
            //     SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Early);
            else {
                // menu.SetIndexButton(3);
                // menu.SetPositionButton(3);
                SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.CustomDate);
              }

            if (this.onRequestDataFinish != null) {
              this.onRequestDataFinish();
            }

            if (this.buttonDaySelectedLast != null) {
              this.buttonDaySelectedLast.UnSelected();
              this.buttonDaySelectedLast = this.buttonDaySelected;
            }

            if (this.buttonDaySelected != null) this.buttonDaySelected.Selected();
            this.HideNoDetroy();
          } else {
            this.sbCommonPrefabsManager.ShowMessage("Không tìm thấy trận đấu!");
          }

          log("onRequestDataSuccess nè bạn");
        };

        _proto.onRequestDataFail = function onRequestDataFail() {
          this.sbCommonPrefabsManager.HideLoadingFullScreen();
          this.sbCommonPrefabsManager.ShowMessage("Đã có lỗi xảy ra, vui lòng thử lại sau!");
        };

        _proto.showDateSelected = function showDateSelected() {
          this.daySelected = this.daySelected;
          this.monthSelected = this.month;
          this.yearSelected = this.year;
          this.displayCalendar();
        };

        _proto.displayCalendar = function displayCalendar() {
          var firstDate = SbUtils.GetDateCurrentTimeZone();
          this.lbTitle.string = "Tháng " + (this.month + 1) + "/" + this.year;
          firstDate.setFullYear(this.year);
          firstDate.setMonth(this.month);
          firstDate.setDate(1);
          var countDay = 0;
          var dayStartOfWeek = firstDate.getDay() - 1;
          if (dayStartOfWeek < 0) dayStartOfWeek = 6;
          var totalDayInMonth = this.getTotalDaysInMonth(this.month, this.year);

          for (var i = 0; i < this.listDays.length; i++) {
            if (i >= dayStartOfWeek && countDay + 1 <= totalDayInMonth) {
              this.listDays[i].SetDay(countDay, this.month, this.year); //date selected

              if ((i + 1) % 7 == 0 || (i + 2) % 7 == 0) this.listDays[i].SetWeeked();else this.listDays[i].SetNormalDay();

              if (countDay + 1 < this.dayCurrent && this.month == this.monthCurrent && this.year == this.yearCurrent) {
                this.listDays[i].SetPastDay();
              } //show date current


              if (countDay + 1 == this.dayCurrent && this.month == this.monthCurrent && this.year == this.yearCurrent) {
                this.listDays[i].SetToday();
              } //show date selected


              if (countDay + 1 == this.daySelected && this.month == this.monthSelected && this.year == this.yearSelected) {
                this.listDays[i].SetDaySelected();
              }

              countDay++;
            } else {
              this.listDays[i].SetDayDisable();
            }
          }
        };

        _proto.onClickButtonToday = function onClickButtonToday() {
          SbSoundsManager.getInstance().playSfxClick();
          var menu = this.sbCommonPrefabsManager.GetMenuLeft().GetMenuTypeTimeMatch();
          menu.SetIndexButton(1);
          menu.SetPositionButton(1);
          this.sbFootballBettingController.ShowLoading();
          SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Today);
          SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.Today);
          this.HideNoDetroy();
        };

        _proto.onClickButtonEarly = function onClickButtonEarly() {
          SbSoundsManager.getInstance().playSfxClick();
          var menu = this.sbCommonPrefabsManager.GetMenuLeft().GetMenuTypeTimeMatch();
          menu.SetIndexButton(0);
          menu.SetPositionButton(0);
          this.sbFootballBettingController.ShowLoading();
          SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Early);
          SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.Early);
          this.HideNoDetroy();
        };

        _proto.onClickButtonLive = function onClickButtonLive() {
          SbSoundsManager.getInstance().playSfxClick();
          var menu = this.sbCommonPrefabsManager.GetMenuLeft().GetMenuTypeTimeMatch();
          menu.SetIndexButton(2);
          menu.SetPositionButton(2);
          this.sbFootballBettingController.ShowLoading();
          SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
          SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.Live);
          this.HideNoDetroy();
        };

        _proto.onClickButtonTomorow = function onClickButtonTomorow() {
          SbSoundsManager.getInstance().playSfxClick();
          var menu = this.sbCommonPrefabsManager.GetMenuLeft().GetMenuTypeTimeMatch();
          menu.SetIndexButton(3);
          menu.SetPositionButton(3);
          var tomorow = this.getNextDay();
          var dateRequest = tomorow.getFullYear() + "-" + (tomorow.getMonth() + 1) + "-" + tomorow.getDate();
          this.dateSelected = tomorow;
          SbUserInfo.getInstance().SetTimeMatchCurrent(this.dateSelected);
          this.sbCommonPrefabsManager.ShowLoadingFullScreen();
          SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.CustomDate, dateRequest, this.onRequestDataSuccess.bind(this), this.onRequestDataFail.bind(this));
          this.HideNoDetroy();
        };

        _proto.onClickNextMonth = function onClickNextMonth() {
          SbSoundsManager.getInstance().playSfxClick();
          this.month++;
          this.correctDate();
          this.displayCalendar();
          this.checkButtonNextPreMonthAvailable();
        };

        _proto.onClickPrevMonth = function onClickPrevMonth() {
          SbSoundsManager.getInstance().playSfxClick();
          this.month--;
          this.correctDate();
          this.displayCalendar();
          this.checkButtonNextPreMonthAvailable();
        };

        _proto.checkButtonNextPreMonthAvailable = function checkButtonNextPreMonthAvailable() {
          if (this.month - 1 < this.monthCurrent && this.year == this.yearCurrent) {
            this.buttonPre.interactable = false;
            this.buttonPre.node.getComponent(UIOpacity).opacity = 255 * 0.5;
            this.buttonNex.interactable = true;
            this.buttonNex.node.getComponent(UIOpacity).opacity = 255;
          } else {
            this.buttonPre.interactable = true;
            this.buttonPre.node.getComponent(UIOpacity).opacity = 255;
            this.buttonNex.interactable = false;
            this.buttonNex.node.getComponent(UIOpacity).opacity = 255 * 0.5;
          }
        };

        _proto.getTotalDaysInMonth = function getTotalDaysInMonth(month, y) {
          var m = month + 1; // return new Date(y, m, 0).getDate();

          return m === 2 ? y & 3 || !(y % 25) && y & 15 ? 28 : 29 : 30 + (m + (m >> 3) & 1);
        };

        _proto.correctDate = function correctDate() {
          if (this.month >= 12) {
            this.month = 0;
            this.year++;
          } else if (this.month < 0) {
            this.month = 11;
            this.year--;
          }
        };

        return SbCalendar;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "calendaDayTemplate", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "calendaDayParent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonPre", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonNex", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbTitle", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbCalendarDay.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbSoundsManager.ts', './SbUtils.ts', './SbSkinListSprite.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Button, Sprite, Node, Color, UIOpacity, Component, SbConfigManager, SbSoundsManager, SbUtils, SbSkinListSprite;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      Sprite = module.Sprite;
      Node = module.Node;
      Color = module.Color;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbSkinListSprite = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "fe2f0LdEdNOrZI5BqYkOYbT", "SbCalendarDay", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbCalendarDay = exports('default', (_dec = ccclass('SbCalendarDay'), _dec2 = property(Label), _dec3 = property(SbSkinListSprite), _dec4 = property(Button), _dec5 = property(Sprite), _dec6 = property(Node), _dec7 = property(Color), _dec8 = property(Color), _dec9 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbCalendarDay, _Component);

        function SbCalendarDay() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbDay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinListSprFrames", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonDay", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteButton", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeToday", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorSelected", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorWeeked", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorNormalDay", _descriptor8, _assertThisInitialized(_this)); // private dayInMonth = 0;
          // private month = 0;
          // private year = 0;


          _this.isWeeked = false;
          _this.date = SbUtils.GetDateCurrentTimeZone();
          _this.callbackSelectDay = null;
          _this.spriteFrameLast = null;
          return _this;
        }

        var _proto = SbCalendarDay.prototype;

        _proto.start = function start() {};

        _proto.SetDay = function SetDay(day, month, year) {
          this.lbDay.string = (day + 1).toString(); // Init Date by year,month,day

          this.date = new Date(year, month, day + 1);
          var timeZoneAPI = parseFloat(SbUtils.GetTimeZoneOffsetCurrent());
          this.date.setTime(this.date.getTime() + (this.date.getTimezoneOffset() - timeZoneAPI) * 60 * 1000);
        };

        _proto.SetDayDisable = function SetDayDisable() {
          this.setNone();
        };

        _proto.SetWeeked = function SetWeeked() {
          this.setWeeked();
        };

        _proto.SetNormalDay = function SetNormalDay() {
          this.setNormalDay();
        };

        _proto.SetPastDay = function SetPastDay() {
          this.setPastDay();
        };

        _proto.SetToday = function SetToday() {
          this.nodeToday.active = true;
        };

        _proto.SetDaySelected = function SetDaySelected() {
          this.setDaySelected();
        };

        _proto.SetCallbackSelectDay = function SetCallbackSelectDay(cb) {
          this.callbackSelectDay = cb;
        };

        _proto.Selected = function Selected() {
          this.spriteButton.spriteFrame = this.listSpriteFrame[0];
        };

        _proto.UnSelected = function UnSelected() {
          this.spriteButton.spriteFrame = this.spriteFrameLast;
        };

        _proto.setPastDay = function setPastDay() {
          this.lbDay.node.getComponent(UIOpacity).opacity = 255 * 0.5;
        };

        _proto.setDaySelected = function setDaySelected() {
          this.spriteButton.spriteFrame = this.listSpriteFrame[0];
          this.spriteFrameLast = this.spriteButton.spriteFrame;
          this.lbDay.node.active = true;
          this.lbDay.color = this.listColorSelected[SbConfigManager.getInstance().GetSkinCurrent() + 1];
          this.lbDay.node.getComponent(UIOpacity).opacity = 255;
          this.buttonDay.interactable = true;
          this.isWeeked = false;
          this.nodeToday.active = false;
        };

        _proto.setWeeked = function setWeeked() {
          this.spriteButton.spriteFrame = this.listSpriteFrame[1];
          this.spriteFrameLast = this.spriteButton.spriteFrame;
          this.lbDay.node.active = true;
          this.lbDay.color = this.listColorWeeked[SbConfigManager.getInstance().GetSkinCurrent() + 1];
          this.lbDay.node.getComponent(UIOpacity).opacity = 255;
          this.buttonDay.interactable = true;
          this.isWeeked = true;
          this.nodeToday.active = false;
        };

        _proto.setNormalDay = function setNormalDay() {
          this.spriteButton.spriteFrame = this.listSpriteFrame[2];
          this.spriteFrameLast = this.spriteButton.spriteFrame;
          this.lbDay.node.active = true;
          this.lbDay.color = this.listColorNormalDay[SbConfigManager.getInstance().GetSkinCurrent() + 1];
          this.lbDay.node.getComponent(UIOpacity).opacity = 255;
          this.buttonDay.interactable = true;
          this.isWeeked = false;
          this.nodeToday.active = false;
        };

        _proto.setNone = function setNone() {
          this.spriteButton.spriteFrame = this.listSpriteFrame[3];
          this.spriteFrameLast = this.spriteButton.spriteFrame;
          this.lbDay.node.active = false;
          this.buttonDay.interactable = false;
          this.isWeeked = false;
          this.nodeToday.active = false;
        };

        _proto.onClickDay = function onClickDay() {
          SbSoundsManager.getInstance().playSfxClick();
          if (this.lbDay.node.getComponent(UIOpacity).opacity < 255) return;

          if (this.callbackSelectDay != null) {
            this.callbackSelectDay(this.date, this);
          }
        };

        _createClass(SbCalendarDay, [{
          key: "listSpriteFrame",
          get: function get() {
            var result = [];

            if (this.skinListSprFrames) {
              result = this.skinListSprFrames.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbCalendarDay;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbDay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skinListSprFrames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonDay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spriteButton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeToday", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listColorSelected", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listColorWeeked", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listColorNormalDay", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbChatCell.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemChatTicket.ts', './SbSkinListColor.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, UIOpacity, UITransform, Label, Prefab, v3, Vec3, Component, instantiate, SbItemChatTicket, SbSkinListColor, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Label = module.Label;
      Prefab = module.Prefab;
      v3 = module.v3;
      Vec3 = module.Vec3;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      SbItemChatTicket = module.SbItemChatTicket;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "ef38cOtSQFJ/rYyh8lcbmpC", "SbChatCell", undefined);

      var SbChatType = exports('SbChatType', /*#__PURE__*/function (SbChatType) {
        SbChatType[SbChatType["NONE"] = -1] = "NONE";
        SbChatType[SbChatType["MAIN_PLAYER"] = 0] = "MAIN_PLAYER";
        SbChatType[SbChatType["OTHER_PLAYER"] = 1] = "OTHER_PLAYER";
        SbChatType[SbChatType["SYSTEM"] = 2] = "SYSTEM";
        return SbChatType;
      }({}));
      var SbChatCellData = exports('SbChatCellData', function SbChatCellData() {
        this.uid = "";
        this.name = "";
        this.time = 0;
        this.content = "";
        this.param = null;
      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbChatCell = exports('SbChatCell', (_dec = ccclass('SbChatCell'), _dec2 = property(SbSkinListColor), _dec3 = property(SbSkinListColor), _dec4 = property(UIOpacity), _dec5 = property(UITransform), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbChatCell, _Component);

        function SbChatCell() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.HEIGHT = 45;
          _this.EMOTICON_HEIGHT = 70;
          _this.MAX_WIDTH_CELL = 650;
          _this.EMOTICON_POS_Y_UP_SIZE = 25 / 3;
          _this.TICKET_HEIGHT_BONUS = 120;
          _this.SPACE_TEXT = 10;
          _this.TITLE_TICKET_SHARE = '';

          _initializerDefineProperty(_this, "skinColorNames", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinRankNames", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiOpacity", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiTransform", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbContent", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbCalculate", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefTicketShare", _descriptor8, _assertThisInitialized(_this));

          _this.nodeEmotion = null;
          _this.emotionIndex = -1;
          _this.ticketInfo = null;
          return _this;
        }

        var _proto = SbChatCell.prototype;

        _proto.updateName = /*#__PURE__*/function () {
          var _updateName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, type, rank) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (rank === void 0) {
                    rank = -1;
                  }

                  this.lbName.string = name + ":";
                  _context.t0 = type;
                  _context.next = _context.t0 === SbChatType.MAIN_PLAYER ? 5 : _context.t0 === SbChatType.OTHER_PLAYER ? 7 : _context.t0 === SbChatType.SYSTEM ? 9 : 12;
                  break;

                case 5:
                  this.lbName.color = this.nameColors[0];
                  return _context.abrupt("break", 12);

                case 7:
                  if (rank >= 0 && rank < this.rankColors.length) {
                    this.lbName.color = this.rankColors[rank];
                  } else {
                    this.lbName.color = this.nameColors[1];
                  }

                  return _context.abrupt("break", 12);

                case 9:
                  this.lbName.color = this.nameColors[2];
                  this.lbContent.color = this.nameColors[2];
                  return _context.abrupt("break", 12);

                case 12:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function updateName(_x, _x2, _x3) {
            return _updateName.apply(this, arguments);
          }

          return updateName;
        }();

        _proto.updateContent = /*#__PURE__*/function () {
          var _updateContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(content) {
            var namePosX, nameTransform, contentTransform, lengthSpace, str, i;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  namePosX = this.lbName.node.position.x;
                  nameTransform = this.lbName.getComponent(UITransform);
                  contentTransform = this.lbContent.getComponent(UITransform);
                  lengthSpace = Math.round(nameTransform.width / this.spaceCharWidth);
                  str = ' ';

                  for (i = 0; i < lengthSpace; i++) {
                    str += ' ';
                  }

                  _context2.next = 8;
                  return contentTransform.setContentSize(this.MAX_WIDTH_CELL, contentTransform.height);

                case 8:
                  this.lbContent.node.setPosition(namePosX, 0);
                  this.lbContent.string = str + content;

                case 10:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function updateContent(_x4) {
            return _updateContent.apply(this, arguments);
          }

          return updateContent;
        }();

        _proto.updateTicketBet = /*#__PURE__*/function () {
          var _updateTicketBet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(param, controller) {
            var ticketNode, ticketCtr;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.updateContent(this.TITLE_TICKET_SHARE);

                case 2:
                  this.lbCalculate.string = this.lbName.string + " ";
                  this.lbCalculate.updateRenderData(true);
                  this.lbCalculate.getComponent(UITransform).width;
                  this.lbCalculate.string = '';
                  ticketNode = instantiate(this.prefTicketShare);
                  ticketNode.parent = this.node;
                  ticketNode.setPosition(v3(-this.uiTransform.width / 2, 0));
                  ticketCtr = ticketNode.getComponent(SbItemChatTicket);
                  ticketCtr.InitTicketData(param, controller);
                  this.ticketInfo = ticketCtr;

                case 12:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function updateTicketBet(_x5, _x6) {
            return _updateTicketBet.apply(this, arguments);
          }

          return updateTicketBet;
        }();

        _proto.updateUI = function updateUI() {
          var parentHeight = this.lbContent.getComponent(UITransform).height;
          parentHeight = parentHeight < this.HEIGHT ? this.HEIGHT : parentHeight + 12; // Plus Height if emotion or ticketInfo

          if (this.nodeEmotion != null) {
            parentHeight = this.EMOTICON_HEIGHT;
          } else if (this.ticketInfo) {
            parentHeight += this.TICKET_HEIGHT_BONUS;
            var item = this.ticketInfo.node;
            item.setPosition(v3(item.position.x, parentHeight / 2 - item.getComponent(UITransform).height + this.SPACE_TEXT / 2));
          }

          this.uiTransform.setContentSize(this.uiTransform.width, parentHeight);
          var posYLabel = parentHeight / 2 - this.SPACE_TEXT; // Emotion -> LabelName center, else set in Top (anchorY = 1)

          if (this.nodeEmotion) {
            this.lbName.node.setPosition(new Vec3(this.lbName.node.position.x, this.SPACE_TEXT));
          } else {
            this.lbName.node.setPosition(new Vec3(this.lbName.node.position.x, posYLabel));
          }

          this.lbContent.node.setPosition(new Vec3(this.lbContent.node.position.x, posYLabel)); // Item Emotion anchor Y = 0.5

          if (this.nodeEmotion != null) {
            this.nodeEmotion.active = true;
            var usernameWidth = this.lbName.getComponent(UITransform).width;
            var posY = -posYLabel / 2;
            this.nodeEmotion.setPosition(this.lbName.node.position.x + usernameWidth + 40, posY, 0);
          }

          return parentHeight;
        };

        _proto.setOpacity = function setOpacity(value) {
          this.uiOpacity.opacity = value;
        };

        _proto.addEmoticon = function addEmoticon(node, index) {
          this.emotionIndex = index;
          this.nodeEmotion = node;
          this.nodeEmotion.setParent(this.node);
        };

        _proto.removeEmoticon = function removeEmoticon() {
          var temp = this.nodeEmotion;
          this.emotionIndex = -1;
          this.nodeEmotion = null;
          return temp;
        };

        _createClass(SbChatCell, [{
          key: "nameColors",
          get: function get() {
            var result = [];

            if (this.skinColorNames) {
              result = this.skinColorNames.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "rankColors",
          get: function get() {
            var result = [];

            if (this.skinRankNames) {
              result = this.skinRankNames.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "spaceCharWidth",
          get: function get() {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            switch (id) {
              case SbSkinID.Skin1:
                {
                  return 6.81;
                }

              case SbSkinID.Skin2:
                {
                  return 6.81;
                }

              case SbSkinID.Skin3:
                {
                  return 6.25;
                }
            }

            return 8.33;
          }
        }]);

        return SbChatCell;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "skinColorNames", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skinRankNames", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "uiOpacity", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "uiTransform", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbContent", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbCalculate", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "prefTicketShare", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbChatController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbChatCell.ts', './SbQueue.ts', './SbQuickChatController.ts', './SbUtils.ts', './SbSoundsManager.ts', './SbStringUtil.ts', './SbUserInfo.ts', './SbDefine.ts', './SbItemTicketBetInfo.ts', './SbPopupMiniBetSlip.ts', './SbCommonPrefabsManager.ts', './SbConfigManager.ts', './SbSkinListSprite.ts', './SbChatSocketHandle.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, UIOpacity, EditBox, UITransform, ScrollView, Prefab, Node, Button, Label, director, Vec3, tween, instantiate, EventHandler, Sprite, sys, v3, macro, Tween, Component, SbChatCell, SbChatCellData, SbChatType, SbQueue, SbQuickChatController, SbUtils, SbSoundsManager, SbStringUtil, SbUserInfo, EVENT_MESSAGE_FROM_SB, SB_CHAT_CHECK_RESUBSCRIBE, EVENT_MESSAGE_SB, SB_EVENT_CHAT_DO_SHARE, SB_EVENT_HIDE_MINI_BETSLIP, SPORTBOOK, SBChatUseWSType, SPORTBOOK_SKIN1, SbItemTicketBetInfo, SbPopupMiniBetSlip, SbCommonPrefabsManager, SbConfigManager, SbSkinID, SbSkinListSprite, SbChatSocketHandle;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      EditBox = module.EditBox;
      UITransform = module.UITransform;
      ScrollView = module.ScrollView;
      Prefab = module.Prefab;
      Node = module.Node;
      Button = module.Button;
      Label = module.Label;
      director = module.director;
      Vec3 = module.Vec3;
      tween = module.tween;
      instantiate = module.instantiate;
      EventHandler = module.EventHandler;
      Sprite = module.Sprite;
      sys = module.sys;
      v3 = module.v3;
      macro = module.macro;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      SbChatCell = module.SbChatCell;
      SbChatCellData = module.SbChatCellData;
      SbChatType = module.SbChatType;
    }, function (module) {
      SbQueue = module.SbQueue;
    }, function (module) {
      SbQuickChatController = module.SbQuickChatController;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      EVENT_MESSAGE_FROM_SB = module.EVENT_MESSAGE_FROM_SB;
      SB_CHAT_CHECK_RESUBSCRIBE = module.SB_CHAT_CHECK_RESUBSCRIBE;
      EVENT_MESSAGE_SB = module.EVENT_MESSAGE_SB;
      SB_EVENT_CHAT_DO_SHARE = module.SB_EVENT_CHAT_DO_SHARE;
      SB_EVENT_HIDE_MINI_BETSLIP = module.SB_EVENT_HIDE_MINI_BETSLIP;
      SPORTBOOK = module.SPORTBOOK;
      SBChatUseWSType = module.SBChatUseWSType;
      SPORTBOOK_SKIN1 = module.SPORTBOOK_SKIN1;
    }, function (module) {
      SbItemTicketBetInfo = module.SbItemTicketBetInfo;
    }, function (module) {
      SbPopupMiniBetSlip = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbChatSocketHandle = module.SbChatSocketHandle;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _class3;

      cclegacy._RF.push({}, "e8574K9TwpNYqA9AWu4Brji", "SbChatController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbChatController = exports('SbChatController', (_dec = ccclass('SbChatController'), _dec2 = property(UIOpacity), _dec3 = property(EditBox), _dec4 = property(UITransform), _dec5 = property(ScrollView), _dec6 = property(Prefab), _dec7 = property(Node), _dec8 = property(SbSkinListSprite), _dec9 = property(Node), _dec10 = property({
        group: 'Share',
        type: Node
      }), _dec11 = property({
        group: 'Share',
        type: Node
      }), _dec12 = property({
        group: 'Share',
        type: Node
      }), _dec13 = property({
        group: 'Share',
        type: Prefab
      }), _dec14 = property({
        group: 'QuickChat',
        type: Node
      }), _dec15 = property({
        group: 'QuickChat',
        type: Button
      }), _dec16 = property({
        group: 'QuickChat',
        type: [Label]
      }), _dec17 = property({
        group: 'Emoji',
        type: Button
      }), _dec18 = property({
        group: 'Emoji',
        type: Node
      }), _dec19 = property({
        group: 'Emoji',
        type: Node
      }), _dec20 = property({
        group: 'Emoji',
        type: Node
      }), _dec21 = property({
        group: 'Emoji',
        type: Node
      }), _dec22 = property({
        group: 'Emoji',
        type: SbSkinListSprite
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbChatController, _Component);

        function SbChatController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.TRANSITION_TIME = 0.2;
          _this.EMOJI_MAP_CHAR = ":";
          _this.MAX_EMOJI = 24;
          _this.CHAT_HEIGHT_BONUS = 10;

          _initializerDefineProperty(_this, "uiOpacity", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ebChat", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chatPanel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ScrollView", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chatCellPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chatCellPoolLayer", _descriptor6, _assertThisInitialized(_this)); // @property(SpriteFrame)
          // private sprEnableChat: SpriteFrame = null;
          // @property(SpriteFrame)
          // private sprDisableChat: SpriteFrame = null;


          _initializerDefineProperty(_this, "skinButtonSprFrames", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeBlockInputOutside", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "betSlipContent", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "miniBetSlip", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fullInfoLayer", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabItemFullInfo", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quickChatGroup", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "quickChatBtn", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbQuickChats", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emoticonBtn", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listEmoChoosePanel", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollEmoSuggest", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emoticonNodePool", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emoticonTemplate", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinEmoji", _descriptor21, _assertThisInitialized(_this));

          _this.callbackHide = null;
          _this.callbackBeginHide = null;
          _this.limitChatHeight = 0;
          _this.chatPanelHeight = _this.CHAT_HEIGHT_BONUS;
          _this.chatCellUses = new SbQueue();
          _this.chatCellPools = new SbQueue();
          _this.chatButton = null;
          _this.messageSbQueue = [];
          _this.isEmpty = false; // private isOpenKeyboard: boolean = false;

          _this.emoticonSbQueue = [];
          _this.SbQuickChatController = null;
          _this.dataMapingEmo = {};
          _this.miniBetSlipController = null;
          _this.itemTicketFullInfo = null;
          _this.sendChatCalFun = null;
          _this.count = 0;
          _this.isInitChatWSDone = false;
          _this.isInitChatBrandDone = false;
          _this.listChatHistory = []; // Not Use

          _this.allowClickClose = false;
          return _this;
        }

        SbChatController.getInstance = function getInstance() {
          return this._instance;
        };

        SbChatController.SendMsgToServer = function SendMsgToServer(cmd, data) {
          if (data === void 0) {
            data = null;
          } // // Cheat
          // if (cmd == this.enumCMDChat.CHAT || cmd == this.enumCMDChat.CHAT_WITH_PARAM) {
          //     if (typeof data != "object") {
          //         this.getInstance()?.cheatChat(data);
          //     } else {
          //         this.getInstance()?.cheatChatParam(data);
          //     }
          // }


          director.emit(EVENT_MESSAGE_FROM_SB, cmd, data);
        };

        var _proto = SbChatController.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          SbChatController._instance = this;
          this.chatPanel.node.position = new Vec3(0, -this.limitChatHeight / 2);
          this.initDataMapingEmoj();
          this.addEventListener();
          this.init(this.quickChatContent, null);

          this.sendChatCalFun = function (cmd, data) {
            SbChatController.SendMsgToServer(cmd, data);
          };

          this.miniBetSlipController = this.miniBetSlip.getComponent(SbPopupMiniBetSlip);

          if (this.miniBetSlipController) {
            this.miniBetSlipController.init(SbCommonPrefabsManager.getInstance());
            this.miniBetSlipController.SetHeaderPopup(0);

            this.miniBetSlipController.ShareCloseCallback = function () {
              _this2.hidePanelBetTicket();
            };
          }
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this; // Delay 1s then init resubscribe if reconnect


          tween(this.node).delay(1).call(function () {
            director.on(SB_CHAT_CHECK_RESUBSCRIBE, _this3.checkReSubscibeChat, _this3);
          });
          this.resetOldChat();
          this.limitChatHeight = this.ScrollView.getComponent(UITransform).height;

          if (this.isUseWSBrand) {
            SbChatController.SendMsgToServer(this.enumCMDChat.SUBSCRIBE_CHAT);
          } // const cheat = {"cH":[{"uid":"meookh1","tst":1717033027549,"mgs":":13","iB":false,"fu":"meookh1"},{"uid":"aNaoki05","tst":1717037897525,"mgs":":14","iB":false,"fu":"aNaoki05"},{"uid":"MoonMoonn","tst":1717038182048,"mgs":":18","iB":false,"fu":"MoonMoonn"},{"uid":"MoonMoonn","tst":1717038206937,"mgs":"helooo nay ăn j?                 ","iB":false,"fu":"MoonMoonn"},{"uid":"MoonMoonn","tst":1717038226047,"mgs":"Nằm Xỉu kiểu gì cũng ăn","iB":false,"fu":"MoonMoonn"},{"uid":"aNaoki05","tst":1717038334224,"mgs":"Naoki05","iB":false,"fu":"aNaoki05"},{"uid":"MoonMoonn","tst":1717044425885,"mgs":"Nằm trên lênh đênh xa đảo","iB":false,"fu":"MoonMoonn"},{"uid":"aNaoki05","tst":1717044435712,"mgs":"Xỉu góc lên thuyền nào anh em","iB":false,"fu":"aNaoki05"},{"uid":"aNaoki05","tst":1717044453407,"mgs":":14","iB":false,"fu":"aNaoki05"},{"uid":"aNaoki05","tst":1717044505942,"mgs":"Naoki05","iB":false,"fu":"aNaoki05"},{"uid":"vun2012","tst":1717049023672,"mgs":"win rồi","iB":false,"fu":"vun2012"},{"uid":"Pammie68","tst":1717052037612,"mgs":"Con meof","iB":false,"fu":"Pammie68"},{"uid":"Pummie","tst":1717052065893,"mgs":"dô","iB":false,"fu":"Pummie"},{"uid":"sayaka2024","tst":1717052093869,"mgs":"Nằm Xỉu kiểu gì cũng ăn","iB":false,"fu":"sayaka2024"},{"uid":"sayaka2024","tst":1717052184511,"mgs":":20","iB":false,"fu":"sayaka2024"},{"uid":"Pummie","tst":1717052382715,"mgs":"Nằm dưới tim đập chân rung","iB":false,"fu":"Pummie"},{"uid":"sayaka2024","tst":1717052899008,"mgs":"Kèo này chuối quá","iB":false,"fu":"sayaka2024"},{"uid":"NguyenAn1291990","tst":1717054680420,"mgs":":14","iB":false,"fu":"NguyenAn1291990"},{"uid":"NguyenAn1291990","tst":1717054689512,"mgs":"Nằm trên lênh đênh xa đảo","iB":false,"fu":"NguyenAn1291990"},{"uid":"Wolverine2","tst":1717057980199,"mgs":":5","iB":false,"fu":"Wolverine2"},{"uid":"Wolverine2","tst":1717057998874,"mgs":"Xỉu góc lên thuyền nào anh em","iB":false,"fu":"Wolverine2"},{"uid":"emnhiutien","tst":1717061544764,"mgs":":6","iB":false,"fu":"emnhiutien"},{"uid":"emnhiutien","tst":1717061551342,"mgs":"Nằm dưới tim đập chân rung","iB":false,"fu":"emnhiutien"},{"uid":"Deadpool1","tst":1717062070185,"mgs":"estwolf6","iB":false,"fu":"Deadpool1"},{"uid":"Deadpool1","tst":1717062108766,"mgs":":6","iB":false,"fu":"Deadpool1"},{"uid":"Deadpool1","tst":1717062134628,"mgs":"Dzô Tài góc đi anh em","iB":false,"fu":"Deadpool1"},{"uid":"Trasuachomchom","tst":1717064405001,"mgs":"Ok","iB":false,"fu":"Trasuachomchom"},{"uid":"Pammie","tst":1717064470758,"mgs":"Xỉu góc lên thuyền nào anh em","iB":false,"fu":"Pammie"},{"uid":"Pammie","tst":1717064838297,"mgs":"Nằm Xỉu kiểu gì cũng ăn","iB":false,"fu":"Pammie"},{"uid":"Momoxin","tst":1717066720814,"mgs":":23","iB":false,"fu":"Momoxin"},{"uid":"sayaka2024","tst":1717066883700,"mgs":"Kèo bóng ảo mà ae cũng chơi à?","iB":false,"fu":"sayaka2024"},{"uid":"sayaka2024","tst":1717066918119,"mgs":"Tot- New đánh ai anh em?","iB":false,"fu":"sayaka2024"},{"uid":"37_9026145","tst":1717069822297,"mgs":"Dzô Tài góc đi anh em","iB":false,"fu":"sayaka2024"},{"uid":"37_9026145","tst":1717069866880,"mgs":"Leicester nào anh em","iB":false,"fu":"sayaka2024"},{"uid":"37_1817173","tst":1717070897514,"mgs":"ALO","iB":false,"fu":"cuoimimchiahihi"},{"uid":"37_1817173","tst":1717070905756,"mgs":"trận nào ngon ae","iB":false,"fu":"cuoimimchiahihi"},{"uid":"37_11053649","tst":1717071058386,"mgs":":19","iB":false,"fu":"PlayToWinn"},{"uid":"37_1817173","tst":1717071161349,"mgs":":5","iB":false,"fu":"cuoimimchiahihi"},{"uid":"37_8740414","tst":1717072284509,"mgs":"huuhuu","iB":false,"fu":"Nest02"},{"uid":"37_8740414","tst":1717072288261,"mgs":":4","iB":false,"fu":"Nest02"},{"uid":"37_778353","tst":1717132940770,"mgs":":11","iB":false,"fu":"JinJinabc"},{"uid":"37_111","tst":1717136049067,"mgs":"vé của tôi nè ","iB":false,"fu":"vun2012"},{"uid":"37_111","tst":1717136056162,"mgs":":14","iB":false,"fu":"vun2012"},{"uid":"37_8990528","tst":1717139545049,"mgs":"tài no hope rùi","iB":false,"fu":"sayaka"},{"uid":"37_111","tst":1717139853649,"mgs":":4","iB":false,"fu":"vun2012"},{"uid":"37_9138748","tst":1717143662075,"mgs":":2","iB":false,"fu":"Bimbim19"},{"uid":"37_111","tst":1717160125768,"mgs":"aaa","iB":false,"fu":"vun2012"},{"uid":"37_300888","tst":1717172250643,"mgs":"anelka88","iB":false,"fu":"anelka"},{"uid":"37_300888","tst":1717174164620,"mgs":"anelka88","iB":false,"fu":"anelka"},{"uid":"37_5909494","tst":1717237350475,"mgs":"Phuongly08","iB":false,"fu":"hungda"}],"bH":[{"uid":"R54g83xP","tst":1717234293816,"mgs":"{\"param\":{\"leagueName\":\"China League Two\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Guangxi Lanhang\",\"sumOdds\":\"1.75[0-0]@-0.98\",\"homeName\":\"Guangxi Hengchen\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"tuan04"},{"uid":"z5nexWZP","tst":1717234386077,"mgs":"{\"param\":{\"leagueName\":\"UEFA Champions League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tỷ số chính xác\",\"awayName\":\"Real Madrid\",\"sumOdds\":\"@55.00\",\"homeName\":\"Borussia Dortmund\",\"teamSelected\":\"3:3\",\"oddsType\":1,\"marketId\":10},\"content\":\"\"}","iB":true,"fu":"tintintin"},{"uid":"05aq9ew5","tst":1717234419189,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL 2\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Capalaba\",\"sumOdds\":\"5[3-1]@-0.87\",\"homeName\":\"Brisbane Strikers\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"hungquangbinh2"},{"uid":"p63VeRAl","tst":1717234569371,"mgs":"{\"param\":{\"leagueName\":\"UEFA Champions League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tỷ số chính xác\",\"awayName\":\"Real Madrid\",\"sumOdds\":\"@16.00\",\"homeName\":\"Borussia Dortmund\",\"teamSelected\":\"0:0\",\"oddsType\":1,\"marketId\":10},\"content\":\"\"}","iB":true,"fu":"heartless"},{"uid":"A6mVWrMP","tst":1717234605864,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL Women\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"South Melbourne W\",\"sumOdds\":\"-1.25[0-0]@0.90\",\"homeName\":\"Brunswick Juventus W\",\"teamSelected\":\"South Melbourne W\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"huongngo123"},{"uid":"A6mVWrMP","tst":1717234619573,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Queensland Lions\",\"sumOdds\":\"1[0-1]@0.92\",\"homeName\":\"Rochedale Rovers\",\"teamSelected\":\"Rochedale Rovers\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"huongngo123"},{"uid":"0lzYGXV5","tst":1717234889796,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL 2\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Capalaba\",\"sumOdds\":\"0[3-1]@0.84\",\"homeName\":\"Brisbane Strikers\",\"teamSelected\":\"Capalaba\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"ColdBoyZer0"},{"uid":"35ZRBMw5","tst":1717234935698,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Incheon United\",\"sumOdds\":\"1@0.96\",\"homeName\":\"Suwon FC\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"shinsung"},{"uid":"35ZRBMw5","tst":1717234947251,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Pohang Steelers\",\"sumOdds\":\"1@0.80\",\"homeName\":\"Gimcheon Sangmu\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"shinsung"},{"uid":"35ZRBMw5","tst":1717234958584,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Consadole Sapporo\",\"sumOdds\":\"2.5@1.00\",\"homeName\":\"Tokyo Verdy\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"shinsung"},{"uid":"35ZRBMw5","tst":1717234963425,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"2.25@0.99\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"shinsung"},{"uid":"Vl1D1Be5","tst":1717235006100,"mgs":"{\"param\":{\"leagueName\":\"GS Club Friendlies (Virtual) - 20 minutes\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Manchester City (V)\",\"sumOdds\":\"0[0-1]@0.66\",\"homeName\":\"Real Madrid (V)\",\"teamSelected\":\"Manchester City (V)\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"huunghia789"},{"uid":"35ZRBMw5","tst":1717235008682,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Queensland Lions\",\"sumOdds\":\"3[0-1]@0.95\",\"homeName\":\"Rochedale Rovers\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"shinsung"},{"uid":"WPjqArV6","tst":1717235033417,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"0.5@0.89\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Kyoto Sanga\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"WPjqArV6","tst":1717235051508,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Incheon United\",\"sumOdds\":\"0@1.00\",\"homeName\":\"Suwon FC\",\"teamSelected\":\"Suwon FC\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"WPjqArV6","tst":1717235070348,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Pohang Steelers\",\"sumOdds\":\"0.25@0.83\",\"homeName\":\"Gimcheon Sangmu\",\"teamSelected\":\"Pohang Steelers\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"Ylyw1nOP","tst":1717235094881,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Queensland Lions\",\"sumOdds\":\"0.75[0-2]@0.96\",\"homeName\":\"Rochedale Rovers\",\"teamSelected\":\"Rochedale Rovers\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"007ahha"},{"uid":"yl09d2N6","tst":1717235295787,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Oakleigh Cannons\",\"sumOdds\":\"2.5[0-2]@-0.99\",\"homeName\":\"Altona Magic\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"haiquang"},{"uid":"05xwpwxP","tst":1717235529699,"mgs":"{\"param\":{\"leagueName\":\"Philippines Football League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Manila Digger\",\"sumOdds\":\"1.75[0-0]@0.98\",\"homeName\":\"Kaya\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"Liem479"},{"uid":"aPW912Al","tst":1717235608068,"mgs":"{\"param\":{\"leagueName\":\"Czech Republic 3 Liga\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Povltava FA\",\"sumOdds\":\"0.25[1-2]@0.84\",\"homeName\":\"Motorlet Praha\",\"teamSelected\":\"Povltava FA\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"huunghia789"},{"uid":"R54gDrYP","tst":1717235644623,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Incheon United\",\"sumOdds\":\"0@0.98\",\"homeName\":\"Suwon FC\",\"teamSelected\":\"Suwon FC\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"R54gDrYP","tst":1717235661861,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Pohang Steelers\",\"sumOdds\":\"0.25@0.82\",\"homeName\":\"Gimcheon Sangmu\",\"teamSelected\":\"Pohang Steelers\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"05xw3zRP","tst":1717235672252,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp hiệp 1\",\"awayName\":\"South Adelaide\",\"sumOdds\":\"-0.75[0-0]@0.91\",\"homeName\":\"Adelaide Comets\",\"teamSelected\":\"Adelaide Comets\",\"oddsType\":1,\"marketId\":6},\"content\":\"\"}","iB":true,"fu":"cubi2178"},{"uid":"05xw3zRP","tst":1717235679462,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"South Adelaide\",\"sumOdds\":\"1.5[0-0]@0.97\",\"homeName\":\"Adelaide Comets\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"cubi2178"},{"uid":"05xw3zRP","tst":1717235698532,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"South Adelaide\",\"sumOdds\":\"1.5[0-0]@-0.98\",\"homeName\":\"Adelaide Comets\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"cubi2178"},{"uid":"05xw3zRP","tst":1717235705348,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp hiệp 1\",\"awayName\":\"South Adelaide\",\"sumOdds\":\"-0.75[0-0]@0.88\",\"homeName\":\"Adelaide Comets\",\"teamSelected\":\"Adelaide Comets\",\"oddsType\":1,\"marketId\":6},\"content\":\"\"}","iB":true,"fu":"cubi2178"},{"uid":"05xwpwxP","tst":1717235758463,"mgs":"{\"param\":{\"leagueName\":\"Philippines Football League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp hiệp 1\",\"awayName\":\"Manila Digger\",\"sumOdds\":\"-1.25[0-0]@0.93\",\"homeName\":\"Kaya\",\"teamSelected\":\"Kaya\",\"oddsType\":1,\"marketId\":6},\"content\":\"\"}","iB":true,"fu":"Liem479"},{"uid":"R54gDrYP","tst":1717235812212,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Queensland Lions\",\"sumOdds\":\"0.75[0-2]@0.92\",\"homeName\":\"Rochedale Rovers\",\"teamSelected\":\"Rochedale Rovers\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"V5N9DwnP","tst":1717235851970,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"South Melbourne\",\"sumOdds\":\"1.5[0-0]@-0.98\",\"homeName\":\"Hume City\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"Taolaoquatroi"},{"uid":"05xw3zRP","tst":1717235910181,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"South Adelaide\",\"sumOdds\":\"-1.75[0-0]@0.84\",\"homeName\":\"Adelaide Comets\",\"teamSelected\":\"Adelaide Comets\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"cubi2178"},{"uid":"n6OxWNvP","tst":1717236026636,"mgs":"{\"param\":{\"leagueName\":\"Japan J2 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Fagiano Okayama\",\"sumOdds\":\"-0.25[1-0]@-0.90\",\"homeName\":\"JEF United\",\"teamSelected\":\"JEF United\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"nguyenchung"},{"uid":"n6OxWNvP","tst":1717236045000,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL 2\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Brunswick Juventus FC\",\"sumOdds\":\"0[3-1]@-0.99\",\"homeName\":\"FC Melbourne Srbija\",\"teamSelected\":\"Brunswick Juventus FC\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"nguyenchung"},{"uid":"n6ee8ew6","tst":1717236190156,"mgs":"{\"param\":{\"leagueName\":\"Japan J2 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Fagiano Okayama\",\"sumOdds\":\"0.25[1-0]@0.80\",\"homeName\":\"JEF United\",\"teamSelected\":\"Fagiano Okayama\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"pP2V7NRP","tst":1717236222840,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Incheon United\",\"sumOdds\":\"2.5[0-0]@0.89\",\"homeName\":\"Suwon FC\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"vanthaontpr"},{"uid":"1PQ939XP","tst":1717236225234,"mgs":"{\"param\":{\"leagueName\":\"Japan J2 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Ehime FC\",\"sumOdds\":\"0.75[0-1]@-0.88\",\"homeName\":\"Yokohama FC\",\"teamSelected\":\"Ehime FC\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"ColdBoyZer0"},{"uid":"n6ee8ew6","tst":1717236345576,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 2\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Gyeongnam\",\"sumOdds\":\"0.25[0-0]@-0.93\",\"homeName\":\"Seoul E Land\",\"teamSelected\":\"Gyeongnam\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Vinhthai"},{"uid":"R54g71VP","tst":1717236367598,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"South Melbourne\",\"sumOdds\":\"1.5[0-0]@-0.98\",\"homeName\":\"Hume City\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"nguyenchung"},{"uid":"w5L8koj5","tst":1717236497092,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL Women\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Queensland Lions W\",\"sumOdds\":\"4[1-1]@0.89\",\"homeName\":\"Olympic W\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"maubinhdi"},{"uid":"Q5G8NVKl","tst":1717236533277,"mgs":"{\"param\":{\"leagueName\":\"France Ligue 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Tỷ số chính xác\",\"awayName\":\"Saint Etienne\",\"sumOdds\":\"@6.25\",\"homeName\":\"Metz\",\"teamSelected\":\"1:1\",\"oddsType\":1,\"marketId\":10},\"content\":\"\"}","iB":true,"fu":"007ahha"},{"uid":"w5L8koj5","tst":1717236549478,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL Women\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"South Melbourne W\",\"sumOdds\":\"1.5[1-0]@-0.68\",\"homeName\":\"Brunswick Juventus W\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"maubinhdi"},{"uid":"w5L8koj5","tst":1717236555074,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL Women\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Flinders United W\",\"sumOdds\":\"1.75[1-0]@0.99\",\"homeName\":\"Metro United W\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"maubinhdi"},{"uid":"8Pge0mzl","tst":1717236699165,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL Women\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp hiệp 1\",\"awayName\":\"South Melbourne W\",\"sumOdds\":\"0.25[1-0]@0.39\",\"homeName\":\"Brunswick Juventus W\",\"teamSelected\":\"Brunswick Juventus W\",\"oddsType\":1,\"marketId\":6},\"content\":\"\"}","iB":true,"fu":"huunghia789"},{"uid":"n6ee9Ya6","tst":1717237073782,"mgs":"{\"param\":{\"leagueName\":\"Korea Republic K League 1\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Incheon United\",\"sumOdds\":\"0.5[0-0]@-0.95\",\"homeName\":\"Suwon FC\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"dongta"},{"uid":"8PgeQDzl","tst":1717237184498,"mgs":"{\"param\":{\"leagueName\":\"Japan J2 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Ehime FC\",\"sumOdds\":\"-0.5[1-1]@-0.99\",\"homeName\":\"Yokohama FC\",\"teamSelected\":\"Yokohama FC\",\"oddsType\":1,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"Quoc152"},{"uid":"8PgeQDzl","tst":1717237243115,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL 2\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Sydney University\",\"sumOdds\":\"4.5[3-0]@1.00\",\"homeName\":\"Inner West Hawks\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"Quoc152"},{"uid":"R6bOjg2P","tst":1717237256597,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"2[0-0]@1.00\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"ColdBoyZer0"},{"uid":"R6bOjg2P","tst":1717237288231,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"2[0-0]@0.96\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Xỉu\",\"oddsType\":2,\"marketId\":3},\"content\":\"\"}","iB":true,"fu":"ColdBoyZer0"},{"uid":"8PgeQDzl","tst":1717237311873,"mgs":"{\"param\":{\"leagueName\":\"Australia NPL\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Perth RedStar\",\"sumOdds\":\"1.25[0-0]@-0.83\",\"homeName\":\"Perth SC\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"Quoc152"},{"uid":"05aq4oN5","tst":1717237353961,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Kèo chấp\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"-0.25[0-0]@0.94\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Cerezo Osaka\",\"oddsType\":2,\"marketId\":5},\"content\":\"\"}","iB":true,"fu":"hungda"},{"uid":"8PgeQDzl","tst":1717237500525,"mgs":"{\"param\":{\"leagueName\":\"Japan J1 League\",\"sportId\":1,\"marketName\":\"Sport \\/ Tài Xỉu hiệp 1\",\"awayName\":\"Cerezo Osaka\",\"sumOdds\":\"0.5[0-0]@0.99\",\"homeName\":\"Kyoto Sanga\",\"teamSelected\":\"Tài\",\"oddsType\":1,\"marketId\":4},\"content\":\"\"}","iB":true,"fu":"Quoc152"}],"cmd":1505}
          // this.loadChatHistory(cheat);


          SbChatSocketHandle.getInstance().LoginWS(); // Not Use
          // SbChatSocketHandle.getInstance().GetRoomData();
          // SbChatSocketHandle.getInstance().GetUserDetail();
        };

        _proto.onDisable = function onDisable() {
          director.off(SB_CHAT_CHECK_RESUBSCRIBE, this.checkReSubscibeChat, this);
          SbChatController.SendMsgToServer(this.enumCMDChat.UNSUBSCRIBE_CHAT);
          this.ebChat.string = '';
          this.hideAllPanel();
        };

        _proto.onDestroy = function onDestroy() {
          this.removeEventListener();
        };

        _proto.addEventListener = function addEventListener() {
          director.on(EVENT_MESSAGE_SB, this.onReceiveServerMsg, this);
          director.on(SB_EVENT_CHAT_DO_SHARE, this.sendShareInfo, this);
          director.on(SB_EVENT_HIDE_MINI_BETSLIP, this.hidePanelBetTicket, this);
        };

        _proto.removeEventListener = function removeEventListener() {
          director.off(EVENT_MESSAGE_SB, this.onReceiveServerMsg, this);
          director.off(SB_EVENT_CHAT_DO_SHARE, this.sendShareInfo, this);
          director.off(SB_EVENT_HIDE_MINI_BETSLIP, this.hidePanelBetTicket, this);
        }; // Reconnect


        _proto.resetOldChat = function resetOldChat() {
          this.collectChatCell();
          this.isInitChatBrandDone = false;
          this.isInitChatWSDone = false;
          this.listChatHistory = [];
        };

        _proto.checkReSubscibeChat = function checkReSubscibeChat() {
          this.resetOldChat();

          if (this.isUseWSBrand) {
            SbChatController.SendMsgToServer(this.enumCMDChat.UNSUBSCRIBE_CHAT);
            SbChatController.SendMsgToServer(this.enumCMDChat.SUBSCRIBE_CHAT);
          }

          if (this.isUseWSSB) {
            SbChatSocketHandle.getInstance().LoginWS();
          }
        };

        _proto.sendShareInfo = function sendShareInfo(ticketShare) {
          var content = '';

          if (SbChatController.getInstance()) {
            content = SbChatController.getInstance().GetEdbChat.string;
            SbChatController.getInstance().GetEdbChat.string = '';
          }

          SbCommonPrefabsManager.getInstance().ShowMessage('Bạn đã chia sẻ thông tin vé cược');
          var paramData = {
            content: content,
            param: ticketShare
          };
          SbChatController.SendMsgToServer(this.enumCMDChat.CHAT_WITH_PARAM, paramData);
        } // //#region CHEAT
        // protected cheatChat(content: string) {
        //     const dict: ChatReceiveData = {
        //         c: 0,
        //         uid: SbUserInfo.getInstance().GetUserIdOfBrand(),
        //         fu: SbUserInfo.getInstance().GetUserName(),
        //         tst: Date.now(),
        //         mgs: content,
        //     }
        //     this.onReceiveServerMsg(this.enumCMDChat.CHAT, dict);
        // }
        // protected cheatChatParam(data: ParamData) {
        //     const dict: ChatReceiveData = {
        //         c: 0,
        //         uid: SbUserInfo.getInstance().GetUserIdOfBrand(),
        //         fu: SbUserInfo.getInstance().GetUserName(),
        //         tst: Date.now(),
        //         mgs: data,
        //     }
        //     this.onReceiveServerMsg(this.enumCMDChat.CHAT_WITH_PARAM, dict);
        // }
        // //#endregion
        ;

        _proto.checkInitChatHistory = function checkInitChatHistory(listMess) {
          this.listChatHistory = this.listChatHistory.concat(listMess);
          var isInitDone = (!this.isUseWSSB || this.isInitChatWSDone) && (!this.isUseWSBrand || this.isInitChatBrandDone);

          if (isInitDone) {
            var messInits = this.listChatHistory.slice();
            this.messageSbQueue = this.messageSbQueue.concat(messInits);
            this.messageSbQueue.sort(function (a, b) {
              return a.time - b.time;
            });
            this.messageSbQueue = this.messageSbQueue.slice(-this.MaxChatElement);
          }
        } //#region Message Handle
        ;

        _proto.onReceiveServerMsg = function onReceiveServerMsg(cmd, dict) {
          switch (cmd) {
            case this.enumCMDChat.SUBSCRIBE_CHAT:
              {
                this.loadChatHistory(dict);
                break;
              }

            case this.enumCMDChat.CHAT:
            case this.enumCMDChat.CHAT_WITH_PARAM:
              {
                this.loadChatGame(dict);
                break;
              }

            case SPORTBOOK.SOCKET_CHAT_SUBSCRIBE:
              {
                this.loadWSChatHistory(dict.messageDtoList);
                break;
              }

            case SPORTBOOK.SOCKET_CHAT:
              {
                this.loadWSChatGame(dict);
                break;
              }
          }
        } //#endregion
        ;

        _proto.initDataMapingEmoj = function initDataMapingEmoj() {
          this.scrollEmoSuggest.removeAllChildren();

          for (var i = 1; i <= this.getMaxEmoji(); ++i) {
            var key = this.EMOJI_MAP_CHAR + i;
            this.dataMapingEmo[key] = i;
            var template = instantiate(this.emoticonTemplate);
            template.active = true;
            template.parent = this.scrollEmoSuggest;
            this.setSpriteEmoji(template, i);
            var eventHandler = new EventHandler();
            eventHandler.target = this.node;
            eventHandler.component = 'SbChatController';
            eventHandler.handler = 'sendChatEmo';
            eventHandler.customEventData = key;
            template.getComponent(Button).clickEvents.push(eventHandler);
          }
        };

        _proto.getMaxEmoji = function getMaxEmoji() {
          return Math.min(this.MAX_EMOJI, this.emojiSprFrames.length);
        };

        _proto.getEmoIndex = function getEmoIndex(content) {
          var index = this.dataMapingEmo[content];

          if (index !== null && index !== undefined) {
            return index;
          }

          return -1;
        };

        _proto.setSpriteEmoji = function setSpriteEmoji(nodeEmoji, index) {
          var spr = nodeEmoji.getComponentInChildren(Sprite);

          if (spr) {
            spr.spriteFrame = this.emojiSprFrames[index - 1];
          }
        };

        _proto.setActiveNodeBlockOutside = function setActiveNodeBlockOutside(active) {
          if (sys.isBrowser && !sys.isMobile) {
            if (this.nodeBlockInputOutside) {
              this.nodeBlockInputOutside.active = false;
            }

            return;
          }

          if (this.nodeBlockInputOutside) {
            this.nodeBlockInputOutside.active = active;
          }
        };

        _proto.processChatData = function processChatData() {
          if (this.messageSbQueue.length == 0) {
            return;
          }

          var temp = [];
          this.messageSbQueue.forEach(function (element) {
            temp.push(element);
          });
          this.messageSbQueue = [];

          if (this.chatPanel.node.children.length >= this.MaxChatElement) {
            this.reCalculateChat();
          }

          this.addCellToScrollView(temp);
        };

        _proto.reCalculateChat = function reCalculateChat() {
          var firstChat = this.chatPanel.node.children[0];

          if (!firstChat) {
            return;
          }

          var heightRemove = firstChat.getComponent(UITransform).height;
          this.chatPanelHeight -= heightRemove;
          this.chatPanel.setContentSize(this.chatPanel.width, this.chatPanelHeight);
          var listUIChat = this.chatPanel.node.children;

          for (var i = 1; i < listUIChat.length; i++) {
            listUIChat[i].position = v3(listUIChat[i].position.x, listUIChat[i].position.y + heightRemove);
          }

          firstChat.removeFromParent();
        };

        _proto.addCellToScrollView = /*#__PURE__*/function () {
          var _addCellToScrollView = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(listMessages) {
            var promiseCreate, targerPos;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  console.warn("addCellToScrollView");
                  promiseCreate = this.createChatCell(listMessages);
                  _context.next = 5;
                  return promiseCreate.then(function (value) {
                    return value;
                  });

                case 5:
                  targerPos = new Vec3(0, this.chatPanel.height);

                  if (this.chatPanel.height < this.limitChatHeight) {
                    this.ScrollView.vertical = false;

                    if (this.isEmpty) {
                      this.chatPanel.node.setPosition(targerPos);
                      this.isEmpty = false;
                    } else {
                      Tween.stopAllByTarget(this.chatPanel.node);
                      tween(this.chatPanel.node).to(0.2, {
                        position: targerPos
                      }).start();
                    }
                  } else {
                    this.ScrollView.vertical = true;
                    this.chatPanel.node.setPosition(targerPos);

                    if (this.chatPanel.height < this.limitChatHeight) {
                      this.ScrollView.scrollToBottom(0.2);
                    }
                  }

                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function addCellToScrollView(_x) {
            return _addCellToScrollView.apply(this, arguments);
          }

          return addCellToScrollView;
        }();

        _proto.createChatCell = /*#__PURE__*/function () {
          var _createChatCell = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(messageSbQueue) {
            var _this4 = this;

            var temp, i, data, type, chatCell, lastActive, _i, msgInfo, _chatCell, emoticonIndex, content, emojiNode, totalHeight;

            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  temp = [];

                  for (i = 0; i < messageSbQueue.length; i++) {
                    data = messageSbQueue[i];
                    type = SbChatType.NONE;

                    if (data.name == undefined || data.name == null) {
                      type = SbChatType.SYSTEM;
                      data.name = "Thông báo";
                    }

                    if (type == SbChatType.NONE) {
                      type = this.isMyPlayer(data.name) ? SbChatType.MAIN_PLAYER : SbChatType.OTHER_PLAYER;
                    }

                    chatCell = this.getChatCell();
                    chatCell.setOpacity(1);
                    chatCell.updateName(data.name, type);
                    temp.push(chatCell);
                  } // label only calculate when node is active in hierachy, so we need active CardGameChat and inactive after
                  // this code is a cheat


                  lastActive = this.node.active;

                  if (!this.node.active) {
                    this.uiOpacity.opacity = 1;
                    this.node.active = true;
                  }

                  _context2.next = 6;
                  return SbUtils.Delay(25);

                case 6:
                  for (_i = 0; _i < messageSbQueue.length; _i++) {
                    msgInfo = messageSbQueue[_i];
                    _chatCell = temp[_i];

                    if (msgInfo.param) {
                      _chatCell.updateTicketBet(msgInfo.param, this);
                    } else {
                      // add emoticon
                      emoticonIndex = this.getEmoIndex(messageSbQueue[_i].content);
                      content = emoticonIndex == -1 ? messageSbQueue[_i].content : "";

                      if (emoticonIndex != -1) {
                        emojiNode = this.getEmoticon();

                        if (emojiNode) {
                          this.setSpriteEmoji(emojiNode, emoticonIndex);
                        }

                        _chatCell.addEmoticon(emojiNode, emoticonIndex);

                        _chatCell.updateContent('');
                      } else {
                        // add content
                        _chatCell.updateContent(content);
                      }
                    }
                  }

                  _context2.next = 9;
                  return SbUtils.Delay(25);

                case 9:
                  temp.forEach(function (element) {
                    element.setOpacity(255);
                  });
                  if (!lastActive) this.node.active = false;
                  totalHeight = 0;
                  temp.forEach(function (element) {
                    var cellHeight = element.getComponent(SbChatCell).updateUI();
                    totalHeight += cellHeight;
                    _this4.chatPanelHeight += cellHeight;

                    _this4.chatPanel.setContentSize(_this4.chatPanel.width, _this4.chatPanelHeight);

                    _this4.setPositionChatCell(element.node, cellHeight);
                  });
                  return _context2.abrupt("return", totalHeight);

                case 14:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function createChatCell(_x2) {
            return _createChatCell.apply(this, arguments);
          }

          return createChatCell;
        }();

        _proto.getChatCell = function getChatCell() {
          var chatCell = null;

          if (this.chatCellPools.length == 0) {
            var obj = instantiate(this.chatCellPrefab);
            chatCell = obj.getComponent(SbChatCell);
          } else {
            chatCell = this.chatCellPools.dequeue();
          }

          chatCell.node.setParent(this.chatPanel.node);
          return chatCell;
        };

        _proto.collectChatCell = function collectChatCell() {
          this.chatPanel.node.removeAllChildren();
          this.chatPanelHeight = this.CHAT_HEIGHT_BONUS;
          this.isEmpty = true;
          this.messageSbQueue = [];

          while (this.chatCellUses.length != 0) {
            var chatCell = this.chatCellUses.dequeue();
            chatCell.node.setParent(this.chatCellPoolLayer);
            this.collectEmotion(chatCell.removeEmoticon());
            this.chatCellPools.enqueue(chatCell);
          }
        };

        _proto.setPositionChatCell = function setPositionChatCell(cell, cellHeight) {
          cell.setPosition(new Vec3(0, -this.chatPanel.height + cellHeight / 2 + this.CHAT_HEIGHT_BONUS));
        };

        _proto.init = function init(quickChatContents, chatButton) {
          var _this5 = this;

          this.SbQuickChatController = new SbQuickChatController();
          this.collectChatCell();
          this.loadQuickChat(quickChatContents);
          this.chatButton = chatButton;
          this.isEmpty = true;
          this.schedule(function () {
            _this5.processChatData();
          }, 0.1, macro.REPEAT_FOREVER);
        };

        _proto.loadQuickChat = function loadQuickChat(contents) {
          if (!contents || contents.length <= 0) {
            return;
          }

          this.SbQuickChatController.quickChatContents = contents;

          for (var i = 0; i < this.lbQuickChats.length; i++) {
            if (i >= contents.length) {
              this.lbQuickChats[i].node.parent.active = false;
              continue;
            }

            this.lbQuickChats[i].node.parent.active = true;
            this.lbQuickChats[i].node.removeAllChildren();
            var quickChatButton = this.lbQuickChats[i].node.parent.getComponent(Button);

            if (quickChatButton) {
              var clickHandler = new EventHandler();
              clickHandler.target = this.node;
              clickHandler.component = 'SbChatController';
              clickHandler.handler = 'onQuickChatClick';
              clickHandler.customEventData = i.toString();
              quickChatButton.clickEvents.push(clickHandler);
            } // add emoticon


            var emoticonIndex = this.getEmoIndex(contents[i]);

            if (emoticonIndex != -1) {
              var emoNode = this.getEmoticon();

              if (emoNode != null) {
                emoNode.active = true;
                emoNode.setParent(this.lbQuickChats[i].node);
                emoNode.setPosition(this.lbQuickChats[i].node.position.x, this.lbQuickChats[i].node.position.y - 20);
                var max = this.getMaxEmoji();

                if (emoticonIndex > max) {
                  emoticonIndex = max;
                }

                this.setSpriteEmoji(emoNode, emoticonIndex);
                this.lbQuickChats[i].string = '';
              }
            } else {
              this.lbQuickChats[i].string = contents[i];
            }
          }
        };

        _proto.setHighlightEmoticon = function setHighlightEmoticon(isHighlight) {
          var spr = isHighlight ? this.buttonSprFrames[3] : this.buttonSprFrames[2];
          this.emoticonBtn.normalSprite = spr;
          this.emoticonBtn.hoverSprite = spr;
          this.emoticonBtn.disabledSprite = spr;
        };

        _proto.setHighlightIconQuickChat = function setHighlightIconQuickChat(isHighlight) {
          var spr = isHighlight ? this.buttonSprFrames[1] : this.buttonSprFrames[0];
          this.quickChatBtn.normalSprite = spr;
          this.quickChatBtn.hoverSprite = spr;
          this.quickChatBtn.disabledSprite = spr;
        } //#region Send Chat With No Param
        ;

        _proto.doSendMsgChatWithWS = function doSendMsgChatWithWS(content) {
          var minCanChat = SbConfigManager.getInstance().minMoneyCanChat;

          if (SbUserInfo.getInstance().GetBalance() < minCanChat) {
            var balanceWarn = SbStringUtil.formatString("Số dư của bạn phải trên {0} để có thể chat", SbStringUtil.formatMoneyNumberWithDot(minCanChat));
            this.createWarningMess(balanceWarn);
            return;
          }

          SbChatSocketHandle.getInstance().SendChatMessage(content);
        };

        _proto.sendChat = function sendChat() {
          if (this.ebChat.string.length > 0) {
            // if (NEED_CACHE_CHAT_INTO_QUICK_CHAT) {
            //     this.SbQuickChatController.cacheNewestContent(this.ebChat.string);
            // }
            if (this.isUseWSSB) {
              this.doSendMsgChatWithWS(this.ebChat.string);
            } else {
              if (this.sendChatCalFun) {
                this.sendChatCalFun(this.enumCMDChat.CHAT, this.ebChat.string);
              }
            }

            this.ebChat.string = '';
          }
        };

        _proto.sendChatEmo = function sendChatEmo(sender, text) {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.sendChatCalFun) {
            this.sendChatCalFun(this.enumCMDChat.CHAT, text);
            this.ebChat.string = '';
            this.setActivePanelEmotion(false);
          }
        };

        _proto.onQuickChatClick = function onQuickChatClick(sender, text) {
          SbSoundsManager.getInstance().playSfxClick();
          var index = parseInt(text);
          var content = this.SbQuickChatController.quickChatContents[index];

          if (this.sendChatCalFun) {
            if (this.isUseWSSB) {
              this.doSendMsgChatWithWS(content);
            } else {
              this.sendChatCalFun(this.enumCMDChat.CHAT, content);
            }

            this.setActivePanelQuickChat(false);
          }
        } //#endregion
        ;

        _proto.onClickShare = function onClickShare() {
          SbSoundsManager.getInstance().playSfxClick();
          this.setActivePanelBetTicket(!this.betSlipContent.active);
        };

        _proto.focus = function focus() {
          // log('this.txtChat.focus();');
          this.ebChat.focus();
        };

        _proto.setActivePanelEmotion = function setActivePanelEmotion(active) {
          if (active) {
            this.hideAllPanel();
          }

          this.listEmoChoosePanel.active = active;
          this.setHighlightEmoticon(active);
        };

        _proto.setActivePanelQuickChat = function setActivePanelQuickChat(active) {
          if (active) {
            this.hideAllPanel();
          }

          this.quickChatGroup.active = active;
          this.setHighlightIconQuickChat(active);
        };

        _proto.hidePanelBetTicket = function hidePanelBetTicket() {
          this.betSlipContent.active = false;
        };

        _proto.setActivePanelBetTicket = function setActivePanelBetTicket(active) {
          if (active) {
            this.hideAllPanel();
            this.miniBetSlipController.SetHeaderPopup(0);
            this.miniBetSlipController.ShowHeader(false); // Check function start called (if no cause double call)

            if (this.miniBetSlipController.IsFirstLoadDone) {
              this.miniBetSlipController.RequestData(0);
            }
          }

          this.betSlipContent.active = active;
        };

        _proto.hideAllPanel = function hideAllPanel() {
          this.setActivePanelQuickChat(false);
          this.setActivePanelEmotion(false);
          this.setActivePanelBetTicket(false);
        };

        _proto.onEmoticonClick = function onEmoticonClick() {
          SbSoundsManager.getInstance().playSfxClick();
          this.setActivePanelEmotion(!this.listEmoChoosePanel.active);
        };

        _proto.onClickShowQuickChat = function onClickShowQuickChat() {
          SbSoundsManager.getInstance().playSfxClick();
          this.setActivePanelQuickChat(!this.quickChatGroup.active);
        };

        _proto.onCloseClick = function onCloseClick() {
          var _this6 = this;

          if (!this.allowClickClose) return;
          this.allowClickClose = false;
          this.scheduleOnce(function () {
            _this6.allowClickClose = true;
          }, 0.5);
          SbSoundsManager.getInstance().playSfxClick();
          this.hide(true);
        };

        _proto.hide = function hide(playAnim) {
          var _this7 = this;

          if (playAnim === void 0) {
            playAnim = false;
          } // if (this.chatButton != null) {
          //     this.chatButton.spriteFrame = this.sprDisableChat;
          // }


          if (this.callbackBeginHide != null) {
            this.callbackBeginHide();
          }

          if (playAnim) {
            Tween.stopAllByTarget(this.uiOpacity);
            this.uiOpacity.opacity = 255;
            tween(this.uiOpacity).to(this.TRANSITION_TIME, {
              opacity: 1
            }).call(function () {
              _this7.node.active = false;
              if (_this7.callbackHide != null) _this7.callbackHide();
            }).start();
          } else {
            this.uiOpacity.opacity = 0;
            this.node.active = false;
            if (this.callbackHide != null) this.callbackHide();
          }
        };

        _proto.show = function show(playAnim) {
          if (playAnim === void 0) {
            playAnim = false;
          } // if (this.chatButton) {
          //     this.chatButton.spriteFrame = this.sprEnableChat;
          // }


          this.node.active = true;
          if (sys.platform == sys.Platform.DESKTOP_BROWSER) // this.focus();
            if (playAnim) {
              Tween.stopAllByTarget(this.uiOpacity);
              this.uiOpacity.opacity = 0;
              tween(this.uiOpacity).to(this.TRANSITION_TIME, {
                opacity: 255
              }).start();
            } else {
              this.uiOpacity.opacity = 255;
            }
          this.loadQuickChat(this.SbQuickChatController.quickChatContents);
        };

        _proto.loadWSChatGame = function loadWSChatGame(data) {
          // if (data.fu == null || data.fu == undefined || data.fu == '') {
          //     if (!SbStringUtil.isNullOrEmpty(data.mgs)) {
          //         SbCommonPrefabsManager.getInstance().ShowMessage(data.mgs);
          //     }
          //     return;
          // }
          var temp = this.wsConvertDataChat(data);
          this.pushChatToQueue(temp);
        };

        _proto.loadWSChatHistory = function loadWSChatHistory(dict) {
          var _this8 = this;

          var listChat = [];
          dict.forEach(function (data) {
            listChat.push(_this8.wsConvertDataChat(data));
          });
          this.isInitChatWSDone = true;
          this.checkInitChatHistory(listChat);
        };

        _proto.loadChatGame = function loadChatGame(data) {
          // if (data.fu == null || data.fu == undefined || data.fu == '') {
          //     if (!SbStringUtil.isNullOrEmpty(data.mgs)) {
          //         SbCommonPrefabsManager.getInstance().ShowMessage(data.mgs);
          //     }
          //     return;
          // }
          var temp = this.convertDataChat(data);
          this.pushChatToQueue(temp);
        } // Game Brand WS
        ;

        _proto.loadChatHistory = function loadChatHistory(dict) {
          var _this9 = this;

          console.warn("loadChatHistory");
          var listChat = [];
          var collectionChats = [];

          if (dict.bH) {
            collectionChats = collectionChats.concat(dict.bH);
          }

          if (dict.cH) {
            collectionChats = collectionChats.concat(dict.cH);
          }

          collectionChats.sort(function (a, b) {
            return a.tst - b.tst;
          });
          collectionChats.forEach(function (data) {
            listChat.push(_this9.convertDataChat(data));
          });
          this.isInitChatBrandDone = true;
          this.checkInitChatHistory(listChat);
        };

        _proto.wsConvertDataChat = function wsConvertDataChat(data) {
          var temp = new SbChatCellData();
          temp.name = data.senderFullName;
          temp.uid = data.senderUserId;
          temp.time = new Date(data.createdAt).getTime();
          temp.content = data.message;
          return temp;
        };

        _proto.convertDataChat = function convertDataChat(data) {
          var temp = new SbChatCellData();
          temp.name = data.fu;
          temp.uid = data.uid;
          temp.time = data.tst;

          var parseObject = function parseObject(info) {
            var data = JSON.parse(info);
            temp.content = data.content;
            temp.param = data.param;
          };

          var mgsServer = data.mgs;

          if (data.iB != undefined) {
            if (data.iB == true) {
              parseObject(mgsServer);
            } else {
              temp.content = mgsServer;
            }
          } else {
            if (typeof mgsServer == 'object') {
              temp.content = mgsServer.content;
              temp.param = mgsServer.param;
            } else {
              temp.content = mgsServer;
            }
          }

          return temp;
        };

        _proto.pushChatToQueue = function pushChatToQueue(temp) {
          if (this.messageSbQueue.length > this.MaxChatElement) {
            this.messageSbQueue.splice(0, 1);
          }

          this.messageSbQueue.push(temp);
        };

        _proto.createWarningMess = function createWarningMess(content) {
          var data = new SbChatCellData();
          data.name = undefined;
          data.time = undefined;
          data.uid = undefined;
          data.content = content;
          this.pushChatToQueue(data);
          return data;
        };

        _proto.isMyPlayer = function isMyPlayer(displayName) {
          if (!SbStringUtil.isNullOrEmpty(displayName) && SbUserInfo.getInstance().GetUserName().localeCompare(displayName) === 0) {
            return true;
          }

          return false;
        };

        _proto.setHideCallback = function setHideCallback(beginHideCallBack, hiddenCallback) {
          this.callbackHide = hiddenCallback;
          this.callbackBeginHide = beginHideCallBack;
        };

        _proto.getEmoticon = function getEmoticon() {
          var emo = null;

          if (this.emoticonSbQueue.length == 0) {
            emo = instantiate(this.emoticonTemplate);
          } else {
            emo = this.emoticonSbQueue.pop();
          }

          emo.active = false;
          return emo;
        };

        _proto.collectEmotion = function collectEmotion(emo) {
          if (emo == null) {
            return;
          }

          this.emoticonSbQueue.push(emo);
          emo.setParent(this.emoticonNodePool);
        };

        _proto.onBeginEditbox = function onBeginEditbox() {
          this.setActiveNodeBlockOutside(true);
        };

        _proto.onEndEditbox = function onEndEditbox() {
          var _this10 = this;

          tween(this.nodeBlockInputOutside).delay(0.001).call(function () {
            _this10.setActiveNodeBlockOutside(false);
          }).start();
        } //#region Show Full Info when Hover
        ;

        _proto.ShowFullInfo = function ShowFullInfo(chatTicket) {
          if (!this.itemTicketFullInfo) {
            var itemNode = instantiate(this.prefabItemFullInfo);
            itemNode.parent = this.fullInfoLayer;
            itemNode.active = false;
            this.itemTicketFullInfo = itemNode.getComponent(SbItemTicketBetInfo);
          }

          if (this.itemTicketFullInfo) {
            this.itemTicketFullInfo.node.active = true;
            var worldPos = chatTicket.node.getWorldPosition();
            var resultPos = new Vec3();
            this.fullInfoLayer.inverseTransformPoint(resultPos, worldPos);
            this.itemTicketFullInfo.node.position = v3(resultPos.x + 120, resultPos.y + 90);
            this.itemTicketFullInfo.InitTicketData(chatTicket.Data, this);
          }
        };

        _proto.HideFullInfo = function HideFullInfo() {
          if (this.itemTicketFullInfo) {
            this.itemTicketFullInfo.node.active = false;
          }
        } //#endregion
        ;

        _createClass(SbChatController, [{
          key: "GetEdbChat",
          get: function get() {
            return this.ebChat;
          }
        }, {
          key: "MaxChatElement",
          get: function get() {
            return SbConfigManager.getInstance().maxChatElement;
          }
        }, {
          key: "buttonSprFrames",
          get: function get() {
            var result = [];

            if (this.skinButtonSprFrames) {
              result = this.skinButtonSprFrames.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "emojiSprFrames",
          get: function get() {
            var result = [];

            if (this.skinEmoji) {
              result = this.skinEmoji.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "isUseWSSB",
          get: function get() {
            return SbConfigManager.getInstance().useChatWSType !== SBChatUseWSType.ONLY_WS_BRAND;
          }
        }, {
          key: "isUseWSBrand",
          get: function get() {
            return SbConfigManager.getInstance().useChatWSType !== SBChatUseWSType.ONLY_WS_SB;
          }
        }, {
          key: "enumCMDChat",
          get: function get() {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id === SbSkinID.Skin1) {
              return SPORTBOOK_SKIN1;
            }

            return SPORTBOOK;
          }
        }, {
          key: "quickChatContent",
          get: function get() {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            switch (id) {
              case SbSkinID.Skin1:
                {
                  return ['Cược gì đây anh em', 'Thua keo này bày keo khác', 'Tất tay vào trận đêm nay', 'Trận này Tài hay Xỉu zậy', 'Lấy lại những gì đã mất', 'Không thắng về vợ mắng'];
                }

              case SbSkinID.Skin2:
                {
                  return ['Cân tài cân sức', 'Tài góc nào anh em', 'Không còn gì để mất', 'Anh em cược gì đấy', 'Xin vé về bờ đi', 'Thắng làm vua thua làm lại'];
                }
            }

            return ["Dzô Tài góc đi anh em", "Xỉu góc lên thuyền nào anh em", "Vô Tài ăn hoài phát ngán", "Nằm Xỉu kiểu gì cũng ăn", "Nằm trên lênh đênh xa đảo", "Nằm dưới tim đập chân rung"];
          }
        }]);

        return SbChatController;
      }(Component), _class3._instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "uiOpacity", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ebChat", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "chatPanel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ScrollView", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "chatCellPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "chatCellPoolLayer", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "skinButtonSprFrames", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodeBlockInputOutside", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "betSlipContent", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "miniBetSlip", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "fullInfoLayer", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "prefabItemFullInfo", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "quickChatGroup", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "quickChatBtn", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lbQuickChats", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "emoticonBtn", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "listEmoChoosePanel", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "scrollEmoSuggest", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "emoticonNodePool", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "emoticonTemplate", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "skinEmoji", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbChatSocketHandle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbWebSocketConnecter.ts', './SbDefine.ts', './SbConfigManager.ts', './SbUserInfo.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, Component, SbWebSocketConnecter, EVENT_MESSAGE_SB, SPORTBOOK, SbConfigManager, SbUserInfo;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbWebSocketConnecter = module.default;
    }, function (module) {
      EVENT_MESSAGE_SB = module.EVENT_MESSAGE_SB;
      SPORTBOOK = module.SPORTBOOK;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "625044ZyqFPALoGyoXk7Gw0", "SbChatSocketHandle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_PING_PONG = 10000;
      var SbChatSocketHandle = exports('SbChatSocketHandle', (_dec = ccclass("SbChatSocketHandle"), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbChatSocketHandle, _Component);

        function SbChatSocketHandle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.webSocket = null;
          _this.stompClient = null;
          _this.ping = 0;
          _this.pong = 0;
          _this.intervalPingPong = null;

          _this.onConnectSuccess = function () {};

          return _this;
        }

        SbChatSocketHandle.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbChatSocketHandle();
            this.Instance.init();
          }

          return this.Instance;
        };

        var _proto = SbChatSocketHandle.prototype;

        _proto.init = function init() {
          if (this.webSocket == null) {
            this.webSocket = new SbWebSocketConnecter();
          }
        };

        _proto.ConnectWS = function ConnectWS(url) {
          if (url.length == 0) {
            console.log("Not connect to ws: " + url);
            return;
          }

          console.warn("ConnectWS: " + url);
          this.webSocket.connectWS(url);
          this.webSocket.onopen = this.onWSOpen.bind(this);
          this.webSocket.onmessage = this.onWsReceiveMessage.bind(this);
          this.webSocket.onclose = this.onWSClose.bind(this);
          this.webSocket.onerror = this.onWSError.bind(this);
        };

        _proto.SendChatMessage = function SendChatMessage(message) {
          this.webSocket.sendData(JSON.stringify({
            command: "SEND_MESSAGE",
            accessToken: SbUserInfo.getInstance().GetUserToken(),
            messageDto: {
              destinationRoomId: SbConfigManager.getInstance().chatRoomID,
              message: message
            }
          }));
        };

        _proto.FetchHistory = function FetchHistory() {
          this.webSocket.sendData(JSON.stringify({
            command: "FETCH_HISTORY",
            messageDto: {}
          }));
        };

        _proto.GetRoomData = function GetRoomData() {
          this.webSocket.sendData(JSON.stringify({
            command: "GET_ROOM_DATA",
            messageDto: {}
          }));
        };

        _proto.GetUserDetail = function GetUserDetail() {
          this.webSocket.sendData(JSON.stringify({
            command: "GET_USER_DETAILS",
            messageDto: {}
          }));
        };

        _proto.onWSOpen = function onWSOpen(event) {
          var _this2 = this;

          console.warn("onWSOpen: ", event);
          this.ping = 0;
          this.pong = 0;
          this.onConnectSuccess();
          this.clearIntervalPingPong();
          this.intervalPingPong = setInterval(function () {
            if (_this2.IsNeedConnectWS()) {
              _this2.Reconnect();

              return;
            }

            _this2.sendPing();
          }, TIME_PING_PONG);
        };

        _proto.IsNeedConnectWS = function IsNeedConnectWS() {
          var status = this.webSocket.getStatus();
          if (status == null || status == WebSocket.CLOSED || status == WebSocket.CLOSING) return true;
          if (this.ping - this.pong > 1) return true;
          return false;
        };

        _proto.Reconnect = function Reconnect() {
          console.warn("Reconnect");
          this.webSocket.reconnect();
        };

        _proto.LoginWS = function LoginWS() {
          var data = {
            "command": "AUTH",
            "accessToken": SbUserInfo.getInstance().GetUserToken(),
            "roomId": SbConfigManager.getInstance().chatRoomID
          };
          this.webSocket.sendData(JSON.stringify(data));
        };

        _proto.clearIntervalPingPong = function clearIntervalPingPong() {
          if (this.intervalPingPong != null) {
            clearInterval(this.intervalPingPong);
          }
        };

        _proto.onWsReceiveMessage = function onWsReceiveMessage(evt) {
          console.log("***ONMESSAGE", evt);

          if (typeof evt.data !== 'string') {
            return;
          }

          try {
            JSON.parse(evt.data);
          } catch (err) {
            return;
          }

          var msg = JSON.parse(evt.data);
          console.log(msg);

          switch (msg.type) {
            case "USER_DETAILS":
              this.userDetailsReceived(evt.data);
              break;

            case "FETCH_HISTORY":
              this.chatHistoryReceived(evt.data);
              break;

            case "ROOM_DATA":
              this.onRoomData(evt.data);
              break;

            case "MESSAGE":
              this.onMessageReceived(evt.data);
              break;

            case "PING":
              this.onPong(msg.message);
              break;
          }
        };

        _proto.userDetailsReceived = function userDetailsReceived(payload) {
          var userDetails = JSON.parse(payload);
        };

        _proto.chatHistoryReceived = function chatHistoryReceived(message) {
          var data = JSON.parse(message);
          director.emit(EVENT_MESSAGE_SB, SPORTBOOK.SOCKET_CHAT_SUBSCRIBE, data);
        };

        _proto.onRoomData = function onRoomData(payload) {
          console.log("Room data", payload);
        };

        _proto.onMessageReceived = function onMessageReceived(payload) {
          var message = null;

          if (typeof payload === "object") {
            message = payload;
          } else {
            message = JSON.parse(payload);
            director.emit(EVENT_MESSAGE_SB, SPORTBOOK.SOCKET_CHAT, message);
          }
        };

        _proto.onWSClose = function onWSClose(event) {};

        _proto.onWSError = function onWSError(ev) {};

        _proto.onPong = function onPong(num) {
          // console.log("pingpong pong nè: " + num);
          this.pong = num;
        };

        _proto.sendPing = function sendPing() {
          if (this.ping - this.pong > 1) {
            this.Reconnect();
            return;
          } // console.log("pingpong ping nè: " + this.ping);


          this.webSocket.sendData(JSON.stringify({
            command: "PING",
            messageDto: {
              message: this.ping
            }
          }));
          this.ping++;
        };

        return SbChatSocketHandle;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbCommonGroupMatchDetail.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUIMenu.ts', './SbDefine.ts', './SbGameHTTPManager.ts', './SbLocalizationManager.ts', './SbTabTimeline.ts', './SbTabStatistic.ts', './SbTabFormation.ts', './SbStringUtil.ts', './SbConfigManager.ts', './SbEmptyInfoComp.ts', './SbTypeDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Button, Layout, Widget, log, Component, SbUIMenu, SB_TOP_HEIGHT_ACTIVE_VIDEO, SB_BOT_HEIGHT_ACTIVE_VIDEO, SB_TOP_HEIGHT_NO_VIDEO, SB_BOT_HEIGHT_NO_VIDEO, SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO, SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO, SbGameHTTPManager, SbLocalizationManager, SbTabTimeline, SbTabStatistic, SbTabFormation, SbStringUtil, SbConfigManager, SbEmptyInfoComp, LiveStreamUIState;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Layout = module.Layout;
      Widget = module.Widget;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SB_TOP_HEIGHT_ACTIVE_VIDEO = module.SB_TOP_HEIGHT_ACTIVE_VIDEO;
      SB_BOT_HEIGHT_ACTIVE_VIDEO = module.SB_BOT_HEIGHT_ACTIVE_VIDEO;
      SB_TOP_HEIGHT_NO_VIDEO = module.SB_TOP_HEIGHT_NO_VIDEO;
      SB_BOT_HEIGHT_NO_VIDEO = module.SB_BOT_HEIGHT_NO_VIDEO;
      SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO = module.SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO;
      SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO = module.SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbTabTimeline = module.SbTabTimeline;
    }, function (module) {
      SbTabStatistic = module.SbTabStatistic;
    }, function (module) {
      SbTabFormation = module.SbTabFormation;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbEmptyInfoComp = module.SbEmptyInfoComp;
    }, function (module) {
      LiveStreamUIState = module.LiveStreamUIState;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "4c8b5EZvL1FFqRaoC47Wzwc", "SbCommonGroupMatchDetail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CommonTabEnum = exports('CommonTabEnum', /*#__PURE__*/function (CommonTabEnum) {
        CommonTabEnum[CommonTabEnum["INFO"] = 0] = "INFO";
        CommonTabEnum[CommonTabEnum["STATISTIC"] = 1] = "STATISTIC";
        CommonTabEnum[CommonTabEnum["FORMATION"] = 2] = "FORMATION";
        CommonTabEnum[CommonTabEnum["BET_NOW"] = 3] = "BET_NOW";
        return CommonTabEnum;
      }({}));
      var SbCommonGroupMatchDetail = exports('SbCommonGroupMatchDetail', (_dec = ccclass('SbCommonGroupMatchDetail'), _dec2 = property(Node), _dec3 = property(SbUIMenu), _dec4 = property(SbEmptyInfoComp), _dec5 = property(Button), _dec6 = property(Node), _dec7 = property(Layout), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Node), _dec11 = property(SbTabTimeline), _dec12 = property(SbTabStatistic), _dec13 = property(SbTabFormation), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbCommonGroupMatchDetail, _Component);

        function SbCommonGroupMatchDetail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "groupParent", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menuSub", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emptyComp", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnBetNow", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "hideButtonBet", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "layoutListButton", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabInfo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabStatictics", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabFormation", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "timeLineController", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "statisticController", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "formationController", _descriptor12, _assertThisInitialized(_this));

          _this.onMenuCb = void 0;
          _this.currentTab = 0;
          _this.dataMatchInfo = null;
          _this.dataFormation = null;
          _this.currentEventId = "";
          return _this;
        }

        var _proto = SbCommonGroupMatchDetail.prototype; // protected onLoad() {
        //     this.timeLineController = this.tabInfo.children[0].getComponent(SbTabTimeline);
        //     this.statisticController = this.tabStatictics.children[0].getComponent(SbTabStatistic);
        //     this.formationController = this.tabFormation.children[0].getComponent(SbTabFormation);
        // }

        _proto.onEnable = function onEnable() {
          if (this.currentEventId) {
            this.scheduleFetch();
          }
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();
        };

        _proto.InitCommonGroup = function InitCommonGroup(clickTabCb, isButtonBetNowEnable) {
          //hide button BetNow on screen highlight
          this.btnBetNow.node.active = isButtonBetNowEnable;
          this.hideButtonBet.active = isButtonBetNowEnable; // For Layout 

          this.layoutListButton.updateLayout(true);
          this.onMenuCb = clickTabCb;
          this.menuSub.SetButtonClickCallback(this.onMenuTabChosen.bind(this));
        };

        _proto.SetDataMatchInfo = function SetDataMatchInfo(eventId) {
          this.showEmptyInfo(true, false);
          this.dataMatchInfo = null;
          this.dataFormation = null;
          this.timeLineController.node.active = false;
          this.statisticController.node.active = false;
          this.formationController.node.active = false;
          this.timeLineController.ResetTab();
          this.statisticController.ResetTab();
          this.formationController.ResetTab();
          this.currentEventId = eventId;
          this.fetchMatchInfo();
          this.scheduleFetch();
        };

        _proto.SetWidgetLayout = function SetWidgetLayout(stateUI) {
          var container = this.node;
          var top = SB_TOP_HEIGHT_ACTIVE_VIDEO;
          var bottom = SB_BOT_HEIGHT_ACTIVE_VIDEO;

          if (stateUI == LiveStreamUIState.NORMAL) {
            top = SB_TOP_HEIGHT_NO_VIDEO;
            bottom = SB_BOT_HEIGHT_NO_VIDEO;
          } else if (stateUI == LiveStreamUIState.SHOW_BUTTON_LIVE) {
            top = SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO;
            bottom = SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO;
          }

          var widget = container.getComponent(Widget);

          if (widget) {
            widget.top = top;
            widget.bottom = bottom;
            widget.updateAlignment();
          }

          var listLayout = container.getComponentsInChildren(Widget);
          listLayout.forEach(function (element) {
            element.updateAlignment();
          });

          if (this.formationController) {
            this.formationController.AfterUpdateWidget();
          }
        };

        _proto.SetMenuFirstTab = function SetMenuFirstTab() {
          this.layoutListButton.updateLayout(true);
          this.menuSub.SetTabByIndex(CommonTabEnum.INFO, false);
        };

        _proto.SetActiveCommonGroup = function SetActiveCommonGroup(active) {
          this.node.active = active;

          if (active) {
            this.SetActiveGroupParent(true);
          }
        };

        _proto.scheduleFetch = function scheduleFetch() {
          var _this2 = this;

          this.unscheduleAllCallbacks();
          this.schedule(function () {
            _this2.fetchMatchInfo();
          }, SbConfigManager.getInstance().timeFetchUpdateMatch);
        };

        _proto.fetchMatchInfo = function fetchMatchInfo() {
          var _this3 = this; // Cheat with config


          if (!SbStringUtil.isNullOrEmpty(SbConfigManager.getInstance().listCheatMatchIds)) {
            var matchIds = SbConfigManager.getInstance().listCheatMatchIds.split(",");

            if (matchIds.length > 0) {
              var rnd = SbStringUtil.getRandomInt(matchIds.length);
              var idCheat = matchIds[rnd];

              if (idCheat && idCheat.length > 0) {
                this.requestMatchInfo({
                  sr_id: idCheat
                });
                return;
              }
            }
          }

          if (SbStringUtil.isNullOrEmpty(this.currentEventId)) {
            return;
          }

          var apiMappingId = SbConfigManager.getInstance().urlAPIMappingSportId + this.currentEventId;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(apiMappingId, function (obj) {
            log('Mapping ID', _this3.currentEventId, obj);

            if (obj && obj.data && obj.data.length > 0) {
              _this3.requestMatchInfo(obj.data[0]);
            }
          }, function (errMess) {}, true);
        };

        _proto.showEmptyInfo = function showEmptyInfo(isShow, isAnim) {
          if (isAnim === void 0) {
            isAnim = true;
          }

          if (isShow) {
            this.emptyComp.ShowEmptyInfo(SbLocalizationManager.getInstance().GetKeyValue("DontHaveMatchInfo"), isAnim);
          } else {
            this.emptyComp.HideEmptyInfo();
          }
        };

        _proto.requestMatchInfo = function requestMatchInfo(infoId) {
          var _this4 = this;

          var sportId = infoId['ts_id'];
          var locale = 'en';
          var apiTimeLine = SbConfigManager.getInstance().urlAPIGetMatchInfo + (locale + "/" + sportId + "/commentaries");
          SbGameHTTPManager.getInstance().sendGetHttpRequest(apiTimeLine, function (obj) {
            log('Timeline', obj);

            if (obj && obj.data) {
              _this4.dataMatchInfo = obj.data;
              var timeline = obj.data['sr_timeline'];

              if (_this4.timeLineController && timeline && timeline.length > 0) {
                _this4.timeLineController.SetDataTimeLine(timeline);

                if (_this4.formationController) {
                  _this4.formationController.SetDataTimeline(timeline);
                }
              }

              var statistic = obj.data['statistics'];

              if (_this4.statisticController && statistic && statistic['totals']) {
                _this4.statisticController.SetDataStatistic(statistic['totals']['competitors']);
              }

              _this4.checkActiveInfoTab();
            }

            _this4.requestLineUp(locale, sportId);
          }, function (errMess) {
            _this4.requestLineUp(locale, sportId);
          }, true);
        } // protected addCheat(timeLine: TLCommonData[]) {
        //     const yellow = timeLine.filter((v) => v.type == TimeLineType.YELLOW_CARD );
        //     if (yellow.length > 0) {
        //         for (let i = 0; i < yellow.length; i++) {
        //             if (i == 0) {
        //                 yellow[i].type = TimeLineType.RED_CARD;
        //             } else {
        //                 // const clone = Object.assign(yellow[i], {});
        //                 // timeLine.push(clone);
        //             }
        //         }
        //     }
        // }
        ;

        _proto.requestLineUp = function requestLineUp(locale, sportId) {
          var _this5 = this;

          var apiLineup = SbConfigManager.getInstance().urlAPIGetMatchInfo + (locale + "/" + sportId + "/lineups");
          SbGameHTTPManager.getInstance().sendGetHttpRequest(apiLineup, function (obj) {
            log('FORMATION ', obj);

            if (obj && obj.data) {
              _this5.dataFormation = obj.data;

              if (_this5.formationController) {
                var match = obj.data['sport_event'];

                if (match) {
                  _this5.formationController.SetDataInfoMatch(match['competitors']);
                }

                var formation = obj.data['lineups'];

                if (formation) {
                  _this5.formationController.SetDataFormation(formation['competitors'], _this5.currentEventId);
                }
              }

              _this5.checkActiveInfoTab();
            }
          }, function (errMess) {}, true);
        };

        _proto.checkActiveInfoTab = function checkActiveInfoTab() {
          var isShowTab = false;

          if (this.currentTab == CommonTabEnum.INFO) {
            isShowTab = this.timeLineController.IsHaveData;
            this.timeLineController.node.active = isShowTab;
          } else if (this.currentTab == CommonTabEnum.STATISTIC) {
            isShowTab = this.statisticController.IsHaveData;
            this.statisticController.node.active = isShowTab;
          } else if (this.currentTab == CommonTabEnum.FORMATION) {
            isShowTab = this.formationController.IsHaveData;
            this.formationController.node.active = isShowTab;
          }

          this.showEmptyInfo(!isShowTab);
        };

        _proto.SetActiveGroupParent = function SetActiveGroupParent(active) {
          this.groupParent.active = active;
        };

        _proto.hideAllPanel = function hideAllPanel() {
          this.tabInfo.active = false;
          this.tabStatictics.active = false;
          this.tabFormation.active = false;
        };

        _proto.onMenuTabChosen = function onMenuTabChosen(tab) {
          this.hideAllPanel();
          this.currentTab = tab;

          switch (tab) {
            case CommonTabEnum.INFO:
              this.tabInfo.active = true;
              break;

            case CommonTabEnum.STATISTIC:
              this.tabStatictics.active = true;
              break;

            case CommonTabEnum.FORMATION:
              this.tabFormation.active = true;
              break;
          }

          this.checkActiveInfoTab(); //case CommonTabEnum.BET_NOW:

          if (this.onMenuCb) {
            this.onMenuCb(tab);
          }
        };

        return SbCommonGroupMatchDetail;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "groupParent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "menuSub", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "emptyComp", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnBetNow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hideButtonBet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "layoutListButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tabInfo", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tabStatictics", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "tabFormation", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "timeLineController", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "statisticController", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "formationController", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbCommonPrefabsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopupCalculatorBet.ts', './SbPopupBetHistory.ts', './SbPopupSetting.ts', './SbLoadingNode.ts', './SbPopup1Button.ts', './SbPopup2Button.ts', './SbPopupMessageUtil.ts', './SbPrefabsManager.ts', './SbCalendar.ts', './SbPopupSearch.ts', './SbDefine.ts', './SbPopupBetSlip.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, game, director, Widget, Vec3, sys, tween, resources, error, instantiate, Component, SbPopupCalculatorBet, SbPopupBetHistory, SbPopupSetting, SbLoadingNode, SbPopup1Button, SbPopup2Button, SbPopupMessageUtil, SbPrefabsManager, SbCalendar, SbPopupSearch, SB_EVENT_SHOW_BETSLIP, SB_EVENT_SHOW_MESSAGE_ULTIL, SB_EVENT_SHOW_LOADING_FULL_SCREEN, SB_EVENT_HIDE_LOADING_FULL_SCREEN, KEY_INDEX_MENU_BETSLIP_CURRENT;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      director = module.director;
      Widget = module.Widget;
      Vec3 = module.Vec3;
      sys = module.sys;
      tween = module.tween;
      resources = module.resources;
      error = module.error;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      SbPopupCalculatorBet = module.default;
    }, function (module) {
      SbPopupBetHistory = module.default;
    }, function (module) {
      SbPopupSetting = module.default;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      SbPopup1Button = module.default;
    }, function (module) {
      SbPopup2Button = module.default;
    }, function (module) {
      SbPopupMessageUtil = module.default;
    }, function (module) {
      SbPrefabsManager = module.default;
    }, function (module) {
      SbCalendar = module.default;
    }, function (module) {
      SbPopupSearch = module.default;
    }, function (module) {
      SB_EVENT_SHOW_BETSLIP = module.SB_EVENT_SHOW_BETSLIP;
      SB_EVENT_SHOW_MESSAGE_ULTIL = module.SB_EVENT_SHOW_MESSAGE_ULTIL;
      SB_EVENT_SHOW_LOADING_FULL_SCREEN = module.SB_EVENT_SHOW_LOADING_FULL_SCREEN;
      SB_EVENT_HIDE_LOADING_FULL_SCREEN = module.SB_EVENT_HIDE_LOADING_FULL_SCREEN;
    }, function (module) {
      KEY_INDEX_MENU_BETSLIP_CURRENT = module.KEY_INDEX_MENU_BETSLIP_CURRENT;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "b4fd729WiVOGojG28LQ1BS6", "SbCommonPrefabsManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbCommonPrefabsManager = exports('default', (_dec = ccclass('SbCommonPrefabsManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbCommonPrefabsManager, _Component);

        function SbCommonPrefabsManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.loadingNode = null;
          _this.popupMessageUtil = null;
          _this.itemBetHistoryTemplate = null;
          _this.itemBetSlipTemplate = null; // private itemSearchMatchTemplate = null;
          // private itemSearchLeagueTemplate = null;

          _this.itemHighlightTemplate = null;
          _this.itemLivestreamTemplate = null;
          _this.itemMatchScheduleTemplate = null;
          _this.itemStandingsTemplate = null;
          _this.menuLeft = null;
          _this.menuTop = null;
          _this.popupBetHistory = null;
          _this.popupBetSlip = null; // SbPopupBetSlip Component (fix circle)

          _this.scrollviewLeague = null;
          _this.callbackChangeTypeTimeMatch = null;
          _this.callbackChangeOddsStyleFinish = null;
          _this.popupCalculatorBet = null;
          _this.popupCalendar = null;
          _this.popupSearch = null;
          _this.callbackRequestDataEvensFromCalendarSuccess = null;
          _this.callbackRequestDataEvensFromSearchSuccess = null;
          _this.CustomLayerPopup = null;
          return _this;
        }

        SbCommonPrefabsManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbCommonPrefabsManager();
          }

          return this.Instance;
        };

        var _proto = SbCommonPrefabsManager.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          SbCommonPrefabsManager.Instance = this;
          game.addPersistRootNode(this.node);
          this.addLeftMenu();
          director.off("SbRequestRefreshUserInfo");
          director.on("SbRequestRefreshUserInfo", function () {
            SbCommonPrefabsManager.getInstance().GetMenuTop().RequestRefreshUserInfo();
          });
          director.off(SB_EVENT_SHOW_BETSLIP);
          director.on(SB_EVENT_SHOW_BETSLIP, function (headerIndex) {
            if (headerIndex === void 0) {
              headerIndex = -1;
            } // SbCommonPrefabsManager.getInstance().GetMenuTop().RequestRefreshUserInfo();


            SbCommonPrefabsManager.getInstance().GetMenuTop().ShowBetSlip(false, headerIndex);
            SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
            SbCommonPrefabsManager.getInstance().hideListLeague();
          });
          director.off(SB_EVENT_SHOW_MESSAGE_ULTIL);
          director.on(SB_EVENT_SHOW_MESSAGE_ULTIL, function (message) {
            _this2.ShowMessage(message);
          });
          director.off(SB_EVENT_SHOW_LOADING_FULL_SCREEN);
          director.on(SB_EVENT_SHOW_LOADING_FULL_SCREEN, function () {
            _this2.ShowLoadingFullScreen();
          });
          director.off(SB_EVENT_HIDE_LOADING_FULL_SCREEN);
          director.on(SB_EVENT_HIDE_LOADING_FULL_SCREEN, function () {
            _this2.HideLoadingFullScreen();
          });
        };

        _proto.start = function start() {
          SbCommonPrefabsManager.Instance.LoadPrefabTemplate();
        };

        _proto.Clean = function Clean() {
          if (this.node != null) {
            game.removePersistRootNode(this.node);
            this.node.removeFromParent();
          }
        };

        _proto.UpdateContentSize = function UpdateContentSize() {
          if (this.node != null) {
            var widget = this.node.getComponent(Widget);
            if (widget != null && widget != undefined) widget.updateAlignment();
          }
        };

        _proto.GetParentOffPopup = function GetParentOffPopup() {
          return this.node;
        };

        _proto.GetPrefab = function GetPrefab(url, callback) {
          this.loadPrefab(url, callback);
        };

        _proto.ShowLoadingFullScreen = function ShowLoadingFullScreen() {
          var _this3 = this;

          if (this.loadingNode != null) {
            this.loadingNode.node.setSiblingIndex(this.node.children.length - 1);
            this.loadingNode.ShowLoading();
          } else {
            this.loadPrefab("Sportsbook/prefabs/UI/Loading", function (node) {
              _this3.loadingNode = SbPrefabsManager.getInstance().getLoadingFullScreen().getComponent(SbLoadingNode);

              if (_this3.loadingNode != null && _this3.loadingNode != undefined) {
                _this3.loadingNode.node.parent = _this3.node;

                _this3.loadingNode.node.setPosition(new Vec3(0, 0)); // this.loadingNode.node.zIndex = 30;


                _this3.loadingNode.node.setSiblingIndex(_this3.node.children.length - 1);

                _this3.loadingNode.ShowLoading();
              }
            });
          }
        };

        _proto.ShowMessage = function ShowMessage(str) {
          var _this4 = this;

          if (this.popupMessageUtil == null) {
            this.loadPrefab("Sportsbook/prefabs/UI/PopupMessageUtil", function (node) {
              var popup = node.getComponent(SbPopupMessageUtil);
              popup.node.parent = _this4.node;
              popup.node.setPosition(new Vec3(0, 0)); // popup.node.zIndex = 20;

              popup.node.setSiblingIndex(_this4.node.children.length - 1);
              popup.showMessage(str);
              _this4.popupMessageUtil = popup;
            });
          } else {
            this.popupMessageUtil.node.setSiblingIndex(this.node.children.length - 1);
            this.popupMessageUtil.showMessage(str);
          }
        };

        _proto.ShowPopup1Button = function ShowPopup1Button(title, mess, callback) {
          var _this5 = this;

          this.loadPrefab("Sportsbook/prefabs/UI/Popup1Button", function (node) {
            var popup1Button = node.getComponent(SbPopup1Button); // // let popup1Button: SbPopup1Button = cc.instantiate(this.popup1Button).getComponent(SbPopup1Button);

            popup1Button.node.parent = _this5.node;
            popup1Button.node.setPosition(new Vec3(0, 0)); // popup1Button.node.zIndex = 31;

            popup1Button.setTitle(title);
            popup1Button.setContent(mess);
            popup1Button.setHideCallback(callback);
            popup1Button.show();
          });
        };

        _proto.ShowPopup2Button = function ShowPopup2Button(title, mess, okCallback, cancelCallback) {
          var _this6 = this;

          this.loadPrefab("Sportsbook/prefabs/UI/Popup2Button", function (node) {
            var popup2Button = node.getComponent(SbPopup2Button);
            popup2Button.node.parent = _this6.node;
            popup2Button.node.setPosition(new Vec3(0, 0)); // popup2Button.node.zIndex = 31;

            popup2Button.setTitle(title);
            popup2Button.setContent(mess);
            popup2Button.SetCancelCallback(cancelCallback);
            popup2Button.SetOkCallback(okCallback);
            popup2Button.show();
          });
        };

        _proto.HideLoadingFullScreen = function HideLoadingFullScreen() {
          if (this.loadingNode != null) this.loadingNode.HideLoading();
        };

        _proto.GetCalendar = function GetCalendar() {
          return this.popupCalendar;
        };

        _proto.SetCallbackRequestDataEvensFromCalendarSuccess = function SetCallbackRequestDataEvensFromCalendarSuccess(cb) {
          this.callbackRequestDataEvensFromCalendarSuccess = cb;
        };

        _proto.SetCallbackRequestDataEvensFromSearchSuccess = function SetCallbackRequestDataEvensFromSearchSuccess(cb) {
          this.callbackRequestDataEvensFromSearchSuccess = cb;
        };

        _proto.playAnimAddTicketToParlayBet = function playAnimAddTicketToParlayBet(pos) {// let path = "Sportsbook/prefabs/Football/Animations/AnimAddParlayBet";
          // if (this.menuTop != null) {
          //     this.loadPrefab(path, (node) => {
          //         this.itemAnimAddParlayBet = node;//.getComponent(SbPopupSearch);
          //         if (parent == null) {
          //             this.itemAnimAddParlayBet.parent = this.node;
          //         }
          //         else {
          //             this.itemAnimAddParlayBet.parent = this.node;
          //             this.itemAnimAddParlayBet.zIndex = 11;
          //         }
          //         let posTartget = this.menuTop.GetPositionPositionAnimParlayBet();
          //         if (pos != null) {
          //             let localPos = this.node.convertToNodeSpaceAR(pos);
          //             let localPosTartget = this.node.convertToNodeSpaceAR(posTartget);
          //             this.itemAnimAddParlayBet.setPosition(localPos);
          //             this.itemAnimAddParlayBet.runAction(cc.sequence(cc.delayTime(0.7), cc.fadeOut(0.25)));
          //             this.itemAnimAddParlayBet.runAction(cc.sequence(cc.delayTime(0.7), cc.scaleTo(0.25, 0.2)));
          //             this.itemAnimAddParlayBet.runAction(cc.sequence(cc.bezierTo(1, [cc.v2(0, cc.winSize.height / 2), cc.v2(250, -cc.winSize.height / 2), new cc.Vec2(localPosTartget.x, localPosTartget.y)]), cc.removeSelf(true)));
          //         }
          //     });
          // }
        };

        _proto.ShowPopupSearch = function ShowPopupSearch() {
          var _this7 = this;

          if (this.popupSearch == null) {
            this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupSearch", function (node) {
              _this7.popupSearch = node.getComponent(SbPopupSearch);
              _this7.popupSearch.node.parent = _this7.node;

              _this7.popupSearch.node.setPosition(new Vec3(0, 0));

              if (_this7.callbackRequestDataEvensFromSearchSuccess != null) _this7.popupSearch.SetCallbackOnRequestDataFinish(_this7.callbackRequestDataEvensFromSearchSuccess); // this.popupSearch.init(this);

              _this7.popupSearch.show();
            });
          } else {
            // this.popupSearch.init(this);
            // this.popupCalendar.initFootballBettingController(sbFootballBettingController);
            this.popupSearch.show();
          }
        };

        _proto.ShowPopupCalendar = function ShowPopupCalendar(sbFootballBettingController) {
          var _this8 = this;

          if (this.popupCalendar == null) {
            this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupCalendar", function (node) {
              _this8.popupCalendar = node.getComponent(SbCalendar);
              _this8.popupCalendar.node.parent = _this8.node;

              _this8.popupCalendar.node.setPosition(new Vec3(0, 0)); // this.popupCalendar.node.zIndex = 12;


              if (_this8.callbackRequestDataEvensFromCalendarSuccess != null) _this8.popupCalendar.SetCallbackOnRequestDataFinish(_this8.callbackRequestDataEvensFromCalendarSuccess);

              _this8.popupCalendar.init(_this8);

              _this8.popupCalendar.initFootballBettingController(sbFootballBettingController);

              _this8.popupCalendar.ShowDateSelected();

              _this8.popupCalendar.show();
            });
          } else {
            this.popupCalendar.init(this);
            this.popupCalendar.initFootballBettingController(sbFootballBettingController);
            this.popupCalendar.ShowDateSelected();
            this.popupCalendar.show();
          }
        };

        _proto.SetCalendarDisplay = function SetCalendarDisplay(type) {
          if (this.popupCalendar == null) {
            this.popupCalendar.SetDayWithTypeTimeMatch(type);
          }
        };

        _proto.showPopupSeting = function showPopupSeting() {
          var node = SbPrefabsManager.getInstance().getPopupSetting();
          var nodeT = node.getComponent(SbPopupSetting);
          nodeT.node.parent = this.node;
          nodeT.node.setPosition(new Vec3(0, 0)); // nodeT.node.zIndex = 11;

          if (this.callbackChangeOddsStyleFinish != null) nodeT.SetCallBackChangeOddsStyle(this.callbackChangeOddsStyleFinish.bind(this));
          nodeT.init(this);
          nodeT.show();
        };

        _proto.showPopupCalculatorBet = function showPopupCalculatorBet(bodyRequest, oddsObj, oddsType, popupBettingHideCallback, isUpdateOdds, sbFootballBettingController) {
          if (isUpdateOdds === void 0) {
            isUpdateOdds = false;
          }

          if (this.popupCalculatorBet == null && isUpdateOdds == false) {
            var node = SbPrefabsManager.getInstance().getPopupBetting();
            this.popupCalculatorBet = node.getComponent(SbPopupCalculatorBet);
            this.popupCalculatorBet.node.parent = this.node;
            this.popupCalculatorBet.node.setPosition(new Vec3(0, 0));
            this.popupCalculatorBet.init(this, sbFootballBettingController);
            this.popupCalculatorBet.show();
            this.popupCalculatorBet.setDataCalculatorBet(bodyRequest, oddsObj, oddsType, popupBettingHideCallback);
          } else if (this.popupCalculatorBet != null && isUpdateOdds) {
            this.popupCalculatorBet.setDataCalculatorBet(bodyRequest, oddsObj, oddsType, popupBettingHideCallback, isUpdateOdds);
          }
        };

        _proto.resetPopupCalculatorBet = function resetPopupCalculatorBet() {
          this.popupCalculatorBet = null;
        };

        _proto.showPopupBetHistory = function showPopupBetHistory() {
          var _this9 = this;

          if (this.popupBetHistory == null) {
            this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupBetHistory", function (node) {
              var nodeT = node.getComponent(SbPopupBetHistory);
              nodeT.node.parent = _this9.CustomLayerPopup || _this9.node;
              nodeT.node.setPosition(new Vec3(0, 0));
              nodeT.init(_this9);
              nodeT.show();
              nodeT.ShowHeader(true);
              _this9.popupBetHistory = nodeT;
            });
          } else {
            this.popupBetHistory.show();
            this.popupBetHistory.ShowHeader(true);
            this.popupBetHistory.Refresh();
          }
        };

        _proto.showPopupBetSlip = function showPopupBetSlip(isShowHeader, headerIndex) {
          var _this10 = this;

          if (isShowHeader === void 0) {
            isShowHeader = true;
          }

          if (headerIndex === void 0) {
            headerIndex = -1;
          }

          isShowHeader = true; //upadte alway show

          if (headerIndex !== -1) {
            sys.localStorage.setItem(KEY_INDEX_MENU_BETSLIP_CURRENT, headerIndex.toString());
          }

          if (this.popupBetSlip == null) {
            this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupBetSlip", function (node) {
              var nodeT = node.getComponent('SbPopupBetSlip');
              nodeT.node.parent = _this10.CustomLayerPopup || _this10.node;
              nodeT.node.setPosition(new Vec3(0, 0));
              nodeT.init(_this10);
              nodeT.show();
              nodeT.ShowHeader(isShowHeader);
              _this10.popupBetSlip = nodeT;
            });
          } else {
            this.popupBetSlip.show();
            this.popupBetSlip.ShowHeader(isShowHeader);

            if (headerIndex !== -1) {
              this.popupBetSlip.SetHeaderPopup(headerIndex);
            }

            this.popupBetSlip.Refresh(headerIndex);
          }
        };

        _proto.setListLeague = function setListLeague(nodeScrollviewLeague) {
          this.scrollviewLeague = nodeScrollviewLeague;
        };

        _proto.showListLeague = function showListLeague() {
          this.scrollviewLeague.node.active = true;
        };

        _proto.hideListLeague = function hideListLeague() {
          var _this11 = this;

          tween(this.node).delay(0.4).call(function () {
            _this11.scrollviewLeague.node.active = false;
          }).start();
        };

        _proto.hidePopupBetHistory = function hidePopupBetHistory() {
          if (this.popupBetHistory != null && this.popupBetHistory.node.active) this.popupBetHistory.hide(null, 0.4, false);
        };

        _proto.hidePopupBetSlip = function hidePopupBetSlip() {
          if (this.popupBetSlip != null && this.popupBetSlip.node.active) this.popupBetSlip.hide(null, 0.4, false);
        };

        _proto.showPopupBetSuccess = function showPopupBetSuccess(data, localInfo, sbFootballBettingController) {
          var _this12 = this;

          this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupBettingSuccess", function (node) {
            var nodeT = node.getComponent('SbPopupBetSuccess'); // Component SbPopupBetSuccess (fix circle)

            nodeT.node.parent = _this12.node;
            nodeT.node.setPosition(new Vec3(0, 0));

            if (nodeT) {
              nodeT.init(sbFootballBettingController);
              nodeT.show();
              nodeT.initData(data, localInfo);
            }
          });
        };

        _proto.GetItemBetHistoryTemplate = function GetItemBetHistoryTemplate() {
          return this.itemBetHistoryTemplate;
        };

        _proto.GetItemBetSlipTemplate = function GetItemBetSlipTemplate() {
          return this.itemBetSlipTemplate;
        } // GetItemSearchMatchTemplate() {
        //     return this.itemSearchMatchTemplate;
        // }
        // GetItemSearchLeagueTemplate() {
        //     return this.itemSearchLeagueTemplate;
        // }
        ;

        _proto.GetMenuLeft = function GetMenuLeft() {
          return this.menuLeft;
        };

        _proto.GetMenuTop = function GetMenuTop() {
          return this.menuTop;
        };

        _proto.GetItemHighlightTemplate = function GetItemHighlightTemplate() {
          return this.itemHighlightTemplate;
        };

        _proto.GetItemLivestreamTemplate = function GetItemLivestreamTemplate() {
          return this.itemLivestreamTemplate;
        };

        _proto.GetItemMatchScheduleTemplate = function GetItemMatchScheduleTemplate() {
          return this.itemMatchScheduleTemplate;
        };

        _proto.GetItemStandingsTemplate = function GetItemStandingsTemplate() {
          return this.itemStandingsTemplate;
        };

        _proto.SetCallbackChangeTypeTimeMatch = function SetCallbackChangeTypeTimeMatch(cb) {
          if (this.menuLeft == null || this.menuLeft == undefined) this.callbackChangeTypeTimeMatch = cb;else this.menuLeft.SetCallbackChangeTypeTimeMatch(cb);
        };

        _proto.SetCallbackChangeTypeTimeMatchFromMenuTop = function SetCallbackChangeTypeTimeMatchFromMenuTop(cb) {
          if (this.menuTop == null || this.menuTop == undefined) this.callbackChangeTypeTimeMatch = cb;else this.menuTop.SetCallbackChangeTypeTimeMatch(cb);
        };

        _proto.SetCallBackChangeOddsStyleFinish = function SetCallBackChangeOddsStyleFinish(cb) {
          this.callbackChangeOddsStyleFinish = cb;
        };

        _proto.InitMenuTop = function InitMenuTop(nodeMenu) {
          this.menuTop = nodeMenu;
          if (this.callbackChangeTypeTimeMatch != null) this.menuTop.SetCallbackChangeTypeTimeMatch(this.callbackChangeTypeTimeMatch);
        };

        _proto.addLeftMenu = function addLeftMenu() {// this.loadPrefab("Sportsbook/prefabs/UI/MenuLeft", (node) => {
          //     let nodeT: SbMenuLeft = node.getComponent(SbMenuLeft);
          //     nodeT.node.parent = this.node;
          //     // nodeT.node.zIndex = 10;
          //     nodeT.node.setPosition(new Vec3(-view.getVisibleSize().width / 2, view.getVisibleSize().height / 2))
          //     this.menuLeft = nodeT;
          //     if (this.callbackChangeTypeTimeMatch != null)
          //         this.menuLeft.SetCallbackChangeTypeTimeMatch(this.callbackChangeTypeTimeMatch);
          //     this.menuLeft.init(this);
          // });
        };

        _proto.AddCalendar = function AddCalendar() {
          var _this13 = this;

          if (this.popupCalendar == null) {
            this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupCalendar", function (node) {
              _this13.popupCalendar = node.getComponent(SbCalendar);
              _this13.popupCalendar.node.parent = _this13.node;

              _this13.popupCalendar.node.setPosition(new Vec3(0, 0)); // this.popupCalendar.node.zIndex = 12;


              if (_this13.callbackRequestDataEvensFromCalendarSuccess != null) _this13.popupCalendar.SetCallbackOnRequestDataFinish(_this13.callbackRequestDataEvensFromCalendarSuccess);

              _this13.popupCalendar.init(_this13);

              _this13.popupCalendar.ShowDateSelected();

              _this13.popupCalendar.HideNoAnim();
            });
          }
        };

        _proto.LoadPrefabTemplate = /*#__PURE__*/function () {
          var _LoadPrefabTemplate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this14 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemBetHistory", function (node) {
                    _this14.itemBetHistoryTemplate = node;
                  });
                  this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemBetSlip", function (node) {
                    _this14.itemBetSlipTemplate = node;
                  }); // this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemSearchMatch", (node) => {
                  //     this.itemSearchMatchTemplate = node;
                  // });
                  // this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemSearchLeague", (node) => {
                  //     this.itemSearchLeagueTemplate = node;
                  // });

                  this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemHighlight", function (node) {
                    _this14.itemHighlightTemplate = node;
                  });
                  this.loadPrefab("Sportsbook/prefabs/Football/Popup/ItemVideoLivestream", function (node) {
                    _this14.itemLivestreamTemplate = node;
                  });
                  this.loadPrefab("Sportsbook/prefabs/StandingsAndSchedule/ItemMatchSchedule", function (node) {
                    _this14.itemMatchScheduleTemplate = node;
                  });
                  this.loadPrefab("Sportsbook/prefabs/StandingsAndSchedule/ItemStanding", function (node) {
                    _this14.itemStandingsTemplate = node;
                  });

                case 6:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function LoadPrefabTemplate() {
            return _LoadPrefabTemplate.apply(this, arguments);
          }

          return LoadPrefabTemplate;
        }();

        _proto.loadPrefab = function loadPrefab(url, callback) {
          resources.load(url, function (err, prefab) {
            if (prefab === null) {
              error("prefab null: " + url);
              callback(null);
            } else {
              var nodeTemp = instantiate(prefab);
              callback(nodeTemp);
            }
          }.bind(this));
        };

        return SbCommonPrefabsManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbConfigManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbDefine.ts', './SbStringUtil.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sys, error, Component, SBChatUseWSType, SB_KEY_CONFIG_DATA, SbStringUtil;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      SBChatUseWSType = module.SBChatUseWSType;
      SB_KEY_CONFIG_DATA = module.SB_KEY_CONFIG_DATA;
    }, function (module) {
      SbStringUtil = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "11d34SC5HlDT4OdsZarof+H", "SbConfigManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //@ts-ignore
      // import GameConfigManager from "../../MiniComponent/ManagerClass/GameConfigManager";

      var VERSION_APP = "v1.0.0";
      var AuthorizationStag = "Zml2ZTg4OjEyMzQ1Ng==";
      var AuthorizationProd = "Z284ODpTYjJAMjAyMSQkJA==";
      var AuthorizationProd1 = "cmlrOlNiMkAyMDIxJCQk";
      var AuthorizationProd2 = "Z284ODpTYjJAMjAyMSQkJA==";
      var AuthorizationProd3 = "Z284ODpTYjJAMjAyMSQkJA==";
      var AuthorizationProd4 = "Z284ODpTYjJAMjAyMSQkJA==";
      var AuthorizationProd5 = "aXdpbjpTYjJAMjAyMSQkJA==";
      var AuthorizationProd6 = "Z284ODpTYjJAMjAyMSQkJA==";
      var AuthorizationProd7 = "Z284ODpTYjJAMjAyMSQkJA==";
      var Key_Environment = "HJpojgs67Shbf==";
      var AgentID_Prod = 37; // 119

      var AgentID_Prod1 = 34; // 105

      var AgentID_Prod2 = 58; // 116

      var AgentID_Prod3 = 62; // 118

      var AgentID_Prod4 = 1;
      var AgentID_Prod5 = 1;
      var AgentID_Prod6 = 1;
      var AgentID_Prod7 = 1;
      var AgentID_Stag = 18;
      var AgentID_Stag1 = 16;
      var AgentID_Stag2 = 189;
      var AgentID_Stag3 = 30;
      var AgentID_Stag4 = 1;
      var AgentID_Stag5 = 1;
      var AgentID_Stag6 = 1;
      var AgentID_Stag7 = 1;
      var SbOrientation = exports('SbOrientation', /*#__PURE__*/function (SbOrientation) {
        SbOrientation[SbOrientation["None"] = 0] = "None";
        SbOrientation[SbOrientation["Landscape"] = 1] = "Landscape";
        SbOrientation[SbOrientation["Portrait"] = 2] = "Portrait";
        return SbOrientation;
      }({}));
      var SbSkinID = exports('SbSkinID', /*#__PURE__*/function (SbSkinID) {
        SbSkinID[SbSkinID["Skin0"] = -1] = "Skin0";
        SbSkinID[SbSkinID["Skin1"] = 0] = "Skin1";
        SbSkinID[SbSkinID["Skin2"] = 1] = "Skin2";
        SbSkinID[SbSkinID["Skin3"] = 2] = "Skin3";
        SbSkinID[SbSkinID["Skin4"] = 3] = "Skin4";
        SbSkinID[SbSkinID["Skin5"] = 4] = "Skin5";
        SbSkinID[SbSkinID["Skin6"] = 5] = "Skin6";
        SbSkinID[SbSkinID["Skin7"] = 6] = "Skin7";
        return SbSkinID;
      }({}));
      var SbConfigManager = exports('default', (_dec = ccclass('SbConfigManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbConfigManager, _Component);

        function SbConfigManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.environment = "prod";
          _this.skinCurrent = SbSkinID.Skin0;
          _this.orientation = SbOrientation.Portrait; //============== API ==============

          _this.urlHomeExposeService = "";
          _this.urlHomeBettingService = "";
          _this.urlHomeOAuthService = "";
          _this.urlHomeWebsocket = "";
          _this.urlAPIEvents = "";
          _this.urlAPICaculateBet = "";
          _this.urlAPICaculateParlayBet = "";
          _this.urlAPIGetReportBet = "";
          _this.urlAPIGetBetSlip = "";
          _this.urlAPIGetUserInfo = "";
          _this.urlAPIGetBalanceUser = "";
          _this.urlAPIPlaceBet = "";
          _this.urlAPIGetAccessToken = "";
          _this.urlSetting = "";
          _this.urlSearch = "";
          _this.urlGetEventMarketByLeagueId = "";
          _this.urlGetEventMarketByEventId = "";
          _this.urlHightlight = "";
          _this.urlGetLivestream = ""; // OLD: "/event/get-event-market?agentId="

          _this.getEventMarketAPI = '/event/v1/get-event-market?agentId=';
          _this.urlGetSchedules = "https://v2-api.7bong.com/api/v2/seasons/{lang}/{seasonID}/schedules?";
          _this.urlGetStandings = "https://v2-api.7bong.com/api/v2/seasons/{lang}/{seasonID}/standings"; // clientID = "";

          _this.agentID = 0;
          _this.urlWebSocket = "";
          _this.urlVideoJS = ""; //player for play video

          _this.urlVirtualVideoJS = ""; //player for play video
          //favorite

          _this.urlGetFavorite = "";
          _this.urlLeagueFavorite = "";
          _this.urlEventFavorite = ""; //MatchInfo API

          _this.urlAPIMappingSportId = "https://v2-api.7bong.com/api/v2/sb-mapping/sb-id/list?ids="; //"https://lsc-stg.s2-tool.com/api/v1/sb-mapping/sb-id/list?ids=";

          _this.urlAPIGetMatchInfo = "https://v2-api.7bong.com/api/v2/sport-event/"; //WS Chat

          _this.urlWSChatHost = 'wss://trat.sb21.net/chatapp/rawsocket';
          _this.chatRoomID = 123;
          _this.useChatWSType = SBChatUseWSType.ALL;
          _this.maxChatElement = 100;
          _this.minMoneyCanChat = 20000;
          _this.timeFetchUpdateMatch = 60;
          _this.listCheatMatchIds = "";
          _this.scheduleAndStandingInfo = [];
          _this.favoriteDistanceDate = 10;
          _this.brandImageUrl = ''; // Depend brand

          _this.seasonsConfig = [{
            leagueName: "Ngoại Hạng\nAnh",
            leagueId: "yl5ergph9wvr8k0",
            active: true,
            titleStanding: false,
            totalRound: 38,
            numMatchPerRound: 10,
            nameLogo: 'EnglishPremier',
            indexSkin: 0
          }, {
            leagueName: "Bundesliga",
            leagueId: "z8yomo4hd19q0j6",
            active: true,
            titleStanding: false,
            totalRound: 17,
            numMatchPerRound: 9,
            nameLogo: 'Bundesliga',
            indexSkin: 1
          }, {
            leagueName: "Serie A",
            leagueId: "56ypq3nhjvemd7o",
            active: true,
            titleStanding: false,
            totalRound: 38,
            numMatchPerRound: 10,
            nameLogo: 'SerieA',
            indexSkin: 2
          }, {
            leagueName: "La Liga",
            leagueId: "kjw2r09ho2jrz84",
            active: true,
            titleStanding: false,
            totalRound: 38,
            numMatchPerRound: 10,
            nameLogo: 'LaLiga',
            indexSkin: 3
          }, {
            leagueName: "Ligue 1",
            leagueId: "p4jwq2gh3eym0ve",
            active: true,
            titleStanding: false,
            totalRound: 34,
            numMatchPerRound: 10,
            nameLogo: 'Ligue1',
            indexSkin: 4
          }, {
            leagueName: "UEFA Champions\nLeague",
            leagueId: "v2y8m4zhk64ql07",
            active: true,
            isGroupView: true,
            titleStanding: false,
            totalRound: 8,
            numMatchPerRound: 18,
            nameLogo: 'UEFAChampions',
            indexSkin: 5
          }, {
            leagueName: "UEFA Europa\nLeague",
            leagueId: "z8yomo4hd39q0j6",
            active: true,
            isGroupView: true,
            titleStanding: false,
            totalRound: 8,
            numMatchPerRound: 18,
            nameLogo: 'UEFAEuropa',
            indexSkin: 6
          }, {
            leagueName: "UEFA Nations\nLeague",
            leagueId: "gy0or5jh2j6qwzv",
            active: true,
            titleStanding: true,
            totalRound: undefined,
            nameLogo: 'UEFANations',
            indexSkin: 7
          }, {
            leagueName: "FA Cup",
            leagueId: "9dn1m1ghwwpmoep",
            active: true,
            isGroupView: true,
            titleStanding: true,
            totalRound: undefined,
            nameLogo: 'FaCup',
            indexSkin: 8
          }, {
            leagueName: "Japanese J1\nLeague",
            leagueId: "yl5ergphz8er8k0",
            active: true,
            titleStanding: false,
            totalRound: 38,
            numMatchPerRound: 10,
            nameLogo: 'JapanJ1',
            indexSkin: 9
          }, {
            leagueName: "Korean K\nLeague 1",
            leagueId: "l965mkyh642r1ge",
            active: true,
            titleStanding: false,
            totalRound: 33,
            numMatchPerRound: 6,
            nameLogo: 'KoreanK',
            indexSkin: 10
          }, {
            leagueName: "Vietnam National\nChampion League",
            leagueId: "z8yomo4hwenq0j6",
            active: true,
            titleStanding: false,
            totalRound: 15,
            numMatchPerRound: 7,
            nameLogo: 'Vleague',
            indexSkin: 11
          }]; //=================================

          _this.isRefeshUserBalanceByAPI = false;
          _this.timeRefeshUserBalanceByAPI = 5;
          _this.sizeForAutoUpdateLayout = 10;
          _this.sortClient = true;
          _this.isShowCalendar = true;
          _this.isShowSearch = true;
          _this.isMaintainGame = false;
          _this.sceneHomeName = "Lobby";
          _this.isShowExtraBet = true;
          _this.urlGitHub = "https://raw.githubusercontent.com/jiu-sb/g-url/main/url-1.txt";
          return _this;
        }

        SbConfigManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbConfigManager();
            this.Instance.initDefault();
          }

          return this.Instance;
        };

        var _proto = SbConfigManager.prototype;

        _proto.initDefault = function initDefault() {
          this.loadEnvironment(); //default

          if (this.environment.indexOf("prod") >= 0) {
            switch (this.skinCurrent) {
              case SbSkinID.Skin0:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://gali.sb21.net/setting?agentId=" + AgentID_Prod;
                  this.agentID = AgentID_Prod;
                  break;
                }

              case SbSkinID.Skin1:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod1;
                  this.agentID = AgentID_Prod1;
                  break;
                }

              case SbSkinID.Skin2:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod2;
                  this.agentID = AgentID_Prod2;
                  break;
                }

              case SbSkinID.Skin3:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod3;
                  this.agentID = AgentID_Prod3;
                  break;
                }

              case SbSkinID.Skin4:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod4;
                  this.agentID = AgentID_Prod4;
                  break;
                }

              case SbSkinID.Skin5:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod5;
                  this.agentID = AgentID_Prod5;
                  break;
                }

              case SbSkinID.Skin6:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod6;
                  this.agentID = AgentID_Prod6;
                  break;
                }

              case SbSkinID.Skin7:
                {
                  this.urlAPIGetAccessToken = "https://oauth.sportb2.com/oauth/token";
                  this.urlSetting = "https://expose.sportb2.net/setting?agentId=" + AgentID_Prod7;
                  this.agentID = AgentID_Prod7;
                  break;
                }
            }
          } else {
            switch (this.skinCurrent) {
              case SbSkinID.Skin0:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag;
                  this.agentID = AgentID_Stag;
                  break;
                }

              case SbSkinID.Skin1:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag1;
                  this.agentID = AgentID_Stag1;
                  break;
                }

              case SbSkinID.Skin2:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag2;
                  this.agentID = AgentID_Stag2;
                  break;
                }

              case SbSkinID.Skin3:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag3;
                  this.agentID = AgentID_Stag3;
                  break;
                }

              case SbSkinID.Skin4:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag4;
                  this.agentID = AgentID_Stag4;
                  break;
                }

              case SbSkinID.Skin5:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag5;
                  this.agentID = AgentID_Stag5;
                  break;
                }

              case SbSkinID.Skin6:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag6;
                  this.agentID = AgentID_Stag6;
                  break;
                }

              case SbSkinID.Skin7:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token";
                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag7;
                  this.agentID = AgentID_Stag7;
                  break;
                }

              default:
                {
                  this.urlAPIGetAccessToken = "https://oauth-stg.sb2.club/oauth/token"; // https://expo-stg.sportb2.com/search?sportId=1&txtSearch=league

                  this.urlSetting = "https://gali-stg.sportb2.com/setting?agentId=" + AgentID_Stag;
                }
            }
          }

          var dataConfig = sys.localStorage.getItem(SB_KEY_CONFIG_DATA);

          if (dataConfig && !SbStringUtil.isNullOrEmpty(dataConfig)) {
            var config = JSON.parse(dataConfig);

            if (!config) {
              return;
            }

            if (!SbStringUtil.isNullOrEmpty(config.urlAPIMappingSportId)) {
              this.urlAPIMappingSportId = config.urlAPIMappingSportId;
            }

            if (!SbStringUtil.isNullOrEmpty(config.urlAPIGetMatchInfo)) {
              this.urlAPIGetMatchInfo = config.urlAPIGetMatchInfo;
            }

            if (!SbStringUtil.isNullOrEmpty(config.maxChatElement)) {
              this.maxChatElement = config.maxChatElement;
            }

            if (!SbStringUtil.isNullOrEmpty(config.listCheatMatchIds)) {
              this.listCheatMatchIds = config.listCheatMatchIds;
            }

            if (!SbStringUtil.isNullOrEmpty(config.timeFetchUpdateMatch)) {
              this.timeFetchUpdateMatch = config.timeFetchUpdateMatch;
            }

            if (!SbStringUtil.isNullOrEmpty(config.urlAPIGetStandings)) {
              this.urlGetStandings = config.urlAPIGetStandings;
            }

            if (!SbStringUtil.isNullOrEmpty(config.urlAPIGetSchedules)) {
              this.urlGetSchedules = config.urlAPIGetSchedules;
            }

            if (!SbStringUtil.isNullOrEmpty(config.urlWSChatHost)) {
              this.urlWSChatHost = config.urlWSChatHost;
            }

            if (!SbStringUtil.isNullOrEmpty(config.chatRoomID)) {
              this.chatRoomID = config.chatRoomID;
            }

            if (!SbStringUtil.isNullOrEmpty(config.useChatWSType)) {
              this.useChatWSType = config.useChatWSType;
            }

            if (!SbStringUtil.isNullOrEmpty(config.favoriteDistanceDate)) {
              this.favoriteDistanceDate = config.favoriteDistanceDate;
            }

            if (!SbStringUtil.isNullOrEmpty(config.seasonsConfig)) {
              this.seasonsConfig = config.seasonsConfig;
            }

            if (!SbStringUtil.isNullOrEmpty(config.brandImageUrl)) {
              this.brandImageUrl = config.brandImageUrl;
            }

            if (!SbStringUtil.isNullOrEmpty(config.minMoneyCanChat)) {
              this.minMoneyCanChat = config.minMoneyCanChat;
            }

            if (!SbStringUtil.isNullOrEmpty(config.getEventMarketAPI)) {
              this.getEventMarketAPI = config.getEventMarketAPI;
            }
          }
        };

        _proto.init = function init(data) {
          if (data === void 0) {
            data = null;
          }

          if (data === null || data === undefined || data.domains === null || data.domains === undefined) {
            //default
            // if (this.environment.indexOf("prod") >= 0) {
            //     this.urlHomeExposeService = "https://data-expose.sb2.club";
            //     this.urlHomeBettingService = "https://betting.sb2.club";
            //     this.urlHomeOAuthService = "https://oauth.sb2.club";
            //     this.urlHomeWebsocket = "wss://appsocket.annotifi.com";
            // }
            // else {
            //     this.urlHomeExposeService = "https://data-expose-stg.sb2.club";
            //     this.urlHomeBettingService = "https://betting-stg.sb2.club";
            //     this.urlHomeOAuthService = "https://oauth-stg.sb2.club";
            //     this.urlHomeWebsocket = "wss://appsocket-stg.annotifi.com";
            // }
            error("init domains fail :(");
          } else {
            if (data.domains.urlHomeExposeService !== null && data.domains.urlHomeExposeService !== undefined) this.urlHomeExposeService = data.domains.urlHomeExposeService;
            if (data.domains.urlHomeBettingService !== null && data.domains.urlHomeBettingService !== undefined) this.urlHomeBettingService = data.domains.urlHomeBettingService;
            if (data.domains.urlHomeOAuthService !== null && data.domains.urlHomeOAuthService !== undefined) this.urlHomeOAuthService = data.domains.urlHomeOAuthService;
            if (data.domains.urlHomeWebsocket !== null && data.domains.urlHomeWebsocket !== undefined) this.urlHomeWebsocket = data.domains.urlHomeWebsocket;
            if (data.domains.urlVideoJS !== null && data.domains.urlVideoJS !== undefined) this.urlVideoJS = data.domains.urlVideoJS + "/?link=";
            if (data.domains.urlVirtualVideoJS !== null && data.domains.urlVirtualVideoJS !== undefined) this.urlVirtualVideoJS = data.domains.urlVirtualVideoJS + "/?link=";

            if (data.hasOwnProperty("updateBalance")) {
              this.isRefeshUserBalanceByAPI = data.updateBalance.refeshWithAPI;

              if (data.updateBalance.hasOwnProperty("timeRefeshBalance")) {
                this.timeRefeshUserBalanceByAPI = data.updateBalance.timeRefeshBalance;
              }
            }

            if (data.hasOwnProperty("performance")) {
              this.sizeForAutoUpdateLayout = data.performance.sizeMem;
            }

            if (data.hasOwnProperty("sortClient")) {
              this.sortClient = data.sortClient;
            }

            if (data.hasOwnProperty("showCalendar")) {
              this.isShowCalendar = data.showCalendar;
            }

            if (data.hasOwnProperty("isShowSearch")) {
              this.isShowSearch = data.isShowSearch;
            }
          }

          this.urlAPIEvents = this.urlHomeExposeService + this.getEventMarketAPI + this.agentID;
          this.urlAPICaculateBet = this.urlHomeBettingService + "/calculateBets";
          this.urlAPICaculateParlayBet = this.urlHomeBettingService + "/v2/calculateBets";
          this.urlAPIGetReportBet = this.urlHomeExposeService + "/bet/betsReporting";
          this.urlAPIGetBetSlip = this.urlHomeExposeService + "/bet/getBetSlipByStatus";
          this.urlAPIGetUserInfo = this.urlHomeExposeService + "/user/getUserByToken";
          this.urlAPIGetBalanceUser = this.urlHomeExposeService + "/user/getBalanceUser";
          this.urlAPIPlaceBet = this.urlHomeBettingService + "/placeBets"; //this.urlAPIGetAccessToken = this.urlHomeOAuthService + "/oauth/token";
          //this.urlSetting = this.urlHomeExposeService + "/setting";

          this.urlSearch = this.urlHomeExposeService + "/search"; //"/event/search";

          this.urlGetEventMarketByLeagueId = this.urlHomeExposeService + "/event/{leagueId}/league";
          this.urlGetEventMarketByEventId = this.urlHomeExposeService + "/event/{eventId}";
          this.urlGetLivestream = this.urlHomeExposeService + "/streaming/get-live-link/@event-id";
          this.urlHightlight = this.urlHomeExposeService + "/streaming/game/highlight";
          this.urlWebSocket = this.urlHomeWebsocket + "/ws"; //?clientId=" + this.clientID;
          //Favorite

          this.urlGetFavorite = this.urlHomeExposeService + "/favorite";
          this.urlLeagueFavorite = this.urlHomeExposeService + "/favorite/league"; // use post and delete

          this.urlEventFavorite = this.urlHomeExposeService + "/favorite/event"; // use post/delete/get
        };

        _proto.SetStatusMaintainGame = function SetStatusMaintainGame(value) {
          this.isMaintainGame = value;
        };

        _proto.GetClientID = function GetClientID() {
          return ""; //this.clientID;
        };

        _proto.SetEnv = function SetEnv(env) {
          this.environment = env;
          sys.localStorage.setItem(Key_Environment, this.environment);
        };

        _proto.GetEnv = function GetEnv() {
          return this.environment;
        };

        _proto.Clean = function Clean() {
          if (SbConfigManager.Instance != null) SbConfigManager.Instance = null;
        };

        _proto.loadEnvironment = function loadEnvironment() {// this.environment = "staging";
          // //for dev
          // this.environment = cc.sys.localStorage.getItem(Key_Environment);
          // if(this.environment == null || this.environment == undefined){
          //     this.environment = "prod";
          // }
        };

        _proto.GetAuthorization = function GetAuthorization() {
          if (this.environment.indexOf("prod") >= 0) {
            switch (this.skinCurrent) {
              case SbSkinID.Skin0:
                {
                  return AuthorizationProd;
                }

              case SbSkinID.Skin1:
                {
                  return AuthorizationProd1;
                }

              case SbSkinID.Skin2:
                {
                  return AuthorizationProd2;
                }

              case SbSkinID.Skin3:
                {
                  return AuthorizationProd3;
                }

              case SbSkinID.Skin4:
                {
                  return AuthorizationProd4;
                }

              case SbSkinID.Skin5:
                {
                  return AuthorizationProd5;
                }

              case SbSkinID.Skin6:
                {
                  return AuthorizationProd6;
                }

              case SbSkinID.Skin7:
                {
                  return AuthorizationProd7;
                }
            }
          } else if (this.environment.indexOf("staging") >= 0) {
            return AuthorizationStag;
          }

          return AuthorizationProd;
        };

        _proto.GetAgentID = function GetAgentID() {
          return this.agentID;
        };

        _proto.GetSkinCurrent = function GetSkinCurrent() {
          return this.skinCurrent;
        };

        _proto.GetVersionApp = function GetVersionApp() {
          return VERSION_APP;
        };

        _proto.GetUrlGitHub = function GetUrlGitHub() {
          return this.urlGitHub;
        };

        _proto.IsShowExtraBet = function IsShowExtraBet() {
          return this.isShowExtraBet;
        };

        return SbConfigManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbContainerOddsCorrectScore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "0cfaa1mRuNCWKcxSvfUWPic", "SbContainerOddsCorrectScore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbContainerOddsCorrectScore = exports('default', (_dec = ccclass('SbContainerOddsCorrectScore'), _dec2 = property(Label), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbContainerOddsCorrectScore, _Component);

        function SbContainerOddsCorrectScore() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbScore", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentNode", _descriptor2, _assertThisInitialized(_this));

          _this.score = "";
          return _this;
        }

        var _proto = SbContainerOddsCorrectScore.prototype;

        _proto.start = function start() {};

        _proto.SetScore = function SetScore(sc) {
          if (String(sc).localeCompare("9:9") == 0) this.lbScore.string = "AOS";else this.lbScore.string = String(sc);
          this.score = String(sc);
        };

        _proto.HasScore = function HasScore(sc) {
          if (this.score.indexOf(sc) < 0) return false;
          return true;
        };

        _proto.AddOdds = function AddOdds(odds) {
          odds.node.parent = this.nodeParentNode;
        };

        _proto.GetSizeHeight = function GetSizeHeight() {
          return this.node.getComponent(UITransform).height;
        };

        return SbContainerOddsCorrectScore;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbDefine.ts", ['cc'], function (exports) {
  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9e419SqrQhMkplBttzPKAlz", "SbDefine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SB_EVENT_SHOW_VIDEO_LIVESTREAM = exports('SB_EVENT_SHOW_VIDEO_LIVESTREAM', 'kkjashdkjasdh8387438qhsidssdh==');
      var SB_EVENT_SHOW_VIDEO_HIGHLIGHT = exports('SB_EVENT_SHOW_VIDEO_HIGHLIGHT', 'kkjashdkjasdhkajsdh897687akjsdh==');
      var SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID = exports('SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID', 'ShowMatchDetailWithMatchID');
      var SB_EVENT_EVENT_MATCH_CHANGE_DATA = exports('SB_EVENT_EVENT_MATCH_CHANGE_DATA', 'SB_EVENT_EVENT_MATCH_CHANGE_DATA');
      var SB_EVENT_EVENT_MATCH_REMOVE = exports('SB_EVENT_EVENT_MATCH_REMOVE', 'SB_EVENT_EVENT_MATCH_REMOVE');
      var SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM = exports('SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM', 'SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM');
      var SB_EVENT_SHOW_MESSAGE_ULTIL = exports('SB_EVENT_SHOW_MESSAGE_ULTIL', 'SB_EVENT_SHOW_MESSAGE_ULTIL');
      var SB_EVENT_SHOW_LOADING_FULL_SCREEN = exports('SB_EVENT_SHOW_LOADING_FULL_SCREEN', 'SB_EVENT_SHOW_LOADING_FULL_SCREEN');
      var SB_EVENT_HIDE_LOADING_FULL_SCREEN = exports('SB_EVENT_HIDE_LOADING_FULL_SCREEN', 'SB_EVENT_HIDE_LOADING_FULL_SCREEN');
      var SB_NEED_UPDATE_COUNT_MATCH_FAVORITE = exports('SB_NEED_UPDATE_COUNT_MATCH_FAVORITE', 'SB_NEED_UPDATE_COUNT_MATCH_FAVORITE');
      var SB_EVENT_REQUEST_DATA_MATCH_WITH_ID = exports('SB_EVENT_REQUEST_DATA_MATCH_WITH_ID', 'SB_EVENT_REQUEST_DATA_MATCH_WITH_ID');
      var SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID = exports('SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID', 'SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID');
      var SB_EVENT_HIDE_CHAT = exports('SB_EVENT_HIDE_CHAT', 'SB_EVENT_HIDE_CHAT');
      var SB_EVENT_HIDE_MINI_BETSLIP = exports('SB_EVENT_HIDE_MINI_BETSLIP', 'SB_EVENT_HIDE_MINI_BETSLIP');
      var SB_EVENT_CHAT_DO_SHARE = exports('SB_EVENT_CHAT_DO_SHARE', "SB_EVENT_CHAT_DO_SHARE");
      var EVENT_LIST_PARLAY_BET_CHANGED = exports('EVENT_LIST_PARLAY_BET_CHANGED', "SB_EVENT_LIST_PARLAY_BET_CHANGED");
      var EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT = exports('EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT', "EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT");
      var EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE = exports('EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE', "EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE");
      var SB_EVENT_CHECK_STATUS_FAVORITE = exports('SB_EVENT_CHECK_STATUS_FAVORITE', 'SB_EVENT_CHECK_STATUS_FAVORITE');
      var SB_EVENT_SHOW_BETSLIP = exports('SB_EVENT_SHOW_BETSLIP', "SbShowBetSlip");
      var SB_COLOR_NAME_DEFAULT = exports('SB_COLOR_NAME_DEFAULT', 'Default');
      var SB_COLOR_NAME_MATCH_LIVE = exports('SB_COLOR_NAME_MATCH_LIVE', 'MatchLive');
      var EVENT_MESSAGE_SB = exports('EVENT_MESSAGE_SB', "EVENT_MESSAGE_SB");
      var EVENT_MESSAGE_FROM_SB = exports('EVENT_MESSAGE_FROM_SB', "EVENT_MESSAGE_FROM_SB"); // For set Widget Height when active/inactive Video

      var SB_TOP_HEIGHT_ACTIVE_VIDEO = exports('SB_TOP_HEIGHT_ACTIVE_VIDEO', 700);
      var SB_BOT_HEIGHT_ACTIVE_VIDEO = exports('SB_BOT_HEIGHT_ACTIVE_VIDEO', 146);
      var SB_TOP_HEIGHT_NO_VIDEO = exports('SB_TOP_HEIGHT_NO_VIDEO', 296);
      var SB_BOT_HEIGHT_NO_VIDEO = exports('SB_BOT_HEIGHT_NO_VIDEO', 146);
      var SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO = exports('SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO', 335);
      var SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO = exports('SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO', 146);
      var SB_KEY_CONFIG_DATA = exports('SB_KEY_CONFIG_DATA', 'SB_KEY_CONFIG_DATA'); // Chat Command

      var SB_CHAT_CHECK_RESUBSCRIBE = exports('SB_CHAT_CHECK_RESUBSCRIBE', 'SB_CHAT_CHECK_RESUBSCRIBE');
      var SPORTBOOK = exports('SPORTBOOK', /*#__PURE__*/function (SPORTBOOK) {
        SPORTBOOK[SPORTBOOK["CHAT"] = 1511] = "CHAT";
        SPORTBOOK[SPORTBOOK["CHAT_WITH_PARAM"] = 1512] = "CHAT_WITH_PARAM";
        SPORTBOOK[SPORTBOOK["SUBSCRIBE_CHAT"] = 1505] = "SUBSCRIBE_CHAT";
        SPORTBOOK[SPORTBOOK["UNSUBSCRIBE_CHAT"] = 1506] = "UNSUBSCRIBE_CHAT";
        SPORTBOOK[SPORTBOOK["SOCKET_CHAT_SUBSCRIBE"] = 0] = "SOCKET_CHAT_SUBSCRIBE";
        SPORTBOOK[SPORTBOOK["SOCKET_CHAT"] = 1] = "SOCKET_CHAT";
        return SPORTBOOK;
      }({}));
      var SPORTBOOK_SKIN1 = exports('SPORTBOOK_SKIN1', /*#__PURE__*/function (SPORTBOOK_SKIN1) {
        SPORTBOOK_SKIN1[SPORTBOOK_SKIN1["CHAT"] = 1711] = "CHAT";
        SPORTBOOK_SKIN1[SPORTBOOK_SKIN1["CHAT_WITH_PARAM"] = 1712] = "CHAT_WITH_PARAM";
        SPORTBOOK_SKIN1[SPORTBOOK_SKIN1["SUBSCRIBE_CHAT"] = 1705] = "SUBSCRIBE_CHAT";
        SPORTBOOK_SKIN1[SPORTBOOK_SKIN1["UNSUBSCRIBE_CHAT"] = 1706] = "UNSUBSCRIBE_CHAT";
        return SPORTBOOK_SKIN1;
      }({}));
      var SbCompetitorType = exports('SbCompetitorType', /*#__PURE__*/function (SbCompetitorType) {
        SbCompetitorType[SbCompetitorType["None"] = 0] = "None";
        SbCompetitorType[SbCompetitorType["Home"] = 1] = "Home";
        SbCompetitorType[SbCompetitorType["Away"] = 2] = "Away";
        return SbCompetitorType;
      }({}));
      var SBCardType = exports('SBCardType', /*#__PURE__*/function (SBCardType) {
        SBCardType[SBCardType["Red"] = 0] = "Red";
        SBCardType[SBCardType["Yellow"] = 1] = "Yellow";
        SBCardType[SBCardType["DoubleYellowToRed"] = 2] = "DoubleYellowToRed";
        return SBCardType;
      }({}));
      var SBScheduleTypeEnum = exports('SBScheduleTypeEnum', /*#__PURE__*/function (SBScheduleTypeEnum) {
        SBScheduleTypeEnum[SBScheduleTypeEnum["ALL"] = 0] = "ALL";
        SBScheduleTypeEnum[SBScheduleTypeEnum["INDEPENDENT"] = 1] = "INDEPENDENT";
        return SBScheduleTypeEnum;
      }({}));
      var SBChatUseWSType = exports('SBChatUseWSType', /*#__PURE__*/function (SBChatUseWSType) {
        SBChatUseWSType[SBChatUseWSType["ALL"] = 0] = "ALL";
        SBChatUseWSType[SBChatUseWSType["ONLY_WS_BRAND"] = 1] = "ONLY_WS_BRAND";
        SBChatUseWSType[SBChatUseWSType["ONLY_WS_SB"] = 2] = "ONLY_WS_SB";
        return SBChatUseWSType;
      }({})); //SEASON - Set ID in Prefab

      var SEASON_EURO = exports('SEASON_EURO', "sr:season:92261");
      var SEASON_COPA = exports('SEASON_COPA', "sr:season:113605");
      var SEASON_AFFCUP = exports('SEASON_AFFCUP', '8y39mp1h276mojx');

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbDisplayMatchInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbLocalizationManager.ts', './SbSoundsManager.ts', './SbTooltips.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Sprite, Component, SbLocalizationManager, SbSoundsManager, SbTooltips;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbTooltips = module.SbTooltips;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;

      cclegacy._RF.push({}, "f564at+3jpCK6QAzqQXa2Ct", "SbDisplayMatchInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
       *  if (this.lbleagueName != null && data.hasOwnProperty("leagueName")) {
                  this.lbleagueName.string = data.leagueName;
              }
               this.lbHomeName.string = data.homeName;
              this.lbAwayName.string = data.awayName;
               //====== update card ======//
              this.nodeHomeRedCard.active = data.redCardsHome > 0 ? true : false;
              if (data.redCardsHome > 0) {
                  this.lbHomeRedCard.string = data.redCardsHome.toString();
              }
               this.nodeHomeYellowCard.active = data.yellowCardsHome > 0 ? true : false;
              if (data.yellowCardsHome > 0) {
                  this.lbHomeYellowCard.string = data.yellowCardsHome.toString();
              }
               this.nodeAwayRedCard.active = data.redCardsAway > 0 ? true : false;
              if (data.redCardsAway > 0) {
                  this.lbAwayRedCard.string = data.redCardsAway.toString();
              }
               this.nodeAwayYellowCard.active = data.yellowCardsAway > 0 ? true : false;
              if (data.yellowCardsAway > 0) {
                  this.lbAwayYellowCard.string = data.yellowCardsAway.toString();
              }
              //=======================//
               this.nodeIsGoingLive.active = data.isGoingLive;
              this.lbScoreOfTheMatch.string = data.strScore;
              this.lbTimeOfTheMatch.string = data.strTimeOfTheMatch;
              this.lbTimeStart.string = data.strTimeStart;
              this.nodeInfoLive.active = data.isLive;
              this.nodeInfoNotLive.active = !data.isLive;
       */

      var SbMatchShortData = exports('SbMatchShortData', function SbMatchShortData() {
        this.leagueId = "";
        this.eventId = "";
        this.leagueName = null;
        this.homeName = null;
        this.awayName = null;
        this.gamePart = 0;
        this.isLive = null;
        this.isLivestream = null;
        this.isGoingLive = null;
        this.strScore = null;
        this.strTimeStart = null;
        this.strTimeOfTheMatch = null;
        this.cornersHome = null;
        this.cornersAway = null;
        this.redCardsHome = null;
        this.redCardsAway = null;
        this.yellowCardsHome = null;
        this.yellowCardsAway = null;
        this.videoLink = null;
        this.iframe = null;
        this.isParlay = false;
      });
      var SbDisplayMatchInfo = exports('SbDisplayMatchInfo', (_dec = ccclass('SbDisplayMatchInfo'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Node), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Node), _dec14 = property(Node), _dec15 = property(Node), _dec16 = property(Node), _dec17 = property(Sprite), _dec18 = property(Sprite), _dec19 = property(Node), _dec20 = property(Node), _dec21 = property(SbTooltips), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbDisplayMatchInfo, _Component);

        function SbDisplayMatchInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbleagueName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScoreOfTheMatch", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeOfTheMatch", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeIsGoingLive", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeStart", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeRedCard", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayRedCard", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeYellowCard", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayYellowCard", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHomeRedCard", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAwayRedCard", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHomeYellowCard", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAwayYellowCard", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logoHome", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logoAway", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeInfoLive", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeInfoNotLive", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tooltips", _descriptor20, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbDisplayMatchInfo.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.SetData = function SetData(data) {
          if (this.lbleagueName != null && data.hasOwnProperty("leagueName")) {
            this.lbleagueName.string = data.leagueName;
          }

          this.lbHomeName.string = data.homeName;
          this.lbAwayName.string = data.awayName; //====== update card ======//

          this.nodeHomeRedCard.active = data.redCardsHome > 0 ? true : false;

          if (data.redCardsHome > 0) {
            this.lbHomeRedCard.string = data.redCardsHome.toString();
          }

          this.nodeHomeYellowCard.active = data.yellowCardsHome > 0 ? true : false;

          if (data.yellowCardsHome > 0) {
            this.lbHomeYellowCard.string = data.yellowCardsHome.toString();
          }

          this.nodeAwayRedCard.active = data.redCardsAway > 0 ? true : false;

          if (data.redCardsAway > 0) {
            this.lbAwayRedCard.string = data.redCardsAway.toString();
          }

          this.nodeAwayYellowCard.active = data.yellowCardsAway > 0 ? true : false;

          if (data.yellowCardsAway > 0) {
            this.lbAwayYellowCard.string = data.yellowCardsAway.toString();
          } //=======================//


          this.nodeIsGoingLive.active = false; //data.isGoingLive;

          if (data.hasOwnProperty("strScore") && data.strScore.indexOf("ndefined") < 0) this.lbScoreOfTheMatch.string = data.strScore;else this.lbScoreOfTheMatch.string = "- : -";
          if (data.strTimeOfTheMatch.length > 0) this.lbTimeOfTheMatch.string = data.strTimeOfTheMatch;
          this.lbTimeStart.string = data.strTimeStart;
          this.nodeInfoLive.active = data.isLive;
          this.nodeInfoNotLive.active = !data.isLive;
        };

        _proto.UpdateTimeAndScore = function UpdateTimeAndScore(strTimeOfTheMatch, strScore) {
          if (strScore.length > 0) this.lbScoreOfTheMatch.string = strScore;
          if (strTimeOfTheMatch.length > 0) this.lbTimeOfTheMatch.string = strTimeOfTheMatch;
        };

        _proto.onClickShowGuideIconOnGoingLive = function onClickShowGuideIconOnGoingLive() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.tooltips != null) {
            this.tooltips.SetContent(SbLocalizationManager.getInstance().GetKeyValue("SupportBetLive"));
            this.tooltips.ShowTooltip();
          }
        };

        return SbDisplayMatchInfo;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbleagueName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbScoreOfTheMatch", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeOfTheMatch", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeIsGoingLive", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeStart", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeRedCard", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayRedCard", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeYellowCard", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayYellowCard", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "nodeHomeRedCard", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "nodeAwayRedCard", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "nodeHomeYellowCard", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "nodeAwayYellowCard", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "logoHome", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "logoAway", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "nodeInfoLive", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "nodeInfoNotLive", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "tooltips", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbDisplayNumMatchFavorite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMatchFavorite.ts', './SbDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, director, Component, SbMatchFavorite, SB_NEED_UPDATE_COUNT_MATCH_FAVORITE;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbMatchFavorite = module.default;
    }, function (module) {
      SB_NEED_UPDATE_COUNT_MATCH_FAVORITE = module.SB_NEED_UPDATE_COUNT_MATCH_FAVORITE;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ba135bOi3lMNKEYvTSxFXjT", "SbDisplayNumMatchFavorite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbDisplayNumMatchFavorite = exports('SbDisplayNumMatchFavorite', (_dec = ccclass('SbDisplayNumMatchFavorite'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbDisplayNumMatchFavorite, _Component);

        function SbDisplayNumMatchFavorite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbNumMatchFavorite", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbDisplayNumMatchFavorite.prototype;

        _proto.start = function start() {
          this.updateData();
        };

        _proto.onEnable = function onEnable() {
          director.on(SB_NEED_UPDATE_COUNT_MATCH_FAVORITE, this.updateData.bind(this), this);
        };

        _proto.onDisable = function onDisable() {
          director.off(SB_NEED_UPDATE_COUNT_MATCH_FAVORITE, this.updateData.bind(this), this);
        };

        _proto.updateData = function updateData() {
          if (this.lbNumMatchFavorite != null) {
            this.lbNumMatchFavorite.string = SbMatchFavorite.getInstance().CountListFavorite().toString();
          }
        };

        return SbDisplayNumMatchFavorite;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbNumMatchFavorite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbEmptyInfoComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Tween, tween, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4cc21kD+BhFFpKCm8sqeR+t", "SbEmptyInfoComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbEmptyInfoComp = exports('SbEmptyInfoComp', (_dec = ccclass('SbEmptyInfoComp'), _dec2 = property(Node), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbEmptyInfoComp, _Component);

        function SbEmptyInfoComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeTween", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsg", _descriptor2, _assertThisInitialized(_this));

          _this.isShowed = false;
          return _this;
        }

        var _proto = SbEmptyInfoComp.prototype;

        _proto.ShowEmptyInfo = function ShowEmptyInfo(str, isAnim) {
          if (str === void 0) {
            str = 'Không có dữ liệu';
          }

          if (isAnim === void 0) {
            isAnim = true;
          }

          this.lbMsg.string = str;
          this.nodeTween.active = true;

          if (isAnim && this.isShowed != this.nodeTween.active) {
            this.nodeTween.setScale(this.nodeTween.scale.x, 0);
            Tween.stopAllByTarget(this.nodeTween);
            tween(this.nodeTween).delay(0.1).to(0.2, {
              scale: new Vec3(1, 1)
            }, {
              easing: 'backOut'
            }).start();
          }

          this.isShowed = true;
        };

        _proto.HideEmptyInfo = function HideEmptyInfo() {
          Tween.stopAllByTarget(this.nodeTween);
          this.nodeTween.active = false;
          this.isShowed = false;
        };

        return SbEmptyInfoComp;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeTween", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbMsg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbFootballBettingController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUITitle.ts', './SbUserInfo.ts', './SbCommonPrefabsManager.ts', './SbWebSocketHandle.ts', './SbLoadingNode.ts', './SbConfigManager.ts', './SbFootballEventDataManager.ts', './SbLeague.ts', './SbSportManager.ts', './SbMatchFavorite.ts', './SbFootballBettingDetails.ts', './SbSoundsManager.ts', './SbGameHTTPManager.ts', './SbPrefabsManager.ts', './SbLocalizationManager.ts', './SbGameUtil.ts', './SbHeaderUI.ts', './SbTooltips.ts', './SbBridge.ts', './SbFootballListLivestreamHighlight.ts', './SbDefine.ts', './SbUtils.ts', './SbMarket.ts', './SbNodePoolManager.ts', './SbSkinListSprite.ts', './SbChatSocketHandle.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, ScrollView, Node, Prefab, Label, JsonAsset, Toggle, Button, EditBox, sys, director, Canvas, Widget, game, Game, log, UIOpacity, Tween, tween, error, Layout, TweenSystem, Component, SbUITitle, SbUserInfo, SbCommonPrefabsManager, SbWebSocketHandle, SbLoadingNode, SbConfigManager, SbFootballEventDataManager, SbLeague, SbTypeTimeMatch, SbSportID, SbMatchFavorite, SbFootballBettingDetails, SbSoundsManager, SbGameHTTPManager, SbPrefabsManager, SbLocalizationManager, ScrollView_EventType, SbHeaderUI, SbTooltips, SbBridge, SbFootballListLivestreamHighlight, SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM, SB_EVENT_CHECK_STATUS_FAVORITE, SB_EVENT_HIDE_CHAT, SBChatUseWSType, SbUtils, SbMarket, SbNodePoolManager, SbSkinListSprite, SbChatSocketHandle;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      JsonAsset = module.JsonAsset;
      Toggle = module.Toggle;
      Button = module.Button;
      EditBox = module.EditBox;
      sys = module.sys;
      director = module.director;
      Canvas = module.Canvas;
      Widget = module.Widget;
      game = module.game;
      Game = module.Game;
      log = module.log;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      tween = module.tween;
      error = module.error;
      Layout = module.Layout;
      TweenSystem = module.TweenSystem;
      Component = module.Component;
    }, function (module) {
      SbUITitle = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbWebSocketHandle = module.default;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbFootballEventDataManager = module.default;
    }, function (module) {
      SbLeague = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
      SbSportID = module.SbSportID;
    }, function (module) {
      SbMatchFavorite = module.default;
    }, function (module) {
      SbFootballBettingDetails = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbPrefabsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      ScrollView_EventType = module.ScrollView_EventType;
    }, function (module) {
      SbHeaderUI = module.default;
    }, function (module) {
      SbTooltips = module.SbTooltips;
    }, function (module) {
      SbBridge = module.SbBridge;
    }, function (module) {
      SbFootballListLivestreamHighlight = module.SbFootballListLivestreamHighlight;
    }, function (module) {
      SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID = module.SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID;
      SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM = module.SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM;
      SB_EVENT_CHECK_STATUS_FAVORITE = module.SB_EVENT_CHECK_STATUS_FAVORITE;
      SB_EVENT_HIDE_CHAT = module.SB_EVENT_HIDE_CHAT;
      SBChatUseWSType = module.SBChatUseWSType;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbMarket = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbChatSocketHandle = module.SbChatSocketHandle;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _class3;

      cclegacy._RF.push({}, "391fbQ4ZkpKnL3LrBdlU3Ci", "SbFootballBettingController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_OPEN_MATCH_DETAILT_FROM_CAMPAIN = "SbOpenMatch";
      var KEY_SET_CALENDAR_DATE = "SbOpenCalendarDate";
      var GAME_EVENT_FORCE_LOG_OUT = "Bridge_force_logout"; //event to listen to when game needs to log out

      var SbFootballBettingController = exports('default', (_dec = ccclass('SbFootballBettingController'), _dec2 = property(ScrollView), _dec3 = property(SbFootballBettingDetails), _dec4 = property(SbFootballListLivestreamHighlight), _dec5 = property(Node), _dec6 = property(SbUITitle), _dec7 = property(Prefab), _dec8 = property(Label), _dec9 = property(Node), _dec10 = property(JsonAsset), _dec11 = property(SbLoadingNode), _dec12 = property(Node), _dec13 = property(Toggle), _dec14 = property(Node), _dec15 = property(SbHeaderUI), _dec16 = property(Button), _dec17 = property(Button), _dec18 = property(SbSkinListSprite), _dec19 = property(SbTooltips), _dec20 = property(Toggle), _dec21 = property(Node), _dec22 = property(Node), _dec23 = property({
        group: 'CommonGroup',
        type: Node
      }), _dec24 = property(Node), _dec25 = property(EditBox), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbFootballBettingController, _Component);

        function SbFootballBettingController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scrollViewLeague", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bettingDetails", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLivestreamHighlight", _descriptor3, _assertThisInitialized(_this)); // @property(cc.Node)
          // private nodeParentEarlyLeague: cc.Node = null;
          // @property(cc.Node)
          // private nodeParentLiveLeague: cc.Node = null;


          _initializerDefineProperty(_this, "nodeParentTodayLeague", _descriptor4, _assertThisInitialized(_this)); // @property(SbUITitle)
          // private titleEarlyLeague: SbUITitle = null;
          // @property(SbUITitle)
          // private titleLiveLeague: SbUITitle = null;


          _initializerDefineProperty(_this, "titleTodayLeague", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabLeague", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsgInBg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeNoMatchLive", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dataEventsFake", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLoading", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonScrollToTop", _descriptor11, _assertThisInitialized(_this));

          _this.menuLeft = null;

          _initializerDefineProperty(_this, "toggleFavorite", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeBgFavorite", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "header", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonCalendar", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSearch", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinButtonCtr", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tooltips", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleChat", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "chatPanel", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sbCommonPrefabLayer", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "commonGroupPanel", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listWebViewNeedDetroys", _descriptor23, _assertThisInitialized(_this));

          _this.isRequestEventsSuss = false;
          _this.isShowPopupLivestream = false;
          _this.listLeague = [];
          _this.isShowFavorite = false;
          _this.isLoadDataFakeFromLocal = false;
          _this.isChatOpen = false;
          _this.isChatClosing = false; //======= Debug ======//

          _initializerDefineProperty(_this, "editboxDebug", _descriptor24, _assertThisInitialized(_this));

          _this.timeClickShowBetHitory = new Date().getTime();
          return _this;
        }

        SbFootballBettingController.getInstance = function getInstance() {
          return this.Instance;
        };

        var _proto = SbFootballBettingController.prototype;

        _proto.onLoad = function onLoad() {
          SbFootballBettingController.Instance = this;
          SbFootballEventDataManager.getInstance().setCallbackSuccess(this.onRequestDataEvensSuccess.bind(this));
          SbFootballEventDataManager.getInstance().setCallbackFail(this.onRequestDataEvensFail.bind(this));
          SbCommonPrefabsManager.getInstance().SetCallbackRequestDataEvensFromCalendarSuccess(this.onRequestDataEvensFromCalendarSuccess.bind(this));
          SbCommonPrefabsManager.getInstance().SetCallbackRequestDataEvensFromSearchSuccess(this.onRequestDataEvensFromSearchSuccess.bind(this));
          SbCommonPrefabsManager.getInstance().AddCalendar();

          if (sys.isBrowser && sys.isMobile) {
            var canvas = director.getScene().getComponentInChildren(Canvas);

            if (canvas) {
              var widget = canvas.getComponent(Widget);
              widget.destroy();
            }
          }

          this.nodeLoading.ShowLoading(0.55);
          SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
          SbCommonPrefabsManager.getInstance().setListLeague(this.scrollViewLeague);
          game.on(Game.EVENT_HIDE, this.onEventHide, this);
          game.on(Game.EVENT_SHOW, this.onEventShow, this);
          director.on(SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, this.showMatchDetailWithMatchID, this); //reqest data from tab Livestream

          director.on(SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM, this.requestEventDataLiveForLiveStream, this);
          director.on(SB_EVENT_CHECK_STATUS_FAVORITE, this.checkAllStatusFavorite, this);
          director.on(SB_EVENT_HIDE_CHAT, this.SetHideChat, this);
          SbCommonPrefabsManager.getInstance().node.parent = this.node;
          SbCommonPrefabsManager.getInstance().CustomLayerPopup = this.sbCommonPrefabLayer;
          this.bettingDetails.init(this);
          this.header.init(SbCommonPrefabsManager.getInstance());
          SbMatchFavorite.getInstance().InitFavorite(); //alway show match live on open game

          SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
        };

        _proto.start = function start() {
          SbCommonPrefabsManager.getInstance().GetMenuTop().initFootballBettingController(this);
          SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().SetActive(false);
          SbCommonPrefabsManager.getInstance().SetCallbackChangeTypeTimeMatchFromMenuTop(this.onTypeTimeMatchChange.bind(this));
          SbCommonPrefabsManager.getInstance().SetCallBackChangeOddsStyleFinish(this.onStyleOddsChange.bind(this));
          var dateRequest = this.checkRequestDateOfMatchFromCampain();
          this.requestEventData(dateRequest);
          SbCommonPrefabsManager.getInstance().UpdateContentSize();
          this.titleTodayLeague.SetCallbackButtonClicl(this.OnExpandOrCollapseAllItem.bind(this)); // this.titleLiveLeague.SetCallbackButtonClicl(this.OnExpandOrCollapseAllItem.bind(this));
          // this.titleEarlyLeague.SetCallbackButtonClicl(this.OnExpandOrCollapseAllItem.bind(this));

          SbSoundsManager.getInstance().playRandomMusicBg();

          if (this.buttonCalendar != null) {
            if (SbConfigManager.getInstance().isShowCalendar) {
              this.buttonCalendar.node.active = true;
            }
          }

          if (this.buttonSearch != null) {
            if (SbConfigManager.getInstance().isShowSearch) {
              this.buttonSearch.node.active = true;
            }
          }

          this.doShowHideChat(false, false);
          director.off(GAME_EVENT_FORCE_LOG_OUT);
          director.on(GAME_EVENT_FORCE_LOG_OUT, function () {
            SbFootballBettingController.getInstance().Clean();
            SbBridge.BackToGame();
          });
        };

        _proto.onDestroy = function onDestroy() {
          SbFootballBettingController.getInstance().Clean();
          game.off(Game.EVENT_HIDE, this.onEventHide, this);
          game.off(Game.EVENT_SHOW, this.onEventShow, this);
          director.off(SB_EVENT_HIDE_CHAT, this.SetHideChat, this);
          director.off(SB_EVENT_CHECK_STATUS_FAVORITE, this.checkAllStatusFavorite, this);
          director.off(SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, this.showMatchDetailWithMatchID, this);
          director.off(SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM, this.requestEventDataLiveForLiveStream, this);
        };

        _proto.ShowBettingDetails = function ShowBettingDetails(leagueData, matchData, dataVideoLivestream) {
          if (dataVideoLivestream === void 0) {
            dataVideoLivestream = null;
          }

          this.setActiveBettingDetails(true);
          this.bettingDetails.SetData(leagueData, matchData, dataVideoLivestream);
        };

        _proto.ShowListLivestreamHighlight = function ShowListLivestreamHighlight() {
          this.scrollViewLeague.node.active = false;
          this.listLivestreamHighlight.SetActiveNode(true);
          this.SetShowCommonGroup(false);
          this.requestEventDataLiveForLiveStream();
        };

        _proto.HideTabListLivestreamHighlight = function HideTabListLivestreamHighlight() {
          console.log("HideListLivestreamHighlight");

          if (this.IsShowLivestreamHighlight()) {
            //revert status type match data
            SbFootballBettingController.getInstance().ShowLoading();
            var typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();

            if (typeTimeMatch == SbTypeTimeMatch.SearchResult) {
              //change mode to live if last mode is search result
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
            }

            SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          }

          this.hideListLivestreamHighlight();

          if (this.bettingDetails.node.active) {
            this.bettingDetails.ClearCallbackDataLiveChange();
            this.setActiveBettingDetails(false);
          }
        };

        _proto.hideListLivestreamHighlight = function hideListLivestreamHighlight() {
          // SbCommonPrefabsManager.getInstance().GetMenuTop().ShowSport();
          this.listLivestreamHighlight.SetActiveNode(false);
        };

        _proto.IsShowLivestreamHighlight = function IsShowLivestreamHighlight() {
          return SbCommonPrefabsManager.getInstance().GetMenuTop().IsShowLivestreamHighlight(); // return this.listLivestreamHighlight.node.active ;
        };

        _proto.IsBettingDetailsAvailable = function IsBettingDetailsAvailable() {
          return this.bettingDetails.node.active;
        };

        _proto.SetBettingDetailsEnable = function SetBettingDetailsEnable(leagueId, eventId, value) {
          if (this.bettingDetails.node.active) {
            if (this.bettingDetails.HasMatch(SbSportID.Football, leagueId, eventId)) {
              log("SetBettingDetailsEnable eventId: " + eventId + " value: " + value);
              this.bettingDetails.LockMatch(value);
            } // this.bettingDetails.OddsChange(oddsChangeData);

          }
        };

        _proto.CreateItemLeague = function CreateItemLeague(data, isInputFeildNameShort) {
          if (isInputFeildNameShort === void 0) {
            isInputFeildNameShort = true;
          }

          return this.createItemLeague(data, isInputFeildNameShort);
        };

        _proto.ShowLoading = function ShowLoading() {
          this.nodeLoading.ShowLoading(0.55);
        };

        _proto.HideLoading = function HideLoading() {
          this.nodeLoading.HideLoading();
        };

        _proto.Clean = function Clean() {
          if (SbFootballBettingController.Instance != null) {
            // if(this.Instance.menuLeft != null)
            //     this.Instance.menuLeft.Clean();
            log("onDestroy SbFootballBettingController");

            if (this.listWebViewNeedDetroys != null && sys.os === sys.OS.IOS && parseFloat(sys.osVersion) >= 18) {
              for (var i = 0; i < this.listWebViewNeedDetroys.length; i++) {
                this.listWebViewNeedDetroys[i].removeFromParent();
              }
            }

            SbCommonPrefabsManager.getInstance().Clean();
            SbGameHTTPManager.getInstance().Clean();
            SbWebSocketHandle.getInstance().Clean();
            SbConfigManager.getInstance().Clean();
            SbPrefabsManager.getInstance().Clean();
            SbSoundsManager.getInstance().Clean();
            SbLocalizationManager.getInstance().Clean();
          } else {
            SbCommonPrefabsManager.getInstance().Clean();
          }
        };

        _proto.HideBettingDetails = function HideBettingDetails() {
          this.hideBettingDetails();
        };

        _proto.SetShowCommonGroup = function SetShowCommonGroup(active) {
          if (this.commonGroupPanel) {
            this.commonGroupPanel.active = active;
          }
        };

        _proto.SetToggleChat = function SetToggleChat() {
          this.doShowHideChat(!this.isChatOpen, true);
        };

        _proto.SetHideChat = function SetHideChat(isAnim) {
          if (isAnim === void 0) {
            isAnim = false;
          }

          this.toggleChat.isChecked = false;
          this.doShowHideChat(false, isAnim);
        };

        _proto.doShowHideChat = function doShowHideChat(isShow, isAnim) {
          var _this2 = this;

          var target = this.chatPanel;
          var time = 0.2;
          this.toggleChat.interactable = false;

          var complete = function complete() {
            _this2.toggleChat.interactable = true;
            _this2.isChatOpen = isShow;
            target.active = isShow;
            _this2.isChatClosing = false;
          };

          if (!isAnim) {
            complete();
          } else {
            if (this.isChatClosing) {
              return;
            }

            this.isChatClosing = true;
            this.toggleChat.interactable = false;
            var nodeOpacity = target.getComponent(UIOpacity);
            var startOpacity = isShow ? 0 : 255;
            var endOpacity = isShow ? 255 : 0;
            target.active = true;
            nodeOpacity.opacity = startOpacity;
            Tween.stopAllByTarget(nodeOpacity);
            tween(nodeOpacity).to(time, {
              opacity: endOpacity
            }).call(function () {
              complete();
            }).start();
          }
        };

        _proto.onClickChatBG = function onClickChatBG() {
          SbSoundsManager.getInstance().playSfxClick();
          this.SetHideChat(true);
        } //   chờ BE rồi làm tiếp
        // SearchLeagueName(keyWord: string) {
        //     let listIDLeague = [];
        //     for (let i = 0; i < this.listLeague.length; i++) {
        //         let leagueID = this.listLeague[i].SearchLeagueWithName(keyWord);
        //         if (leagueID != -1) {
        //             listIDLeague.push(leagueID);
        //         }
        //     }
        //     cc.log("SearchLeagueName: " + JSON.stringify(listIDLeague))
        // }
        // private onClickSearchDebug(){
        //     this.SearchLeagueName("");
        // }
        //for list video tab livestream
        ;

        _proto.getAllMatchDataIsLive = function getAllMatchDataIsLive() {
          var listData = [];

          for (var i = 0; i < this.listLeague.length; i++) {
            var listMatchDatas = this.listLeague[i].GetInfoAllMatchIsLive();

            if (listMatchDatas != null) {
              listData = listData.concat(listMatchDatas);
            }
          }

          return listData;
        };

        _proto.getAllShortDataMatchIsLive = function getAllShortDataMatchIsLive() {
          var listData = [];

          for (var i = 0; i < this.listLeague.length; i++) {
            var listMatchDatas = this.listLeague[i].GetShortInfoAllMatchIsLive();

            if (listMatchDatas != null) {
              listData = listData.concat(listMatchDatas);
            }
          }

          return listData;
        };

        _proto.checkNeedPreloadData = function checkNeedPreloadData() {
          if (SbWebSocketHandle.getInstance().IsNeedConnectWS()) return true;
          return false;
        };

        _proto.checkReconnect = function checkReconnect() {
          if (SbWebSocketHandle.getInstance().IsNeedConnectWS()) {
            SbWebSocketHandle.getInstance().Reconnect();
          }

          if (sys.getNetworkType() == sys.NetworkType.LAN || sys.getNetworkType() == sys.NetworkType.WWAN) {
            log("Network connected”");
          } else if (sys.getNetworkType() == sys.NetworkType.NONE) {
            log("Network not connected”");
          }
        };

        _proto.OnExpandOrCollapseAllItem = function OnExpandOrCollapseAllItem(isExpandAllItem) {
          for (var i = 0; i < this.listLeague.length; i++) {
            var element = this.listLeague[i].getComponent(SbLeague);
            element.SetExpandOrCollapseAllItem(isExpandAllItem);
          }
        };

        _proto.onClickScrollToTop = function onClickScrollToTop() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.scrollViewLeague != null) {
            this.scrollViewLeague.scrollToTop(0.3);
          }
        };

        _proto.onRequestDataEvensFromCalendarSuccess = function onRequestDataEvensFromCalendarSuccess() {
          this.updateTitleTypeTimeMatch();
          this.onRequestDataEvensSuccess();
        };

        _proto.onRequestDataEvensFromSearchSuccess = function onRequestDataEvensFromSearchSuccess() {
          this.updateTitleTypeTimeMatch();
          this.onRequestDataEvensSuccess();
        };

        _proto.onRequestDataEvensSuccess = function onRequestDataEvensSuccess(listFavorite) {
          if (listFavorite === void 0) {
            listFavorite = null;
          }

          console.log("displayData");
          this.displayData(listFavorite);
          console.log("displayData fonish");
          SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().SetActive(true); // //connect web socket

          if (SbWebSocketHandle.getInstance().IsNeedConnectWS()) {
            SbWebSocketHandle.getInstance().onOddsInsert = this.onOddsInsert.bind(this);
            SbWebSocketHandle.getInstance().onOddsRemove = this.onOddsRemove.bind(this);
            SbWebSocketHandle.getInstance().onOddsChange = this.onOddsChange.bind(this);
            SbWebSocketHandle.getInstance().onMarketChange = this.onMarketChange.bind(this); //<-- ok

            SbWebSocketHandle.getInstance().onEventInsert = this.onEventInsert.bind(this);
            SbWebSocketHandle.getInstance().onEventRemove = this.onEventRemove.bind(this);
            SbWebSocketHandle.getInstance().onEventChange = this.onEventChange.bind(this); //<-- ok

            SbWebSocketHandle.getInstance().onLeagueInsert = this.onLeagueInsert.bind(this);
            SbWebSocketHandle.getInstance().onConnectSuccess = this.onConnectWebSocketSuccess.bind(this);
            SbWebSocketHandle.getInstance().onUserBalanceChange = this.onUserBalanceChange.bind(this);
            SbWebSocketHandle.getInstance().ConnectWS(SbConfigManager.getInstance().urlWebSocket);
          } else {
            SbWebSocketHandle.getInstance().SubscriteTypeTimeMatch(SbUserInfo.getInstance().GetTypeTimeMatch());
          }

          for (var k = 0; k < this.listLeague.length; k++) {
            var lg = this.listLeague[k];
            lg.SetExpandOrCollapseAllItem(true);
          } //need open match detailt


          this.checkShowMatchDetailFromCampain(); //open chat socket
          //wss://trat-stg.sportb2.com/chatapp/rawsocket/chatroom?access_token=18-22f61bc61fedfd39e00489e49ac0b2bb&roomId=123

          if (SbConfigManager.getInstance().useChatWSType != SBChatUseWSType.ONLY_WS_BRAND) {
            var host = SbConfigManager.getInstance().urlWSChatHost;
            SbChatSocketHandle.getInstance().ConnectWS(host);
          }
        };

        _proto.checkRequestDateOfMatchFromCampain = function checkRequestDateOfMatchFromCampain() {
          var dateStr = sys.localStorage.getItem(KEY_SET_CALENDAR_DATE);

          if (dateStr != null && dateStr != undefined && dateStr.length > 0) {
            sys.localStorage.removeItem(KEY_SET_CALENDAR_DATE);

            if (!SbUtils.IsISO8601Date(dateStr)) {
              error("Invalid date: " + dateStr);
              return null;
            } // startTime of Match is UTC Format -> new Date(dateStr) will response local time


            var timeOfFullMatch = 120 * 60 * 1000; // total time in mili seconds of full match

            var localTime = new Date(dateStr);
            var startMatchTime = localTime.getTime();
            var deltaTime = startMatchTime - Date.now(); // API use timezone +7 -> convert time to this timezone

            var timeZoneAPI = parseFloat(SbUtils.GetTimeZoneOffsetCurrent());
            var timeConvertZoneAPI = new Date(localTime.getTime() + (localTime.getTimezoneOffset() - timeZoneAPI) * 60 * 1000); //is live

            if (deltaTime < 0 && Math.abs(deltaTime) < timeOfFullMatch) {
              dateStr = null;
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
            } else {
              SbUserInfo.getInstance().SetTimeMatchCurrent(timeConvertZoneAPI);
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.CustomDate);
            }

            return timeConvertZoneAPI.getFullYear() + "-" + (timeConvertZoneAPI.getMonth() + 1) + "-" + timeConvertZoneAPI.getDate();
          }

          return null;
        };

        _proto.checkShowMatchDetailFromCampain = function checkShowMatchDetailFromCampain() {
          var nameMatch = sys.localStorage.getItem(KEY_OPEN_MATCH_DETAILT_FROM_CAMPAIN);

          if (nameMatch != null && nameMatch != undefined && nameMatch.length > 0) {
            nameMatch = nameMatch.toLocaleLowerCase();
            nameMatch = nameMatch.replace(/ /g, "");

            for (var i = 0; i < this.listLeague.length; i++) {
              if (this.listLeague[i].CheckAndShowUIDetailt(nameMatch)) {
                sys.localStorage.removeItem(KEY_OPEN_MATCH_DETAILT_FROM_CAMPAIN);
                return;
              }
            }
          }
        };

        _proto.showMatchDetailWithMatchID = function showMatchDetailWithMatchID(id, dataVideoLivestream) {
          if (this.listLeague == null) {
            return;
          }

          var matchAvailable = false;

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].CheckAndShowUIDetailtWithMatchId(id, dataVideoLivestream)) {
              this.hideListLivestreamHighlight();
              matchAvailable = true;
              return;
            }
          }

          if (!matchAvailable) {
            SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MatchNotAvailable"));
          }
        };

        _proto.onUserBalanceChange = function onUserBalanceChange(data) {
          SbCommonPrefabsManager.getInstance().GetMenuTop().UpdateUserBalance(data);
        };

        _proto.onConnectWebSocketSuccess = function onConnectWebSocketSuccess() {
          SbWebSocketHandle.getInstance().Login();
          SbWebSocketHandle.getInstance().SubscriteTypeTimeMatch(SbUserInfo.getInstance().GetTypeTimeMatch());
        };

        _proto.onRequestDataEvensFail = function onRequestDataEvensFail() {
          this.nodeLoading.HideLoading();
          SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().SetActive(true);
        };

        _proto.sortLeague = function sortLeague(leagueA, leagueB) {
          var valueA = 0;
          var valueB = 0;

          if (leagueA.hasOwnProperty("lpo")) {
            valueA = leagueA.lpo;
          } else if (leagueA.hasOwnProperty("lo")) {
            valueA = leagueA.lo + 2000;
          } else {
            valueA = 5000;
          }

          if (leagueB.hasOwnProperty("lpo")) {
            valueB = leagueB.lpo;
          } else if (leagueB.hasOwnProperty("lo")) {
            valueB = leagueB.lo + 2000;
          } else {
            valueB = 5000;
          }

          return valueA - valueB;
        };

        _proto.displayData = function displayData(listFavorite) {
          if (listFavorite === void 0) {
            listFavorite = null;
          }

          var listLeague;

          if (listFavorite) {
            listLeague = listFavorite;
          } else {
            if (SbConfigManager.getInstance().sortClient == true) {
              listLeague = SbFootballEventDataManager.getInstance().getListLeague(0, 2000).sort(this.sortLeague);
            } else {
              listLeague = SbFootballEventDataManager.getInstance().getListLeague(0, 2000);
            }

            if (this.toggleFavorite) {
              this.setToggleFavorite(false);
              this.toggleFavorite.interactable = true;
              this.isShowFavorite = false;
            }
          }

          log("on Request Event Success");
          var typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();

          if (listLeague.length == 0) {
            if (typeTimeMatch == SbTypeTimeMatch.Live && this.listLeague.length === 0) {
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Today);
              this.requestEventData();
              return;
            } // this.titleTodayLeague.SetActive(false);
            // this.titleEarlyLeague.SetActive(false);
            // this.titleLiveLeague.SetActive(false);


            if (typeTimeMatch == SbTypeTimeMatch.Live) {
              this.nodeNoMatchLive.active = true;
              this.lbMsgInBg.node.active = false;
            } else {
              this.nodeNoMatchLive.active = false;
              this.lbMsgInBg.node.active = true;
              this.lbMsgInBg.string = SbLocalizationManager.getInstance().GetKeyValue("NoMatch", true);
            }

            this.scrollViewLeague.node.active = false;
            this.nodeLoading.HideLoading();
            return;
          } else {
            this.lbMsgInBg.node.active = false;
            this.nodeNoMatchLive.active = false;
            this.scrollViewLeague.node.active = true;
            this.nodeLoading.HideLoading();
          }

          if (this.bettingDetails.node.active) {
            this.bettingDetails.ClearCallbackDataLiveChange();
            this.setActiveBettingDetails(false);
          }

          this.updateTitleTypeTimeMatch();
          var count = 0;
          this.titleTodayLeague.SetActive(true); // this.titleEarlyLeague.SetActive(false);
          // this.titleLiveLeague.SetActive(false);
          // for (let i = this.listLeague.length - 1; i >= 0; i--) {
          //     SbPoolManager.getInstance().PutLeague(this.listLeague[i].node);
          // }

          for (var i = 0; i < this.listLeague.length; i++) {
            this.listLeague[i].RemoveAllMatch();
          }

          SbNodePoolManager.clearItemComp(this.listLeague);
          this.listLeague = [];
          var t0 = performance.now();

          for (var ii = 0; ii < listLeague.length; ii++) {
            // if (League.CheckHasTodayMatchInLeague(listLeague[i])) {
            if (SbLeague.CheckLeagueAvailable(listLeague[ii])) {
              var item = this.createItemLeague(listLeague[ii]);
              item.node.parent = this.nodeParentTodayLeague;
              this.listLeague.push(item);
              count++;
            } // }

          }

          if (listLeague.length > SbConfigManager.getInstance().sizeForAutoUpdateLayout && typeTimeMatch != SbTypeTimeMatch.Live) {
            var _this$node;

            var timeOut = 2;

            if (sys.isMobile && sys.os == sys.OS.ANDROID) {
              timeOut = 4;
            }

            var listWidget = (_this$node = this.node) == null ? void 0 : _this$node.getComponentsInChildren(Widget);

            for (var _i = 0; _i < listWidget.length; _i++) listWidget[_i].alignMode = Widget.AlignMode.ALWAYS; // setTimeout(() => {


            tween(this.node).delay(timeOut).call(function () {
              for (var _i2 = 0; _i2 < listWidget.length; _i2++) listWidget[_i2].alignMode = Widget.AlignMode.ON_WINDOW_RESIZE;
            }).start(); // }, timeOut);

            var t1 = performance.now(); // SbPoolManager.getInstance().ShowInfoDebug();

            log("Time create UI " + (t1 - t0) + " milliseconds.");
          }

          if (count == 0) {
            // this.titleTodayLeague.SetActive(false);
            this.lbMsgInBg.node.active = true;
            this.lbMsgInBg.string = SbLocalizationManager.getInstance().GetKeyValue("NoMatch", true);
          } else {
            this.scrollViewLeague.scrollToTop();
            this.hideButtonScrollToTop();
          } // }
          // else if (typeTimeMatch == SbTypeTimeMatch.Live) {
          //     let count = 0;
          //     this.titleTodayLeague.SetActive(false);
          //     this.titleEarlyLeague.SetActive(false);
          //     this.titleLiveLeague.SetActive(true);
          //     for (let i = 0; i < listLeague.length; i++) {
          //         // if (League.CheckHasLiveMatchInLeague(listLeague[i])) {
          //         let item = this.createItemLeague(listLeague[i]);
          //         item.node.parent = this.nodeParentLiveLeague;
          //         this.listLeague.push(item);
          //         count++;
          //         // }
          //     }
          //     if (count == 0)
          //         this.titleTodayLeague.SetActive(false);
          // }
          // else if (typeTimeMatch == SbTypeTimeMatch.Early) {
          //     let count = 0;
          //     this.titleTodayLeague.SetActive(false);
          //     this.titleLiveLeague.SetActive(false);
          //     this.titleEarlyLeague.SetActive(true);
          //     for (let i = 0; i < listLeague.length; i++) {
          //         // if (League.CheckHasEarlyMatchInLeague(listLeague[i])) {
          //         let item = this.createItemLeague(listLeague[i]);
          //         item.node.parent = this.nodeParentEarlyLeague;
          //         this.listLeague.push(item);
          //         count++;
          //         // }
          //     }
          //     if (count == 0)
          //         this.titleTodayLeague.SetActive(false);
          // }
          // else if (typeTimeMatch == SbTypeTimeMatch.All) {
          //     let count = 0;
          //     this.titleTodayLeague.SetActive(false);
          //     this.titleLiveLeague.SetActive(false);
          //     this.titleEarlyLeague.SetActive(true);
          //     for (let i = 0; i < listLeague.length; i++) {
          //         // if (League.CheckHasEarlyMatchInLeague(listLeague[i])) {
          //         let item = this.createItemLeague(listLeague[i]);
          //         item.node.parent = this.nodeParentLiveLeague;
          //         this.listLeague.push(item);
          //         count++;
          //         // }
          //     }
          //     if (count == 0)
          //         this.titleTodayLeague.SetActive(false);
          // }

        };

        _proto.setStatusIconCalenderIsCustomDate = function setStatusIconCalenderIsCustomDate(value) {
          if (value) {
            this.buttonCalendar.pressedSprite = this.listSpriteFrameButton[0];
            this.buttonCalendar.normalSprite = this.listSpriteFrameButton[1];
            this.buttonCalendar.hoverSprite = this.listSpriteFrameButton[1];
          } else {
            this.buttonCalendar.normalSprite = this.listSpriteFrameButton[0];
            this.buttonCalendar.hoverSprite = this.listSpriteFrameButton[0];
            this.buttonCalendar.pressedSprite = this.listSpriteFrameButton[1];
          }
        };

        _proto.setStatusIconSearch = function setStatusIconSearch(value) {
          if (value) {
            this.buttonSearch.pressedSprite = this.listSpriteFrameButton[2];
            this.buttonSearch.normalSprite = this.listSpriteFrameButton[3];
            this.buttonSearch.hoverSprite = this.listSpriteFrameButton[3];
          } else {
            this.buttonSearch.normalSprite = this.listSpriteFrameButton[2];
            this.buttonSearch.hoverSprite = this.listSpriteFrameButton[2];
            this.buttonSearch.pressedSprite = this.listSpriteFrameButton[3];
          }
        };

        _proto.updateTitleTypeTimeMatch = function updateTitleTypeTimeMatch() {
          var typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();

          if (typeTimeMatch == SbTypeTimeMatch.Today) {
            this.titleTodayLeague.SetTitle("Hôm nay");
            this.setStatusIconCalenderIsCustomDate(false);
            this.setStatusIconSearch(false);
            SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().SetIndexDefault(1);
          } else if (typeTimeMatch == SbTypeTimeMatch.Live) {
            this.titleTodayLeague.SetTitle("Trực tiếp");
            this.setStatusIconCalenderIsCustomDate(false);
            this.setStatusIconSearch(false);
          } else if (typeTimeMatch == SbTypeTimeMatch.Early) {
            this.titleTodayLeague.SetTitle("Kèo Sớm");
            this.setStatusIconCalenderIsCustomDate(false);
            this.setStatusIconSearch(false);
          } else if (typeTimeMatch == SbTypeTimeMatch.CustomDate) {
            SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().ActiveAllButton();
            this.setStatusIconCalenderIsCustomDate(true);
            this.setStatusIconSearch(false);
            var date = SbUserInfo.getInstance().GetTimeMatchCurrent();
            this.titleTodayLeague.SetTitle(("00" + date.getDate()).slice(-2) + "/" + ("00" + (date.getMonth() + 1)).slice(-2) + "/" + ("00" + date.getFullYear()).slice(-4));
          } else if (typeTimeMatch == SbTypeTimeMatch.SearchResult) {
            SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().ActiveAllButton();
            this.setStatusIconCalenderIsCustomDate(false);
            this.setStatusIconSearch(true);
          }
        };

        _proto.requestEventDataLiveForLiveStream = function requestEventDataLiveForLiveStream() {
          var _this3 = this; // SbCommonPrefabsManager.getInstance()
          //     .GetMenuTop()
          //     .GetMenuTypeTimeMatch()
          //     .SetIndexDefault(SbTypeTimeMatch.Live);
          // SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
          // SbCommonPrefabsManager.getInstance()
          //     .GetCalendar()
          //     .SetDayWithTypeTimeMatch(SbTypeTimeMatch.Live);
          // SbCommonPrefabsManager.getInstance().GetMenuTop()
          //     .GetMenuTypeTimeMatch()
          //     .SetActive(false);


          if (!this.isValid) {
            return;
          }

          if (this.lbMsgInBg) {
            this.lbMsgInBg.node.active = false;
          }

          this.requestEventDataLiveWithCallBack(function () {
            //succcess
            log("requestEventDataWithCallBack finished");

            _this3.onRequestDataEvensSuccess();

            log("requestEventDataWithCallBack display all data");

            _this3.listLivestreamHighlight.ShowDataLiveStream(_this3.getAllMatchDataIsLive(), _this3.getAllShortDataMatchIsLive());

            log("requestEventDataWithCallBack ShowDataLiveStream");
          }, function () {//fail 
            // this.onRequestDataEvensFail();
          });
        };

        _proto.checkAllStatusFavorite = function checkAllStatusFavorite() {
          if (this.listLeague && this.listLeague.length) {
            for (var i = 0; i < this.listLeague.length; i++) {
              this.listLeague[i].CheckLeagueStatusFavorite();
              this.listLeague[i].CheckAllMatchStatusFavorite();
            }
          }
        } // //on data update
        ;

        _proto.onOddsInsert = function onOddsInsert(data) {
          if (this.isSceneDetroy()) return;
          SbFootballEventDataManager.getInstance().OnOddsInsert(data);
          var listOddsChange = data.kafkaOddsList;

          for (var j = 0; j < listOddsChange.length; j++) {
            var oddsChangeData = listOddsChange[j];

            for (var i = 0; i < this.listLeague.length; i++) {
              if (this.listLeague[i].HasLeague(oddsChangeData)) {
                this.listLeague[i].OddsInsert(oddsChangeData);
                break;
              }
            }
          }
        };

        _proto.onOddsRemove = function onOddsRemove(data) {
          if (this.isSceneDetroy()) return;
          SbFootballEventDataManager.getInstance().OnOddsRemove(data); // // let listOddsRemove: any[] = data.kafkaOddsList;
          // // if(listOddsRemove == undefined)
          // //     return;
          // // for (let j = 0; j < listOddsRemove.length; j++) {
          // // let oddsRemoveData = data.odds;

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              this.listLeague[i].OddsRemove(data);
              break;
            }
          } // // }

        };

        _proto.onOddsChange = function onOddsChange(data) {
          if (this.isSceneDetroy()) return;
          SbFootballEventDataManager.getInstance().OnOddsChange(data); // //check remove odds old
          // //list hiện tại (list cũ) [0.5, 1.0, 1.5]
          // //list mới về [1.0, 0.5, 1.75]

          var listOddsChange = data.kafkaOddsList;
          var strlistodds = JSON.stringify(data);
          if (listOddsChange.length > 3 && strlistodds.indexOf("{\"marketId\":14") == -1 && strlistodds.indexOf("{\"marketId\":10,") == -1) ;

          for (var j = 0; j < listOddsChange.length; j++) {
            var oddsChangeData = listOddsChange[j];

            for (var i = 0; i < this.listLeague.length; i++) {
              if (this.listLeague[i].HasLeague(oddsChangeData)) {
                this.listLeague[i].CheckRemoveOddsOld(listOddsChange); // break;
              }
            }

            if (this.bettingDetails.HasMatch(SbSportID.Football, oddsChangeData.leagueId, oddsChangeData.eventId)) this.bettingDetails.CheckRemoveOddsOld(listOddsChange);
          }

          for (var jj = 0; jj < listOddsChange.length; jj++) {
            var _oddsChangeData = listOddsChange[jj];

            for (var ii = 0; ii < this.listLeague.length; ii++) {
              if (this.listLeague[ii].HasLeague(_oddsChangeData)) {
                this.listLeague[ii].OddsChange(_oddsChangeData); // break;
              }
            }

            if (this.bettingDetails.HasMatch(SbSportID.Football, _oddsChangeData.leagueId, _oddsChangeData.eventId)) this.bettingDetails.OddsChange(_oddsChangeData);
          }
        };

        _proto.onMarketChange = function onMarketChange(data) {
          if (this.isSceneDetroy()) return;
          SbFootballEventDataManager.getInstance().OnMarketChange(data);

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasDomainLeague(data)) {
              this.listLeague[i].MarketChange(data);
              break;
            }
          }

          if (this.bettingDetails.node.active) {
            for (var _i3 = 0; _i3 < this.listLeague.length; _i3++) {
              if (this.bettingDetails.HasMatch(SbSportID.Football, data.domainLeagueId, data.domainEventId)) this.bettingDetails.MarketChange(data);
            }
          }
        };

        _proto.onEventInsert = function onEventInsert(data) {
          if (this.isSceneDetroy()) return;

          if (data.hasOwnProperty("isLive")) {
            if (Boolean(data.isLive) == false && SbUserInfo.getInstance().GetTypeTimeMatch() != SbTypeTimeMatch.Live) {
              return;
            }
          }

          SbFootballEventDataManager.getInstance().OnEventInsert(data);
          /**
          * protected Integer homeId;
                  protected String homeName;
              protected Integer awayId;
              protected String awayName;
              protected Long startDate;
              protected MatchStatus status;
              protected Long eventId;
              protected Integer leagueId;
              protected Integer sportId;
              */
          // data = {
          //     "m": [],
          //     "homeId": "4567",
          //     "homeName": "Đội A",
          //     "awayId": "982222",
          //     "awayName": "Đội B",
          //     "startDate": "2021-05-17T11:00:00Z",
          //     "status": "Active",
          //     "eventId": 12345,
          //     "leagueId": 688,
          //     "sportId": 1
          // }
          // data = {
          //     "m": [ ],
          //     "ei": data.eventId,
          //     "hi": data.homeId,
          //     "hn": data.homeName,
          //     "ai": data.awayId,
          //     "an": data.awayName,
          //     // "mc": 13,
          //     "et": data.startDate
          //   }

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              if (data.hasOwnProperty("m") == false) data.m = [];
              this.listLeague[i].EventInsert(data);

              if (!this.listLeague[i].node.active) {
                this.listLeague[i].node.active = true;
              }

              break;
            }
          }
        };

        _proto.onEventRemove = function onEventRemove(data) {
          if (this.isSceneDetroy()) {
            return;
          }

          SbFootballEventDataManager.getInstance().OnEventRemove(data);

          if (this.IsFavoriteMode && SbMatchFavorite.getInstance().IsListFavoriteHasMatch(data.eventId)) {
            SbMatchFavorite.getInstance().FetchCountFavorite();
          }

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              this.listLeague[i].EventRemove(data);
              var league = this.listLeague[i];

              if (league.GetTotalMatch() == 0) {
                this.removeLeague(i);
              }

              break;
            }
          }

          if (this.bettingDetails.HasMatch(SbSportID.Football, data.leagueId, data.eventId)) {
            this.bettingDetails.EventRemove(data);
          }
        };

        _proto.onEventChange = function onEventChange(data) {
          if (this.isSceneDetroy()) return;
          SbFootballEventDataManager.getInstance().OnEventChange(data);

          if (this.listLeague == null) {
            error("ơ-rê-ka");
            error("listLeague" + this.listLeague);
            error("data" + JSON.parse(data));
          }

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              this.listLeague[i].EventChange(data);
              break;
            }
          }

          if (this.bettingDetails.HasMatch(SbSportID.Football, data.leagueId, data.eventId)) this.bettingDetails.EventChange(data);
        };

        _proto.onLeagueInsert = function onLeagueInsert(data) {
          if (this.isSceneDetroy()) return;
          this.addNewLeague(data);
        };

        _proto.isSceneDetroy = function isSceneDetroy() {
          if (this.nodeLoading == null) {
            return true;
          }

          if (this.nodeLoading.IsLoading()) return true;
          return false;
        };

        _proto.addNewLeague = function addNewLeague(data) {
          // data = { "sportId": 1, "sportName": "Soccer", "categoryId": 50, "categoryName": "Kazakhstan", "leagueId": 688, "leagueName": "1 Division", "leaguePriorityOrder": 2 };
          var dataLeague = {
            "e": [],
            "si": data.sportId,
            "sn": data.sportName,
            "rn": data.categoryName,
            //region
            "ri": data.categoryId,
            //region
            "li": data.leagueId,
            "ln": data.leagueName,
            "lpo": data.leaguePriorityOrder
          }; //

          var item = this.createItemLeague(dataLeague);
          item.node.parent = this.nodeParentTodayLeague;
          item.node.active = false; //moi tao chua co match thi an di ong giao

          this.listLeague.push(item);
        };

        _proto.removeLeague = function removeLeague(index) {
          var match = this.listLeague[index];
          match.node.removeFromParent();
          this.listLeague.splice(index, 1);
        };

        _proto.onStyleOddsChange = function onStyleOddsChange() {
          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i] != null && this.listLeague[i] != undefined) {
              this.listLeague[i].ChangeOddsStyle();
            }
          }

          if (this.bettingDetails.node.active) {
            this.bettingDetails.ChangeOddsStyle();
          }
        };

        _proto.hideBettingDetails = function hideBettingDetails() {
          this.SetHideChat();
          this.bettingDetails.ClearCallbackDataLiveChange();
          this.setActiveBettingDetails(false); //check the last tab opened is Livestream

          if (SbCommonPrefabsManager.getInstance().GetMenuTop().GetIndexItemMenuTopCurrent() == 4) {
            // 4 is index button Livestream enabled
            this.ShowListLivestreamHighlight();
          }
        };

        _proto.setActiveBettingDetails = function setActiveBettingDetails(active) {
          this.bettingDetails.node.active = active;
          this.SetShowCommonGroup(false);
        };

        _proto.onClickHideBettingDetails = function onClickHideBettingDetails() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideBettingDetails();
        };

        _proto.IsFavoriteMode = function IsFavoriteMode() {
          return this.toggleFavorite && this.toggleFavorite.isChecked;
        };

        _proto.onToggleFavoriteClick = function onToggleFavoriteClick(toggle2, customEventData) {
          if (!this.isShowFavorite) {
            SbSoundsManager.getInstance().playSfxClick();
            SbMatchFavorite.getInstance().Refesh(this.requestFavoriteComplete.bind(this));
          } // console.error(this.listLeague.slice(), this.listLeague.slice().length);

        };

        _proto.setToggleFavorite = function setToggleFavorite(isCheck) {
          this.toggleFavorite.isChecked = isCheck;

          if (this.nodeBgFavorite) {
            this.nodeBgFavorite.active = !isCheck;
          }
        };

        _proto.requestFavoriteComplete = function requestFavoriteComplete(favoriteLeague) {
          var _this4 = this;

          if (favoriteLeague.length == 0) {
            this.setToggleFavorite(false);
            SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("NoFavorite"));
            return;
          }

          this.onRequestDataEvensSuccess(favoriteLeague);

          if (this.listLeague.length == 0) {
            this.setToggleFavorite(false);
            SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("NoFavorite"));
            return;
          }

          if (this.toggleFavorite) {
            this.toggleFavorite.interactable = false;
          }

          this.isShowFavorite = true;
          var count = this.listLeague.length;

          if (count > 0) {
            this.setToggleFavorite(true);
            SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch().ActiveAllButton();
            this.setStatusIconSearch(false);
            this.setStatusIconCalenderIsCustomDate(false);
          }

          var timeDelay = 0; //show list

          Tween.stopAllByTarget(this.node);
          tween(this.node).delay(timeDelay).call(function () {
            for (var i = 0; i < _this4.listLeague.length; i++) {
              if (_this4.listLeague[i] != null && _this4.listLeague[i] != undefined) {
                _this4.listLeague[i].ShowLeague();

                _this4.nodeParentTodayLeague.getComponent(Layout).updateLayout(true);

                var leagueName = _this4.listLeague[i].GetLeagueData().leagueName;

                var isCornerMatch = SbMarket.IsCornerMatch(leagueName);
                var isBookingMatch = SbMarket.IsBookingMatch(leagueName);

                if (isCornerMatch || isBookingMatch) {
                  _this4.listLeague[i].HideLeague();
                }
              }
            }

            _this4.scrollViewLeague.scrollToTop();
          }).start();
        };

        _proto.onClickButtonShowPopupSearch = function onClickButtonShowPopupSearch() {
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowPopupSearch();
          this.SetHideChat();
        };

        _proto.onClickButtonShowCalendar = function onClickButtonShowCalendar() {
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowPopupCalendar(this);
          this.SetHideChat();
        };

        _proto.onClickButtonShowMatchEarly = function onClickButtonShowMatchEarly() {
          var menu = SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch();
          menu.SetIndexButton(2);
          this.onTypeTimeMatchChange(0);
          menu.SetPositionButton(0);
          menu.SetIndexButton(0);
        };

        _proto.onClickButtonShowMatchToday = function onClickButtonShowMatchToday() {
          var menu = SbCommonPrefabsManager.getInstance().GetMenuTop().GetMenuTypeTimeMatch();
          menu.SetIndexButton(2);
          menu.SetPositionButton(1);
          this.onTypeTimeMatchChange(1);
          menu.SetIndexButton(1);
        };

        _proto.onTypeTimeMatchChange = function onTypeTimeMatchChange(type) {
          log("Button Click: " + type);
          var menuTop = SbCommonPrefabsManager.getInstance().GetMenuTop();
          var menuTypeTimeMatch = menuTop.GetMenuTypeTimeMatch();

          if (type == menuTypeTimeMatch.GetIndexCurrent()) {
            SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("WatchingMatches") + " " + menuTop.ConvertIndexTypeTimeMatchToString(type));
            return;
          }

          var calendar = SbCommonPrefabsManager.getInstance().GetCalendar();

          if (calendar != null) {
            if (type == 0) {
              //Early
              log("TypeTimeMatch.Early");
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Early);
              calendar.SetDayWithTypeTimeMatch(SbTypeTimeMatch.Early);
            } else if (type == 1) {
              //Today
              log("TypeTimeMatch.Today");
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Today);
              calendar.SetDayWithTypeTimeMatch(SbTypeTimeMatch.Today);
            } else if (type == 2) {
              //Live
              log("TypeTimeMatch.Live");
              SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
              calendar.SetDayWithTypeTimeMatch(SbTypeTimeMatch.Live);
            }
          }

          this.titleTodayLeague.SetExpand(true);
          this.nodeLoading.ShowLoading(0.55);
          this.lbMsgInBg.node.active = false;
          menuTypeTimeMatch.SetActive(false);
          this.requestEventData();
        };

        _proto.requestEventData = function requestEventData(dateRequest) {
          if (dateRequest === void 0) {
            dateRequest = null;
          }

          if (this.isLoadDataFakeFromLocal) {
            SbFootballEventDataManager.getInstance().requestEventDataFake(this.dataEventsFake.json);
          } else {
            SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch(), dateRequest);
          }
        };

        _proto.requestEventDataLiveWithCallBack = function requestEventDataLiveWithCallBack(cbSuccess, cbFail) {
          if (this.isLoadDataFakeFromLocal) {
            SbFootballEventDataManager.getInstance().requestEventDataFake(this.dataEventsFake.json);
          } else {
            SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbTypeTimeMatch.Live, null, cbSuccess, cbFail);
          }
        };

        _proto.checkAndShowButtonScrollToTop = function checkAndShowButtonScrollToTop(scrollview) {
          if (this.buttonScrollToTop != null) {
            //@ts-ignore
            if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.buttonScrollToTop.getComponent(UIOpacity)) == 0) {
              var index = scrollview.getScrollOffset().y / scrollview.getMaxScrollOffset().y;

              if (index > 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity == 0) {
                this.showButtonScrollToTop();
              } else if (index <= 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity > 0) {
                this.hideButtonScrollToTop();
              }
            }
          }
        };

        _proto.hideButtonScrollToTop = function hideButtonScrollToTop() {
          var _this5 = this;

          Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
          tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
            opacity: 0
          }).call(function () {
            _this5.buttonScrollToTop.active = false;
            _this5.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
          }).start();
        };

        _proto.showButtonScrollToTop = function showButtonScrollToTop() {
          this.buttonScrollToTop.active = true;
          this.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
          Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
          tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
            opacity: 255
          }).start();
        };

        _proto.createItemLeague = function createItemLeague(data, isInputFeildNameShort) {
          if (isInputFeildNameShort === void 0) {
            isInputFeildNameShort = true;
          }

          var item = SbNodePoolManager.createItemFromPrefab(this.prefabLeague).getComponent(SbLeague);
          item.Reset();
          item.init(this);
          item.InitData(data, isInputFeildNameShort);
          return item;
        };

        _proto.onClickBetHitory = function onClickBetHitory() {
          var now = new Date().getTime();

          if (now - this.timeClickShowBetHitory < 1500) {
            this.timeClickShowBetHitory = now;
            return;
          }

          this.timeClickShowBetHitory = now;
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().GetMenuTop().ShowBetHistory();
        };

        _proto.onScrollviewEvenCallback = function onScrollviewEvenCallback(scrollview, eventType, customEventData) {
          if (eventType == ScrollView_EventType.SCROLLING) {
            this.checkAndShowButtonScrollToTop(scrollview);
          }
        };

        _proto.onClickRefresh = function onClickRefresh() {
          SbSoundsManager.getInstance().playSfxClick();
          this.titleTodayLeague.SetExpand(true);
          this.nodeLoading.ShowLoading(0.55);
          this.lbMsgInBg.node.active = false;
          this.requestEventData();
          SbCommonPrefabsManager.getInstance().GetMenuTop().updateStatusMenuTypeTimeMatch();
        };

        _proto.onClickShowGuideIconOnGoingLive = function onClickShowGuideIconOnGoingLive() {
          SbSoundsManager.getInstance().playSfxClick();
          this.tooltips.SetContent(SbLocalizationManager.getInstance().GetKeyValue("SupportBetLive"));
          this.tooltips.ShowTooltip();
        } //======== DEBUG ========//
        ;

        _proto.onDebugEventUp = function onDebugEventUp() {
          var data = JSON.parse("\n        {\"s\":1,\"t\":\"event_up\",\"d\":{\"eventId\":8555,\"leagueId\":125,\"sportId\":1,\"status\":\"ACTIVE\",\"gameTime\":1559230,\"gamePart\":2,\"homeScore\":3,\"awayScore\":1,\"startDate\":1620120600000,\"isLive\":true,\"isGoingLive\":true}}");
        };

        _proto.onDebugAddOddsClick = function onDebugAddOddsClick() {
          var data = JSON.parse("{\n        \"marketId\": 1,\n        \"marketName\": \"1x2 Half Time\",\n        \"isSuspended\": false,\n        \"sportId\": 1,\n        \"odds\": {\n        \"selectionHomeId\": \"83090020000000h\",\n        \"selectionAwayId\": \"83090020000000a\",\n        \"selectionDrawId\": \"83090020000000d\",\n        \"offerId\": 1938266083237999,\n        \"points\": \"0.0\",\n        \"oddsHome\": {\n        \"trueOdds\": \"3.5269425560067535\",\n        \"decimal\": \"9.99\"\n        },\n        \"oddsAway\": {\n        \"trueOdds\": \"3.5269425560067535\",\n        \"decimal\": \"9.89\"\n        },\n        \"oddsDraw\": {\n        \"trueOdds\": \"2.25765939425801\",\n        \"decimal\": \"9.79\"\n        },\n        \"isMainLine\": true\n        },\n        \"leagueId\": 651,\n        \"eventId\": 9001\n        }");

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              this.listLeague[i].OddsInsert(data);
              break;
            }
          }
        };

        _proto.onDebugRemoveMatch = function onDebugRemoveMatch() {
          this.onEventRemove(JSON.parse(this.editboxDebug.string));
        };

        _proto.onDebugOddChangeClick = function onDebugOddChangeClick() {
          // let data = JSON.parse(`{"s":1,"t":"odds_up","d":{"kafkaOddsList":[{"marketId":3,"marketName":"Over Under Full Time","isSuspended":false,"sportId":1,"odds":{"selectionHomeId":"122780030020025h","selectionAwayId":"122780030020025a","offerId":20834122852460225,"strOfferId":"20834122852460225","points":"2.25","oddsHome":{"trueOdds":"1.7051197539002416","malay":"0.17","indo":"-1.41","decimal":"1.71","hk":"0.71"},"oddsAway":{"trueOdds":"1.9101068281396143","malay":"7.89","indo":"-1.1","decimal":"1.91","hk":"0.91"},"isMainLine":true,"offerTs":1623055293890},"leagueId":548,"eventId":12278,"timeRange":"EARLY"}]},"tmrg":"early"}`);
          var data = JSON.parse(this.editboxDebug.string);
          this.onOddsChange(data.d);
        };

        _proto.onDebugMarketChangeClick = function onDebugMarketChangeClick() {
          // let data = JSON.parse(`{"s":1,"t":"odds_up","d":{"kafkaOddsList":[{"marketId":3,"marketName":"Over Under Full Time","isSuspended":false,"sportId":1,"odds":{"selectionHomeId":"122780030020025h","selectionAwayId":"122780030020025a","offerId":20834122852460225,"strOfferId":"20834122852460225","points":"2.25","oddsHome":{"trueOdds":"1.7051197539002416","malay":"0.17","indo":"-1.41","decimal":"1.71","hk":"0.71"},"oddsAway":{"trueOdds":"1.9101068281396143","malay":"7.89","indo":"-1.1","decimal":"1.91","hk":"0.91"},"isMainLine":true,"offerTs":1623055293890},"leagueId":548,"eventId":12278,"timeRange":"EARLY"}]},"tmrg":"early"}`);
          var data = JSON.parse(this.editboxDebug.string);
          this.onMarketChange(data.d);
        };

        _proto.onDebugRemoveOddsClick = function onDebugRemoveOddsClick() {
          var data = JSON.parse("{\n        \"marketId\": 1,\n        \"marketName\": \"Over Under Full Time\",\n        \"sportId\": 1,\n        \"odds\": {\n        \"selectionHomeId\": \"90030010000000h\",\n        \"offerId\": 2061467285245000,\n        \"points\": \"0.0\",\n        \"isMainLine\": false\n        },\n        \"leagueId\": 260,\n        \"eventId\": 9003\n        }");

          for (var i = 0; i < this.listLeague.length; i++) {
            if (this.listLeague[i].HasLeague(data)) {
              this.listLeague[i].OddsRemove(data);
              break;
            }
          }
        };

        _proto.onEventHide = function onEventHide() {
          log("EVENT_HIDE");
        };

        _proto.onEventShow = function onEventShow() {
          log("EVENT_SHOW");

          if (this.checkNeedPreloadData()) {
            // this.checkReconnect();
            this.nodeLoading.ShowLoading(0.55);
            if (SbGameHTTPManager.getInstance().IsAvailable()) this.requestEventData();else if (this.menuLeft != null) this.menuLeft.BackToGame();
          }
        };

        _createClass(SbFootballBettingController, [{
          key: "listSpriteFrameButton",
          get: function get() {
            var result = [];

            if (this.skinButtonCtr) {
              result = this.skinButtonCtr.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbFootballBettingController;
      }(Component), _class3.Instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scrollViewLeague", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bettingDetails", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listLivestreamHighlight", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentTodayLeague", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "titleTodayLeague", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "prefabLeague", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbMsgInBg", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodeNoMatchLive", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "dataEventsFake", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "nodeLoading", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "buttonScrollToTop", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "toggleFavorite", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "nodeBgFavorite", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "buttonCalendar", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "buttonSearch", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "skinButtonCtr", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "tooltips", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "toggleChat", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "chatPanel", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "sbCommonPrefabLayer", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "commonGroupPanel", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "listWebViewNeedDetroys", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "editboxDebug", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbFootballBettingDetails.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSportManager.ts', './SbMatch.ts', './SbMarket.ts', './SbMarketDoubleChance.ts', './SbMarketOddOrEven.ts', './SbMarketCorrectScore.ts', './SbMarketTotalScore.ts', './SbMarketDrawNoBet.ts', './SbMarketCorner1X2.ts', './SbMarketCornerOverUnder.ts', './SbMarketCornerHandicap.ts', './SbMarketCorrectScoreExtra.ts', './SbGameUtil.ts', './SbDisplayMatchInfo.ts', './SbSoundsManager.ts', './SbUIMenu.ts', './SbUIDropdown.ts', './SbLive.ts', './SbUtils.ts', './SbLivestreamUtils.ts', './SbDefine.ts', './SbLocalizationManager.ts', './SbBridge.ts', './SbCommonGroupMatchDetail.ts', './SbEmptyInfoComp.ts', './SbTypeDefine.ts', './SbMarketBooking1X2.ts', './SbMarketBookingHandicap.ts', './SbMarketBookingOverUnder.ts', './SbNodePoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ScrollView, Node, Prefab, Button, Label, director, Sprite, Widget, Component, SbSportID, SbMatch, SbMarketId, SbMarketDoubleChance, SbMarketOddOrEven, SbMarketCorrectScore, SbMarketTotalScore, SbMarketDrawNoBet, SbMarketCorner1X2, SbMarketCornerOverUnder, SbMarketCornerHandicap, SbMarketCorrectScoreExtra, ChangeFeildNameShortOfEvent, ChangeFeildNameShortOfLeague, SbDisplayMatchInfo, SbSoundsManager, SbUIMenu, SbUIDropdown, SbLiveState, SbUtils, SbLivestreamUtils, SB_EVENT_SHOW_MESSAGE_ULTIL, SB_TOP_HEIGHT_ACTIVE_VIDEO, SB_BOT_HEIGHT_ACTIVE_VIDEO, SB_TOP_HEIGHT_NO_VIDEO, SB_BOT_HEIGHT_NO_VIDEO, SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO, SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO, SbLocalizationManager, SbBridge, SbCommonGroupMatchDetail, SbEmptyInfoComp, LiveStreamUIState, SbMarketBooking1X2, SbMarketBookingHandicap, SbMarketBookingOverUnder, SbNodePoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ScrollView = module.ScrollView;
      Node = module.Node;
      Prefab = module.Prefab;
      Button = module.Button;
      Label = module.Label;
      director = module.director;
      Sprite = module.Sprite;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      SbSportID = module.SbSportID;
    }, function (module) {
      SbMatch = module.default;
    }, function (module) {
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbMarketDoubleChance = module.default;
    }, function (module) {
      SbMarketOddOrEven = module.default;
    }, function (module) {
      SbMarketCorrectScore = module.default;
    }, function (module) {
      SbMarketTotalScore = module.default;
    }, function (module) {
      SbMarketDrawNoBet = module.default;
    }, function (module) {
      SbMarketCorner1X2 = module.default;
    }, function (module) {
      SbMarketCornerOverUnder = module.default;
    }, function (module) {
      SbMarketCornerHandicap = module.default;
    }, function (module) {
      SbMarketCorrectScoreExtra = module.default;
    }, function (module) {
      ChangeFeildNameShortOfEvent = module.ChangeFeildNameShortOfEvent;
      ChangeFeildNameShortOfLeague = module.ChangeFeildNameShortOfLeague;
    }, function (module) {
      SbDisplayMatchInfo = module.SbDisplayMatchInfo;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SbUIDropdown = module.SbUIDropdown;
    }, function (module) {
      SbLiveState = module.SbLiveState;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbLivestreamUtils = module.SbLivestreamUtils;
    }, function (module) {
      SB_EVENT_SHOW_MESSAGE_ULTIL = module.SB_EVENT_SHOW_MESSAGE_ULTIL;
      SB_TOP_HEIGHT_ACTIVE_VIDEO = module.SB_TOP_HEIGHT_ACTIVE_VIDEO;
      SB_BOT_HEIGHT_ACTIVE_VIDEO = module.SB_BOT_HEIGHT_ACTIVE_VIDEO;
      SB_TOP_HEIGHT_NO_VIDEO = module.SB_TOP_HEIGHT_NO_VIDEO;
      SB_BOT_HEIGHT_NO_VIDEO = module.SB_BOT_HEIGHT_NO_VIDEO;
      SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO = module.SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO;
      SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO = module.SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbBridge = module.SbBridge;
    }, function (module) {
      SbCommonGroupMatchDetail = module.SbCommonGroupMatchDetail;
    }, function (module) {
      SbEmptyInfoComp = module.SbEmptyInfoComp;
    }, function (module) {
      LiveStreamUIState = module.LiveStreamUIState;
    }, function (module) {
      SbMarketBooking1X2 = module.default;
    }, function (module) {
      SbMarketBookingHandicap = module.default;
    }, function (module) {
      SbMarketBookingOverUnder = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _class3;

      cclegacy._RF.push({}, "ad09a9WphxDd7XatrLZjS5H", "SbFootballBettingDetails", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbFootballBettingDetails = exports('default', (_dec = ccclass('SbFootballBettingDetails'), _dec2 = property(SbMarketCorrectScoreExtra), _dec3 = property(ScrollView), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(SbUIMenu), _dec8 = property(SbUIDropdown), _dec9 = property(Prefab), _dec10 = property(Prefab), _dec11 = property(Prefab), _dec12 = property(Prefab), _dec13 = property(Prefab), _dec14 = property(Prefab), _dec15 = property(Prefab), _dec16 = property(Prefab), _dec17 = property(Prefab), _dec18 = property(Prefab), _dec19 = property(Prefab), _dec20 = property(Prefab), _dec21 = property({
        group: 'CommonGroup',
        type: SbCommonGroupMatchDetail
      }), _dec22 = property({
        group: 'LiveStream',
        type: Button
      }), _dec23 = property({
        group: 'LiveStream',
        type: Node
      }), _dec24 = property(Node), _dec25 = property(Node), _dec26 = property(Node), _dec27 = property(Node), _dec28 = property(Node), _dec29 = property(Node), _dec30 = property(Node), _dec31 = property(Node), _dec32 = property(Node), _dec33 = property(Node), _dec34 = property(Node), _dec35 = property(Node), _dec36 = property(Node), _dec37 = property(Node), _dec38 = property(Node), _dec39 = property(Node), _dec40 = property(Node), _dec41 = property(Node), _dec42 = property(Node), _dec43 = property(Node), _dec44 = property(Node), _dec45 = property(Node), _dec46 = property(Node), _dec47 = property(Node), _dec48 = property(Label), _dec49 = property(SbEmptyInfoComp), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbFootballBettingDetails, _Component);

        function SbFootballBettingDetails() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "marketCorrectScoreExtra", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollViewBetDetails", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "compMatchInfoDetail", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAllMarketContainer", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAllInfoDetailtContainer", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menuTypeMarket", _descriptor6, _assertThisInitialized(_this)); // @property(SbUIMenu)
          // private menuInfoDetailt: SbUIMenu | null = null; // Don't see user -> maybe code in group MatchInfo


          _initializerDefineProperty(_this, "listDropdownAllMarket", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarketDoubleChance", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeOddOrEven", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeCorrectScore", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeTotalScore", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeDrawNoBet", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeCornerHandicap", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeCornerOverUnder", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeCorner1X2", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeBookingHandicap", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeBookingOverUnder", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMarkeBooking1X2", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMatch", _descriptor19, _assertThisInitialized(_this)); //============ Match Info =============//


          _initializerDefineProperty(_this, "nodeGroupMatchInfo", _descriptor20, _assertThisInitialized(_this)); //============ LiveStream =============//


          _initializerDefineProperty(_this, "btnShowLive", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeVideoPLayerContainer", _descriptor22, _assertThisInitialized(_this)); //============= parents of odds =============//


          _initializerDefineProperty(_this, "oddsMainParent", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsMainParentHT", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLockMatch", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsDoubleChanceParent", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsDoubleChanceHTParent", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsOddOrEvenParent", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsOddOrEvenHTParent", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCorrectScore", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCorrectScoreHT", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsTotalScore", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsTotalScoreHT", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsDrawNoBet", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCornerHandicap", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCornerHandicapHT", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCornerOverUnder", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCornerOverUnderHT", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCorner1X2", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsCorner1X2HT", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBookingHandicap", _descriptor41, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBookingHandicapHT", _descriptor42, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBookingOverUnder", _descriptor43, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBookingOverUnderHT", _descriptor44, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBooking1X2", _descriptor45, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsBooking1X2HT", _descriptor46, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor47, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "emptyComp", _descriptor48, _assertThisInitialized(_this));

          _this.leagueData = null;
          _this.matchData = null;
          _this.listMarket = [];
          _this.match = null;
          _this.matchHT = null;
          _this.sbFootballBettingController = null;
          _this.listAllMarket = [];
          _this.listMarketMain = [];
          _this.listMarketAllTime = [];
          _this.listMarketPenalty = [];
          _this.listMarketBooking = [];
          _this.listAllMarketHT = [];
          _this.listMarketMainHT = [];
          _this.listMarketAllTimeHT = [];
          _this.listMarketPenaltyHT = [];
          _this.listMarketBookingHT = [];
          _this.matchInfoDetaitl = null;
          _this.isReadyForUpdateData = false;
          _this.isHasVideoLivestream = false;
          _this.dataVideoLivestream = null;
          return _this;
        }

        SbFootballBettingDetails.getInstance = function getInstance() {
          return this.Instance;
        };

        var _proto = SbFootballBettingDetails.prototype;

        _proto.init = function init(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.onLoad = function onLoad() {
          this.matchInfoDetaitl = this.compMatchInfoDetail.getComponent(SbDisplayMatchInfo);
          SbFootballBettingDetails.Instance = this;
          this.listMarketMain = [this.oddsMainParent];
          this.listMarketMainHT = [this.oddsMainParentHT];
          this.listMarketAllTime = [this.oddsDoubleChanceParent, this.oddsOddOrEvenParent, this.oddsCorrectScore, this.oddsTotalScore, this.oddsDrawNoBet];
          this.listMarketAllTimeHT = [this.oddsDoubleChanceHTParent, this.oddsOddOrEvenHTParent];
          this.listMarketPenalty = [this.oddsCorner1X2, this.oddsCornerHandicap, this.oddsCornerOverUnder];
          this.listMarketPenaltyHT = [this.oddsCorner1X2HT, this.oddsCornerHandicapHT, this.oddsCornerOverUnderHT];
          this.listMarketBooking = [this.oddsBooking1X2, this.oddsBookingHandicap, this.oddsBookingOverUnder];
          this.listMarketBookingHT = [this.oddsBooking1X2HT, this.oddsBookingHandicapHT, this.oddsBookingOverUnderHT];
          this.listAllMarket = [this.oddsMainParent, this.oddsDoubleChanceParent, this.oddsOddOrEvenParent, this.oddsCorrectScore, this.oddsTotalScore, this.oddsDrawNoBet, this.oddsCorner1X2, this.oddsCornerHandicap, this.oddsCornerOverUnder].concat(this.listMarketBooking);
          this.listAllMarketHT = [this.oddsMainParentHT, this.oddsDoubleChanceHTParent, this.oddsOddOrEvenHTParent, this.oddsCorrectScoreHT, this.oddsTotalScoreHT, this.oddsCorner1X2HT, this.oddsCornerHandicapHT, this.oddsCornerOverUnderHT].concat(this.listMarketBookingHT); //init menu

          this.menuTypeMarket.SetButtonClickCallback(this.onMenuButtonClickCallback.bind(this));
          this.menuTypeMarket.SetIndexDefault(0);
        };

        _proto.onEnable = function onEnable() {
          this.nodeGroupMatchInfo.InitCommonGroup(this.onGroupMatchSubMenuClick.bind(this), true);
        };

        _proto.SetData = function SetData(leagueData, matchData, dataVideoLivestream) {
          this.isReadyForUpdateData = false;
          this.resetUI();
          this.leagueData = leagueData;
          this.matchData = matchData; // log("matchData det: " + JSON.stringify(matchData))
          // log("leagueData det: " + JSON.stringify(leagueData))

          var matchDataTemp = ChangeFeildNameShortOfEvent(matchData);
          matchDataTemp = ChangeFeildNameShortOfLeague(matchDataTemp); //haft time

          if (this.oddsMainParentHT && this.oddsMainParentHT.children && this.oddsMainParentHT.children.length > 0) {
            this.oddsMainParentHT.children.forEach(function (item) {
              item.getComponent(SbMatch).Reset();
            });
            SbNodePoolManager.clearItem(this.oddsMainParentHT.children);
          }

          this.matchHT = this.createItemMatch();
          this.matchHT.SetCallbackDataLiveChange(this.onDataLiveChange.bind(this));
          this.matchHT.IsShowUiForDetail();
          this.matchHT.IsShowOnlyOddsHT();
          this.matchHT.SetLeagueData(leagueData);
          this.matchHT.InitData(matchDataTemp, true);
          this.matchHT.ShowUiForDetail();
          this.oddsMainParentHT.active = true;
          this.matchHT.node.parent = this.oddsMainParentHT;
          this.matchHT.HideAllUIForScreenDetails();

          if (matchData.gamePart >= 8) {
            //time hiệp 2 ẩn kèo hiệp 1
            this.oddsMainParentHT.parent.active = false;
          } //============
          //full time


          if (this.oddsMainParent && this.oddsMainParent.children && this.oddsMainParent.children.length > 0) {
            this.oddsMainParent.children.forEach(function (item) {
              item.getComponent(SbMatch).Reset();
            });
            SbNodePoolManager.clearItem(this.oddsMainParent.children);
          }

          this.match = this.createItemMatch();
          this.match.SetCallbackDataLiveChange(this.onDataLiveChange.bind(this));
          this.match.IsShowUiForDetail();
          this.match.SetLeagueData(leagueData);
          this.match.InitData(matchDataTemp, true);
          this.match.ShowUiForDetail();
          this.oddsMainParent.active = true;
          this.match.node.parent = this.oddsMainParent;
          this.match.HideAllUIForScreenDetails(); // Information Detail

          this.nodeGroupMatchInfo.SetDataMatchInfo(matchData.eventId); //add market other

          var listMarkets = matchData.markets;
          this.marketCorrectScoreExtra.HideNoAnim();

          for (var i = 0; i < listMarkets.length; i++) {
            if (listMarkets[i].o.length == 0) continue;
            if (listMarkets[i].mi == SbMarketId.TotalScoreFT || listMarkets[i].mi == SbMarketId.TotalScoreHT || listMarkets[i].mi == SbMarketId.CorrectScoreHT) //ignore
              continue;
            var item = this.getItemMarketByID(listMarkets[i].mi);

            if (item != null) {
              item.init(this.sbFootballBettingController);

              if (listMarkets[i].mi == SbMarketId.CorrectScoreFT) {
                item.SetMarketCorrectExtra(this.marketCorrectScoreExtra, this.scrollViewBetDetails);
              }

              item.SetMatchData(matchData);
              item.SetLeagueData(leagueData);
              item.InitData(listMarkets[i]);
              this.listMarket.push(item);
            }
          }

          if (this.scrollViewBetDetails != null) {
            this.scrollViewBetDetails.enabled = true;
            this.scrollViewBetDetails.scrollToTop();
          }

          this.lbLeagueName.string = leagueData.leagueName;
          this.matchInfoDetaitl.SetData(SbMatch.GetDataForDataLiveChangeFromMatchData(matchData)); // this.lbHomeName.string = matchData.homeName;
          // this.lbAwayName.string = matchData.awayName;
          // this.lbMatchLiveTime.string = this.match.GetTimeStringOfTheMatch();
          // this.nodeInfoLive.active = this.matchData.isLive;
          // if (this.matchData.isLive) {
          //     if (this.match.GetStatusHasMatchExtra())
          //         this.lbScore.string = this.matchData.homeScoreOT + " - " + this.matchData.awayScoreOT;
          //     else
          //         this.lbScore.string = this.matchData.homeScore + " - " + this.matchData.awayScore;
          // }
          // else {
          //     this.lbScore.string = "VS";
          // }

          this.hideAllMarket();
          this.showAllMarket();
          this.menuTypeMarket.SetTabByIndex(0, false);
          this.nodeGroupMatchInfo.SetMenuFirstTab(); //check video available

          var isMatchGoingOn = SbUtils.IsMatchGoingOn(this.matchData.startDate, this.matchData.isLive, SbMatch.IsVitualMatch(this.matchData, this.leagueData));
          var isMatchHasVideoLivestream = SbMatch.IsMatchHasVideoLivestream(this.matchData);
          this.isHasVideoLivestream = this.matchData.isLivestream;

          if (dataVideoLivestream != null || isMatchHasVideoLivestream || isMatchGoingOn && isMatchHasVideoLivestream) {
            this.dataVideoLivestream = dataVideoLivestream;

            if (dataVideoLivestream != null) {
              this.showVideoPlayer();
              this.requestLoadLiveStream();
            } else {
              this.hideVideoPlayer();
            }
          } else {
            this.hideVideoPlayer(this.isHasVideoLivestream);
          }

          this.showUIAllMarket();
          this.isReadyForUpdateData = true;
        };

        _proto.LockMatch = function LockMatch(value) {
          this.nodeLockMatch.active = value;
        };

        _proto.IsActive = function IsActive() {
          if (this.node != null) return this.node.active;
          return false;
        };

        _proto.HasMatch = function HasMatch(sportId, leagueId, eventId) {
          if (!this.isReadyForUpdateData) return false;
          if (this.node.active == false) return false;
          if (sportId == SbSportID.Football && leagueId == this.leagueData.leagueId && eventId == this.matchData.eventId) return true;
          return false;
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          if (this.match != null) this.match.ChangeOddsStyle();
          if (this.matchHT != null) this.matchHT.ChangeOddsStyle();
        } //==========update data from ws===========//
        ;

        _proto.CheckRemoveOddsOld = function CheckRemoveOddsOld(listNewOdds) {
          if (!this.isReadyForUpdateData) return;

          if (this.match.HasMatch(listNewOdds[0])) {
            this.match.CheckRemoveOddsOld(listNewOdds);
          }

          if (this.matchHT.HasMatch(listNewOdds[0])) {
            this.matchHT.CheckRemoveOddsOld(listNewOdds);
          }
        };

        _proto.OddsChange = function OddsChange(data) {
          if (!this.isReadyForUpdateData) return;
          if (this.match != null) this.match.OddsChange(data);
          if (this.matchHT != null) this.matchHT.OddsChange(data);

          for (var i = 0; i < this.listMarket.length; i++) {
            if (this.listMarket[i].HasMarket(data)) {
              this.listMarket[i].OddsChange(data); // if (this.listMarket[i].NeedInsertOdds(data)) {
              //     this.OddsInsert(data);
              // }
              // else
              //     this.listMarket[i].OddsChange(data);
            }
          } // for (let i = 0; i < this.market.length; i++) {
          //     if (this.market[i].HasMarket(data)) {
          //         this.market[i].OddsChange(data);
          //     }
          // }

        };

        _proto.OddsInsert = function OddsInsert(data) {
          if (!this.isReadyForUpdateData) return;
          if (this.match != null) this.match.OddsInsert(data);
          if (this.matchHT != null) this.matchHT.OddsInsert(data); // for (let i = 0; i < this.market.length; i++) {
          //     if (this.market[i].HasMarket(data)) {
          //         this.market[i].OddsInsert(data);
          //     }
          // }
          // this.updateContentSize();
        };

        _proto.OddsRemove = function OddsRemove(data) {
          if (!this.isReadyForUpdateData) return;
          if (this.match != null) this.match.OddsRemove(data);
          if (this.matchHT != null) this.matchHT.OddsRemove(data); // for (let i = 0; i < this.market.length; i++) {
          //     if (this.market[i].HasMarket(data)) {
          //         this.market[i].OddsRemove(data);
          //     }
          // }
          // this.updateContentSize();
        };

        _proto.EventChange = function EventChange(data) {
          if (!this.isReadyForUpdateData) return;
          this.match.EventChange(data);
          this.matchHT.EventChange(data); //hidden all market HT

          if (this.matchData.gamePart >= 8) {
            for (var i = 0; i < this.listMarketMainHT.length; i++) {
              if (this.listMarketMainHT[i].children.length > 0) this.listMarketMainHT[i].active = false;
            }
          } // this.matchData.status = data.status;
          // this.matchData.isLive = data.isLive;
          // this.matchData.isGoingLive = data.isGoingLive;
          // this.matchData.startDate = data.startDate;
          // //sore data for live
          // if (data.isLive) {
          //     this.matchData.gameTime = data.gameTime;
          //     this.matchData.gamePart = data.gamePart;
          //     this.matchData.homeScore = data.homeScore;
          //     this.matchData.awayScore = data.awayScore;
          //     this.matchData.redCardsHome = data.redCardsHome;
          //     this.matchData.redCardsAway = data.redCardsAway;
          // }
          // this.showDataToUI();

        };

        _proto.EventRemove = function EventRemove(data) {
          if (!this.isReadyForUpdateData) return;
          director.emit(SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager.getInstance().GetKeyValue("MatchFinished"));
          this.sbFootballBettingController.HideBettingDetails();
        };

        _proto.MarketChange = function MarketChange(data) {
          if (!this.isReadyForUpdateData) return;
          this.match.MarketChange(data);
          this.matchHT.MarketChange(data);

          for (var i = 0; i < this.listMarket.length; i++) {
            if (this.listMarket[i].HasDomainMarket(data)) {
              this.listMarket[i].MarketChange(data);
            }
          } // for (let i = 0; i < this.market.length; i++) {
          //     if (this.market[i].HasDomainMarket(data)) {
          //         this.market[i].MarketChange(data);
          //     }
          // }
          // this.updateContentSize();

        };

        _proto.ClearCallbackDataLiveChange = function ClearCallbackDataLiveChange() {
          if (this.match != null) {
            this.match.SetCallbackDataLiveChange(null);
          }

          if (this.matchHT != null) {
            this.matchHT.SetCallbackDataLiveChange(null);
          }
        };

        _proto.showUIAllMarket = function showUIAllMarket() {
          this.nodeAllMarketContainer.active = true;
          this.menuTypeMarket.node.active = true;
          this.nodeAllInfoDetailtContainer.active = false; // this.menuInfoDetailt.node.active = false;
        };

        _proto.showUIInfoDetails = function showUIInfoDetails() {
          this.nodeAllMarketContainer.active = false;
          this.menuTypeMarket.node.active = false;
          this.nodeAllInfoDetailtContainer.active = true; // this.menuInfoDetailt.node.active = true;
        } //#region LiveStream
        ;

        _proto.requestLoadLiveStream = function requestLoadLiveStream() {
          if (this.dataVideoLivestream == null) {
            SbLivestreamUtils.RequestLinkVideo(this.matchData.eventId, this.matchData.type, function (data) {
              //play video
              director.emit(SbLiveState.LiveLoad, data);
            }, function (message) {
              //fail
              director.emit(SbLiveState.LiveDisplayError, message);
            });
          } else {
            director.emit(SbLiveState.LiveLoad, this.dataVideoLivestream);
          }
        };

        _proto.onClickShowLiveStream = function onClickShowLiveStream() {
          SbSoundsManager.getInstance().playSfxClick();
          this.showVideoPlayer();
          this.requestLoadLiveStream();
        };

        _proto.onClickHideLiveStream = function onClickHideLiveStream() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideVideoPlayer();
        };

        _proto.setButtonLiveStream = function setButtonLiveStream(active, isInteractable) {
          if (isInteractable === void 0) {
            isInteractable = true;
          }

          this.btnShowLive.node.active = active;
          this.btnShowLive.interactable = isInteractable;
          var sprButton = this.btnShowLive.getComponentInChildren(Sprite);

          if (sprButton) {
            sprButton.grayscale = !isInteractable;
          }
        };

        _proto.hideVideoPlayer = function hideVideoPlayer(isWillLive) {
          if (isWillLive === void 0) {
            isWillLive = false;
          }

          var state = LiveStreamUIState.NORMAL;

          if (this.isHasVideoLivestream) {
            state = LiveStreamUIState.SHOW_BUTTON_LIVE;
          }

          this.setButtonLiveStream(this.isHasVideoLivestream, !isWillLive);
          this.setWidgetLayout(state, this.nodeAllMarketContainer);
          this.nodeGroupMatchInfo.SetWidgetLayout(state);
          this.nodeVideoPLayerContainer.active = false;
          this.scrollViewBetDetails.scrollToTop(0);
        };

        _proto.showVideoPlayer = function showVideoPlayer() {
          this.setButtonLiveStream(false);
          this.setWidgetLayout(LiveStreamUIState.SHOW_LIVESTREAM, this.nodeAllMarketContainer);
          this.nodeGroupMatchInfo.SetWidgetLayout(LiveStreamUIState.SHOW_LIVESTREAM);
          this.nodeVideoPLayerContainer.active = true;
          this.scrollViewBetDetails.scrollToTop(0);
          SbBridge.ChangePositionMiniGameNode();
        } //#endregion
        ;

        _proto.setWidgetLayout = function setWidgetLayout(stateUI, container) {
          var top = SB_TOP_HEIGHT_ACTIVE_VIDEO;
          var bottom = SB_BOT_HEIGHT_ACTIVE_VIDEO;

          if (stateUI == LiveStreamUIState.NORMAL) {
            top = SB_TOP_HEIGHT_NO_VIDEO;
            bottom = SB_BOT_HEIGHT_NO_VIDEO;
          } else if (stateUI == LiveStreamUIState.SHOW_BUTTON_LIVE) {
            top = SB_TOP_HEIGHT_SHOW_BUTTON_VIDEO;
            bottom = SB_BOT_HEIGHT_SHOW_BUTTON_VIDEO;
          }

          var widget = container.getComponent(Widget);

          if (widget) {
            widget.top = top;
            widget.bottom = bottom;
            widget.updateAlignment();
          }

          var listLayout = container.getComponentsInChildren(Widget);
          listLayout.forEach(function (element) {
            element.updateAlignment();
          });
        } // All Market SubMenu
        ;

        _proto.onMenuButtonClickCallback = function onMenuButtonClickCallback(customData, isSfx) {
          if (isSfx === void 0) {
            isSfx = true;
          }

          if (isSfx) {
            SbSoundsManager.getInstance().playSfxClick();
          }

          this.hideAllMarket();

          if (customData == 0) {
            this.showAllMarket();
          } else if (customData == 1) {
            this.showMainMarket();
          } else if (customData == 2) {
            this.showFullMarket();
          } else if (customData == 3) {
            this.showBookingMarket();
          }
        };

        _proto.resetUI = function resetUI() {
          this.listMarket = [];
          this.hideAllMarket();
          this.nodeGroupMatchInfo.SetActiveCommonGroup(false);
          SbNodePoolManager.clearItem(this.oddsDoubleChanceParent.children);
          SbNodePoolManager.clearItem(this.oddsDoubleChanceHTParent.children);
          SbNodePoolManager.clearItem(this.oddsOddOrEvenParent.children);
          SbNodePoolManager.clearItem(this.oddsOddOrEvenHTParent.children);
          SbNodePoolManager.clearItem(this.oddsCorrectScore.children);
          SbNodePoolManager.clearItem(this.oddsCorrectScoreHT.children);
          SbNodePoolManager.clearItem(this.oddsTotalScore.children);
          SbNodePoolManager.clearItem(this.oddsTotalScoreHT.children);
          SbNodePoolManager.clearItem(this.oddsDrawNoBet.children);
          SbNodePoolManager.clearItem(this.oddsCorner1X2.children);
          SbNodePoolManager.clearItem(this.oddsCorner1X2HT.children);
          SbNodePoolManager.clearItem(this.oddsCornerHandicap.children);
          SbNodePoolManager.clearItem(this.oddsCornerHandicapHT.children);
          SbNodePoolManager.clearItem(this.oddsCornerOverUnder.children);
          SbNodePoolManager.clearItem(this.oddsCornerOverUnderHT.children);
          SbNodePoolManager.clearItem(this.oddsBooking1X2.children);
          SbNodePoolManager.clearItem(this.oddsBooking1X2HT.children);
          SbNodePoolManager.clearItem(this.oddsBookingHandicap.children);
          SbNodePoolManager.clearItem(this.oddsBookingHandicapHT.children);
          SbNodePoolManager.clearItem(this.oddsBookingOverUnder.children);
          SbNodePoolManager.clearItem(this.oddsBookingOverUnderHT.children);

          for (var i = 0; i < this.listDropdownAllMarket.length; i++) {
            this.listDropdownAllMarket[i].ExpandItem();
          }

          this.nodeLockMatch.active = false;
        };

        _proto.hideAllMarket = function hideAllMarket() {
          this.showEmptyInfo(false);
          this.oddsMainParent.parent.active = false;
          this.oddsMainParentHT.parent.active = false;
          this.oddsDoubleChanceParent.parent.active = false;
          this.oddsDoubleChanceHTParent.parent.active = false;
          this.oddsOddOrEvenParent.parent.active = false;
          this.oddsOddOrEvenHTParent.parent.active = false;
          this.oddsCorrectScore.parent.active = false;
          this.oddsCorrectScoreHT.parent.active = false;
          this.oddsTotalScore.parent.active = false;
          this.oddsTotalScoreHT.parent.active = false;
          this.oddsDrawNoBet.parent.active = false;
          this.oddsCorner1X2.parent.active = false;
          this.oddsCorner1X2HT.parent.active = false;
          this.oddsCornerHandicap.parent.active = false;
          this.oddsCornerHandicapHT.parent.active = false;
          this.oddsCornerOverUnder.parent.active = false;
          this.oddsCornerOverUnderHT.parent.active = false;
          this.oddsBooking1X2.parent.active = false;
          this.oddsBooking1X2HT.parent.active = false;
          this.oddsBookingHandicap.parent.active = false;
          this.oddsBookingHandicapHT.parent.active = false;
          this.oddsBookingOverUnder.parent.active = false;
          this.oddsBookingOverUnderHT.parent.active = false;
        };

        _proto.showEmptyInfo = function showEmptyInfo(isShow) {
          if (isShow) {
            this.emptyComp.ShowEmptyInfo();
          } else {
            this.emptyComp.HideEmptyInfo();
          }
        };

        _proto.showAllMarket = function showAllMarket() {
          var isHaveData = false;

          for (var i = 0; i < this.listAllMarket.length; i++) {
            if (this.listAllMarket[i].children.length > 0) {
              this.listAllMarket[i].parent.active = true;
              isHaveData = true;
            }
          }

          if (this.matchData.gamePart < 8) {
            for (var _i = 0; _i < this.listAllMarketHT.length; _i++) {
              if (this.listAllMarketHT[_i].children.length > 0) {
                this.listAllMarketHT[_i].parent.active = true;
                isHaveData = true;
              }
            }
          }

          this.showEmptyInfo(!isHaveData);
        };

        _proto.showMainMarket = function showMainMarket() {
          var isHaveData = false;

          for (var i = 0; i < this.listMarketMain.length; i++) {
            if (this.listMarketMain[i].children.length > 0) {
              this.listMarketMain[i].parent.active = true;
              isHaveData = true;
            }
          }

          if (this.matchData.gamePart < 8) {
            for (var _i2 = 0; _i2 < this.listMarketMainHT.length; _i2++) {
              if (this.listMarketMainHT[_i2].children.length > 0) {
                this.listMarketMainHT[_i2].parent.active = true;
                isHaveData = true;
              }
            }
          }

          this.showEmptyInfo(!isHaveData);
        };

        _proto.showPenaltyMarket = function showPenaltyMarket() {
          var isHaveData = false;

          for (var i = 0; i < this.listMarketPenalty.length; i++) {
            if (this.listMarketPenalty[i].children.length > 0) {
              this.listMarketPenalty[i].parent.active = true;
              isHaveData = true;
            }
          }

          if (this.matchData.gamePart < 8) {
            for (var _i3 = 0; _i3 < this.listMarketPenaltyHT.length; _i3++) {
              if (this.listMarketPenaltyHT[_i3].children.length > 0) {
                this.listMarketPenaltyHT[_i3].parent.active = true;
                isHaveData = true;
              }
            }
          }

          this.showEmptyInfo(!isHaveData);
        };

        _proto.showBookingMarket = function showBookingMarket() {
          var isHaveData = false;

          for (var i = 0; i < this.listMarketBooking.length; i++) {
            if (this.listMarketBooking[i].children.length > 0) {
              this.listMarketBooking[i].parent.active = true;
              isHaveData = true;
            }
          }

          if (this.matchData.gamePart < 8) {
            for (var _i4 = 0; _i4 < this.listMarketBookingHT.length; _i4++) {
              if (this.listMarketBookingHT[_i4].children.length > 0) {
                this.listMarketBookingHT[_i4].parent.active = true;
                isHaveData = true;
              }
            }
          }

          this.showEmptyInfo(!isHaveData);
        };

        _proto.showFullMarket = function showFullMarket() {
          var isHaveData = false;

          for (var i = 0; i < this.listMarketAllTime.length; i++) {
            if (this.listMarketAllTime[i].children.length > 0) {
              this.listMarketAllTime[i].parent.active = true;
              isHaveData = true;
            }
          }

          if (this.matchData.gamePart < 8) {
            for (var _i5 = 0; _i5 < this.listMarketAllTimeHT.length; _i5++) {
              if (this.listMarketAllTimeHT[_i5].children.length > 0) {
                this.listMarketAllTimeHT[_i5].parent.active = true;
                isHaveData = true;
              }
            }
          }

          this.showEmptyInfo(!isHaveData);
        };

        _proto.createItemMatch = function createItemMatch() {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabMatch);
          var mat = item.getComponent(SbMatch);
          mat.Reset();
          mat.init(this.sbFootballBettingController);
          return mat;
        };

        _proto.onDataLiveChange = function onDataLiveChange(data) {
          if (this.matchInfoDetaitl != null) {
            this.matchInfoDetaitl.SetData(data);

            if (data.gamePart == 16) {
              // the match is finished
              director.emit(SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager.getInstance().GetKeyValue("MatchFinished"));
              this.sbFootballBettingController.HideBettingDetails();
            }
          }
        };

        _proto.getItemMarketByID = function getItemMarketByID(type) {
          var item = null;

          if (type == SbMarketId.DoubleChanceFT || type == SbMarketId.DoubleChanceHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarketDoubleChance).getComponent(SbMarketDoubleChance);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.DoubleChanceFT) {
                this.oddsDoubleChanceParent.active = true;
                item.node.parent = this.oddsDoubleChanceParent;
              } else {
                this.oddsDoubleChanceHTParent.active = true;
                item.node.parent = this.oddsDoubleChanceHTParent;
              }
            }
          } else if (type == SbMarketId.OddOrEvenFT || type == SbMarketId.OddOrEvenHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeOddOrEven).getComponent(SbMarketOddOrEven);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.OddOrEvenFT) {
                this.oddsOddOrEvenParent.active = true;
                item.node.parent = this.oddsOddOrEvenParent;
              } else {
                this.oddsOddOrEvenHTParent.active = true;
                item.node.parent = this.oddsOddOrEvenHTParent;
              }
            }
          } else if (type == SbMarketId.CorrectScoreFT || type == SbMarketId.CorrectScoreHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeCorrectScore).getComponent(SbMarketCorrectScore);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.CorrectScoreFT) {
                this.oddsCorrectScore.active = true;
                item.node.parent = this.oddsCorrectScore;
              } else {
                this.oddsCorrectScoreHT.active = true;
                item.node.parent = this.oddsCorrectScoreHT;
              }
            }
          } else if (type == SbMarketId.TotalScoreFT || type == SbMarketId.TotalScoreHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeTotalScore).getComponent(SbMarketTotalScore);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.TotalScoreFT) {
                this.oddsTotalScore.active = true;
                item.node.parent = this.oddsTotalScore;
              } else {
                this.oddsTotalScoreHT.active = true;
                item.node.parent = this.oddsTotalScoreHT;
              }
            }
          } else if (type == SbMarketId.DrawNoBetFT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeDrawNoBet).getComponent(SbMarketDrawNoBet);

            if (item != null) {
              item.reset();
              this.oddsDrawNoBet.active = true; // this.titleOddsDrawNoBet.active = true;

              item.node.parent = this.oddsDrawNoBet;
            }
          } else if (type == SbMarketId.Corner1X2FT || type == SbMarketId.Corner1X2HT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeCorner1X2).getComponent(SbMarketCorner1X2);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.Corner1X2FT) {
                this.oddsCorner1X2.active = true;
                item.node.parent = this.oddsCorner1X2;
              } else {
                this.oddsCorner1X2HT.active = true;
                item.node.parent = this.oddsCorner1X2HT;
              }
            }
          } else if (type == SbMarketId.CornerHandicapFT || type == SbMarketId.CornerHandicapHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeCornerHandicap).getComponent(SbMarketCornerHandicap);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.CornerHandicapFT) {
                this.oddsCornerHandicap.active = true;
                item.node.parent = this.oddsCornerHandicap;
              } else {
                this.oddsCornerHandicapHT.active = true;
                item.node.parent = this.oddsCornerHandicapHT;
              }
            }
          } else if (type == SbMarketId.CornerOverUnderFT || type == SbMarketId.CornerOverUnderHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeCornerOverUnder).getComponent(SbMarketCornerOverUnder);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.CornerOverUnderFT) {
                this.oddsCornerOverUnder.active = true;
                item.node.parent = this.oddsCornerOverUnder;
              } else {
                this.oddsCornerOverUnderHT.active = true;
                item.node.parent = this.oddsCornerOverUnderHT;
              }
            }
          } else if (type == SbMarketId.Booking1X2FT || type == SbMarketId.Booking1X2HT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeBooking1X2).getComponent(SbMarketBooking1X2);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.Booking1X2FT) {
                this.oddsBooking1X2.active = true;
                item.node.parent = this.oddsBooking1X2;
              } else {
                this.oddsBooking1X2HT.active = true;
                item.node.parent = this.oddsBooking1X2HT;
              }
            }
          } else if (type == SbMarketId.BookingAsianHandicapFT || type == SbMarketId.BookingAsianHandicapHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeBookingHandicap).getComponent(SbMarketBookingHandicap);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.BookingAsianHandicapFT) {
                this.oddsBookingHandicap.active = true;
                item.node.parent = this.oddsBookingHandicap;
              } else {
                this.oddsBookingHandicapHT.active = true;
                item.node.parent = this.oddsBookingHandicapHT;
              }
            }
          } else if (type == SbMarketId.BookingOverUnderFT || type == SbMarketId.BookingOverUnderHT) {
            item = SbNodePoolManager.createItemFromPrefab(this.prefabMarkeBookingOverUnder).getComponent(SbMarketBookingOverUnder);

            if (item != null) {
              item.reset();

              if (type == SbMarketId.BookingOverUnderFT) {
                this.oddsBookingOverUnder.active = true;
                item.node.parent = this.oddsBookingOverUnder;
              } else {
                this.oddsBookingOverUnderHT.active = true;
                item.node.parent = this.oddsBookingOverUnderHT;
              }
            }
          }

          return item;
        } //#region Group MatchInfo
        ;

        _proto.onGroupMatchSubMenuClick = function onGroupMatchSubMenuClick(customData) {
          if (customData == 3) {
            this.onClickBetNow();
          }
        };

        _proto.onClickBetNow = function onClickBetNow() {
          SbSoundsManager.getInstance().playSfxClick();
          this.nodeAllMarketContainer.active = true;
          this.nodeGroupMatchInfo.SetActiveCommonGroup(false);
        };

        _proto.onClickMatchInfomation = function onClickMatchInfomation() {
          SbSoundsManager.getInstance().playSfxClick();
          this.nodeAllMarketContainer.active = false;
          this.nodeGroupMatchInfo.SetActiveCommonGroup(true); // Change Menu

          this.nodeGroupMatchInfo.SetMenuFirstTab();
        } //#endregion
        ;

        return SbFootballBettingDetails;
      }(Component), _class3.Instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "marketCorrectScoreExtra", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scrollViewBetDetails", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "compMatchInfoDetail", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeAllMarketContainer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeAllInfoDetailtContainer", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "menuTypeMarket", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listDropdownAllMarket", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarketDoubleChance", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeOddOrEven", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeCorrectScore", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeTotalScore", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeDrawNoBet", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeCornerHandicap", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeCornerOverUnder", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeCorner1X2", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeBookingHandicap", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeBookingOverUnder", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "prefabMarkeBooking1X2", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "prefabMatch", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "nodeGroupMatchInfo", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "btnShowLive", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "nodeVideoPLayerContainer", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "oddsMainParent", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "oddsMainParentHT", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "nodeLockMatch", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "oddsDoubleChanceParent", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "oddsDoubleChanceHTParent", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "oddsOddOrEvenParent", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "oddsOddOrEvenHTParent", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "oddsCorrectScore", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "oddsCorrectScoreHT", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "oddsTotalScore", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "oddsTotalScoreHT", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "oddsDrawNoBet", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "oddsCornerHandicap", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "oddsCornerHandicapHT", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "oddsCornerOverUnder", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "oddsCornerOverUnderHT", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "oddsCorner1X2", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "oddsCorner1X2HT", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "oddsBookingHandicap", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "oddsBookingHandicapHT", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "oddsBookingOverUnder", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "oddsBookingOverUnderHT", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "oddsBooking1X2", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "oddsBooking1X2HT", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "emptyComp", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbFootballEventDataManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbGameHTTPManager.ts', './SbUtils.ts', './SbConfigManager.ts', './SbSportManager.ts', './SbMarket.ts', './SbLocalizationManager.ts'], function (exports) {
  var _inheritsLoose, _extends, cclegacy, _decorator, log, Component, SbUserInfo, SbGameHTTPManager, SbUtils, SbConfigManager, SbTypeTimeMatch, SbMarket, SbLocalizationManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbMarket = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "4dc273VgepF1rN+cdma8hru", "SbFootballEventDataManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbFootballEventDataManager = exports('default', (_dec = ccclass('SbFootballEventDataManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbFootballEventDataManager, _Component);

        function SbFootballEventDataManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listLeaguaFull = [];
          _this.callbackRequestDataSuccess = null;
          _this.callbackRequestDataFail = null;
          _this.customDateRequestLast = "";
          _this.customDateRequest = "";
          _this.timeZoneDateRequest = "+7";
          _this.isVirtualSport = false;
          return _this;
        }

        SbFootballEventDataManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbFootballEventDataManager();
            this.Instance.timeZoneDateRequest = SbUtils.GetTimeZoneOffsetCurrent();
          }

          return this.Instance;
        };

        var _proto = SbFootballEventDataManager.prototype;

        _proto.getListLeagueLength = function getListLeagueLength() {
          return this.listLeaguaFull.length;
        };

        _proto.getListLeagueFull = function getListLeagueFull() {
          return this.listLeaguaFull;
        };

        _proto.getListLeague = function getListLeague(indexStart, indexEnd) {
          var list = this.listLeaguaFull.slice(indexStart, indexEnd);

          if (typeof list === "string") {
            list = [];

            try {
              console.warn("parse data from string");
              this.listLeaguaFull = JSON.parse(this.listLeaguaFull.toString());
              list = this.listLeaguaFull;
            } catch (error) {
              console.error("Can't read data :(");
            }
          }

          return list;
        };

        _proto.setCallbackSuccess = function setCallbackSuccess(cb) {
          this.callbackRequestDataSuccess = cb;
        };

        _proto.setCallbackFail = function setCallbackFail(cb) {
          this.callbackRequestDataFail = cb;
        };

        _proto.requestEventDataFake = function requestEventDataFake(data) {
          this.listLeaguaFull = data;
          if (this.callbackRequestDataSuccess != null) this.callbackRequestDataSuccess();
        };

        _proto.SetIsVirtualSport = function SetIsVirtualSport(value) {
          this.isVirtualSport = value;
        };

        _proto.IsVirtualSport = function IsVirtualSport() {
          return this.isVirtualSport;
        };

        _proto.requestEventData = function requestEventData(url, typeTimeMatch, dateRequest, onRequestSuccess, onRequestFail) {
          if (dateRequest === void 0) {
            dateRequest = null;
          }

          if (onRequestSuccess === void 0) {
            onRequestSuccess = null;
          }

          if (onRequestFail === void 0) {
            onRequestFail = null;
          }

          var day = 1,
              isLive = false,
              getPinLeague = false;
          var isNewURL = url.indexOf('v1') > -1;

          if (typeTimeMatch == SbTypeTimeMatch.Early) {
            day = isNewURL ? 7 : 2;
            isLive = false;
          } else if (typeTimeMatch == SbTypeTimeMatch.Today) {
            day = 1;
            isLive = false;
          } else if (typeTimeMatch == SbTypeTimeMatch.Live) {
            day = 1;
            isLive = true;
          }

          var userToken = "&token=" + SbUserInfo.getInstance().GetUserToken();
          var urlEvent = url + userToken;
          var fieldTimeZone = isNewURL ? 'tzOffset' : 'timezoneOffset';
          var fieldPinLeague = isNewURL ? 'includePinLeague' : 'getPinLeague';

          if (typeTimeMatch == SbTypeTimeMatch.CustomDate) {
            if (dateRequest == null) {
              dateRequest = this.customDateRequest;
            }

            this.customDateRequestLast = this.customDateRequest;
            this.customDateRequest = dateRequest;
            urlEvent = url + userToken + "&date=" + dateRequest + ("&" + fieldTimeZone + "=") + this.timeZoneDateRequest + "&isVirtual=" + this.isVirtualSport;
          } // else if (this.isVirtualSport) {
          //         urlEvent = url + userToken + "&days=" + day + "&isVirtual=" + this.isVirtualSport;
          // }
          else {
              urlEvent = url + userToken + "&days=" + day + "&isLive=" + isLive + "&isVirtual=" + this.isVirtualSport + ("&" + fieldTimeZone + "=") + SbUtils.GetTimeZoneOffsetCurrent();
            } // Pin League


          urlEvent += "&" + fieldPinLeague + "=" + getPinLeague;
          this.requestData(urlEvent, onRequestSuccess, onRequestFail);
        };

        _proto.requestEventDataWithLeagueId = function requestEventDataWithLeagueId(url, leagueId, onRequestSuccess, onRequestFail) {
          if (onRequestSuccess === void 0) {
            onRequestSuccess = null;
          }

          if (onRequestFail === void 0) {
            onRequestFail = null;
          }

          var userToken = SbUserInfo.getInstance().GetUserToken();
          var urlRequest = url.replace("{leagueId}", leagueId.toString()) + "?sportId=" + 1 + "&token=" + userToken;
          this.requestData(urlRequest, onRequestSuccess, onRequestFail);
        };

        _proto.requestEventDataWithEventId = function requestEventDataWithEventId(url, eventId, onRequestSuccess, onRequestFail) {
          if (onRequestSuccess === void 0) {
            onRequestSuccess = null;
          }

          if (onRequestFail === void 0) {
            onRequestFail = null;
          }

          var userToken = SbUserInfo.getInstance().GetUserToken();
          var urlRequest = url.replace("{eventId}", eventId.toString()) + "?sportId=" + 1 + "&token=" + userToken;
          this.requestData(urlRequest, onRequestSuccess, onRequestFail);
        };

        _proto.requestData = function requestData(urlRequest, onRequestSuccess, onRequestFail) {
          var _this2 = this;

          if (onRequestSuccess === void 0) {
            onRequestSuccess = null;
          }

          if (onRequestFail === void 0) {
            onRequestFail = null;
          }

          SbGameHTTPManager.getInstance().sendGetHttpRequest(urlRequest, function (obj) {
            _this2.listLeaguaFull = obj;
            _this2.listLeaguaFull = []; //filter data

            var _loop = function _loop() {
              //--normal match
              var item = _extends({}, obj[i]);

              _this2.listLeaguaFull.push(item);

              if (SbConfigManager.getInstance().IsShowExtraBet()) {
                //--corner match
                var itemCorner = _extends({}, obj[i]);

                var isFound = false;

                if (itemCorner && itemCorner.e && itemCorner.e.length > 0) {
                  itemCorner.e.forEach(function (element, index) {
                    if (!isFound) for (var j = 0; j < element.m.length; j++) {
                      if (SbMarket.IsMarketCorner(element.m[j].mi)) {
                        itemCorner.ln = itemCorner.ln + " - " + SbLocalizationManager.getInstance().GetKeyValue('corner_betting', false);

                        _this2.listLeaguaFull.push(itemCorner);

                        isFound = true;
                        break;
                      }
                    }
                  });
                } //--booking match


                var itemBooking = _extends({}, obj[i]);

                isFound = false;

                if (itemBooking && itemBooking.e && itemBooking.e.length > 0) {
                  itemBooking.e.forEach(function (element, index) {
                    if (!isFound) for (var j = 0; j < element.m.length; j++) {
                      if (SbMarket.IsMarketBooking(element.m[j].mi)) {
                        itemBooking.ln = itemBooking.ln + " - " + SbLocalizationManager.getInstance().GetKeyValue('booking_betting', false);

                        _this2.listLeaguaFull.push(itemBooking);

                        isFound = true;
                        break;
                      }
                    }
                  });
                }
              }
            };

            for (var i = 0; i < obj.length; i++) {
              _loop();
            }

            if (_this2.listLeaguaFull.length == 0) _this2.customDateRequest = _this2.customDateRequestLast;
            log("requestEventData: ok");
            if (_this2.callbackRequestDataSuccess != null && onRequestSuccess == null) _this2.callbackRequestDataSuccess();else if (onRequestSuccess != null) {
              onRequestSuccess();
            }
          }, function (errMess) {
            log("requestEventData: fail");
            _this2.customDateRequest = _this2.customDateRequestLast;
            if (_this2.callbackRequestDataFail != null && onRequestFail == null) _this2.callbackRequestDataFail(errMess);else if (onRequestFail != null) {
              onRequestFail();
            }
          }, true);
        } //on data update
        ;

        _proto.OnOddsInsert = function OnOddsInsert(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        _proto.OnOddsRemove = function OnOddsRemove(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        _proto.OnOddsChange = function OnOddsChange(data) {//find Odds
          // for (let i = 0; i < this.listLeaguaFull.length; i++) {
          // 	if (this.listLeaguaFull[i].si == SbSportID.Football &&
          // 		this.listLeaguaFull[i].leagueId == data.leagueId) {
          // 		let listMatches = this.listLeaguaFull[i].matches;
          // 		for (let j = 0; j < listMatches.length; j++) {
          // 			let match = listMatches[j];
          // 			if (match.eventId == data.eventId) {
          // 				let listMarkets = match.markets;
          // 				for (let k = 0; k < listMarkets.length; k++) {
          // 					let market = listMarkets[k];
          // 					if (market.marketId == data.marketId) {
          // 					}
          // 				}
          // 			}
          // 		}
          // 	}
          // }
        };

        _proto.OnMarketChange = function OnMarketChange(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        _proto.OnEventInsert = function OnEventInsert(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        _proto.OnEventRemove = function OnEventRemove(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        _proto.OnEventChange = function OnEventChange(data) {// cc.log("onOddsChange: " + JSON.stringify(data));
        };

        return SbFootballEventDataManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbFootballListLivestreamHighlight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SBWatchVideoAndInfoDetailt.ts', './SbDefine.ts', './SbTabLiveStream.ts', './SbTabHighlight.ts', './SbUIMenu.ts', './SbConfigManager.ts', './SBUIMenuButton.ts', './SbTabSchedule.ts', './SbTabMatchStandings.ts', './SbSkinListSprite.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, director, instantiate, UITransform, Component, SBWatchVideoAndInfoDetailt, SB_EVENT_SHOW_VIDEO_LIVESTREAM, SB_EVENT_SHOW_VIDEO_HIGHLIGHT, SbTabLiveStream, SbTabHighlight, SbUIMenu, SbConfigManager, SBUIMenuButton, SbTabSchedule, SbTabMatchStandings, SbSkinListSprite;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      instantiate = module.instantiate;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      SBWatchVideoAndInfoDetailt = module.SBWatchVideoAndInfoDetailt;
    }, function (module) {
      SB_EVENT_SHOW_VIDEO_LIVESTREAM = module.SB_EVENT_SHOW_VIDEO_LIVESTREAM;
      SB_EVENT_SHOW_VIDEO_HIGHLIGHT = module.SB_EVENT_SHOW_VIDEO_HIGHLIGHT;
    }, function (module) {
      SbTabLiveStream = module.SbTabLiveStream;
    }, function (module) {
      SbTabHighlight = module.SbTabHighlight;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SBUIMenuButton = module.SBUIMenuButton;
    }, function (module) {
      SbTabSchedule = module.SbTabSchedule;
    }, function (module) {
      SbTabMatchStandings = module.SbTabMatchStandings;
    }, function (module) {
      SbSkinListSprite = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;

      cclegacy._RF.push({}, "b5aa4hAN2BLFbNZ57gbf+AT", "SbFootballListLivestreamHighlight", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbFootballListLivestreamHighlight = exports('SbFootballListLivestreamHighlight', (_dec = ccclass('SbFootballListLivestreamHighlight'), _dec2 = property(Node), _dec3 = property(SbUIMenu), _dec4 = property(SbTabLiveStream), _dec5 = property(SbTabHighlight), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(SBWatchVideoAndInfoDetailt), _dec9 = property({
        group: 'TabSchedule',
        type: SbTabSchedule
      }), _dec10 = property({
        group: 'TabSchedule',
        type: SbUIMenu
      }), _dec11 = property({
        group: 'TabSchedule',
        type: Node
      }), _dec12 = property({
        group: 'TabSchedule',
        type: Node
      }), _dec13 = property({
        group: 'TabSchedule',
        type: Node
      }), _dec14 = property({
        group: 'TabStanding',
        type: SbTabMatchStandings
      }), _dec15 = property({
        group: 'TabStanding',
        type: SbUIMenu
      }), _dec16 = property({
        group: 'TabStanding',
        type: Node
      }), _dec17 = property({
        group: 'TabStanding',
        type: Node
      }), _dec18 = property({
        group: 'TabStanding',
        type: Node
      }), _dec19 = property(Node), _dec20 = property(SbSkinListSprite), _dec21 = property(SbSkinListSprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbFootballListLivestreamHighlight, _Component);

        function SbFootballListLivestreamHighlight() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeListALlEvent", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menu", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLivestreem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHighlight", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeShedule", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeStandings", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "watchVideoAndInfoDetailt", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabScheduleCtr", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menuSeasonsSchedule", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSeasonSchedulePanel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowScheduleExtend", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowSchedulePre", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabStandingCtr", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menuSeasonsStanding", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSeasonStandingPanel", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowStandingExtend", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowStandingPre", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemBtnSeasonTemp", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonSelectedSkin", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonUnselectedSkin", _descriptor20, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbFootballListLivestreamHighlight.prototype;

        _proto.onLoad = function onLoad() {
          this.initButtonSeasonSchedule(true);
          this.initButtonSeasonSchedule(false);
        };

        _proto.start = function start() {
          //init tab menu
          this.menu.SetIndexDefault(0);
          this.menu.SetButtonClickCallback(this.onClickChangeMenuItem.bind(this));
          director.off(SB_EVENT_SHOW_VIDEO_LIVESTREAM);
          director.on(SB_EVENT_SHOW_VIDEO_LIVESTREAM, this.onEventShowVideoLiveStream, this);
          director.off(SB_EVENT_SHOW_VIDEO_HIGHLIGHT);
          director.on(SB_EVENT_SHOW_VIDEO_HIGHLIGHT, this.onEventShowVideoHighlight, this);
          this.watchVideoAndInfoDetailt.SetCallbackHide(this.showAllEvent.bind(this));
        };

        _proto.SetActiveNode = function SetActiveNode(value) {
          this.node.active = value;
          this.watchVideoAndInfoDetailt.node.active = false;

          if (value) {
            this.onClickChangeMenuItem(this.menu.GetIndexCurrent());
            this.nodeListALlEvent.active = true;
          }
        };

        _proto.ShowDataLiveStream = function ShowDataLiveStream(data, dataShort) {
          this.nodeLivestreem.ShowData(data, dataShort);
        };

        _proto.onEnable = function onEnable() {
          this.watchVideoAndInfoDetailt.ResumVideo();
        };

        _proto.initButtonSeasonSchedule = function initButtonSeasonSchedule(isSchedule) {
          var menu = isSchedule ? this.menuSeasonsSchedule : this.menuSeasonsStanding;
          var panel = isSchedule ? this.btnSeasonSchedulePanel : this.btnSeasonStandingPanel;
          var tabCtr = isSchedule ? this.tabScheduleCtr : this.tabStandingCtr;
          var seasonCfg = SbConfigManager.getInstance().seasonsConfig;

          if (seasonCfg && seasonCfg.length > 0) {
            var listInits = [];
            var listSeasonData = [];

            for (var i = 0; i < seasonCfg.length; i++) {
              var data = seasonCfg[i];

              if (!data || !data.active) {
                continue;
              }

              var item = instantiate(this.itemBtnSeasonTemp);
              item.active = true;
              var ctr = item.getComponent(SBUIMenuButton);

              if (ctr) {
                if (ctr.lbButton) {
                  ctr.lbButton.string = data.leagueName;
                }

                item.parent = panel;
                ctr.SetData(data, this.listSelectedSprFrames[data.indexSkin], this.listUnselectedSprFrames[data.indexSkin]);
                ctr.DoSetSprFrameSelect(false);
                listInits.push(ctr);
                listSeasonData.push(data);
              }
            }

            menu.InitCustomButton(listInits);

            if (tabCtr) {
              tabCtr.PushSeasonCustom(listSeasonData);
            }
          }
        };

        _proto.onClickChangeMenuItem = function onClickChangeMenuItem(customData) {
          if (Number(customData) == 0) {
            if (this.nodeLivestreem != null) {
              this.deactiveAllButton();
              this.nodeLivestreem.node.active = true;
            }
          } else if (Number(customData) == 1) {
            if (this.nodeHighlight != null) {
              this.deactiveAllButton();
              this.nodeHighlight.node.active = true;
            }
          } else if (Number(customData) == 2) {
            if (this.nodeShedule != null) {
              this.deactiveAllButton();
              this.nodeShedule.active = true;
            }
          } else if (Number(customData) == 3) {
            if (this.nodeStandings != null) {
              this.deactiveAllButton();
              this.nodeStandings.active = true;
            }
          }
        };

        _proto.hideAllEvent = function hideAllEvent() {
          this.nodeListALlEvent.active = false;
        };

        _proto.showAllEvent = function showAllEvent() {
          this.nodeListALlEvent.active = true;
        };

        _proto.onEventShowVideoHighlight = function onEventShowVideoHighlight(data) {
          this.hideAllEvent();
          this.watchVideoAndInfoDetailt.node.active = true;
          this.watchVideoAndInfoDetailt.InitData(data, false);
        };

        _proto.onEventShowVideoLiveStream = function onEventShowVideoLiveStream(data) {
          this.hideAllEvent();
          this.watchVideoAndInfoDetailt.node.active = true;
          this.watchVideoAndInfoDetailt.InitData(data);
        };

        _proto.onButtonShowTabLiveStreamClick = function onButtonShowTabLiveStreamClick() {
          if (this.nodeLivestreem != null) {
            this.nodeLivestreem.node.active = true;
            this.nodeHighlight.node.active = false;
          }
        };

        _proto.onButtonShowTabHighlightClick = function onButtonShowTabHighlightClick() {
          if (this.nodeHighlight != null) {
            this.nodeLivestreem.node.active = false;
            this.nodeHighlight.node.active = true;
          }
        };

        _proto.deactiveAllButton = function deactiveAllButton() {
          this.nodeLivestreem.node.active = false;
          this.nodeHighlight.node.active = false;
          if (this.nodeShedule != null) this.nodeShedule.active = false;
          if (this.nodeStandings != null) this.nodeStandings.active = false;
        };

        _proto.seasonTabScrollEvent = function seasonTabScrollEvent(scrollView, eventType, customData) {
          var arrow = customData === '0' ? this.arrowScheduleExtend : this.arrowStandingExtend;
          var arrowPre = customData === '0' ? this.arrowSchedulePre : this.arrowStandingPre;
          var lastItem = scrollView.content.children[scrollView.content.children.length - 1];

          if (arrow && lastItem) {
            var offSetX = scrollView.getMaxScrollOffset().x - lastItem.getComponent(UITransform).width / 2;

            if (Math.abs(scrollView.getScrollOffset().x) < offSetX) {
              arrow.active = true;
            } else {
              arrow.active = false;
            }

            arrowPre.active = !arrow.active;
          }
        };

        _createClass(SbFootballListLivestreamHighlight, [{
          key: "listSelectedSprFrames",
          get: function get() {
            var result = [];

            if (this.seasonSelectedSkin) {
              result = this.seasonSelectedSkin.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "listUnselectedSprFrames",
          get: function get() {
            var result = [];

            if (this.seasonUnselectedSkin) {
              result = this.seasonUnselectedSkin.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbFootballListLivestreamHighlight;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeListALlEvent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeLivestreem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeHighlight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeShedule", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeStandings", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "watchVideoAndInfoDetailt", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tabScheduleCtr", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "menuSeasonsSchedule", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnSeasonSchedulePanel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "arrowScheduleExtend", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "arrowSchedulePre", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "tabStandingCtr", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "menuSeasonsStanding", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "btnSeasonStandingPanel", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "arrowStandingExtend", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "arrowStandingPre", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "itemBtnSeasonTemp", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "seasonSelectedSkin", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "seasonUnselectedSkin", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbG1Scene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopup1Button.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, game, Game, macro, director, log, sys, instantiate, Button, EventHandler, Component, error, SbPopup1Button;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      game = module.game;
      Game = module.Game;
      macro = module.macro;
      director = module.director;
      log = module.log;
      sys = module.sys;
      instantiate = module.instantiate;
      Button = module.Button;
      EventHandler = module.EventHandler;
      Component = module.Component;
      error = module.error;
    }, function (module) {
      SbPopup1Button = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "564abSsIIBIDI7rsSzPnxmZ", "SbG1Scene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_SOUND = "enableSound";
      var KEY_MUSIC = "enableBackgroundMusic";
      var SbG1Scene = exports('default', (_dec = ccclass('SbG1Scene'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbG1Scene, _Component);

        function SbG1Scene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "keyUserToken", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "keySbToken", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "loginSceneName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popup1ButtonPrefab", _descriptor4, _assertThisInitialized(_this));

          _this.remoteConfigURL = "https://raw.githubusercontent.com/jamesgreenmango/configs/master/sb_789.json";
          _this.getTokenURL = "https://sport.xeui.ui?command=get-token";
          _this.accessToken = "";
          _this.timeOnHideKey = "time_on_hide";
          _this.gameWasHidden = false;
          _this.isShowingPopup = false;
          return _this;
        }

        var _proto = SbG1Scene.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.node.parent = null;
          game.addPersistRootNode(this.node);
          game.on(Game.EVENT_HIDE, this.onHideGame, this);
          game.on(Game.EVENT_SHOW, this.onShowGame, this);
          this.schedule(function () {
            _this2.getSbToken();
          }, 300, macro.REPEAT_FOREVER, 300);
        };

        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var user_bg_music, user_fx_sound, enableSound, enableBackgroundMusic, user_token, config, res, sbToken;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  user_bg_music = sys.localStorage.getItem("user_bg_music");
                  user_fx_sound = sys.localStorage.getItem("user_fx_sound");
                  enableSound = user_fx_sound == "1" ? "true" : "false";
                  enableBackgroundMusic = user_bg_music == "1" ? "true" : "false";
                  sys.localStorage.setItem(KEY_SOUND, enableSound);
                  sys.localStorage.setItem(KEY_MUSIC, enableBackgroundMusic);
                  user_token = sys.localStorage.getItem(this.keyUserToken);

                  if (!(user_token == null && user_token == undefined)) {
                    _context.next = 11;
                    break;
                  }

                  sys.localStorage.setItem(this.keySbToken, null);
                  _context.next = 33;
                  break;

                case 11:
                  this.accessToken = user_token;
                  _context.prev = 12;
                  _context.next = 15;
                  return this.getConfig();

                case 15:
                  config = _context.sent; // @ts-ignore

                  this.getTokenURL = config.GET_TOKEN_URL;
                  _context.next = 22;
                  break;

                case 19:
                  _context.prev = 19;
                  _context.t0 = _context["catch"](12);
                  error(_context.t0);

                case 22:
                  _context.prev = 22;
                  _context.next = 25;
                  return this.getSbToken();

                case 25:
                  res = _context.sent; // @ts-ignore

                  sbToken = res.data.token;
                  sys.localStorage.setItem(this.keySbToken, sbToken);
                  _context.next = 33;
                  break;

                case 30:
                  _context.prev = 30;
                  _context.t1 = _context["catch"](22);
                  error(_context.t1);

                case 33:
                  this.goToLoginScene();

                case 34:
                case "end":
                  return _context.stop();
              }
            }, _callee, this, [[12, 19], [22, 30]]);
          }));

          function start() {
            return _start.apply(this, arguments);
          }

          return start;
        }();

        _proto.goToLoginScene = function goToLoginScene() {
          director.preloadScene(this.loginSceneName, function () {
            director.loadScene(this.loginSceneName);
            setTimeout(function () {
              // @ts-ignore
              if (typeof onFirstSceneLaunched === 'function') {
                // @ts-ignore
                onFirstSceneLaunched();
              }
            }, 1000);
          }.bind(this));
        };

        _proto.getConfig = function getConfig() {
          var _this3 = this;

          return new Promise(function (res, rej) {
            var xhr = new XMLHttpRequest();
            xhr.timeout = 10000;

            xhr.onreadystatechange = function () {
              if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status < 400) {
                  var response = xhr.responseText;
                  var obj = JSON.parse(response);
                  res(obj);
                } else {
                  rej("");
                }
              }
            };

            xhr.onerror = function () {
              rej("error");
            };

            xhr.ontimeout = function () {
              rej("timeout");
            };

            xhr.open("GET", _this3.remoteConfigURL, true);
            xhr.send();
          });
        };

        _proto.getSbToken = function getSbToken() {
          var _this4 = this;

          log("getSbToken");
          return new Promise(function (res, rej) {
            var xhr = new XMLHttpRequest();
            xhr.timeout = 10000;

            xhr.onreadystatechange = function () {
              if (xhr.readyState == 4) {
                if (xhr.status >= 200 && xhr.status < 400) {
                  var response = xhr.responseText;
                  var obj = JSON.parse(response);
                  res(obj);
                } else {
                  rej("");
                }
              }
            };

            xhr.onerror = function () {
              rej("error");
            };

            xhr.ontimeout = function () {
              rej("timeout");
            };

            xhr.open("GET", _this4.getTokenURL, true);
            xhr.setRequestHeader("Authorization", _this4.accessToken);
            xhr.send();
          });
        };

        _proto.onHideGame = function onHideGame() {
          var timeOnHide = new Date().getTime();
          log("onHideGame, time = " + timeOnHide.toString());
          sys.localStorage.setItem(this.timeOnHideKey, timeOnHide.toString());
          this.gameWasHidden = true;
        };

        _proto.onShowGame = function onShowGame() {
          if (!this.gameWasHidden) {
            return;
          }

          this.gameWasHidden = false;
          var timeNow = new Date().getTime();
          var timeOnHide = sys.localStorage.getItem(this.timeOnHideKey);
          var deltaTime = (timeNow - Number(timeOnHide)) / 1000;
          log("onShowGame, time = " + timeNow.toString() + ", deltaTime = " + deltaTime.toString());

          if (deltaTime > 1200) {
            if (!this.isShowingPopup) {
              this.isShowingPopup = true;
              var popup = instantiate(this.popup1ButtonPrefab);
              var btnOK = popup.getChildByName('Board').getChildByName('ButtonOK').getComponent(Button);
              var clickEventHandler = new EventHandler();
              clickEventHandler.target = this.node;
              clickEventHandler.component = "SbG1Scene";
              clickEventHandler.handler = "callCloseCreatorGame";
              btnOK.clickEvents.push(clickEventHandler);
              var comp = popup.getComponent(SbPopup1Button);
              comp.lbContent.string = "Mất kết nối tới máy chủ!";
              comp.lbTitle.string = "Thông Báo";
              comp.show();
              director.getScene().addChild(popup);
            }
          }
        };

        _proto.callCloseCreatorGame = function callCloseCreatorGame() {
          // @ts-ignore
          if (typeof closeCreatorGame === 'function') {
            // @ts-ignore
            closeCreatorGame();
          }
        };

        return SbG1Scene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "keyUserToken", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "user_token";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "keySbToken", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "user_token_sb";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loginSceneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "SbLogin";
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popup1ButtonPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbGameHTTPManager.ts", ['cc', './SbUserInfo.ts', './SbLocalizationManager.ts', './SbConfigManager.ts', './SbBridge.ts', './SbStringUtil.ts'], function (exports) {
  var cclegacy, sys, log, error, SbUserInfo, SbLocalizationManager, SbConfigManager, SbSkinID, SbBridge, SbStringUtil;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
      error = module.error;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbBridge = module.SbBridge;
    }, function (module) {
      SbStringUtil = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "034b7hiJBBGkJZIz5pvzdiA", "SbGameHTTPManager", undefined);

      var KEY_TOKEN_ACCESS_API = "key_taapi";
      var KEY_TIME_REQUEST_TOKEN_ACCESS_API = "KEY_TIME_REQUEST_TOKEN_ACCESS_API";
      var NEED_USE_ACCESS_TOKEN = false;
      var SbGameHTTPManager = exports('default', /*#__PURE__*/function () {
        function SbGameHTTPManager() {
          this.apiAccessToken = "";
          this.apiAccessTokenType = "Bearer";
          this.accessTokenExpires_in = 0;
          this.callbackAvailable = null;
          this.callbackError = null;
          this.timeOutRequestNewAccessToken = null;
          this.sbCommonPrefabsManager = null;
        }

        SbGameHTTPManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbGameHTTPManager();
          }

          return this.Instance;
        };

        var _proto = SbGameHTTPManager.prototype;

        _proto.init = function init(cbAvailable, cbError, sbCommonPrefabsManager) {
          if (SbGameHTTPManager.Instance !== null) {
            SbGameHTTPManager.Instance.sbCommonPrefabsManager = sbCommonPrefabsManager;
            SbGameHTTPManager.Instance.callbackAvailable = cbAvailable;
            SbGameHTTPManager.Instance.callbackError = cbError;
            {
              if (this.callbackAvailable != null) this.callbackAvailable();
            }
          }
        };

        _proto.loadOldToken = function loadOldToken() {
          var tk = sys.localStorage.getItem(KEY_TOKEN_ACCESS_API);

          if (tk == null || tk == undefined || this.checkTokenExprite()) {
            this.requestNewAccessToken(true);
          } else {
            this.apiAccessToken = tk;
            if (this.callbackAvailable != null) this.callbackAvailable();
          }
        };

        _proto.requestNewAccessToken = function requestNewAccessToken(iscallbackAvailable) {
          return;
        };

        _proto.checkTokenExprite = function checkTokenExprite() {
          {
            return false;
          }
        };

        _proto.getApiAccessToken = function getApiAccessToken(url, auth, onSuccesCallBack, onErrorCallBack) {
          // //check need request new access token
          if (this.checkTokenExprite() == false) {
            onSuccesCallBack(null);
            return;
          }

          var data = "grant_type=client_credentials";
          var xhr = new XMLHttpRequest();
          if (sys.isBrowser) xhr.withCredentials = true;

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 400) {
                var response = xhr.responseText;

                try {
                  var obj = JSON.parse(response);
                  this.apiAccessToken = obj.access_token;
                  sys.localStorage.setItem(KEY_TOKEN_ACCESS_API, this.apiAccessToken); // // this.apiAccessTokenType = obj.access_token;

                  this.accessTokenExpires_in = obj.expires_in;
                  this.setTimeoutRefeshAccessToken(this.accessTokenExpires_in);
                  var now = new Date().getTime();
                  sys.localStorage.setItem(KEY_TIME_REQUEST_TOKEN_ACCESS_API, now.toString());
                } catch (e) {
                  onErrorCallBack(obj);
                }

                onSuccesCallBack(obj);
              } else {
                onErrorCallBack(obj);
              }
            }
          }.bind(this);

          xhr.onerror = function () {
            onErrorCallBack("Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.ontimeout = function () {
            onErrorCallBack("Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.open("POST", url);
          xhr.setRequestHeader("Authorization", "Basic " + auth);
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          xhr.send(data);
        };

        _proto.setTimeoutRefeshAccessToken = function setTimeoutRefeshAccessToken(timeOut) {
          log("setTimeoutRefeshAccessToken " + timeOut);

          if (this.timeOutRequestNewAccessToken != null) {
            clearTimeout(this.timeOutRequestNewAccessToken);
          }

          this.timeOutRequestNewAccessToken = setTimeout(function () {
            this.requestNewAccessToken();
          }.bind(this), timeOut);
        };

        _proto.showPopupMaintainGame = function showPopupMaintainGame(message) {
          if (message === void 0) {
            message = "";
          }

          var mess = message;
          if (mess.length == 0) mess = SbLocalizationManager.getInstance().GetKeyValue("GAME_MAINTAIN", true);
          if (mess.length == 0) mess = "Hệ thống đang được nâng cấp\nQuý khách vui lòng quay lại sau!";
          this.sbCommonPrefabsManager.ShowPopup1Button("Thông Báo", mess, this.backToGame.bind(this));
          SbConfigManager.getInstance().SetStatusMaintainGame(true);
        };

        _proto.backToGame = function backToGame() {
          this.sbCommonPrefabsManager.ShowLoadingFullScreen();

          if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
            // @ts-ignore
            if (typeof closeCreatorGame === 'function') {
              // @ts-ignore
              closeCreatorGame();
            }
          } else {
            // director.preloadScene(SbConfigManager.getInstance().sceneHomeName, function () {
            //         director.loadScene(SbConfigManager.getInstance().sceneHomeName);
            // }.bind(this));
            SbBridge.BackToGame();
          }
        };

        _proto.IsAvailable = function IsAvailable() {
          if (this.checkTokenExprite() == false) {
            return true;
          }

          return false;
        };

        _proto.Clean = function Clean() {
          if (SbGameHTTPManager.Instance != null) {
            if (this.timeOutRequestNewAccessToken != null) {
              clearTimeout(this.timeOutRequestNewAccessToken);
            }

            SbGameHTTPManager.Instance = null;
          }
        };

        _proto.sendGetHttpRequest = function sendGetHttpRequest(url, onSuccesCallBack, onErrorCallBack, needToken, requestHeader) {
          if (needToken === void 0) {
            needToken = false;
          }

          if (requestHeader === void 0) {
            requestHeader = [];
          }

          if (this.checkTokenExprite()) {
            this.requestNewAccessToken();
          }

          var xhr = new XMLHttpRequest();
          var timeRequest = new Date().getTime();

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 400) {
                var response = xhr.responseText;

                if (response.length <= 0 || response == null) {
                  onErrorCallBack(response);
                  return;
                }

                var obj = null;

                try {
                  obj = JSON.parse(response);
                } catch (e) {
                  error("Lỗi nè: " + JSON.stringify(e));
                  onErrorCallBack(response);
                }

                if (obj != null && obj != undefined) onSuccesCallBack(obj, {
                  "timeRequest": timeRequest
                });else onErrorCallBack(response);
              } else if (xhr.status == 500) {
                onErrorCallBack("Đã có lỗi xảy ra\nxin vui lòng quay lại sau");
              } else if (xhr.status >= 418) {
                //server maintain
                this.showPopupMaintainGame();
              } else if (xhr.status >= 404) {
                onErrorCallBack("Hệ thống đang bảo trì\nxin vui lòng quay lại sau");
              } else {
                onSuccesCallBack({}, {
                  "timeRequest": timeRequest
                });
              }
            }
          }.bind(this);

          xhr.onerror = function () {
            var errtext = "Không thể kết nối đến máy chủ, xin hãy thử lại.";
            var errCode = -1;

            if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
              var obj = null;

              try {
                obj = JSON.parse(xhr.responseText);
                errCode = xhr.status;
              } catch (e) {}

              if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.msg)) {
                errtext = obj.msg;
              }
            }

            onErrorCallBack(errtext);
          };

          xhr.ontimeout = function () {
            onErrorCallBack("Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.open("GET", url, true);

          if (requestHeader.length > 0) {
            try {
              for (var i = 0; i < requestHeader.length; i++) {
                xhr.setRequestHeader(requestHeader[i][0], requestHeader[i][1]);
              }
            } catch (error) {}
          }

          if (needToken && NEED_USE_ACCESS_TOKEN) {
            xhr.setRequestHeader("Authorization", this.apiAccessTokenType + " " + this.apiAccessToken);
          } else if (needToken) {
            xhr.setRequestHeader("token", SbUserInfo.getInstance().GetUserToken());
          }

          xhr.send();
        };

        _proto.sendGetHttpRequestNoParseResponseToJson = function sendGetHttpRequestNoParseResponseToJson(url, onSuccesCallBack, onErrorCallBack, checkTokenExprite) {
          if (checkTokenExprite === void 0) {
            checkTokenExprite = true;
          }

          if (checkTokenExprite === true && this.checkTokenExprite()) {
            this.requestNewAccessToken();
          }

          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 400) {
                var response = xhr.responseText;
                onSuccesCallBack(response);
              } else {
                onErrorCallBack("Không thể kết nối đến máy chủ, xin hãy thử lại.");
              }
            }
          };

          xhr.onerror = function () {
            var errtext = "Không thể kết nối đến máy chủ, xin hãy thử lại.";

            if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
              var obj = null;

              try {
                obj = JSON.parse(xhr.responseText);
              } catch (e) {}

              if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.msg)) {
                errtext = obj.msg;
              }
            }

            onErrorCallBack(errtext);
          };

          xhr.ontimeout = function () {
            onErrorCallBack("Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.open("GET", url, true);
          xhr.send();
        };

        _proto.sendPostHttpRequest = function sendPostHttpRequest(url, body, onSuccesCallBack, onErrorCallBack, needToken) {
          if (needToken === void 0) {
            needToken = false;
          }

          if (this.checkTokenExprite()) {
            this.requestNewAccessToken();
          }

          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 400) {
                // // cc.log(xhr.responseText);
                var response = xhr.responseText;

                if (response.localeCompare("null") == 0) {
                  onErrorCallBack(obj, "Đã có lỗi xảy ra vui lòng thử lại sau!");
                  return;
                }

                var obj = JSON.parse(response);
                onSuccesCallBack(obj);
              } else if (xhr.status >= 418) {
                //server maintain
                this.showPopupMaintainGame();
              } else {
                var errText = "Đã có lỗi xảy ra vui lòng thử lại sau!"; // // cc.log(xhr.responseText );

                if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
                  // //     cc.log(xhr.responseText)
                  var obj = null;

                  try {
                    obj = JSON.parse(xhr.responseText);
                  } catch (e) {}

                  if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.message)) {
                    errText = obj.message;
                  }
                }

                onErrorCallBack(obj, errText);
              }
            }
          }.bind(this);

          xhr.onerror = function () {
            var errtext = "Không thể kết nối đến máy chủ, xin hãy thử lại.";
            log(JSON.stringify(xhr.responseText));

            if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
              log(xhr.responseText);
              var obj = null;

              try {
                obj = JSON.parse(xhr.responseText);
              } catch (e) {}

              if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.msg)) {
                errtext = obj.msg;
              }
            }

            onErrorCallBack(-1, errtext);
          };

          xhr.ontimeout = function () {
            onErrorCallBack(-1, "Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.open("POST", url, true);

          if (needToken) {
            xhr.setRequestHeader("token", SbUserInfo.getInstance().GetUserToken());
            xhr.setRequestHeader("Content-Type", "application/json");
          }

          xhr.send(body);
        } //========================== DELETE ==============================//
        ;

        _proto.sendDeleteHttpRequest = function sendDeleteHttpRequest(url, body, onSuccesCallBack, onErrorCallBack, needToken) {
          if (needToken === void 0) {
            needToken = false;
          }

          if (this.checkTokenExprite()) {
            this.requestNewAccessToken();
          }

          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
              if (xhr.status >= 200 && xhr.status < 400) {
                // // cc.log(xhr.responseText);
                var response = xhr.responseText;
                var obj = JSON.parse(response);
                onSuccesCallBack(obj);
              } else if (xhr.status >= 418) {
                //server maintain
                this.showPopupMaintainGame();
              } else {
                var errText = "Không thể kết nối đến máy chủ, xin hãy thử lại."; // // cc.log(xhr.responseText );

                if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
                  // //     cc.log(xhr.responseText)
                  var obj = null;

                  try {
                    obj = JSON.parse(xhr.responseText);
                  } catch (e) {}

                  if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.message)) {
                    errText = obj.message;
                  }
                }

                onErrorCallBack(obj, errText);
              }
            }
          }.bind(this);

          xhr.onerror = function () {
            var errtext = "Không thể kết nối đến máy chủ, xin hãy thử lại.";
            log(JSON.stringify(xhr.responseText));

            if (!SbStringUtil.isNullOrEmpty(xhr.responseText)) {
              log(xhr.responseText);
              var obj = null;

              try {
                obj = JSON.parse(xhr.responseText);
              } catch (e) {}

              if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.msg)) {
                errtext = obj.msg;
              }
            }

            onErrorCallBack(-1, errtext);
          };

          xhr.ontimeout = function () {
            onErrorCallBack(-1, "Không thể kết nối đến máy chủ, xin hãy thử lại.");
          };

          xhr.open("DELETE", url, true);

          if (needToken) {
            xhr.setRequestHeader("token", SbUserInfo.getInstance().GetUserToken());
            xhr.setRequestHeader("Content-Type", "application/json");
          }

          xhr.send(body);
        };

        return SbGameHTTPManager;
      }());
      SbGameHTTPManager.Instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbGamePortraitComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, game, director, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0b403YwVZ5BPIrYJg3eOIKb", "SbGamePortraitComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbGamePortraitComp = exports('SbGamePortraitComp', (_dec = ccclass('SbGamePortraitComp'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbGamePortraitComp, _Component);

        function SbGamePortraitComp() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SbGamePortraitComp.prototype;

        _proto.onLoad = function onLoad() {
          SbGamePortraitComp.instance = this;
          game.addPersistRootNode(this.node);
          this.DoChangePortrait();
        };

        _proto.DoChangePortrait = function DoChangePortrait() {
          if (!this.isSkinNeedOrientation()) {
            return;
          }

          director.emit(SbGamePortraitComp.CHANGE_PORTRAIT_EVENT);
        };

        _proto.OnBackingGame = function OnBackingGame() {
          if (!this.isSkinNeedOrientation()) {
            return;
          }

          this.resetAll();
          game.removePersistRootNode(this.node);
          this.node.destroy();
        };

        _proto.isSkinNeedOrientation = function isSkinNeedOrientation() {
          switch (SbConfigManager.getInstance().GetSkinCurrent()) {
            case SbSkinID.Skin1:
            case SbSkinID.Skin3:
              {
                return true;
              }
          }

          return false;
        };

        _proto.resetAll = function resetAll() {};

        _createClass(SbGamePortraitComp, null, [{
          key: "Instance",
          get: function get() {
            return SbGamePortraitComp.instance;
          }
        }]);

        return SbGamePortraitComp;
      }(Component), _class2.CHANGE_LANDSCAPE_EVENT = "ChangeLandscape", _class2.CHANGE_PORTRAIT_EVENT = "ChangePortrait", _class2.instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbGameUtil.ts", ['cc'], function (exports) {
  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      exports({
        ChangeFeildNameShortOfEvent: ChangeFeildNameShortOfEvent,
        ChangeFeildNameShortOfLeague: ChangeFeildNameShortOfLeague
      });

      var _class, _dec, _class3;

      cclegacy._RF.push({}, "5cc42Myi25LbZ33Ya0f3YxC", "SbGameUtil", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MapString = exports('MapString', ccclass(_class = /*#__PURE__*/function () {
        function MapString() {
          this.map = {};
        }

        var _proto = MapString.prototype;

        _proto.getLength = function getLength() {
          return Object.keys(this.map).length;
        };

        _proto.set = function set(key, value) {
          // log("MapString set key: " + key + " | value: ", value);
          this.map[key] = value;
        };

        _proto.get = function get(key) {
          return this.map[key];
        } //func(key, value)
        ;

        _proto.forEach = function forEach(func) {
          var listKeys = Object.keys(this.map);

          for (var i = 0; i < listKeys.length; i++) {
            func(listKeys[i], this.map[listKeys[i]]);
          }
        };

        _proto.getListKeys = function getListKeys() {
          return Object.keys(this.map);
        };

        _proto.isContainKey = function isContainKey(key) {
          return this.map[key] != undefined;
        };

        _proto.removeKey = function removeKey(key) {
          delete this.map[key];
        };

        _proto.clear = function clear() {
          var listKeys = Object.keys(this.map);

          for (var i = 0; i < listKeys.length; i++) {
            this.removeKey(listKeys[i]);
          }
        };

        return MapString;
      }()) || _class);
      var ScrollView_EventType = exports('ScrollView_EventType', /*#__PURE__*/function (ScrollView_EventType) {
        ScrollView_EventType[ScrollView_EventType["SCROLL_TO_TOP"] = 0] = "SCROLL_TO_TOP";
        ScrollView_EventType[ScrollView_EventType["SCROLL_TO_BOTTOM"] = 1] = "SCROLL_TO_BOTTOM";
        ScrollView_EventType[ScrollView_EventType["SCROLL_TO_LEFT"] = 2] = "SCROLL_TO_LEFT";
        ScrollView_EventType[ScrollView_EventType["SCROLL_TO_RIGHT"] = 3] = "SCROLL_TO_RIGHT";
        ScrollView_EventType[ScrollView_EventType["SCROLLING"] = 4] = "SCROLLING";
        ScrollView_EventType[ScrollView_EventType["BOUNCE_TOP"] = 5] = "BOUNCE_TOP";
        ScrollView_EventType[ScrollView_EventType["BOUNCE_BOTTOM"] = 6] = "BOUNCE_BOTTOM";
        ScrollView_EventType[ScrollView_EventType["BOUNCE_LEFT"] = 7] = "BOUNCE_LEFT";
        ScrollView_EventType[ScrollView_EventType["BOUNCE_RIGHT"] = 8] = "BOUNCE_RIGHT";
        ScrollView_EventType[ScrollView_EventType["SCROLL_ENDED"] = 9] = "SCROLL_ENDED";
        ScrollView_EventType[ScrollView_EventType["TOUCH_UP"] = 10] = "TOUCH_UP";
        ScrollView_EventType[ScrollView_EventType["AUTOSCROLL_ENDED_WITH_THRESHOLD"] = 11] = "AUTOSCROLL_ENDED_WITH_THRESHOLD";
        ScrollView_EventType[ScrollView_EventType["SCROLL_BEGAN"] = 12] = "SCROLL_BEGAN";
        return ScrollView_EventType;
      }({}));

      function ChangeFeildNameShortOfLeague(data) {
        var dataInput = data;
        var dataTemp = JSON.stringify(dataInput);
        dataTemp = dataTemp.replace(/sportId/g, "si");
        dataTemp = dataTemp.replace(/sportName/g, "sn");
        dataTemp = dataTemp.replace(/regionId/g, "ri");
        dataTemp = dataTemp.replace(/regionName/g, "rn");
        dataTemp = dataTemp.replace(/leagueId/g, "li");
        dataTemp = dataTemp.replace(/leagueName/g, "ln");
        dataTemp = dataTemp.replace(/leagueOrder/g, "lo");
        dataTemp = dataTemp.replace(/leaguePriorityOrder/g, "lpo");
        dataTemp = dataTemp.replace(/listMatch/g, "e");
        dataTemp = dataTemp.replace(/isParlay/g, "ip");
        dataTemp = dataTemp.replace(/eventIdStatistic/g, "esi");
        return JSON.parse(dataTemp);
      }

      function ChangeFeildNameShortOfEvent(data) {
        var dataInput = data;
        var dataTemp = JSON.stringify(dataInput);
        dataTemp = dataTemp.replace(/eventId/g, "ei");
        dataTemp = dataTemp.replace(/homeId/g, "hi");
        dataTemp = dataTemp.replace(/homeName/g, "hn");
        dataTemp = dataTemp.replace(/awayId/g, "ai");
        dataTemp = dataTemp.replace(/awayName/g, "an");
        dataTemp = dataTemp.replace(/totalMarketsCount/g, "mc");
        dataTemp = dataTemp.replace(/isLive"/g, "l\"");
        dataTemp = dataTemp.replace(/isGoingLive/g, "gl");
        dataTemp = dataTemp.replace(/isLivestream/g, "ls");
        dataTemp = dataTemp.replace(/isSuspended/g, "s");
        dataTemp = dataTemp.replace(/status/g, "status");
        dataTemp = dataTemp.replace(/startDate/g, "et");
        dataTemp = dataTemp.replace(/markets/g, "m");
        dataTemp = dataTemp.replace(/cornersAway/g, "ac");
        dataTemp = dataTemp.replace(/cornersHome/g, "hc");
        dataTemp = dataTemp.replace(/homeScoreOT/g, "hso");
        dataTemp = dataTemp.replace(/awayScoreOT/g, "aso");
        dataTemp = dataTemp.replace(/awayScore/g, "as");
        dataTemp = dataTemp.replace(/gamePart/g, "gp");
        dataTemp = dataTemp.replace(/gameTime/g, "gt");
        dataTemp = dataTemp.replace(/homeScore/g, "hs");
        dataTemp = dataTemp.replace(/redCardsHome/g, "rch");
        dataTemp = dataTemp.replace(/redCardsAway/g, "rca");
        dataTemp = dataTemp.replace(/yellowCardsHome/g, "ych");
        dataTemp = dataTemp.replace(/yellowCardsAway/g, "yca");
        dataTemp = dataTemp.replace(/stoppageTime/g, "stm");
        dataTemp = dataTemp.replace(/promotionType/g, "prt");
        dataTemp = dataTemp.replace(/isParlay/g, "ip");
        dataTemp = dataTemp.replace(/eventIdStatistic/g, "esi");
        return JSON.parse(dataTemp);
      }

      var SbOddsType = exports('SbOddsType', /*#__PURE__*/function (SbOddsType) {
        SbOddsType[SbOddsType["None"] = 0] = "None";
        SbOddsType[SbOddsType["Home"] = 1] = "Home";
        SbOddsType[SbOddsType["Away"] = 2] = "Away";
        SbOddsType[SbOddsType["Draw"] = 3] = "Draw";
        return SbOddsType;
      }({}));
      var SbOddsStyle = exports('SbOddsStyle', /*#__PURE__*/function (SbOddsStyle) {
        SbOddsStyle[SbOddsStyle["Malay"] = 0] = "Malay";
        SbOddsStyle[SbOddsStyle["Indo"] = 1] = "Indo";
        SbOddsStyle[SbOddsStyle["Decimal"] = 2] = "Decimal";
        SbOddsStyle[SbOddsStyle["HK"] = 3] = "HK";
        SbOddsStyle[SbOddsStyle["US"] = 4] = "US";
        return SbOddsStyle;
      }({}));
      var ODDS_VALUE_DEFAULT = exports('ODDS_VALUE_DEFAULT', -100);
      var SbOddsData = exports('SbOddsData', (_dec = ccclass('SbOdds'), _dec(_class3 = function SbOddsData() {
        this.points = "0";
        this.isMainLine = false;
        this.selectionHomeId = "";
        this.selectionAwayId = "";
        this.selectionDrawId = "";
        this.offerId = "";
        this.oddsHome = [ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT]; //thứ tự index = [malay, indo, decimal, hk]

        this.oddsAway = [ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT];
        this.oddsDraw = [ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT, ODDS_VALUE_DEFAULT];
      }) || _class3));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbHeaderUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, SbSoundsManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a0eaajXEtBLAr4cUswnBwjR", "SbHeaderUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbHeaderUI = exports('default', (_dec = ccclass('SbHeaderUI'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbHeaderUI, _Component);

        function SbHeaderUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.menuLeft = null;
          _this.sbCommonPrefabsManager = null;
          return _this;
        }

        var _proto = SbHeaderUI.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager;
          this.menuLeft = this.sbCommonPrefabsManager.GetMenuLeft();
        };

        _proto.start = function start() {// this.menuLeft = this.sbCommonPrefabsManager.GetMenuLeft();
        };

        _proto.onClickShowMenu = function onClickShowMenu() {
          SbSoundsManager.getInstance().playSfxClick();
          if (this.menuLeft != null) this.menuLeft.ShowMenu();
        };

        _proto.onClickShowSport = function onClickShowSport() {
          SbSoundsManager.getInstance().playSfxClick();
          if (this.menuLeft != null) this.menuLeft.ShowSport();
        };

        return SbHeaderUI;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SBHideNodeOutOfView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbNodeColorHelper.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Label, Color, UITransform, view, Rect, Vec2, Component, SbNodeColorHelper;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Color = module.Color;
      UITransform = module.UITransform;
      view = module.view;
      Rect = module.Rect;
      Vec2 = module.Vec2;
      Component = module.Component;
    }, function (module) {
      SbNodeColorHelper = module.SbNodeColorHelper;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7c205ryfWZP3pQV8WgfgZ5p", "SBHideNodeOutOfView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SBHideNodeOutOfView = exports('SBHideNodeOutOfView', (_dec = ccclass('SBHideNodeOutOfView'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SBHideNodeOutOfView, _Component);

        function SBHideNodeOutOfView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listNode = [];
          _this.isHidden = false;
          _this.lisstSprite = [];
          _this.lisstLabel = [];
          return _this;
        }

        var _proto = SBHideNodeOutOfView.prototype;

        _proto.start = function start() {
          this.listNode = this.node.children;
          this.lisstSprite = this.node.getComponentsInChildren(Sprite);
          this.lisstLabel = this.node.getComponentsInChildren(Label);
        };

        _proto.IsUIDisplay = function IsUIDisplay() {
          return !this.isHidden;
        };

        _proto.update = function update(dt) {
          if (this.isOutOfView(this.node)) {
            if (this.isHidden == false) {
              this.isHidden = true;
              this.setAllUIHiden(false);
            }
          } else {
            if (this.isHidden) {
              this.isHidden = false;
              this.setAllUIHiden(true);
            }
          }
        };

        _proto.setAllUIHiden = function setAllUIHiden(value) {
          var opacity = 255;
          if (value) opacity = 0;

          for (var i = 0; i < this.lisstSprite.length; i++) {
            if (this.lisstSprite[i]) {
              // Skip sprite use this
              if (this.lisstSprite[i].getComponent(SbNodeColorHelper)) {
                continue;
              }

              var target = this.lisstSprite[i];
              var r = target.color.r - 1 < 0 ? 0 : target.color.r - 1;
              var g = target.color.g - 1 < 0 ? 0 : target.color.g - 1;
              var b = target.color.b - 1 < 0 ? 0 : target.color.b - 1;
              target.color = new Color(r, g, b, opacity);
              target.color = new Color(r <= 0 ? 0 : r + 1, g <= 0 ? 0 : g + 1, b <= 0 ? 0 : b + 1, opacity);
            }
          }

          for (var _i = 0; _i < this.lisstLabel.length; _i++) {
            if (this.lisstLabel[_i] != null) {
              this.lisstLabel[_i].color = new Color(this.lisstLabel[_i].color.r, this.lisstLabel[_i].color.g, this.lisstLabel[_i].color.b, opacity);
            }
          }
        };

        _proto.isOutOfView = function isOutOfView(nodeTarget) {
          var positionWordOrigin = nodeTarget.worldPosition;
          var targetTranform = nodeTarget.getComponent(UITransform);
          var targetSize = targetTranform.getBoundingBox();
          var designResolutionSize = view.getDesignResolutionSize();
          var visibleSize = view.getVisibleSize();
          var deltaSizeX = (visibleSize.x - designResolutionSize.x) / 2;
          var deltaSizeY = (visibleSize.y - designResolutionSize.y) / 2;
          var rect = new Rect(0, 0, visibleSize.width, visibleSize.height); // let winSize = new Size(visibleSize.x + sizeX*, visibleSize.y)

          var posXL = positionWordOrigin.x - targetSize.width * targetTranform.anchorX; //pos x left

          var posXR = positionWordOrigin.x + targetSize.width * targetTranform.anchorX;
          var posYU = positionWordOrigin.y + targetSize.height * targetTranform.anchorY;
          var posYD = positionWordOrigin.y - targetSize.height * targetTranform.anchorY;
          if (rect.contains(new Vec2(posXL, posYU)) == false && rect.contains(new Vec2(posXR, posYU)) == false && rect.contains(new Vec2(posXL, posYD)) == false && rect.contains(new Vec2(posXR, posYD)) == false) return false;
          return true;
        };

        return SBHideNodeOutOfView;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemBetHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts', './SbStringUtil.ts', './SbMarket.ts', './SbSkinListSprite.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Sprite, Component, SbUtils, SbStringUtil, SbMarket, SbMarketId, SbSkinListSprite, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbMarket = module.default;
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "1750dk7VwtOZpgTczBaZJUy", "SbItemBetHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemBetHistory = exports('default', (_dec = ccclass('SbItemBetHistory'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Label), _dec14 = property(Node), _dec15 = property(Sprite), _dec16 = property(SbSkinListSprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemBetHistory, _Component);

        function SbItemBetHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMatchName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMatchTime", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbPoint", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOdds", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbStake", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOdds2", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRefund", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRefNo", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTime", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSumary", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeSum", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteSumary", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resultSkinSprite", _descriptor15, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemBetHistory.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {};

        _proto.InitData = function InitData(data) {
          // "0": "7304",
          // "1": "2021-04-24T09:15:13Z",
          // "2": 1,
          // "3": "Championship",
          // "4": "Bournemouth vs Brentford",
          // "5": "X2",
          // "6": "DC FT",
          // "7": "0.0",
          // "8": "1.61",
          // "9": 100000,
          // "10": 161000,
          // "11": "Won",
          // "12": "Settled",
          // "13": 161000,
          // "14": "1:1",
          // "15": 12,
          // "16": "0:0"

          /*
           @SerializedName("0")
          private String purchaseId;
          @SerializedName("1")
          private String placementDate;
          @SerializedName("2")
          private Integer sportId;
          @SerializedName("3")
          private String leagueName;
          @SerializedName("4")
          private String eventName;
          @SerializedName("5")
          private String oddsName;
          @SerializedName("6")
          private String marketName;
          @SerializedName("7")
          private String cls;
          @SerializedName("8")
          private String displayOdds;
          @SerializedName("9")
          private Integer totalStake;
          @SerializedName("10")
          private Integer winning;
          @SerializedName("11")
          private String settlementStatus;
          @SerializedName("12")
          private String status;
          @SerializedName("13")
          private Integer actualPayout;
          @SerializedName("14")
          private String gameScore;
          @SerializedName("15")
          private Integer marketId;
          @SerializedName("16")
          private String betScore;
           */
          if (data == undefined || data == null) return;
          this.lbLeagueName.string = data["3"]; //this.lbLeagueName.string = SbSportManager.ConvertSportIdToName(data["2"]) + " / " + data["3"];

          this.lbMatchName.string = data["4"];
          this.lbScore.string = "[" + data["16"] + "] " + SbMarket.ConvertMaketIdToNameVietnamese(data["15"]);
          this.lbStake.string = SbStringUtil.formatMoneyNumberWithComma(data["9"]);
          var typeOdds = "";

          if (data.hasOwnProperty("25")) {
            typeOdds = this.convertOddsType(data["25"]);
          }

          this.lbOdds2.string = data["8"] + " " + typeOdds;
          if (data["13"] != 0) this.lbRefund.string = SbStringUtil.formatMoneyNumberWithComma(data["13"]);else this.lbRefund.string = "0";
          this.lbRefNo.string = data["0"];
          this.lbTime.string = SbUtils.ConvertTimeStringToTodayFormatFull(data["1"]);

          if (data.hasOwnProperty("18")) {
            this.lbMatchTime.string = SbUtils.ConvertTimeStringToTodayFormat(data["18"]) + " " + SbUtils.ConvertTimeStringToDDMMYYYY(data["18"], true);
          }

          this.lbRefNo.string = data["0"];
          this.setStatus(data["11"]);

          if (data.hasOwnProperty("14") && this.spriteSumary.node.active) {
            this.nodeSum.active = true;
            this.lbSumary.string = data["14"];
          } else this.nodeSum.active = false;

          this.lbPoint.string = "";
          var points = data["7"] + " | ";
          var OddsName = data["5"];

          if (data["15"] == SbMarketId.AsianHandicapFT || data["15"] == SbMarketId.AsianHandicapHT || data["15"] == SbMarketId.CornerHandicapFT || data["15"] == SbMarketId.CornerHandicapHT || data["15"] == SbMarketId.BookingAsianHandicapFT || data["15"] == SbMarketId.BookingAsianHandicapHT || data["15"] == SbMarketId.OverUnderFT || data["15"] == SbMarketId.OverUnderHT || data["15"] == SbMarketId.CornerOverUnderFT || data["15"] == SbMarketId.CornerOverUnderHT || data["15"] == SbMarketId.BookingOverUnderFT || data["15"] == SbMarketId.BookingOverUnderHT || data["15"] == SbMarketId.AsianHandicapExtraFT || data["15"] == SbMarketId.AsianHandicapExtraHT || data["15"] == SbMarketId.OverUnderExtraFT || data["15"] == SbMarketId.OverUnderExtraHT) {
            this.lbOdds.string = this.ConvertOddsName(OddsName);
            this.lbPoint.string = points + "  ";
          } else if (data["15"] == SbMarketId.CorrectScoreFT || data["15"] == SbMarketId.CorrectScoreHT) {
            if (String(data["7"]).localeCompare("9:9") == 0) this.lbOdds.string = "AOS";else this.lbOdds.string = data["7"];
          } else {
            if (OddsName.localeCompare("Draw") == 0) this.lbOdds.string = "Hòa";else if (OddsName.localeCompare("Home") == 0) this.lbOdds.string = "Đội nhà thắng";else if (OddsName.localeCompare("Away") == 0) this.lbOdds.string = "Đội khách thắng";else if (OddsName.localeCompare("Over") == 0) {
              this.lbOdds.string = "Tài";
              this.lbPoint.string = points + "  ";
            } else if (OddsName.localeCompare("Under") == 0) {
              this.lbOdds.string = "Xỉu";
              this.lbPoint.string = points + "  ";
            } else if (OddsName.localeCompare("Odd") == 0) this.lbOdds.string = "Lẻ";else if (OddsName.localeCompare("Even") == 0) this.lbOdds.string = "Chẵn";else if (OddsName.localeCompare("1X") == 0) this.lbOdds.string = "Đội nhà hoặc hòa";else if (OddsName.localeCompare("X2") == 0) this.lbOdds.string = "Đội khách hoặc hòa";else if (OddsName.localeCompare("12") == 0) this.lbOdds.string = "Đội nhà hoặc đội khách";else if (OddsName.localeCompare("9:9") == 0) this.lbOdds.string = "AOS";else this.lbOdds.string = OddsName;
          }
        };

        _proto.ConvertOddsName = function ConvertOddsName(OddsName) {
          if (OddsName.localeCompare("Over") == 0) return "Tài";else if (OddsName.localeCompare("Under") == 0) return "Xỉu";else return OddsName;
        };

        _proto.convertOddsType = function convertOddsType(OddsType) {
          if (OddsType.localeCompare("ma") == 0) return "[MY]";else if (OddsType.localeCompare("de") == 0) return "[DE]";else if (OddsType.localeCompare("in") == 0) return "[IN]";else if (OddsType.localeCompare("hk") == 0) return "[HK]";else return OddsType;
        };

        _proto.setStatus = function setStatus(str) {
          if (str == undefined || str == null) return;
          this.spriteSumary.node.active = true;

          if (str.localeCompare("Half Lost") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[4];
          } else if (str.localeCompare("Half Won") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[3];
          } else if (str.localeCompare("Won") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[0];
          } else if (str.localeCompare("Lost") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[1];
          } else if (str.localeCompare("Draw") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[2];
          } else if (str.localeCompare("Void") == 0) {
            this.spriteSumary.spriteFrame = this.listSpriteResult[5];
          } else {
            this.spriteSumary.node.active = false;
          }
        };

        _createClass(SbItemBetHistory, [{
          key: "listSpriteResult",
          get: function get() {
            var result = [];

            if (this.resultSkinSprite) {
              result = this.resultSkinSprite.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbItemBetHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbMatchName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbMatchTime", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbPoint", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbOdds", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbStake", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbOdds2", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbRefund", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbRefNo", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbTime", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lbSumary", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "nodeSum", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "spriteSumary", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "resultSkinSprite", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemBetSlip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbStringUtil.ts', './SbMarket.ts', './SbSoundsManager.ts', './SbDefine.ts', './SbCommonPrefabsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Button, director, Component, SbStringUtil, SbMarket, SbMarketId, SbSoundsManager, SB_EVENT_CHAT_DO_SHARE, SbCommonPrefabsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbMarket = module.default;
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SB_EVENT_CHAT_DO_SHARE = module.SB_EVENT_CHAT_DO_SHARE;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "1290c1eXFRCs6p272FXaxJy", "SbItemBetSlip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemBetSlip = exports('default', (_dec = ccclass('SbItemBetSlip'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Button), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemBetSlip, _Component);

        function SbItemBetSlip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbOddsStyle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMatchName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTeamSelected", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOdds", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbPoinnt", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbStake", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRefNo", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnShare", _descriptor10, _assertThisInitialized(_this));

          _this.data = null;
          _this.isBlockClick = false;
          return _this;
        }

        var _proto = SbItemBetSlip.prototype;

        _proto.InitData = function InitData(data) {
          // data = {
          //     "homeName": "Torino",
          //     "awayName": "Napoli",
          //     "id": "7914",
          //     "stake": 100000,
          //     "status": "Active",
          //     "displayOdds": "0.56",
          //     "score": "[0-0]",
          //     "cls": "1.5",
          //     "oddsName": "Under",
          //     "ticketId": "7914",
          //     "marketName": "OU HT",
          //     "sportId": 1,
          //     "marketId": 4,
          //     "selectionId": "67440040001005a"
          // }
          if (data == undefined || data == null) {
            return;
          }

          this.data = data;
          this.lbLeagueName.string[2].charAt(2);
          this.lbOddsStyle.string = SbMarket.ConvertMaketIdToNameVietnamese(data.marketId); //SbSportManager.ConvertSportIdToName(data.sportId) + " / " + 

          this.lbLeagueName.string = "?";
          this.lbTeamSelected.string = this.getTeamSelected(data);
          this.lbMatchName.string = data.homeName + " - " + data.awayName;
          this.lbOdds.string = data.displayOdds;
          this.lbScore.string = data.score;
          if (String(data.cls).localeCompare("9:9") == 0) this.lbPoinnt.string = "AOS";else this.lbPoinnt.string = data.cls;
          this.lbStake.string = SbStringUtil.formatMoneyNumberWithComma(data.stake);
          this.lbRefNo.string = data.ticketId;
          this.checkActiveButtonShare();
        };

        _proto.checkActiveButtonShare = function checkActiveButtonShare() {
          if (this.btnShare) {
            var active = this.data.status == 'Active';
            this.btnShare.node.active = active;
            this.btnShare.interactable = active;
          }
        };

        _proto.onClickBtnShare = function onClickBtnShare() {
          var _this2 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (this.isBlockClick) {
            SbCommonPrefabsManager.getInstance().ShowMessage('Bạn thao tác quá nhanh');
            return;
          }

          director.emit(SB_EVENT_CHAT_DO_SHARE, this.data);
          this.isBlockClick = true;
          this.scheduleOnce(function () {
            _this2.isBlockClick = false;
          }, 2);
        };

        _proto.getTeamSelected = function getTeamSelected(data) {
          var listHome = ["Over", "Home", "1X", "Odd"];
          var listAway = ["Under", "Away", "X2", "Even"];
          var listDraw = ["Draw", "12"];

          if (data.marketId == SbMarketId.AsianHandicapFT || data.marketId == SbMarketId.AsianHandicapHT || data.marketId == SbMarketId.CornerHandicapFT || data.marketId == SbMarketId.CornerHandicapHT || data.marketId == SbMarketId.BookingAsianHandicapFT || data.marketId == SbMarketId.BookingAsianHandicapHT || data.marketId == SbMarketId.AsianHandicapExtraFT || data.marketId == SbMarketId.AsianHandicapExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return data.homeName;
            if (listAway.indexOf(data.oddsName) >= 0) return data.awayName;
          }

          if (data.marketId == SbMarketId.Market1X2FT || data.marketId == SbMarketId.Market1X2HT || data.marketId == SbMarketId.Market1X2ExtraFT || data.marketId == SbMarketId.Market1X2ExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà thắng";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách thắng";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Hòa";
          } else if (data.marketId == SbMarketId.OverUnderFT || data.marketId == SbMarketId.OverUnderHT || data.marketId == SbMarketId.CornerOverUnderFT || data.marketId == SbMarketId.CornerOverUnderHT || data.marketId == SbMarketId.BookingOverUnderFT || data.marketId == SbMarketId.BookingOverUnderHT || data.marketId == SbMarketId.OverUnderExtraFT || data.marketId == SbMarketId.OverUnderExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Tài";
            if (listAway.indexOf(data.oddsName) >= 0) return "Xỉu";
          } else if (data.marketId == SbMarketId.DoubleChanceFT || data.marketId == SbMarketId.DoubleChanceHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà hoặc hòa";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách hoặc hòa";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Đội Nhà hoặc đội Khách";
          } else if (data.marketId == SbMarketId.OddOrEvenFT || data.marketId == SbMarketId.OddOrEvenHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Lẻ";
            if (listAway.indexOf(data.oddsName) >= 0) return "Chẵn";
          } else if (data.marketId == SbMarketId.TotalScoreFT || data.marketId == SbMarketId.TotalScoreHT) {
            return "undefine"; // hiện tại chưa có kèo
          } else if (data.marketId == SbMarketId.Corner1X2FT || data.marketId == SbMarketId.Corner1X2HT || data.marketId == SbMarketId.Booking1X2FT || data.marketId == SbMarketId.Booking1X2HT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Hòa";
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách";
          } else if (data.marketId == SbMarketId.CorrectScoreFT || data.marketId == SbMarketId.CorrectScoreHT) {
            if (String(data.cls).localeCompare("9:9") == 0) return "AOS";else return data.cls;
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            return data.oddsName;
          } else return data.oddsName;
        };

        return SbItemBetSlip;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbOddsStyle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbMatchName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbTeamSelected", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbOdds", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbPoinnt", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbStake", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbRefNo", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnShare", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemChatTicket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbGameUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, sys, Node, Component, SbMarketId, SbOddsType;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      sys = module.sys;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "7172blKHnNFm7VBt7TqUjqI", "SbItemChatTicket", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemChatTicket = exports('SbItemChatTicket', (_dec = ccclass('SbItemChatTicket'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemChatTicket, _Component);

        function SbItemChatTicket() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbTeamSelected", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOdds", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbPoint", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMatchName", _descriptor5, _assertThisInitialized(_this));

          _this.Data = null;
          _this.chatController = null;
          return _this;
        }

        var _proto = SbItemChatTicket.prototype;

        _proto.onLoad = function onLoad() {// this.addTouchListener();
        };

        _proto.onDestroy = function onDestroy() {// this.removeTouchListener();
        };

        _proto.addTouchListener = function addTouchListener() {
          if (sys.isMobile) {
            this.node.on(Node.EventType.TOUCH_START, this.onShowFullInfo, this);
            this.node.on(Node.EventType.TOUCH_CANCEL, this.onHideFullInfo, this);
            this.node.on(Node.EventType.TOUCH_END, this.onHideFullInfo, this);
          } else {
            this.node.on(Node.EventType.MOUSE_ENTER, this.onShowFullInfo, this);
            this.node.on(Node.EventType.MOUSE_LEAVE, this.onHideFullInfo, this);
          }
        };

        _proto.removeTouchListener = function removeTouchListener() {
          if (sys.isMobile) {
            this.node.off(Node.EventType.TOUCH_START, this.onShowFullInfo, this);
            this.node.off(Node.EventType.TOUCH_CANCEL, this.onHideFullInfo, this);
            this.node.off(Node.EventType.TOUCH_END, this.onHideFullInfo, this);
          } else {
            this.node.off(Node.EventType.MOUSE_ENTER, this.onShowFullInfo, this);
            this.node.off(Node.EventType.MOUSE_LEAVE, this.onHideFullInfo, this);
          }
        };

        _proto.InitTicketData = function InitTicketData(data, chatController) {
          // data = {
          //     "homeName": "Torino",
          //     "awayName": "Napoli",
          //     "id": "7914",
          //     "stake": 100000,
          //     "status": "Active",
          //     "displayOdds": "0.56",
          //     "score": "[0-0]",
          //     "cls": "1.5",
          //     "oddsName": "Under",
          //     "ticketId": "7914",
          //     "marketName": "OU HT",
          //     "sportId": 1,
          //     "marketId": 4,
          //     "selectionId": "67440040001005a"
          // }
          this.Data = data;
          this.chatController = chatController;

          if (!data) {
            return;
          }

          this.lbScore.node.active = true;
          this.lbPoint.node.active = true;

          if (data.sumOdds != undefined) {
            var listOdds = data.sumOdds.split("@");

            if (listOdds.length > 1) {
              this.lbOdds.string = listOdds[listOdds.length - 1] || '--';
            }

            if (data.marketId == SbMarketId.CorrectScoreFT || data.marketId == SbMarketId.CorrectScoreHT) {
              data.cls = data.teamSelected;
              this.lbScore.node.active = false;
              this.lbPoint.node.active = false;
            } else {
              var listScores = listOdds[0] ? listOdds[0].split("[") : [];

              if (listScores.length > 0) {
                // Sometime don't have score
                var dataScores = listScores[1] ? "[" + listScores[1] : '[0:0]';
                this.lbScore.string = dataScores;
                var point = listScores[0];
                data.cls = point;
                this.setPointValue(point);
              }
            }

            if (data.marketId != undefined) {
              this.lbTeamSelected.string = this.getTeamSelectedFromSuccessData(data) || '--';
            } else {
              this.lbTeamSelected.string = data.teamSelected;
            }
          } else {
            this.lbTeamSelected.string = this.getTeamSelected(data) || '--';
            this.lbOdds.string = data.displayOdds || '--';
            this.lbScore.string = data.score || '[0:0]';
            this.setPointValue(data.cls);
          }

          if (this.lbMatchName) {
            this.lbMatchName.string = data.homeName + " - " + data.awayName;
          }
        };

        _proto.setPointValue = function setPointValue(point) {
          if (String(point).localeCompare("9:9") == 0) {
            this.lbPoint.string = "AOS";
          } else {
            this.lbPoint.string = point && point != '0' ? point : '0.0';
          }
        };

        _proto.getTeamSelected = function getTeamSelected(data) {
          var listHome = ["Over", "Home", "1X", "Odd"];
          var listAway = ["Under", "Away", "X2", "Even"];
          var listDraw = ["Draw", "12"];

          if (data.marketId == SbMarketId.AsianHandicapFT || data.marketId == SbMarketId.AsianHandicapHT || data.marketId == SbMarketId.CornerHandicapFT || data.marketId == SbMarketId.CornerHandicapHT || data.marketId == SbMarketId.BookingAsianHandicapFT || data.marketId == SbMarketId.BookingAsianHandicapHT || data.marketId == SbMarketId.AsianHandicapExtraFT || data.marketId == SbMarketId.AsianHandicapExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return data.homeName;
            if (listAway.indexOf(data.oddsName) >= 0) return data.awayName;
          }

          if (data.marketId == SbMarketId.Market1X2FT || data.marketId == SbMarketId.Market1X2HT || data.marketId == SbMarketId.Market1X2ExtraFT || data.marketId == SbMarketId.Market1X2ExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà thắng";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách thắng";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Hòa";
          } else if (data.marketId == SbMarketId.OverUnderFT || data.marketId == SbMarketId.OverUnderHT || data.marketId == SbMarketId.CornerOverUnderFT || data.marketId == SbMarketId.CornerOverUnderHT || data.marketId == SbMarketId.BookingOverUnderFT || data.marketId == SbMarketId.BookingOverUnderHT || data.marketId == SbMarketId.OverUnderExtraFT || data.marketId == SbMarketId.OverUnderExtraHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Tài";
            if (listAway.indexOf(data.oddsName) >= 0) return "Xỉu";
          } else if (data.marketId == SbMarketId.DoubleChanceFT || data.marketId == SbMarketId.DoubleChanceHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà hoặc hòa";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách hoặc hòa";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Đội Nhà hoặc đội Khách";
          } else if (data.marketId == SbMarketId.OddOrEvenFT || data.marketId == SbMarketId.OddOrEvenHT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Lẻ";
            if (listAway.indexOf(data.oddsName) >= 0) return "Chẵn";
          } else if (data.marketId == SbMarketId.TotalScoreFT || data.marketId == SbMarketId.TotalScoreHT) {
            return "undefine"; // hiện tại chưa có kèo
          } else if (data.marketId == SbMarketId.Corner1X2FT || data.marketId == SbMarketId.Corner1X2HT || data.marketId == SbMarketId.Booking1X2FT || data.marketId == SbMarketId.Booking1X2HT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách";
            if (listDraw.indexOf(data.oddsName) >= 0) return "Hòa";
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            if (listHome.indexOf(data.oddsName) >= 0) return "Đội Nhà";
            if (listAway.indexOf(data.oddsName) >= 0) return "Đội Khách";
          } else if (data.marketId == SbMarketId.CorrectScoreFT || data.marketId == SbMarketId.CorrectScoreHT) {
            if (String(data.cls).localeCompare("9:9") == 0) return "AOS";else return data.cls;
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            return data.oddsName;
          } else return data.oddsName;
        };

        _proto.getTeamSelectedFromSuccessData = function getTeamSelectedFromSuccessData(data) {
          var oddsType = data.oddsType;

          if (data.marketId == SbMarketId.AsianHandicapFT || data.marketId == SbMarketId.AsianHandicapHT || data.marketId == SbMarketId.AsianHandicapExtraFT || data.marketId == SbMarketId.AsianHandicapExtraHT) {
            if (oddsType == SbOddsType.Home) return data.homeName;else if (oddsType == SbOddsType.Away) return data.awayName;
          } else if (data.marketId == SbMarketId.OverUnderFT || data.marketId == SbMarketId.OverUnderHT || data.marketId == SbMarketId.OverUnderExtraFT || data.marketId == SbMarketId.OverUnderExtraHT) {
            if (oddsType == SbOddsType.Home) return "Tài";else if (oddsType == SbOddsType.Away) return "Xỉu";
          }

          if (data.marketId == SbMarketId.Market1X2FT || data.marketId == SbMarketId.Market1X2HT || data.marketId == SbMarketId.Market1X2ExtraFT || data.marketId == SbMarketId.Market1X2ExtraHT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà thắng";else if (oddsType == SbOddsType.Away) return "Đội Khách thắng";else if (oddsType == SbOddsType.Draw) return "Hòa";
          } else if (data.marketId == SbMarketId.DoubleChanceFT || data.marketId == SbMarketId.DoubleChanceHT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà hoặc hòa";else if (oddsType == SbOddsType.Away) return "Đội Khách hoặc hòa";else if (oddsType == SbOddsType.Draw) return "Đội Nhà hoặc đội Khách";
          } else if (data.marketId == SbMarketId.OddOrEvenFT || data.marketId == SbMarketId.OddOrEvenHT) {
            if (oddsType == SbOddsType.Home) return "Lẻ";else if (oddsType == SbOddsType.Away) return "Chẵn";
          } else if (data.marketId == SbMarketId.CorrectScoreFT || data.marketId == SbMarketId.CorrectScoreHT) {
            if (data.cls.localeCompare("9:9") == 0) return "AOS";else return data.cls;
          } else if (data.marketId == SbMarketId.TotalScoreFT || data.marketId == SbMarketId.TotalScoreHT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà";else if (oddsType == SbOddsType.Away) return "Đội Khách";
          } else if (data.marketId == SbMarketId.Corner1X2FT || data.marketId == SbMarketId.Corner1X2HT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà";else if (oddsType == SbOddsType.Away) return "Đội Khách";else if (oddsType == SbOddsType.Draw) return "Hòa";
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà";else if (oddsType == SbOddsType.Away) return "Đội Khách";
          } else if (data.marketId == SbMarketId.CornerOverUnderFT || data.marketId == SbMarketId.CornerOverUnderHT) {
            if (oddsType == SbOddsType.Home) return "Tài";else if (oddsType == SbOddsType.Away) return "Xỉu";
          } else if (data.marketId == SbMarketId.CornerHandicapFT || data.marketId == SbMarketId.CornerHandicapHT) {
            if (oddsType == SbOddsType.Home) return data.homeName;else if (oddsType == SbOddsType.Away) return data.awayName;
          } else if (data.marketId == SbMarketId.DrawNoBetFT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà";else if (oddsType == SbOddsType.Away) return "Đội Khách";
          } else if (data.marketId == SbMarketId.Booking1X2FT || data.marketId == SbMarketId.Booking1X2HT) {
            if (oddsType == SbOddsType.Home) return "Đội Nhà";else if (oddsType == SbOddsType.Away) return "Đội Khách";else if (oddsType == SbOddsType.Draw) return "Hòa";
          } else if (data.marketId == SbMarketId.BookingOverUnderFT || data.marketId == SbMarketId.BookingOverUnderHT) {
            if (oddsType == SbOddsType.Home) return "Tài";else if (oddsType == SbOddsType.Away) return "Xỉu";
          } else if (data.marketId == SbMarketId.BookingAsianHandicapFT || data.marketId == SbMarketId.BookingAsianHandicapHT) {
            if (oddsType == SbOddsType.Home) return data.homeName;else if (oddsType == SbOddsType.Away) return data.awayName;
          } else return data.teamSelected;
        };

        _proto.onShowFullInfo = function onShowFullInfo() {
          if (this.chatController) {
            this.chatController.ShowFullInfo(this);
          }
        };

        _proto.onHideFullInfo = function onHideFullInfo() {
          if (this.chatController) {
            this.chatController.HideFullInfo();
          }
        };

        return SbItemChatTicket;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbTeamSelected", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbOdds", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbPoint", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbMatchName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemHighlight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts', './SbSoundsManager.ts', './SbDefine.ts', './SbConfigManager.ts', './SBHideNodeOutOfView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, director, Component, SbUtils, SbSoundsManager, SB_EVENT_SHOW_VIDEO_HIGHLIGHT, SbConfigManager, SBHideNodeOutOfView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SB_EVENT_SHOW_VIDEO_HIGHLIGHT = module.SB_EVENT_SHOW_VIDEO_HIGHLIGHT;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SBHideNodeOutOfView = module.SBHideNodeOutOfView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "41b71ASX+JK/aUCnJWeOkXV", "SbItemHighlight", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemHighlight = exports('SbItemHighlight', (_dec = ccclass('SbItemHighlight'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemHighlight, _Component);

        function SbItemHighlight() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeague", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteLogoHome", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteLogoAway", _descriptor6, _assertThisInitialized(_this));

          _this.data = null; //SbMatchShortData

          _this.isUpdateLogo = false;
          _this.hideNodeOutOfView = null;
          return _this;
        }

        var _proto = SbItemHighlight.prototype;

        _proto.onLoad = function onLoad() {
          this.hideNodeOutOfView = this.node.getComponent(SBHideNodeOutOfView);
        };

        _proto.update = function update(dt) {
          if (this.isUpdateLogo == false) {
            if (this.hideNodeOutOfView != null && this.hideNodeOutOfView != undefined) {
              if (!this.hideNodeOutOfView.IsUIDisplay()) {
                this.isUpdateLogo = true;
                this.loadLogo();
              }
            }
          }
        };

        _proto.InitData = function InitData(data) {
          //init data
          this.data = {};
          if (data.hasOwnProperty("ln")) this.data["leagueName"] = data.ln;
          if (data.hasOwnProperty("hn")) this.data["homeName"] = data.hn;
          if (data.hasOwnProperty("an")) this.data["awayName"] = data.an;
          if (data.hasOwnProperty("redCardsHome")) this.data["redCardsHome"] = data.redCardsHome;
          if (data.hasOwnProperty("yellowCardsHome")) this.data["yellowCardsHome"] = data.yellowCardsHome;
          if (data.hasOwnProperty("redCardsAway")) this.data["redCardsAway"] = data.redCardsAway;
          if (data.hasOwnProperty("yellowCardsAway")) this.data["yellowCardsAway"] = data.yellowCardsAway;
          if (data.hasOwnProperty("isGoingLive")) this.data["isGoingLive"] = data.isGoingLive;
          if (data.hasOwnProperty("strTimeOfTheMatch")) this.data["strTimeOfTheMatch"] = data.strTimeOfTheMatch;
          if (data.hasOwnProperty("isLive")) this.data["isLive"] = data.isLive;
          if (data.hasOwnProperty("hl")) this.data["homeLogo"] = data.hl;
          if (data.hasOwnProperty("al")) this.data["awayLogo"] = data.al;
          if (data.hasOwnProperty("vl")) this.data["videoLink"] = SbConfigManager.getInstance().urlVideoJS + data.vl; //show Data

          if (this.data.hasOwnProperty("leagueName")) this.lbLeague.string = this.data.leagueName;
          if (this.data.hasOwnProperty("homeName")) this.lbHomeName.string = this.data.homeName;
          if (this.data.hasOwnProperty("awayName")) this.lbAwayName.string = this.data.awayName;
          if (data.hasOwnProperty("hs") && data.hasOwnProperty("as")) this.lbScore.string = data.hs + " - " + data.as;else this.lbScore.node.active = false;
        };

        _proto.loadLogo = function loadLogo() {
          if (this.data.hasOwnProperty("homeLogo")) SbUtils.downloadAndShowImage(this.spriteLogoHome, this.data.homeLogo);
          if (this.data.hasOwnProperty("awayLogo")) SbUtils.downloadAndShowImage(this.spriteLogoAway, this.data.awayLogo);
        };

        _proto.onButtonWatchNowClick = function onButtonWatchNowClick() {
          SbSoundsManager.getInstance().playSfxClick();
          if (this.data.hasOwnProperty("videoLink")) director.emit(SB_EVENT_SHOW_VIDEO_HIGHLIGHT, this.data);
        };

        return SbItemHighlight;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeague", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spriteLogoHome", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spriteLogoAway", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemInjury.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "e6514ixmkBNqKqur4WO+oSP", "SbItemInjury", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemInjury = exports('SbItemInjury', (_dec = ccclass('SbItemInjury'), _dec2 = property({
        group: 'Home',
        type: Node
      }), _dec3 = property({
        group: 'Home',
        type: Label
      }), _dec4 = property({
        group: 'Home',
        type: Label
      }), _dec5 = property({
        group: 'Home',
        type: Label
      }), _dec6 = property({
        group: 'Away',
        type: Node
      }), _dec7 = property({
        group: 'Away',
        type: Label
      }), _dec8 = property({
        group: 'Away',
        type: Label
      }), _dec9 = property({
        group: 'Away',
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemInjury, _Component);

        function SbItemInjury() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "groupHome", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomePlayerName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeInjury", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeCause", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupAway", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayPlayerName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayInjury", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayCause", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemInjury.prototype;

        _proto.SetDataInjury = function SetDataInjury(homeData, awayData) {
          if (homeData) {
            this.groupHome.active = true;
            this.initInjuryInfo(homeData, true);
          } else {
            this.groupHome.active = false;
          }

          if (awayData) {
            this.groupAway.active = true;
            this.initInjuryInfo(awayData, false);
          } else {
            this.groupAway.active = false;
          }
        };

        _proto.initInjuryInfo = function initInjuryInfo(data, isHome) {
          (isHome ? this.lbHomePlayerName : this.lbAwayPlayerName).string = data.name; // (isHome ? this.lbHomeInjury : this.lbAwayInjury).string = "";
          // (isHome ? this.lbHomeCause : this.lbAwayCause).string = data.cause || "Unknown";
        };

        return SbItemInjury;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "groupHome", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomePlayerName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeInjury", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeCause", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "groupAway", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayPlayerName", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayInjury", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayCause", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemMatchSchedule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts', './SbTabSchedule.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Component, SbUtils, ScheduleSportStatusEnum;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      ScheduleSportStatusEnum = module.ScheduleSportStatusEnum;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "fbb293CDtRBHYJDu6yfWR7m", "SbItemMatchSchedule", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemMatchSchedule = exports('SbItemMatchSchedule', (_dec = ccclass('SbItemMatchSchedule'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Sprite), _dec8 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemMatchSchedule, _Component);

        function SbItemMatchSchedule() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbDateTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeScore", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayScore", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logoHome", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logoAway", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemMatchSchedule.prototype;

        _proto.InitData = function InitData(data) {
          if (data.hasOwnProperty("sport_event")) {
            var event = data.sport_event;

            if (event.hasOwnProperty("start_time")) {
              this.lbDateTime.string = SbUtils.ConvertTimeStringToTodayFormat(event.start_time) + "\n" + SbUtils.ConvertTimeStringToDDMM(event.start_time);
            }

            if (event.hasOwnProperty("competitors")) {
              if (event.competitors[0].qualifier.localeCompare("home") == 0) {
                this.lbHomeName.string = event.competitors[0].name;
                SbUtils.downloadAndShowImage(this.logoHome, event.competitors[0].logo);
              }

              if (event.competitors[1].qualifier.localeCompare("away") == 0) {
                this.lbAwayName.string = event.competitors[1].name;
                SbUtils.downloadAndShowImage(this.logoAway, event.competitors[1].logo);
              }
            }
          }

          if (data.hasOwnProperty("sport_event_status")) {
            var info = data.sport_event_status;
            var homeScore = info.status === ScheduleSportStatusEnum.ENDED ? info.home_score : -1;
            var awayScore = info.status === ScheduleSportStatusEnum.ENDED ? info.away_score : -1;
            this.lbHomeScore.string = homeScore;
            this.lbAwayScore.string = awayScore;
            this.lbHomeScore.node.active = homeScore >= 0;
            this.lbAwayScore.node.active = awayScore >= 0;
          }
        };

        return SbItemMatchSchedule;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbDateTime", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeScore", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayScore", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "logoHome", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "logoAway", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemMiniBetSlip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemBetSlip.ts', './SbDefine.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, SbItemBetSlip, SB_EVENT_HIDE_MINI_BETSLIP;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
    }, function (module) {
      SbItemBetSlip = module.default;
    }, function (module) {
      SB_EVENT_HIDE_MINI_BETSLIP = module.SB_EVENT_HIDE_MINI_BETSLIP;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "75847kTJzpIPqZHr2wpF8ao", "SbItemMiniBetSlip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemMiniBetSlip = exports('default', (_dec = ccclass('SbItemMiniBetSlip'), _dec(_class = /*#__PURE__*/function (_SbItemBetSlip) {
        _inheritsLoose(SbItemMiniBetSlip, _SbItemBetSlip);

        function SbItemMiniBetSlip() {
          return _SbItemBetSlip.apply(this, arguments) || this;
        }

        var _proto = SbItemMiniBetSlip.prototype;

        _proto.onClickBtnShare = function onClickBtnShare() {
          if (this.isBlockClick) {
            return;
          }

          _SbItemBetSlip.prototype.onClickBtnShare.call(this);

          director.emit(SB_EVENT_HIDE_MINI_BETSLIP);
        };

        return SbItemMiniBetSlip;
      }(SbItemBetSlip)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemSearch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7f348TdGENGgJYm91lNCl0S", "SbItemSearch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // export class SbSearchData {
      //     id: number = 0;
      //     name: string = "";
      //     startDate: string = "";
      //     sportId: number = 1;
      //     leagueId: number = 0;
      //     isLive: boolean = false;
      // }

      var SbItemSearch = exports('default', (_dec = ccclass('SbItemSearch'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemSearch, _Component);

        function SbItemSearch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbDate", _descriptor2, _assertThisInitialized(_this));

          _this.data = {};
          return _this;
        }

        var _proto = SbItemSearch.prototype;

        _proto.SetInfo = function SetInfo(data) {
          this.data = data;
          this.displayData();
        };

        _proto.displayData = function displayData() {};

        _proto.onClickItem = function onClickItem() {
          SbSoundsManager.getInstance().playSfxClick();
        };

        return SbItemSearch;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbDate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemSearchLeague.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemSearch.ts', './SbDefine.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, SbItemSearch, SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
    }, function (module) {
      SbItemSearch = module.default;
    }, function (module) {
      SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID = module.SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "93582UfiVtMUaa5txE4eSud", "SbItemSearchLeague", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemSearchLeague = exports('SbItemSearchLeague', (_dec = ccclass('SbItemSearchLeague'), _dec(_class = /*#__PURE__*/function (_SbItemSearch) {
        _inheritsLoose(SbItemSearchLeague, _SbItemSearch);

        function SbItemSearchLeague() {
          return _SbItemSearch.apply(this, arguments) || this;
        }

        var _proto = SbItemSearchLeague.prototype;

        _proto.displayData = function displayData() {
          // 0: id;
          // 1: name;
          // 2: sportId;
          // 3: type;
          //conver data
          this.data = {
            id: this.data["0"],
            name: this.data["1"],
            sportId: this.data["2"],
            type: this.data["3"]
          };
          if (this.data.hasOwnProperty("name")) this.lbName.string = this.data.name;
        };

        _proto.onClickItem = function onClickItem() {
          _SbItemSearch.prototype.onClickItem.call(this);

          director.emit(SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID, this.data);
        };

        return SbItemSearchLeague;
      }(SbItemSearch)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemSearchMatch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemSearch.ts', './SbDefine.ts', './SbUtils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, SbItemSearch, SB_EVENT_REQUEST_DATA_MATCH_WITH_ID, SbUtils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
    }, function (module) {
      SbItemSearch = module.default;
    }, function (module) {
      SB_EVENT_REQUEST_DATA_MATCH_WITH_ID = module.SB_EVENT_REQUEST_DATA_MATCH_WITH_ID;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9c32fnN60RFnbeuaI+oDSnJ", "SbItemSearchMatch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemSearchMatch = exports('SbItemSearchMatch', (_dec = ccclass('SbItemSearchMatch'), _dec(_class = /*#__PURE__*/function (_SbItemSearch) {
        _inheritsLoose(SbItemSearchMatch, _SbItemSearch);

        function SbItemSearchMatch() {
          return _SbItemSearch.apply(this, arguments) || this;
        }

        var _proto = SbItemSearchMatch.prototype;

        _proto.displayData = function displayData() {
          // 0: id;
          // 1: name;
          // 2: startDate;
          // 3: sportId;
          // 4: leagueId;
          // 5: isLive;
          // 6: type;
          // 7: leagueName;
          this.data = {
            id: this.data["0"],
            name: this.data["1"],
            startDate: this.data["2"],
            sportId: this.data["3"],
            leagueId: this.data["4"],
            isLive: this.data["5"],
            type: this.data["6"],
            leagueName: this.data["7"]
          };
          if (this.data.hasOwnProperty("name")) this.lbName.string = this.data.name;
          if (this.data.hasOwnProperty("startDate")) this.lbDate.string = SbUtils.ConvertTimeStringToTodayFormatFull(this.data.startDate);
        };

        _proto.onClickItem = function onClickItem() {
          _SbItemSearch.prototype.onClickItem.call(this);

          director.emit(SB_EVENT_REQUEST_DATA_MATCH_WITH_ID, this.data);
        };

        return SbItemSearchMatch;
      }(SbItemSearch)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemStandings.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Node, Component, SbUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "bc00bb6oipBDpU8fjcy4YBp", "SbItemStandings", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemStandings = exports('SbItemStandings', (_dec = ccclass('SbItemStandings'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemStandings, _Component);

        function SbItemStandings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbRank", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTeamName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "logoTeam", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "decorTopRank", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbplayed", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbwin", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbloss", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbdraw", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbgoals_for", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbgoals_against", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbgoals_diff", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbpoints", _descriptor12, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemStandings.prototype;

        _proto.InitData = function InitData(data, index) {
          var competitor = data.competitor;
          this.lbTeamName.string = competitor.name;
          var rank = data.rank;
          if (rank != 1) rank = data.rank;else rank = index.toString();
          this.lbRank.string = rank;
          this.decorTopRank.active = rank < 3 ? true : false;
          SbUtils.downloadAndShowImage(this.logoTeam, competitor.logo);
          this.lbplayed.string = data.played;
          this.lbwin.string = data.win;
          this.lbloss.string = data.loss;
          this.lbdraw.string = data.draw;
          this.lbgoals_for.string = data.goals_for;
          this.lbgoals_against.string = data.goals_against;
          this.lbgoals_diff.string = data.goals_diff;
          this.lbpoints.string = data.points;
        };

        return SbItemStandings;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbRank", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbTeamName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "logoTeam", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "decorTopRank", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbplayed", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbwin", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbloss", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbdraw", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbgoals_for", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbgoals_against", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbgoals_diff", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lbpoints", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemSubPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPlayer.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, SbPlayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      SbPlayer = module.SbPlayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "def96UAosRE5oPVE5jnptTr", "SbItemSubPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemSubPlayer = exports('SbItemSubPlayer', (_dec = ccclass('SbItemSubPlayer'), _dec2 = property({
        group: 'Home',
        type: Node
      }), _dec3 = property({
        group: 'Home',
        type: SbPlayer
      }), _dec4 = property({
        group: 'Away',
        type: Node
      }), _dec5 = property({
        group: 'Away',
        type: SbPlayer
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemSubPlayer, _Component);

        function SbItemSubPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "groupHome", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playerHome", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupAway", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "playerAway", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemSubPlayer.prototype;

        _proto.SetDataSubPlayer = function SetDataSubPlayer(homePlayer, awayPlayer, mapPlayerInfo) {
          if (homePlayer) {
            this.groupHome.active = true;
            this.initSubPlayer(homePlayer, true, mapPlayerInfo);
          } else {
            this.groupHome.active = false;
          }

          if (awayPlayer) {
            this.groupAway.active = true;
            this.initSubPlayer(awayPlayer, false, mapPlayerInfo);
          } else {
            this.groupAway.active = false;
          }
        };

        _proto.initSubPlayer = function initSubPlayer(data, isHome, mapPlayerInfo) {
          (isHome ? this.playerHome : this.playerAway).InitData(data, mapPlayerInfo);
        };

        return SbItemSubPlayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "groupHome", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "playerHome", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "groupAway", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "playerAway", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemSubstitutions.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbTypeDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Component, PlayerTypeEnum;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      PlayerTypeEnum = module.PlayerTypeEnum;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "5758fvJV/xDrIvLZDs5jn29", "SbItemSubstitutions", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemSubstitutions = exports('SbItemSubstitutions', (_dec = ccclass('SbItemSubstitutions'), _dec2 = property({
        group: 'Home',
        type: Node
      }), _dec3 = property({
        group: 'Home',
        type: Label
      }), _dec4 = property({
        group: 'Home',
        type: Label
      }), _dec5 = property({
        group: 'Home',
        type: Label
      }), _dec6 = property({
        group: 'Away',
        type: Node
      }), _dec7 = property({
        group: 'Away',
        type: Label
      }), _dec8 = property({
        group: 'Away',
        type: Label
      }), _dec9 = property({
        group: 'Away',
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemSubstitutions, _Component);

        function SbItemSubstitutions() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "groupHome", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomePlayerIn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomePlayerOut", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupAway", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayPlayerIn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayPlayerOut", _descriptor8, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemSubstitutions.prototype;

        _proto.SetDataSubstitutions = function SetDataSubstitutions(homeData, awayData) {
          if (homeData) {
            this.groupHome.active = true;
            this.initSubstitution(homeData, true);
          } else {
            this.groupHome.active = false;
          }

          if (awayData) {
            this.groupAway.active = true;
            this.initSubstitution(awayData, false);
          } else {
            this.groupAway.active = false;
          }
        };

        _proto.initSubstitution = function initSubstitution(data, isHome) {
          var _this2 = this;

          (isHome ? this.lbHomeTime : this.lbAwayTime).string = data.match_time + "'";

          if (data.players && data.players.length > 0) {
            data.players.forEach(function (player) {
              if (player.type == PlayerTypeEnum.SUB_IN) {
                (isHome ? _this2.lbHomePlayerIn : _this2.lbAwayPlayerIn).string = player.name;
              } else {
                (isHome ? _this2.lbHomePlayerOut : _this2.lbAwayPlayerOut).string = player.name;
              }
            });
          }
        };

        return SbItemSubstitutions;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "groupHome", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbHomePlayerIn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbHomePlayerOut", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "groupAway", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayPlayerIn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayPlayerOut", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemTicketBetInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemChatTicket.ts', './SbMarket.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, SbItemChatTicket, SbMarket;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      SbItemChatTicket = module.SbItemChatTicket;
    }, function (module) {
      SbMarket = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "62b08ATajBDnZPxeNzBSAYS", "SbItemTicketBetInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbItemTicketBetInfo = exports('SbItemTicketBetInfo', (_dec = ccclass('SbItemTicketBetInfo'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_SbItemChatTicket) {
        _inheritsLoose(SbItemTicketBetInfo, _SbItemChatTicket);

        function SbItemTicketBetInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbItemChatTicket.call.apply(_SbItemChatTicket, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbMarketName", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbItemTicketBetInfo.prototype;

        _proto.addTouchListener = function addTouchListener() {};

        _proto.removeTouchListener = function removeTouchListener() {};

        _proto.InitTicketData = function InitTicketData(data, chatController) {
          _SbItemChatTicket.prototype.InitTicketData.call(this, data, chatController);

          if (this.lbMarketName) {
            if (data.marketId != undefined) {
              this.lbMarketName.string = SbMarket.ConvertMaketIdToNameVietnamese(data.marketId); //SbSportManager.ConvertSportIdToName(data.sportId) + " / " + 
            } else {
              this.lbMarketName.string = data.marketName;
            }
          }
        };

        return SbItemTicketBetInfo;
      }(SbItemChatTicket), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbMarketName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbItemVideoLivestream.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMatch.ts', './SbSoundsManager.ts', './SbDefine.ts', './SbDisplayMatchInfo.ts', './SbUtils.ts', './SbCommonPrefabsManager.ts', './SbLocalizationManager.ts', './SbLivestreamUtils.ts', './SBHideNodeOutOfView.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, director, Component, SbMatch, SbMatchStatus, SbSoundsManager, SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, SbMatchShortData, SbUtils, SbCommonPrefabsManager, SbLocalizationManager, SbLivestreamUtils, SBHideNodeOutOfView;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbMatch = module.default;
      SbMatchStatus = module.SbMatchStatus;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID = module.SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID;
    }, function (module) {
      SbMatchShortData = module.SbMatchShortData;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbLivestreamUtils = module.SbLivestreamUtils;
    }, function (module) {
      SBHideNodeOutOfView = module.SBHideNodeOutOfView;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "3d3898tOI5DnJ6CrjMr9e1t", "SbItemVideoLivestream", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // export const SB_EVENT_HIDE_LIVESTREAM_HIGHLIGHT = 'kkimdhadkjasdh838s7438qh2sidssdh==';

      var SbItemVideoLivestream = exports('SbItemVideoLivestream', (_dec = ccclass('SbItemVideoLivestream'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Sprite), _dec8 = property(Sprite), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbItemVideoLivestream, _Component);

        function SbItemVideoLivestream() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeague", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTime", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteLogoHome", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteLogoAway", _descriptor7, _assertThisInitialized(_this));

          _this.matchData = null;
          _this.matchShortData = null;
          _this.isUpdateLogo = false;
          _this.hideNodeOutOfView = null;
          return _this;
        }

        var _proto = SbItemVideoLivestream.prototype;

        _proto.onLoad = function onLoad() {
          this.hideNodeOutOfView = this.node.getComponent(SBHideNodeOutOfView);
        };

        _proto.update = function update(dt) {
          if (this.isUpdateLogo == false) {
            if (this.hideNodeOutOfView != null && this.hideNodeOutOfView != undefined) {
              if (!this.hideNodeOutOfView.IsUIDisplay()) {
                this.isUpdateLogo = true;
                this.loadLogo();
              }
            }
          }
        };

        _proto.InitData = function InitData(data, shortData) {
          if (shortData === void 0) {
            shortData = null;
          }

          this.matchData = data;
          this.lbTime.string = SbMatch.ConvertGameTimeToMatchTimeFormat(data.gameTime, data.gamePart, data.stoppageTime);
          this.lbLeague.string = data.leagueName;
          this.lbHomeName.string = data.homeName;
          this.lbAwayName.string = data.awayName;
          if (data.homeScore != null && data.homeScore != undefined) this.lbScore.string = data.homeScore + " - " + data.awayScore;else this.lbScore.string = "? - ?";
          if (shortData != null) this.matchShortData = shortData;else {
            this.matchShortData.gamePart = data.gamePart;
            this.matchShortData.strTimeOfTheMatch = this.lbTime.string;
            this.matchShortData.strScore = this.lbScore.string;
            this.matchShortData.homeName = data.homeName;
            this.matchShortData.awayName = data.awayName;
            this.matchShortData.leagueName = data.leagueName;
          }
        };

        _proto.IsMatch = function IsMatch(data) {
          if (this.matchData.eventId == data.eventId) return true;
          return false;
        };

        _proto.IsMatchFinish = function IsMatchFinish(gamePart) {
          if (gamePart == SbMatchStatus.Finished) {
            return true;
          }

          return false;
        };

        _proto.loadLogo = function loadLogo() {
          if (this.matchData.hasOwnProperty("homeLogoUrl") && this.matchData.homeLogoUrl.length > 0) SbUtils.downloadAndShowImage(this.spriteLogoHome, this.matchData.homeLogoUrl);
          if (this.matchData.hasOwnProperty("awayLogoUrl") && this.matchData.awayLogoUrl.length > 0) SbUtils.downloadAndShowImage(this.spriteLogoAway, this.matchData.awayLogoUrl);
        };

        _proto.checkMatchAvailableForWatch = function checkMatchAvailableForWatch() {
          // if (this.matchData.status != SbMarketStatus.Active) {
          //     SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MessageStatusHalfTime"));
          //     return false;
          // }
          if (this.matchData.gamePart == SbMatchStatus.HalfTime) {
            SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MessageStatusHalfTime"));
            return false;
          }

          return true;
        };

        _proto.onButtonWatchNowClick = function onButtonWatchNowClick() {
          var _this2 = this;

          SbSoundsManager.getInstance().playSfxClick(); // if (!this.checkMatchAvailableForWatch())
          //     return;

          SbLivestreamUtils.RequestLinkVideo(this.matchData.eventId, this.matchData.type, function (data) {
            //success
            if (_this2.matchShortData == null) {
              _this2.matchShortData = new SbMatchShortData();
            }

            _this2.matchShortData.videoLink = data.videoLink;
            if (data.hasOwnProperty("iframe")) _this2.matchShortData.iframe = data.iframe; // director.emit(SB_EVENT_SHOW_VIDEO_LIVESTREAM, this.matchShortData);

            director.emit(SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, _this2.matchData.eventId, data);
          }, function (message) {
            if (!_this2.checkMatchAvailableForWatch()) {
              return;
            }

            if (message.length > 0) SbCommonPrefabsManager.getInstance().ShowMessage(message);
          });
        };

        _proto.onButtonBetNowClick = function onButtonBetNowClick() {
          SbSoundsManager.getInstance().playSfxClick();
          director.emit(SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, this.matchData.eventId);
        };

        return SbItemVideoLivestream;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeague", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbTime", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "spriteLogoHome", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "spriteLogoAway", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLeague.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts', './SbSportManager.ts', './SbMarket.ts', './SbMatch.ts', './SbSoundsManager.ts', './SbGameUtil.ts', './SbMatchFavorite.ts', './SbNodeColorHelper.ts', './SbDefine.ts', './SbStringUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, Sprite, Toggle, Tween, tween, Layout, UITransform, Color, UIOpacity, Component, SbUtils, SbSportID, SbMarket, SbMatch, SbSoundsManager, ChangeFeildNameShortOfEvent, ChangeFeildNameShortOfLeague, SbMatchFavorite, SbNodeColorHelper, SB_COLOR_NAME_MATCH_LIVE, SbStringUtil, SbNodePoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Toggle = module.Toggle;
      Tween = module.Tween;
      tween = module.tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
      Color = module.Color;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbSportID = module.SbSportID;
    }, function (module) {
      SbMarket = module.default;
    }, function (module) {
      SbMatch = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      ChangeFeildNameShortOfEvent = module.ChangeFeildNameShortOfEvent;
      ChangeFeildNameShortOfLeague = module.ChangeFeildNameShortOfLeague;
    }, function (module) {
      SbMatchFavorite = module.default;
    }, function (module) {
      SbNodeColorHelper = module.SbNodeColorHelper;
    }, function (module) {
      SB_COLOR_NAME_MATCH_LIVE = module.SB_COLOR_NAME_MATCH_LIVE;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "a2b8c3dQ1pM6pX8cfrCVyc4", "SbLeague", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // const PADING_TOP_OF_SCROLLVIEW_PARENT = 270;

      var SbLeagueData = exports('SbLeagueData', /*#__PURE__*/function () {
        function SbLeagueData() {
          this.sportId = 0;
          this.sportName = "";
          this.regionId = 0;
          this.regionName = "";
          this.leagueId = 0;
          this.leagueName = "";
          this.leagueOrder = "";
          this.linkLogo = "";
          this.listMatch = [];
        }

        var _proto = SbLeagueData.prototype;

        _proto.Reset = function Reset() {
          this.sportId = 0;
          this.sportName = "";
          this.regionId = 0;
          this.regionName = "";
          this.leagueId = 0;
          this.leagueName = "";
          this.leagueOrder = "";
          this.linkLogo = "";
          this.listMatch = [];
        };

        return SbLeagueData;
      }());
      var SbLeague = exports('default', (_dec = ccclass('SbLeague'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(Toggle), _dec8 = property(SbNodeColorHelper), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLeague, _Component);

        function SbLeague() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabMatch", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentMatch", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconArrowExpandOrCollapse", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sprLogoLeague", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleFavorite", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNodeChangeColor", _descriptor7, _assertThisInitialized(_this));

          _this.matches = [];
          _this.leagueData = new SbLeagueData();
          _this.isExpandAllMatchs = true;
          _this.isShowMatchFavorite = false;
          _this.nodeTransform = null;
          _this.nodeParentParentTransform = null;
          _this.nodeOpacity = null;
          _this.skipChangeStatusFavorite = false;
          _this.isHiddenAllUI = null;
          _this.sbFootballBettingController = null;
          return _this;
        }

        var _proto2 = SbLeague.prototype;

        _proto2.init = function init(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto2.start = function start() {};

        _proto2.GetLeagueData = function GetLeagueData() {
          return this.leagueData;
        };

        _proto2.InitData = function InitData(dataOrigin, isInputFeildNameShort) {
          if (isInputFeildNameShort === void 0) {
            isInputFeildNameShort = true;
          }

          var data;

          if (isInputFeildNameShort == false) {
            data = ChangeFeildNameShortOfEvent(dataOrigin);
            data = ChangeFeildNameShortOfLeague(dataOrigin);
          } else data = dataOrigin; //storage data


          this.leagueData.sportId = data.si;
          this.leagueData.sportName = data.sn;
          this.leagueData.regionId = data.ri;
          this.leagueData.regionName = data.rn;
          this.leagueData.leagueId = data.li;
          this.leagueData.leagueName = data.ln;
          this.leagueData.leagueOrder = data.lo;
          this.leagueData.listMatch = data.e;
          this.leagueData.linkLogo = data.lg; // //show UI

          this.lbLeagueName.string = this.leagueData.leagueName; //this.leagueData.regionName + " - " + this.leagueData.leagueName;

          if (SbMarket.IsCornerMatch(this.lbLeagueName.string) || SbMarket.IsBookingMatch(this.lbLeagueName.string)) {
            this.toggleFavorite.node.active = false;
          }

          if (data.hasOwnProperty("e")) {
            var listMatch = data.e;
            var countMatchLive = 0;

            for (var i = 0; i < listMatch.length; i++) {
              // let isAddItem = false;
              // if (typeTimeMatch == TypeTimeMatch.Today) {
              //     if (Match.CheckHasTodayMatch(listMatch[i])) {
              //         isAddItem = true;
              //     }
              // }
              // else if (typeTimeMatch == TypeTimeMatch.Live) {
              //     if (Match.CheckHasLiveMatch(listMatch[i])) {
              //         isAddItem = true;
              //     }
              // }
              // else if (typeTimeMatch == TypeTimeMatch.Early) {
              //     if (Match.CheckHasEarlyMatch(listMatch[i])) {
              //         isAddItem = true;
              //     }
              // }
              // else if (typeTimeMatch == TypeTimeMatch.All) {
              //     isAddItem = true;
              // }
              var item = this.createItemMatch();
              item.SetLeagueData(this.leagueData);
              item.InitData(listMatch[i], true);
              item.node.parent = this.nodeParentMatch;
              item.SetCallbackStatusFavoriteChange(this.CheckLeagueStatusFavorite.bind(this));
              this.matches.push(item);

              if (item.IsMatchLive()) {
                countMatchLive++;
              }
            }

            if (listMatch.length == countMatchLive) {
              this.changeBgColor(SB_COLOR_NAME_MATCH_LIVE);
            }
          }

          this.CheckLeagueStatusFavorite();

          if (!SbStringUtil.isNullOrEmpty(this.leagueData.linkLogo)) {
            this.setActiveLogo(true);

            if (this.sprLogoLeague) {
              SbUtils.downloadAndShowImage(this.sprLogoLeague, this.leagueData.linkLogo);
            }
          } else {
            this.setActiveLogo(false);
          }
        };

        SbLeague.CheckLeagueAvailable = function CheckLeagueAvailable(data) {
          var listMatch = data.e;

          for (var i = 0; i < listMatch.length; i++) {
            if (SbMatch.CheckHasMarketAvailable(listMatch[i])) return true;
          }

          return false;
        };

        SbLeague.CheckListMatchAvailable = function CheckListMatchAvailable(listMatch) {
          for (var i = 0; i < listMatch.length; i++) {
            if (SbMatch.CheckHasMarketAvailable(listMatch[i])) return true;
          }

          return false;
        };

        _proto2.HideLeague = function HideLeague(timeHide) {
          var _this2 = this;

          if (timeHide === void 0) {
            timeHide = 0;
          } // this.node.scaleY = 0;
          // this.node.opacity = 0;


          if (timeHide == 0) {
            this.node.setScale(this.node.scale.x, 0, 1);
            this.getNodeOpacity().opacity = 0;
          } else {
            Tween.stopAllByTarget(this.getNodeOpacity());
            tween(this.getNodeOpacity()).to(timeHide, {
              opacity: 0
            }).call(function () {
              _this2.node.setScale(_this2.node.scale.x, 0, 1);

              _this2.getNodeOpacity().opacity = 0;
            }).start();
          }
        };

        _proto2.ShowLeague = function ShowLeague(timeShow) {
          if (timeShow === void 0) {
            timeShow = 0;
          }

          if (timeShow == 0) {
            this.node.setScale(this.node.scale.x, 1, 1);
            this.getNodeOpacity().opacity = 255;
          } else {
            this.getNodeOpacity().opacity = 0;
            this.node.setScale(this.node.scale.x, 1, 1);
            Tween.stopAllByTarget(this.getNodeOpacity());
            tween(this.getNodeOpacity()).to(timeShow, {
              opacity: 255
            }).start();
          }
        };

        _proto2.Hide = function Hide() {
          this.getNodeOpacity().opacity = 0;
        };

        _proto2.Show = function Show() {
          this.getNodeOpacity().opacity = 255;
        };

        _proto2.SetExpandOrCollapseAllItem = function SetExpandOrCollapseAllItem(value) {
          this.isExpandAllMatchs = value;
          if (this.isExpandAllMatchs) this.expandAllItem();else this.collapseAllItem();
        };

        _proto2.HasLeague = function HasLeague(data) {
          if (data.sportId == SbSportID.Football && data.leagueId == this.leagueData.leagueId) return true;
          return false;
        };

        _proto2.GetTotalMatch = function GetTotalMatch() {
          return this.matches.length;
        };

        _proto2.HasDomainLeague = function HasDomainLeague(data) {
          if (data.domainLeagueId == this.leagueData.leagueId) return true;
          return false;
        };

        _proto2.SearchLeagueWithName = function SearchLeagueWithName(keyWord) {
          if (this.leagueData.leagueName.indexOf(keyWord) < 0) return -1;
          return this.leagueData.leagueId;
        };

        _proto2.SearchLeagueWithRegion = function SearchLeagueWithRegion(keyWord) {
          if (this.leagueData.regionName.indexOf(keyWord) < 0) return -1;
          return this.leagueData.leagueId;
        };

        _proto2.RemoveAllMatch = function RemoveAllMatch() {
          for (var i = this.matches.length - 1; i >= 0; i--) {
            if (this.matches[i] != null) {
              this.matches[i].Reset();
              SbNodePoolManager.clearItem([this.matches[i].node]);
            }
          }

          this.matches = [];
        };

        _proto2.CheckAndShowUIDetailtWithMatchId = function CheckAndShowUIDetailtWithMatchId(matchID, dataVideoLivestream) {
          if (dataVideoLivestream === void 0) {
            dataVideoLivestream = null;
          }

          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatchID(matchID)) {
              this.matches[i].ShowDetailOfMatch(dataVideoLivestream);
              return true;
            }
          }

          return false;
        };

        _proto2.CheckAndShowUIDetailt = function CheckAndShowUIDetailt(nameOfMatch) {
          for (var i = 0; i < this.matches.length; i++) {
            var name = this.matches[i].GetFullNameOfMatch();

            if (nameOfMatch.localeCompare(name) == 0) {
              this.matches[i].ShowDetailOfMatch();
              return true;
            }
          }

          return false;
        };

        _proto2.GetInfoAllMatchIsLive = function GetInfoAllMatchIsLive() {
          var listMatchLive = [];

          for (var i = 0; i < this.matches.length; i++) {
            var matchInfo = this.matches[i].GetInfoMatchIsLives();
            if (matchInfo != null) listMatchLive.push(matchInfo);
          }

          return listMatchLive;
        };

        _proto2.GetShortInfoAllMatchIsLive = function GetShortInfoAllMatchIsLive() {
          var listMatchLive = [];

          for (var i = 0; i < this.matches.length; i++) {
            var matchInfo = this.matches[i].GetShortInfoMatchIsLives();
            if (matchInfo != null) listMatchLive.push(matchInfo);
          }

          return listMatchLive;
        } //========= update from ws ==========//
        ;

        _proto2.OddsChange = function OddsChange(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(data)) {
              this.matches[i].OddsChange(data);
            }
          }
        };

        _proto2.CheckRemoveOddsOld = function CheckRemoveOddsOld(listNewOdds) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(listNewOdds[0])) {
              this.matches[i].CheckRemoveOddsOld(listNewOdds);
            }
          }
        };

        _proto2.OddsInsert = function OddsInsert(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(data)) {
              this.matches[i].OddsInsert(data);
            }
          }
        };

        _proto2.OddsRemove = function OddsRemove(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(data)) {
              this.matches[i].OddsRemove(data);
            }
          }
        };

        _proto2.EventChange = function EventChange(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(data)) {
              this.matches[i].EventChange(data);
            }
          }
        };

        _proto2.EventInsert = function EventInsert(data) {
          var item = this.createItemMatch();
          item.SetLeagueData(this.leagueData);
          item.InitData(ChangeFeildNameShortOfEvent(data));
          item.node.parent = this.nodeParentMatch;
          this.matches.push(item);
        };

        _proto2.MarketChange = function MarketChange(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasDomainMatch(data)) {
              this.matches[i].MarketChange(data);
            }
          }
        };

        _proto2.EventRemove = function EventRemove(data) {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].HasMatch(data)) {
              var match = this.matches[i];
              match.EventRemove(data);
              this.matches[i].Reset();
              SbNodePoolManager.clearItem([match.node]);
              this.matches.splice(i, 1); // remove 1 item in list

              break;
            }
          }
        } //=========
        ;

        _proto2.ChangeOddsStyle = function ChangeOddsStyle() {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i] != null && this.matches[i] != undefined) {
              this.matches[i].ChangeOddsStyle();
            }
          }
        };

        _proto2.HasMatchInFavorite = function HasMatchInFavorite() {
          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].IsMatchFavorite()) return true;
          }

          return false;
        };

        _proto2.ShowAllMatchInFavorite = function ShowAllMatchInFavorite(value, time) {
          this.isShowMatchFavorite = value;

          for (var i = 0; i < this.matches.length; i++) {
            if (value) {
              if (this.matches[i].IsMatchFavorite()) this.matches[i].ShowMatch();else {
                this.matches[i].HideMatch();
              }
            } else this.matches[i].ShowMatch();
          }

          this.nodeParentMatch.getComponent(Layout).updateLayout(true);

          for (var _i = 0; _i < this.matches.length; _i++) {
            if (value) {
              if (this.matches[_i].IsMatchFavorite()) this.matches[_i].ForceShowAllUI();else {
                this.matches[_i].ForceHiddenAllUI();
              }
            } else this.matches[_i].ShowMatch();
          }

          this.expandAllItem();
        };

        _proto2.CheckLeagueStatusFavorite = function CheckLeagueStatusFavorite() {
          if (this.toggleFavorite && SbMatchFavorite.getInstance().IsListFavoriteHasLeague(this.leagueData.leagueId)) {
            this.toggleFavorite.setIsCheckedWithoutNotify(true);
          } else {
            this.toggleFavorite.setIsCheckedWithoutNotify(false);
          }
        };

        _proto2.CheckAllMatchStatusFavorite = function CheckAllMatchStatusFavorite() {
          for (var i = 0; i < this.matches.length; i++) {
            this.matches[i].CheckMatchFavoriteStatus();
          }
        };

        _proto2.setActiveLogo = function setActiveLogo(active) {
          if (this.sprLogoLeague) {
            this.sprLogoLeague.node.active = active;
          }

          var widthName = active ? 530 : 570;
          this.lbLeagueName.node.getComponent(UITransform).width = widthName;
        };

        _proto2.changeBgColor = function changeBgColor(colorName) {
          for (var i = 0; i < this.listNodeChangeColor.length; i++) {
            this.listNodeChangeColor[i].ChangeColor(colorName);
          }
        };

        _proto2.RemoveMarket = function RemoveMarket(obj) {};

        _proto2.setStatusFavoriteAllMatch = function setStatusFavoriteAllMatch(value) {
          for (var i = 0; i < this.matches.length; i++) {
            this.matches[i].SetMatchIsFavorite(value);
          }
        } // Not Use
        ;

        _proto2.onStatusMatchInFavoriteChange = function onStatusMatchInFavoriteChange() {
          if (this.checkAllMatchIsFavorite()) {
            this.skipChangeStatusFavorite = false;
            this.toggleFavorite.setIsCheckedWithoutNotify(true);
          } else {
            this.skipChangeStatusFavorite = true;
            this.toggleFavorite.setIsCheckedWithoutNotify(false);
          }
        };

        _proto2.onToggleFavoriteClick = function onToggleFavoriteClick(toggle, customEventData) {
          var _this3 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (this.skipChangeStatusFavorite) {
            this.skipChangeStatusFavorite = false;
            return;
          }

          var callbackLeague = function callbackLeague() {
            _this3.CheckLeagueStatusFavorite();

            _this3.setStatusFavoriteAllMatch(toggle.isChecked);
          };

          if (toggle.isChecked) {
            SbMatchFavorite.getInstance().PushLeague(this.leagueData.leagueId, callbackLeague);
          } else {
            SbMatchFavorite.getInstance().RemoveLeague(this.leagueData.leagueId, callbackLeague);
          }
        };

        _proto2.onClickExpandOrCollapseAllItem = function onClickExpandOrCollapseAllItem() {
          SbSoundsManager.getInstance().playSfxClick();
          this.expandOrCollapseAllItem();
        };

        _proto2.checkAllMatchIsFavorite = function checkAllMatchIsFavorite() {
          var count = 0;

          for (var i = 0; i < this.matches.length; i++) {
            if (this.matches[i].IsMatchFavorite()) count++;
          }

          if (count == this.matches.length) return true;
          return false;
        };

        _proto2.expandOrCollapseAllItem = function expandOrCollapseAllItem() {
          if (this.isExpandAllMatchs) this.collapseAllItem();else this.expandAllItem();
        };

        _proto2.expandAllItem = function expandAllItem() {
          this.isExpandAllMatchs = true;

          for (var i = 0; i < this.matches.length; i++) {
            if (this.isShowMatchFavorite === false) {
              this.matches[i].ExpandItem();
            } else if (this.matches[i].IsMatchFavorite()) {
              this.matches[i].ExpandItem();
            }
          }

          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 0
          }).start();
        };

        _proto2.collapseAllItem = function collapseAllItem() {
          this.isExpandAllMatchs = false;

          for (var i = 0; i < this.matches.length; i++) {
            this.matches[i].CollapseItem();
          }

          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 90
          }).start();
        };

        SbLeague.CheckHasTodayMatchInLeague = function CheckHasTodayMatchInLeague(data) {
          for (var i = 0; i < data.matches.length; i++) {
            if (SbMatch.CheckHasTodayMatch(data.matches[i])) return true;
          }

          return false;
        };

        SbLeague.CheckHasLiveMatchInLeague = function CheckHasLiveMatchInLeague(data) {
          for (var i = 0; i < data.matches.length; i++) {
            if (SbMatch.CheckHasLiveMatch(data.matches[i])) return true;
          }

          return false;
        };

        SbLeague.CheckHasEarlyMatchInLeague = function CheckHasEarlyMatchInLeague(data) {
          for (var i = 0; i < data.matches.length; i++) {
            if (SbMatch.CheckHasEarlyMatch(data.matches[i])) return true;
          }

          return false;
        };

        _proto2.createItemMatch = function createItemMatch() {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabMatch);
          var mat = item.getComponent(SbMatch);
          mat.Reset();
          mat.init(this.sbFootballBettingController);
          return mat;
        };

        _proto2.update = function update(dt) {// let nodeHeight = 78;
          // let pos = this.node.parent.parent.parent.getComponent(UITransform).convertToWorldSpaceAR(this.node.position);
          // let visibleSize = view.getVisibleSize();
          // let winSizeHeight = visibleSize.height - PADING_TOP_OF_SCROLLVIEW_PARENT;
          // if (pos.y < 0 || pos.y > winSizeHeight + nodeHeight || this.node.scale.y === 0) {
          //     // if (this.isHiddenAllUI == true)
          //     //     return;
          //     this.isHiddenAllUI = true;
          //     this.setAllUIHiden(true)
          //     // this.getNodeOpacity().opacity = 0;
          // }
          // else {
          //     // if (this.isHiddenAllUI == false)
          //     //     return;
          //     this.isHiddenAllUI = false;
          //     // this.getNodeOpacity().opacity = 255;
          //     this.setAllUIHiden(false)
          // }
          // // if (pos.y < 0 || this.node.scale.y === 0)// || pos.y > winSizeHeight + this.node.getContentSize().height)
          // //     this.getNodeOpacity().opacity = 0;
          // // else
          // //     this.getNodeOpacity().opacity = 255;
        };

        _proto2.setAllUIHiden = function setAllUIHiden(value) {
          var opacity = 255;
          if (value) opacity = 0;
          var lisstSprite = this.node.getComponentsInChildren(Sprite);
          var lisstLabel = this.node.getComponentsInChildren(Label);

          for (var i = 0; i < lisstSprite.length; i++) {
            if (lisstSprite[i] != null) lisstSprite[i].color = new Color(lisstSprite[i].color.r, lisstSprite[i].color.g, lisstSprite[i].color.b, opacity);
          }

          for (var _i2 = 0; _i2 < lisstLabel.length; _i2++) {
            lisstLabel[_i2].color = new Color(lisstLabel[_i2].color.r, lisstLabel[_i2].color.g, lisstLabel[_i2].color.b, opacity);
          }
        };

        _proto2.getNodeParentParentTransform = function getNodeParentParentTransform() {
          if (this.nodeParentParentTransform === null) this.nodeParentParentTransform = this.node.parent.parent.getComponent(UITransform);
          return this.nodeParentParentTransform;
        };

        _proto2.getNodeTransform = function getNodeTransform() {
          if (this.nodeTransform === null) this.nodeTransform = this.node.getComponent(UITransform);
          return this.nodeTransform;
        };

        _proto2.getNodeOpacity = function getNodeOpacity() {
          if (this.nodeOpacity === null) this.nodeOpacity = this.node.getComponent(UIOpacity);
          return this.nodeOpacity;
        };

        _proto2.Reset = function Reset() {
          this.sbFootballBettingController = null;
          this.RemoveAllMatch();
          this.leagueData.Reset();
          this.toggleFavorite.node.active = true;
          this.nodeTransform = null;
          this.SetExpandOrCollapseAllItem(true); //--don't need to reset
          //this.nodeParentParentTransform = null;
          //this.nodeOpacity = null;
          //this.skipChangeStatusFavorite = null;
          //this.isHiddenAllUI = null;
          //this.sbFootballBettingController = null;
        };

        return SbLeague;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabMatch", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentMatch", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconArrowExpandOrCollapse", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sprLogoLeague", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "toggleFavorite", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listNodeChangeColor", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLive.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, WebView, Label, Vec3, log, UITransform, sys, director, game, Game, Component, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      WebView = module.WebView;
      Label = module.Label;
      Vec3 = module.Vec3;
      log = module.log;
      UITransform = module.UITransform;
      sys = module.sys;
      director = module.director;
      game = module.game;
      Game = module.Game;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "c2ca2KQyUdCXax6yWfb7kxG", "SbLive", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLiveState = exports('SbLiveState', /*#__PURE__*/function (SbLiveState) {
        SbLiveState["LiveShow"] = "SbLiveShow";
        SbLiveState["LiveHide"] = "SbLiveHide";
        SbLiveState["LiveLoad"] = "SbLiveLoad";
        SbLiveState["LiveReload"] = "SbLiveReload";
        SbLiveState["LiveDisplayError"] = "LiveDisplayError";
        return SbLiveState;
      }({}));
      var SbLive = exports('SbLive', (_dec = ccclass('SbLive'), _dec2 = property(WebView), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLive, _Component);

        function SbLive() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "live", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMessage", _descriptor2, _assertThisInitialized(_this));

          _this.data = null;
          _this.isReloadStream = false;
          _this.isLoadWebviewDone = false;
          _this.widthTV = 0;
          _this.heightTV = 0;
          _this.timeDelay = 0;
          _this.listPopupOpen = [];
          _this.positionOrigin = null;
          _this.isActive = false;
          return _this;
        }

        var _proto = SbLive.prototype;

        _proto.onLoad = function onLoad() {
          this.positionOrigin = new Vec3(this.live.node.position.x, this.live.node.position.y, this.live.node.position.z);
          this.onRegisterListeners();
        };

        _proto.start = function start() {};

        _proto.onEnable = function onEnable() {
          this.isActive = true;
          this.onRegisterListeners();
          log("this.live enableTV active: " + this.isActive);
          log("this.live enableTV activeInHierarchy: " + this.isActive);
        };

        _proto.init = function init(data) {
          this.data = data;
          log("SbLive: " + JSON.stringify(this.data));

          if (this.data.h5Link !== null && this.data.h5Link !== undefined) {
            try {
              var myurl1 = this.data.h5Link;
              this.live.url = myurl1;
              this.hideMessageError();
            } catch (error) {
              error(error);
            }
          } // this.disableTV();


          this.widthTV = this.live.getComponent(UITransform).width;
          this.heightTV = this.live.getComponent(UITransform).height;

          if (this.data.iframe === true) {
            this.timeDelay = 0.8;
          } else {
            this.timeDelay = 0.5;
          }

          this.enableTV();
          SbSoundsManager.getInstance().setMusicVolume(0.1);
        };

        _proto.onClickHide = function onClickHide() {};

        _proto.onWebFinishLoad = function onWebFinishLoad(sender, event) {
          if (event === WebView.EventType.LOADED) {
            if (this.isReloadStream === false) {
              this.scheduleOnce(function () {
                this.enableTV();
                this.isLoadWebviewDone = true;
              }, this.timeDelay);
            } else {
              this.isReloadStream = false;
            }
          } else if (event === WebView.EventType.LOADING) ;else if (event === WebView.EventType.ERROR) ;
        };

        _proto.reloadStream = function reloadStream() {
          if (this.data == null || this.data == undefined) return;
          this.isReloadStream = true;
          this.live.node.active = false;
          this.live.node.active = true;

          if (this.data.hasOwnProperty("h5Link")) {
            this.live.url = this.data.h5Link;
            this.hideMessageError();
          }
        };

        _proto.disableTV = function disableTV(initWebView) {
          if (initWebView === void 0) {
            initWebView = true;
          }

          if (sys.isNative || initWebView === false) {
            this.live.node.position = new Vec3(this.live.node.position.x, 2000, this.live.node.position.z);
          } else {
            this.live.node.scale = new Vec3(0, 1, 1);
          }
        };

        _proto.enableTV = function enableTV(initWebView) {
          if (initWebView === void 0) {
            initWebView = true;
          }

          this.live.node.getComponent(UITransform).width = this.widthTV;
          this.live.node.getComponent(UITransform).height = this.heightTV;
          this.live.node.position = this.positionOrigin;

          if (sys.isNative || initWebView === false) {
            this.live.node.position = this.positionOrigin;
          } else {
            this.live.node.scale = new Vec3(1, 1, 1);
          }
        };

        _proto.setSizeTVZero = function setSizeTVZero(param) {
          if (param === void 0) {
            param = "";
          }

          log("SbLiveState hide: " + param);
          this.disableTV(false);

          if (this.listPopupOpen.indexOf(param) === -1 && param !== "") {
            this.listPopupOpen.push(param);
          }
        };

        _proto.setSizeTVOriginal = function setSizeTVOriginal(isForce, param) {
          if (isForce === void 0) {
            isForce = false;
          }

          if (param === void 0) {
            param = "";
          } // if (this.isLoadWebviewDone === false)
          //     return;


          log("SbLiveState show: " + param);

          if (param !== "") {
            var index = this.listPopupOpen.indexOf(param);

            if (index > -1) {
              this.listPopupOpen.splice(index, 1);
            }
          }

          if (isForce === true) {
            this.listPopupOpen = [];
          }

          if (this.listPopupOpen.length > 0 && isForce === false) return;
          this.enableTV(false);
        };

        _proto.onRegisterListeners = function onRegisterListeners() {
          director.on(SbLiveState.LiveShow, this.onLiveShow, this);
          director.on(SbLiveState.LiveHide, this.onLiveHide, this);
          director.on(SbLiveState.LiveLoad, this.init, this);
          director.on(SbLiveState.LiveReload, this.reloadStream, this);
          director.on(SbLiveState.LiveDisplayError, this.onDisplayError, this);
          game.on(Game.EVENT_HIDE, this.onEventHide, this);
          game.on(Game.EVENT_SHOW, this.onEventShow, this);
        };

        _proto.onRemovesListeners = function onRemovesListeners() {
          director.off(SbLiveState.LiveShow, this.onLiveShow, this);
          director.off(SbLiveState.LiveHide, this.onLiveHide, this);
          director.off(SbLiveState.LiveLoad, this.init, this);
          director.off(SbLiveState.LiveReload, this.reloadStream, this);
          director.off(SbLiveState.LiveDisplayError, this.onDisplayError, this);
          game.off(Game.EVENT_HIDE, this.onEventHide, this);
          game.off(Game.EVENT_SHOW, this.onEventShow, this);
        };

        _proto.onDisable = function onDisable() {
          this.isActive = false;
          log("this.live onDisable active: " + this.isActive);
          log("this.live onDisable activeInHierarchy: " + this.isActive);
          this.live.url = "about:blank";
          this.hideMessageError();
          this.onRemovesListeners();
          SbSoundsManager.getInstance().resetMusicVolume();
        };

        _proto.onDestroy = function onDestroy() {
          // this.onRemovesListeners();
          SbSoundsManager.getInstance().resetMusicVolume();
        };

        _proto.onLiveShow = function onLiveShow(param) {
          if (param === void 0) {
            param = "";
          }

          this.setSizeTVOriginal(false, param);
        };

        _proto.onLiveHide = function onLiveHide(param) {
          if (param === void 0) {
            param = "";
          }

          this.setSizeTVZero(param);
        };

        _proto.onDisplayError = function onDisplayError(message) {
          if (message === void 0) {
            message = "";
          }

          if (this.lbMessage != null) this.lbMessage.string = message;
        };

        _proto.hideMessageError = function hideMessageError() {
          if (this.lbMessage != null) this.lbMessage.string = "";
        };

        _proto.onEventHide = function onEventHide() {};

        _proto.onEventShow = function onEventShow() {
          // if (sys.isMobile) {
          if (this.live.url.length > 0 && this.live.url.localeCompare("about:blank") != 0) {
            this.setSizeTVOriginal(false);
            this.reloadStream();
          } // }

        };

        return SbLive;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "live", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbMessage", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLivestreamUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbGameHTTPManager.ts', './SbLocalizationManager.ts', './SbMatch.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, SbConfigManager, SbGameHTTPManager, SbLocalizationManager, SbTypeMatch;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbTypeMatch = module.SbTypeMatch;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5adc3sFidhObJHfDyeyNCAK", "SbLivestreamUtils", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLivestreamUtils = exports('SbLivestreamUtils', (_dec = ccclass('SbLivestreamUtils'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLivestreamUtils, _Component);

        function SbLivestreamUtils() {
          return _Component.apply(this, arguments) || this;
        }

        SbLivestreamUtils.RequestLinkVideo = function RequestLinkVideo(eventId, matchType, callbackSuccess, callbackFail) {
          var _this = this;

          var bName = "w79"; //will repace with agentID later

          var urlRequest = SbConfigManager.getInstance().urlGetLivestream.replace("@event-id", eventId) + "/?brand=" + bName; //get link video live

          SbGameHTTPManager.getInstance().sendGetHttpRequest(urlRequest, function (obj) {
            console.log(JSON.stringify(obj));

            if (obj.hasOwnProperty("code")) {
              if (obj.code == 403) {
                // ip not allow
                callbackFail(SbLocalizationManager.getInstance().GetKeyValue("IpNotAllowForWatchVideo"));
                return;
              } //duplicate code a bit
              else if (obj.hasOwnProperty("status")) {
                  if (obj.status.localeCompare("Error") == 0) {
                    callbackFail(SbLocalizationManager.getInstance().GetKeyValue("MessageSomethingWrong"));
                    return;
                  }
                }
            } //support old version
            else if (obj.hasOwnProperty("status")) {
                if (obj.status.localeCompare("Error") == 0) {
                  callbackFail(SbLocalizationManager.getInstance().GetKeyValue("MessageSomethingWrong"));
                  return;
                }
              }

            if (obj.hasOwnProperty("type")) {
              matchType = obj.type;
            }

            var data = _this.getLinkVideoWithVideoPlayer(matchType, obj);

            if (data == null) {
              callbackFail(SbLocalizationManager.getInstance().GetKeyValue("MessageSomethingWrong"));
            } else {
              callbackSuccess(data);
            }
          }, function () {
            callbackFail(SbLocalizationManager.getInstance().GetKeyValue("MessageSomethingWrong"));
          }, false);
        };

        SbLivestreamUtils.getLinkVideoWithVideoPlayer = function getLinkVideoWithVideoPlayer(matchType, dataResponse) {
          if (dataResponse.hasOwnProperty("h5Link")) {
            if (matchType === null || matchType === SbTypeMatch.Normal || matchType === SbTypeMatch.LSports || matchType > SbTypeMatch.VoltaMatch) {
              return {
                "iframe": true,
                "h5Link": SbConfigManager.getInstance().urlVirtualVideoJS + dataResponse.h5Link
              };
            } else if (matchType === SbTypeMatch.GSVirtualMatch) {
              //play with video.js
              return {
                "iframe": false,
                "h5Link": SbConfigManager.getInstance().urlVideoJS + dataResponse.h5Link
              };
            }
          } else return null;
        };

        return SbLivestreamUtils;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLoader.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './FaryguiInput.ts', './FaryguiConstant.ts', './FaryguiUtil.ts', './FaryguiListEx.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, BitmapFont, BufferAsset, Material, log, macro, Component, RegisterFont, LoadPackage, FaryguiInput, FaryguiPackage, FaryguiObject, FUtil, ListRendererEx, ListRendererEx4;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BitmapFont = module.BitmapFont;
      BufferAsset = module.BufferAsset;
      Material = module.Material;
      log = module.log;
      macro = module.macro;
      Component = module.Component;
    }, function (module) {
      RegisterFont = module.RegisterFont;
      LoadPackage = module.LoadPackage;
      FaryguiInput = module.FaryguiInput;
    }, function (module) {
      FaryguiPackage = module.FaryguiPackage;
      FaryguiObject = module.FaryguiObject;
    }, function (module) {
      FUtil = module.default;
    }, function (module) {
      ListRendererEx = module.ListRendererEx;
      ListRendererEx4 = module.ListRendererEx4;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d3dceonyO1C96tn2j/Cl3H1", "SbLoader", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      function randomTextSpecial(length) {
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        return Array.from({
          length: length
        }, function () {
          return chars[Math.floor(Math.random() * chars.length)];
        }).join("");
      }

      var itemInfo = [["ui://rb6r5pqoesa1b", 300], ["ui://rb6r5pqoesa118", 400], ["ui://rb6r5pqoesa11b", 600]];

      function getDateStr(time) {
        var sd = getDate(time);
        return sd.year + "-" + sd.month + "-" + sd.day + " " + sd.hour + ":" + sd.minute + ":" + sd.second + "." + sd.millisecond;
      }

      function getDate(time) {
        var d = time > 0 ? new Date(time) : new Date();
        var day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate(),
            month = d.getMonth() < 9 ? '0' + (d.getMonth() + 1) : d.getMonth() + 1,
            year = d.getFullYear(),
            hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours(),
            minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes(),
            second = d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds();
        var m = d.getMilliseconds();
        var millisecond = m < 10 ? '0' + m : m.toString();

        if (m < 100) {
          millisecond = '0' + m;
        }

        return {
          time: +d,
          year: year,
          month: month,
          day: day,
          hour: hour,
          minute: minute,
          second: second,
          millisecond: millisecond
        };
      }

      var SbLoader = exports('SbLoader', (_dec = ccclass('SbLoader'), _dec2 = property([BitmapFont]), _dec3 = property(BufferAsset), _dec4 = property(Material), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLoader, _Component);

        function SbLoader() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "fontUsing", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buffer", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mat", _descriptor3, _assertThisInitialized(_this));

          _this.data = null;
          return _this;
        }

        var _proto = SbLoader.prototype;

        _proto.onLoad = function onLoad() {
          // dynamicAtlasManager.enabled = true;
          log("Layer: " + this.node.layer);
          var self = this;
          RegisterFont(self.fontUsing[0], "ui://rb6r5pqoesa11n"); // font-aguda-black

          RegisterFont(self.fontUsing[1], "ui://rb6r5pqoesa11p"); // font-aguda-bold
          // LoadBufferAsset(this.buffer, (error: any, pkg: fgui.UIPackage) => {
          //     if (error) return;
          //     self.initUI(pkg);
          // });

          LoadPackage(FaryguiPackage.Sb, function (error, pkg) {
            if (error) return;
            self.initUI(pkg);
          });
        };

        _proto.initUI = function initUI(pkg) {
          var rootCom = new FaryguiInput(this.node);
          var com = pkg.createObject(FaryguiObject.Main);
          rootCom.addChild(com);
          var mapObjs = FUtil.createMapPaths(com);
          var listView = mapObjs.getChild("ListView"); // listView.setVirtual();

          var data = [];

          for (var iF = 0; iF < 100; iF++) {
            var matches = [];
            var lMatch = iF == 0 ? 2 : Math.round(50 + Math.random() * 50);

            for (var iM = 0; iM < lMatch; iM++) {
              // const type = (iF + iM) % itemInfo.length;
              var type = 0;
              var info = itemInfo[type];
              matches.push({
                name: "F" + iF + " M" + iM,
                type: type,
                url: info[0],
                height: info[1],
                strData: randomTextSpecial(Math.floor(10 + Math.random() * 10))
              });
            }

            data.push({
              idx: iF,
              isExpand: true,
              matches: matches,
              ref: null
            });
          }

          ListRendererEx(listView, function (index, item) {
            // listView.itemRenderer = (index: number, item: fgui.GComponent) => {
            var itemCtrl = item["$itemCtrl"];

            if (!itemCtrl) {
              itemCtrl = new ItemCtrl(listView, item, data[index]);
              item["$itemCtrl"] = itemCtrl;
            }

            itemCtrl.refresh(data[index]);
            log("Obj render match");
          });
          this.data = data;
          listView.numItems = data.length;
          this.schedule(this.randomData.bind(this), 0.2, macro.REPEAT_FOREVER);
        };

        _proto.randomData = function randomData() {
          var data = this.data;

          for (var idx = 0; idx < data.length; idx++) {
            var l = data[idx];
            if (!l.isExpand) continue;
            l.matches.forEach(function (m) {
              m.strData = randomTextSpecial(Math.floor(10 + Math.random() * 10));
              if (m.doRefreshUi) m.doRefreshUi();
              if (m.doRanShowUi) m.doRanShowUi();
            });
          }
        };

        return SbLoader;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fontUsing", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "buffer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "mat", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      var ItemCtrl = /*#__PURE__*/function () {
        //
        function ItemCtrl(list, item, data) {
          this.list = void 0;
          this.item = void 0;
          this.lb = void 0;
          this.lb2 = void 0;
          this.lb3 = void 0;
          this.content = void 0;
          this.list_content = void 0;
          this.btDropClose = void 0;
          this.btDropOpen = void 0;
          this.data = void 0;
          this.hBase = void 0;
          this.isMoving = false;
          this.isInitList = false;
          this.countRefresh = 0;
          this.offsetContentBot = 30;
          this.data = data;
          this.list = list;
          this.item = item;
          this.lb = item.getChild("lb");
          this.lb2 = item.getChild("lb2");
          this.lb3 = item.getChild("lb3");
          this.content = item.getChild("content");
          this.list_content = this.content.getChild("list_content");
          var btDrop = item.getChild("btDrop");
          this.btDropClose = btDrop.getChild("close");
          this.btDropOpen = btDrop.getChild("open");
          this.hBase = item.height;
          this.content.height = 0;
          this.content.visible = false;
          btDrop.onClick(this.onclick, this); // this.list_content.setVirtual();

          this.initList();
        }

        var _proto2 = ItemCtrl.prototype;

        _proto2.initList = function initList() {
          var self = this;
          if (self.isInitList) return;
          self.isInitList = true;

          var itemRenderer = function itemRenderer(index, item) {
            var idxMatch = index;
            var math = self.data.matches[idxMatch];

            if (item["@data"] === math) {
              return;
            } else if (item["@data"]) {
              item["@data"].doRefreshUi = undefined;
              item["@data"].doRanShowUi = undefined;
            }

            log("Obj render cell", math.name);
            item["@data"] = math;
            var btEx = item.getChild("btEx"); // log("init com match", data.idx, idxMatch);

            if (btEx) {
              FUtil.setClick(btEx, function () {
                var idxMatch = self.data.matches.indexOf(math);
                self.onBtExClick(idxMatch);
              });
            }

            var btAdd = item.getChild("btAdd");

            if (btAdd) {
              FUtil.setClick(btAdd, function () {
                var idxMatch = self.data.matches.indexOf(math);
                self.onBtAddClick(idxMatch);
              });
            }

            var btRemove = item.getChild("btRemove");

            if (btRemove) {
              FUtil.setClick(btRemove, function () {
                var idxMatch = self.data.matches.indexOf(math);
                self.onBtRemoveClick(idxMatch);
              });
            }

            var lb = item.getChild("lb");
            var lbSub = item.getChild("lbSub");
            var lbSub2 = item.getChild("lbSub2");
            var lbSub3 = item.getChild("lbSub3");
            var lbSub4 = item.getChild("lbSub4");

            math.doRefreshUi = function () {
              if (lb) {
                lb.text = math.name;
              }

              if (lbSub) {
                lbSub.text = "Type cell is " + math.type;
              }

              if (lbSub2) {
                lbSub2.text = "Height cell is " + math.height;
              }

              if (math.strData && lbSub3) {
                lbSub3.text = math.strData;
              }

              if (lbSub4) {
                lbSub4.text = getDateStr(Date.now());
              }
            };

            math.doRanShowUi = function () {
              for (var idx = 0; idx < item._children.length; idx++) {
                var c = item._children[idx];

                if (c.name[0] == 'n') {
                  c.visible = Math.random() > 0.8;
                }
              }
            };

            math.doRefreshUi();
          }; // this.list_content.itemRenderer = itemRenderer;
          // return;


          ListRendererEx4(this.list_content, function (index) {
            return self.data.matches[index];
          }, itemRenderer);
        };

        _proto2.onBtExClick = function onBtExClick(idxMatch) {
          log("onBtExClick", idxMatch);
          var match = this.data.matches[idxMatch];
          var type = ++match.type % itemInfo.length;
          var info = itemInfo[type];
          match.type = type;
          match.url = info[0];
          match.height = info[1];
          this.refresh(this.data);
        };

        _proto2.onBtAddClick = function onBtAddClick(idxMatch) {
          log("onBtAddClick", idxMatch);
          var matches = this.data.matches;
          var m = matches[idxMatch];
          var c = matches.splice(idxMatch, matches.length - idxMatch);
          matches.push({
            name: m.name,
            type: m.type,
            url: m.url,
            height: m.height,
            strData: m.strData
          });

          if (c.length > 0) {
            matches.push.apply(matches, c);
          }

          this.list_content.addItemByUrl(idxMatch);
          this.refresh(this.data);
        };

        _proto2.onBtRemoveClick = function onBtRemoveClick(idxMatch) {
          log("onBtRemoveClick", idxMatch);
          this.data.matches.splice(idxMatch, 1);
          this.list_content.removeItemEx(idxMatch); // this.list_content.removeChildToPoolAt(idxMatch);

          this.refresh(this.data);
        };

        _proto2.refresh = function refresh(data) {
          var _this2 = this;

          this.countRefresh++;
          this.lb2.text = "Refresh: " + this.countRefresh;
          this.lb3.text = "Count cells: " + data.matches.length;
          data.ref = this;
          this.data = data;
          this.lb.text = "Idx " + data.idx;
          this.content.visible = true;
          this.btDropClose.visible = !data.isExpand;
          this.btDropOpen.visible = data.isExpand;
          FUtil.kill(this.content);

          if (!data.isExpand) {
            FUtil.toHeightByD(this.item, this.hBase, 1.2).onUpdate(this.doSpan, this).onComplete(function () {
              _this2.item.height = _this2.hBase;

              _this2.doSpan();

              _this2.content.height = 0;
              _this2.content.visible = false;
            });
            return;
          }

          if (!this.item.node.activeInHierarchy) {
            log("skip list");
            return;
          }

          var self = this;
          this.list_content.fastUpdateHeight(data.matches.length, function (index) {
            return self.data.matches[index];
          }); // this.list_content.numItems = data.matches.length;
          // this.list_content.updateBounds();

          var contentHeight = this.list_content.scrollPane.contentHeight;
          this.list_content.scrollPane.viewHeight = contentHeight; // this.list_content.updateBounds();

          var hContent = contentHeight;
          var hTo = this.hBase + this.list_content.y + hContent + this.offsetContentBot;

          if (this.countRefresh <= 1) {
            this.item.height = hTo;
            this.doSpan();
            return;
          }

          FUtil.toHeightByD(this.item, hTo, 1.0).onUpdate(this.doSpan, this).onComplete(function () {
            _this2.item.height = hTo; // this.list.touchEffect = true;

            _this2.doSpan();
          });
        };

        _proto2.doSpan = function doSpan() {
          var h = this.item.height - this.hBase - this.offsetContentBot;
          if (h <= 0) h = 0;
          this.content.height = h;
        };

        _proto2.onclick = function onclick() {
          if (!this.data) return;
          this.data.isExpand = !this.data.isExpand;
          this.refresh(this.data);
        };

        return ItemCtrl;
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLoadingNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Tween, UIOpacity, tween, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "4fb16LIGRJLnZ0XDJy/cpLP", "SbLoadingNode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLoadingNode = exports('default', (_dec = ccclass('SbLoadingNode'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLoadingNode, _Component);

        function SbLoadingNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boad", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbLoadingNode.prototype;

        _proto.IsLoading = function IsLoading() {
          return this.node.active;
        };

        _proto.ShowLoading = function ShowLoading(bgOpacity) {
          if (bgOpacity === void 0) {
            bgOpacity = 0.8;
          }

          this.node.active = true;

          if (this.bg != null) {
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            this.bg.getComponent(UIOpacity).opacity = 0;
            this.bg.active = true;
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 255 * bgOpacity
            }).start();
          }

          if (this.boad != null) {
            Tween.stopAllByTarget(this.boad);
            this.boad.setScale(0, 0);
            tween(this.boad).to(0.2, {
              scale: new Vec3(1, 1)
            }, {
              easing: 'backOut'
            }).start();
          }
        };

        _proto.HideLoading = function HideLoading() {
          var _this2 = this;

          if (this.node.active == false) return false;

          if (this.bg != null) {
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 0
            }).call(function () {
              _this2.node.active = false;
            }).start();
          } else this.node.active = false;

          if (this.boad != null) {
            Tween.stopAllByTarget(this.boad);
            tween(this.boad).to(0.2, {
              scale: new Vec3(0, 0)
            }, {
              easing: 'backIn'
            }).start();
          }
        };

        return SbLoadingNode;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boad", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLoadingNodeMini.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Tween, tween, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "74554CyxhRAKLd1dDud8QkR", "SbLoadingNodeMini", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLoadingNodeMini = exports('SbLoadingNodeMini', (_dec = ccclass('SbLoadingNodeMini'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLoadingNodeMini, _Component);

        function SbLoadingNodeMini() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "boad", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbLoadingNodeMini.prototype;

        _proto.IsLoading = function IsLoading() {
          return this.node.active;
        };

        _proto.ShowLoading = function ShowLoading() {
          if (this.node.active) return false;
          this.node.active = true;

          if (this.boad != null) {
            Tween.stopAllByTarget(this.boad);
            this.boad.setScale(0, 0);
            tween(this.boad).to(0.2, {
              scale: new Vec3(1, 1)
            }, {
              easing: 'backOut'
            }).start();
          }
        };

        _proto.HideLoading = function HideLoading() {
          var _this2 = this;

          if (this.node.active == false) return false;

          if (this.boad != null) {
            Tween.stopAllByTarget(this.boad);
            tween(this.boad).to(0.2, {
              scale: new Vec3(0, 0)
            }, {
              easing: 'backIn'
            }).call(function () {
              _this2.node.active = false;
            }).start();
          }
        };

        return SbLoadingNodeMini;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boad", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLoadingUI.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Widget, director, UIOpacity, tween, Button, Tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Widget = module.Widget;
      director = module.director;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Button = module.Button;
      Tween = module.Tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "83b90gC9eNHHZfMRTeUgOsL", "SbLoadingUI", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLoadingUI = exports('default', (_dec = ccclass('SbLoadingUI'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLoadingUI, _Component);

        function SbLoadingUI() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.startTime = 0;

          _initializerDefineProperty(_this, "loadingSkeleton", _descriptor, _assertThisInitialized(_this));

          _this.posOriginal = void 0;
          return _this;
        }

        var _proto = SbLoadingUI.prototype;

        _proto.onLoad = function onLoad() {
          if (this.loadingSkeleton != null) this.posOriginal = this.loadingSkeleton.node.position;
          this.node.active = false;
          var widget = this.getComponent(Widget);

          if (widget !== null && widget !== undefined) {
            widget.target = director.getScene();
          }
        };

        _proto.show = function show(noDelay) {
          if (noDelay === void 0) {
            noDelay = false;
          }

          if (this.loadingSkeleton != null) {
            this.loadingSkeleton.node.position = this.posOriginal;
            this.loadingSkeleton.setAnimation(0, "loading_smallchip", true);
          }

          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 0;
          var timeDelay = 0.3;

          if (noDelay) {
            timeDelay = 0;
          }

          tween(this.node.getComponent(UIOpacity)).delay(timeDelay).to(0.1, {
            opacity: 180
          }).start(); // var date = new Date();

          this.startTime = 0; //date.getTime();
        };

        _proto.showAtPositioin = function showAtPositioin(_position, canInteract) {
          if (canInteract === void 0) {
            canInteract = false;
          }

          if (this.loadingSkeleton != null) {
            this.loadingSkeleton.node.position = _position;
            this.loadingSkeleton.setAnimation(0, "loading_smallchip", true);
          }

          this.node.getComponent(Button).enabled = !canInteract;
          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 0;
          tween(this.node.getComponent(UIOpacity)).delay(0.1).to(0.1, {
            opacity: 180
          }).start(); // var date = new Date();

          this.startTime = 0; //date.getTime();
        };

        _proto.hide = function hide() {
          this.node.active = false;
          Tween.stopAllByTarget(this.node);
        };

        _proto.onClick = function onClick() {};

        _proto.update = function update(dt) {
          this.startTime += dt; // cc.log(this.startTime);
        };

        return SbLoadingUI;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadingSkeleton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLocalizationComp.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b3d48cWl3ZBCZQ1JzPc47uI", "SbLocalizationComp", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLocalizationComp = exports('default', (_dec = ccclass('SbLocalizationComp'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLocalizationComp, _Component);

        function SbLocalizationComp() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "keyName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "suffixes", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isContainNewLine", _descriptor3, _assertThisInitialized(_this));

          _this.label = null;
          return _this;
        }

        var _proto = SbLocalizationComp.prototype;

        _proto.start = function start() {
          this.label = this.node.getComponent(Label);

          if (this.label !== null) {
            this.label.string = SbLocalizationManager.getInstance().GetKeyValue(this.keyName, this.isContainNewLine);

            if (this.suffixes !== "") {
              this.label.string += this.suffixes;
            }
          }
        };

        return SbLocalizationComp;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "keyName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "suffixes", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isContainNewLine", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLocalizationManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, TextAsset, game, Component, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      TextAsset = module.TextAsset;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "ee6f3kmAJ5JWKvLkXNmXGuV", "SbLocalizationManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbLocalizationManager = exports('default', (_dec = ccclass('SbLocalizationManager'), _dec2 = property(TextAsset), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLocalizationManager, _Component);

        function SbLocalizationManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "text", _descriptor, _assertThisInitialized(_this));

          _this.arrayText = [[]];
          return _this;
        }

        SbLocalizationManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbLocalizationManager();
          }

          return this.Instance;
        };

        var _proto = SbLocalizationManager.prototype;

        _proto.onLoad = function onLoad() {
          SbLocalizationManager.Instance = this;
          game.addPersistRootNode(this.node);
          this.arrayText = this.CSVToArray(this.text.text, ","); // cc.log(this.arrayText);
        };

        _proto.Clean = function Clean() {
          if (this.node != null) {
            game.removePersistRootNode(this.node);
            this.node.removeFromParent();
          }
        } // This will parse a delimited string into an array of
        // arrays. The default delimiter is the comma, but this
        // can be overriden in the second argument.
        ;

        _proto.CSVToArray = function CSVToArray(strData, strDelimiter) {
          // Check to see if the delimiter is defined. If not,
          // then default to comma.
          strDelimiter = strDelimiter || ","; // Create a regular expression to parse the CSV values.

          var objPattern = new RegExp( // Delimiters.
          "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" + // Quoted fields.
          "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" + // Standard fields.
          "([^\"\\" + strDelimiter + "\\r\\n]*))", "gi"); // Create an array to hold our data. Give the array
          // a default empty first row.

          var arrData = [[]]; // Create an array to hold our individual pattern
          // matching groups.

          var arrMatches = null; // Keep looping over the regular expression matches
          // until we can no longer find a match.

          while (arrMatches = objPattern.exec(strData)) {
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[1]; // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.

            if (strMatchedDelimiter.length && strMatchedDelimiter != strDelimiter) {
              // Since we have reached a new row of data,
              // add an empty row to our data array.
              arrData.push([]);
            } // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).


            if (arrMatches[2]) {
              // We found a quoted value. When we capture
              // this value, unescape any double quotes.
              var strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
            } else {
              // We found a non-quoted value.
              var strMatchedValue = arrMatches[3];
            } // Now that we have our value string, let's add
            // it to the data array.


            arrData[arrData.length - 1].push(strMatchedValue);
          } // Return the parsed data.


          return arrData;
        };

        _proto.GetKeyValue = function GetKeyValue(keyName, isContainNewLine) {
          for (var i = 0; i < this.arrayText.length; i++) {
            if (this.arrayText[i][0] === keyName) {
              var str = this.arrayText[i][SbConfigManager.getInstance().GetSkinCurrent() + 3];
              str = str.replace(/\\n/g, "\n");
              return str;
            }
          }

          return "";
        };

        return SbLocalizationManager;
      }(Component), _class3.Instance = null, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbLoginScene.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbCommonPrefabsManager.ts', './SbGameHTTPManager.ts', './SbConfigManager.ts', './SbBase64.ts', './SbStringUtil.ts', './SbPrefabsManager.ts', './SbSoundsManager.ts', './SbLocalizationManager.ts', './SbPopup1Button.ts', './SbBridge.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, EditBox, Sprite, SpriteFrame, sys, error, log, director, Vec3, Component, SbUserInfo, SbCommonPrefabsManager, SbGameHTTPManager, SbConfigManager, SbSkinID, SbBase64, SbStringUtil, SbPrefabsManager, SbSoundsManager, SbLocalizationManager, SbPopup1Button, SbBridge;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      sys = module.sys;
      error = module.error;
      log = module.log;
      director = module.director;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbBase64 = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbPrefabsManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbPopup1Button = module.default;
    }, function (module) {
      SbBridge = module.SbBridge;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "d3e4atvVqlFM6aYp1gl4BQu", "SbLoginScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_PROFILER = "key_sdjfbhskdjfnng==";
      var IS_DEBUG = exports('IS_DEBUG', false);
      var SbLoginScene = exports('default', (_dec = ccclass('SbLoginScene'), _dec2 = property(EditBox), _dec3 = property(SbPopup1Button), _dec4 = property(Sprite), _dec5 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbLoginScene, _Component);

        function SbLoginScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "editboxLogin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popup1Button", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isGetTokenInLocalStorage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "keyTokenNameInLocalStorage", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "keyTokenNameInLocalStorageSkin2", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tokenDefault", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listBg", _descriptor8, _assertThisInitialized(_this));

          _this.needGetProfiler = true;
          _this.count = 0;
          _this.countDone = 4;
          _this.timeMinLoading = 2;
          _this.keyTokenName = "user_token";
          _this.isUseLoadingFullScreen = false;
          return _this;
        }

        var _proto = SbLoginScene.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = /*#__PURE__*/function () {
          var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var _this2 = this;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  SbBridge.HandleEventForceLogOut();
                  SbCommonPrefabsManager.getInstance().node.parent = this.node;
                  SbCommonPrefabsManager.getInstance().node.setPosition(0, 0);
                  if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().ShowLoadingFullScreen();

                  if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
                    this.keyTokenName = this.keyTokenNameInLocalStorageSkin2;
                  } else {
                    this.keyTokenName = this.keyTokenNameInLocalStorage;
                  }

                  SbPrefabsManager.getInstance().preloadPrefabs(this.onPreloadDone.bind(this));
                  SbSoundsManager.getInstance().preloadSounds(this.onPreloadDone.bind(this));
                  this.schedule(this.onTimeMinLoadingDone, this.timeMinLoading);
                  {
                    SbGameHTTPManager.getInstance().init(function () {
                      //on api access token available
                      _this2.getProfiler();
                    }, function () {
                      //get api error
                      _this2.onGetProfilerError(function () {
                        SbGameHTTPManager.getInstance().requestNewAccessToken(true);
                      });
                    }, SbCommonPrefabsManager.getInstance());
                  }
                  this.bg.spriteFrame = this.listBg[SbStringUtil.getRandomInt(this.listBg.length)];

                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function start() {
            return _start.apply(this, arguments);
          }

          return start;
        }();

        _proto.onLoginClick = function onLoginClick() {
          if (this.editboxLogin.string.length > 0) this.loginWithToken(this.editboxLogin.string);else SbCommonPrefabsManager.getInstance().ShowMessage("Vui lòng nhập token");
        };

        _proto.autoLogin = function autoLogin() {
          if (this.isGetTokenInLocalStorage) {
            if (this.keyTokenName.length > 0) {
              var token = sys.localStorage.getItem(this.keyTokenName);

              if (token == null || token == undefined) {
                error("Không tìm thấy token");
                if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
                return;
              }

              this.loginWithToken(token);
            } else {
              error("Key Token không được để trống");
              if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
            }
          } else {
            var _token = SbBridge.getUserToken();

            if (_token == null || _token == undefined) {
              error("token not found :(");
              if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
              return;
            }

            this.loginWithToken(_token);
          }
        };

        _proto.loginWithToken = function loginWithToken(token) {
          var _this3 = this;

          log("loginWithToken " + token);
          SbUserInfo.getInstance().SetUserToken(token); //=======================

          var url = SbConfigManager.getInstance().urlAPIGetUserInfo + "?token=" + token;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            // //success
            log("login success", JSON.stringify(obj));

            if (obj == null) {
              if (_this3.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();

              _this3.showPopup1Button("Thông Báo", "Không tìm thấy người chơi!", function () {
                _this3.changeToLobbyScene();
              });

              return;
            }

            _this3.onLoginSuccess(obj);
          }, function (obj) {
            log("erorr" + JSON.stringify(obj));
            if (_this3.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();

            _this3.showPopup1Button("THÔNG BÁO", "Xác thực tài khoản thất bại!", function () {
              _this3.changeToLobbyScene();
            });
          }, true);
        };

        _proto.onLoginSuccess = function onLoginSuccess(obj) {
          SbUserInfo.getInstance().InitData(obj);
          this.onPreloadDone();
        };

        _proto.changeToHomeScene = function changeToHomeScene() {
          if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
          director.preloadScene("SbMainScene", function () {
            SbCommonPrefabsManager.getInstance().node.parent = null;
            director.loadScene("SbMainScene");
          });
        };

        _proto.showPopup1Button = function showPopup1Button(title, mess, callback) {
          if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
            this.showPopup1ButtonMethod2(title, mess, callback);
            return;
          }

          this.popup1Button.node.setPosition(new Vec3(0, 0)); // this.popup1Button.node.zIndex = 31;

          this.popup1Button.setTitle(title);
          this.popup1Button.setContent(mess);
          this.popup1Button.setHideCallback(callback);
          this.popup1Button.show();
        };

        _proto.showPopup1ButtonMethod2 = function showPopup1ButtonMethod2(title, mess, callback) {
          this.popup1Button.node.setPosition(new Vec3(0, 0)); // this.popup1Button.node.zIndex = 31;

          this.popup1Button.setTitle(title);
          this.popup1Button.setContent(mess);
          var btnOK = this.popup1Button.node.getChildByName('Board').getChildByName('ButtonOK');
          btnOK.on('click', callback, this);
          this.popup1Button.show();
        };

        _proto.getProfiler = function getProfiler() {
          var _this4 = this; //KEY_PROFILER


          var profiler = sys.localStorage.getItem(KEY_PROFILER);

          if (!SbStringUtil.isNullOrEmpty(profiler)) {
            SbConfigManager.getInstance().urlSetting = profiler;
          }

          SbGameHTTPManager.getInstance().sendGetHttpRequest(SbConfigManager.getInstance().urlSetting, function (obj) {
            _this4.onGetProfilerSuccess(obj);
          }, function (errMess) {
            log("error mes: " + errMess);

            _this4.onGetProfilerError(_this4.getProfiler.bind(_this4));
          }, true);
        };

        _proto.onGetProfilerSuccess = function onGetProfilerSuccess(obj) {
          SbConfigManager.getInstance().init(obj);
          this.autoLogin();
        };

        _proto.onGetProfilerError = function onGetProfilerError(cbSuccess) {
          var _this5 = this;

          if (this.needGetProfiler) {
            this.needGetProfiler = false;
            SbGameHTTPManager.getInstance().sendGetHttpRequestNoParseResponseToJson(SbConfigManager.getInstance().GetUrlGitHub(), function (resp) {
              log("onGetProfilerError resp: " + resp);

              if (SbBase64.isBase64(resp)) {
                resp = SbBase64.decode(resp);
              }

              try {
                resp = JSON.parse(resp);

                if (resp["urlSetting"] === undefined && resp["urlAPIGetAccessToken"] === undefined) {
                  //return to lobby
                  _this5.onGetProfilerErrorMess();
                } else {
                  if (resp["urlSetting"] != undefined) {
                    sys.localStorage.setItem(KEY_PROFILER, resp["urlSetting"] + SbConfigManager.getInstance().GetAgentID());
                  }

                  if (resp["urlAPIGetAccessToken"] != undefined) {
                    SbConfigManager.getInstance().urlAPIGetAccessToken = resp["urlAPIGetAccessToken"];
                  }

                  if (cbSuccess !== null) cbSuccess();
                }
              } catch (e) {
                //data fake -> return to lobby
                _this5.onGetProfilerErrorMess();
              }
            }, function (mes) {
              log("error mes: " + mes); //return to lobby

              _this5.onGetProfilerErrorMess();
            }, false);
          } else {
            //return to lobby
            this.onGetProfilerErrorMess();
          }
        };

        _proto.onGetProfilerErrorMess = function onGetProfilerErrorMess() {
          var _this6 = this;

          if (this.isUseLoadingFullScreen) SbCommonPrefabsManager.getInstance().HideLoadingFullScreen();
          this.showPopup1Button("Thông Báo", "Không thể kết nối tới máy chủ!", function () {
            _this6.changeToLobbyScene();
          });
        };

        _proto.changeToLobbyScene = function changeToLobbyScene() {
          if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
            this.clean(); // @ts-ignore

            if (typeof closeCreatorGame === 'function') {
              // @ts-ignore
              closeCreatorGame();
            }
          } else {
            // director.preloadScene(SbConfigManager.getInstance().sceneHomeName, function () {
            //     this.clean();
            //     director.loadScene(SbConfigManager.getInstance().sceneHomeName);
            // }.bind(this));
            this.clean();
            SbBridge.BackToGame();
          }
        };

        _proto.onPreloadDone = function onPreloadDone() {
          this.count++;

          if (this.count === this.countDone) {
            this.changeToHomeScene();
          }
        };

        _proto.onTimeMinLoadingDone = function onTimeMinLoadingDone() {
          this.unschedule(this.onTimeMinLoadingDone);
          this.onPreloadDone();
        };

        _proto.clean = function clean() {
          SbCommonPrefabsManager.getInstance().Clean();
          SbGameHTTPManager.getInstance().Clean();
          SbConfigManager.getInstance().Clean();
          SbPrefabsManager.getInstance().Clean();
          SbSoundsManager.getInstance().Clean();
          SbLocalizationManager.getInstance().Clean();
        };

        return SbLoginScene;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editboxLogin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popup1Button", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isGetTokenInLocalStorage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "keyTokenNameInLocalStorage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "key_token";
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "keyTokenNameInLocalStorageSkin2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "key_token";
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "tokenDefault", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "1-f8f7ed546ca0b48b293ed38f28df884b";
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbLocalizationManager.ts', './SbNodePoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Prefab, UIOpacity, error, Widget, UITransform, Layout, Size, tween, Component, SbOddsType, SbLocalizationManager, SbNodePoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Prefab = module.Prefab;
      UIOpacity = module.UIOpacity;
      error = module.error;
      Widget = module.Widget;
      UITransform = module.UITransform;
      Layout = module.Layout;
      Size = module.Size;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "d7ea5ZWk8dJz4/efImAa5pS", "SbMarket", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var IS_SKIP_ODDS_NOT_MAINLINE = exports('IS_SKIP_ODDS_NOT_MAINLINE', false);
      var MAX_SIZE_HEIGHT_MATCH = 245;
      var MAX_SIZE_HEIGHT_MATCH_DETAILS = 428;
      var TITLE_HEIGHT = 40;
      var SbMarketId = exports('SbMarketId', /*#__PURE__*/function (SbMarketId) {
        SbMarketId[SbMarketId["None"] = 0] = "None";
        SbMarketId[SbMarketId["Market1X2FT"] = 1] = "Market1X2FT";
        SbMarketId[SbMarketId["Market1X2HT"] = 2] = "Market1X2HT";
        SbMarketId[SbMarketId["OverUnderFT"] = 3] = "OverUnderFT";
        SbMarketId[SbMarketId["OverUnderHT"] = 4] = "OverUnderHT";
        SbMarketId[SbMarketId["AsianHandicapFT"] = 5] = "AsianHandicapFT";
        SbMarketId[SbMarketId["AsianHandicapHT"] = 6] = "AsianHandicapHT";
        SbMarketId[SbMarketId["NextGoal"] = 7] = "NextGoal";
        SbMarketId[SbMarketId["OddOrEvenFT"] = 8] = "OddOrEvenFT";
        SbMarketId[SbMarketId["OddOrEvenHT"] = 9] = "OddOrEvenHT";
        SbMarketId[SbMarketId["CorrectScoreFT"] = 10] = "CorrectScoreFT";
        SbMarketId[SbMarketId["CorrectScoreHT"] = 11] = "CorrectScoreHT";
        SbMarketId[SbMarketId["DoubleChanceFT"] = 12] = "DoubleChanceFT";
        SbMarketId[SbMarketId["DoubleChanceHT"] = 13] = "DoubleChanceHT";
        SbMarketId[SbMarketId["TotalScoreFT"] = 14] = "TotalScoreFT";
        SbMarketId[SbMarketId["TotalScoreHT"] = 15] = "TotalScoreHT";
        SbMarketId[SbMarketId["DrawNoBetFT"] = 16] = "DrawNoBetFT";
        SbMarketId[SbMarketId["Corner1X2FT"] = 17] = "Corner1X2FT";
        SbMarketId[SbMarketId["Corner1X2HT"] = 18] = "Corner1X2HT";
        SbMarketId[SbMarketId["CornerHandicapFT"] = 19] = "CornerHandicapFT";
        SbMarketId[SbMarketId["CornerHandicapHT"] = 20] = "CornerHandicapHT";
        SbMarketId[SbMarketId["CornerOverUnderFT"] = 21] = "CornerOverUnderFT";
        SbMarketId[SbMarketId["CornerOverUnderHT"] = 22] = "CornerOverUnderHT";
        SbMarketId[SbMarketId["Market1X2ExtraFT"] = 23] = "Market1X2ExtraFT";
        SbMarketId[SbMarketId["Market1X2ExtraHT"] = 24] = "Market1X2ExtraHT";
        SbMarketId[SbMarketId["OverUnderExtraFT"] = 25] = "OverUnderExtraFT";
        SbMarketId[SbMarketId["OverUnderExtraHT"] = 26] = "OverUnderExtraHT";
        SbMarketId[SbMarketId["AsianHandicapExtraFT"] = 27] = "AsianHandicapExtraFT";
        SbMarketId[SbMarketId["AsianHandicapExtraHT"] = 28] = "AsianHandicapExtraHT";
        SbMarketId[SbMarketId["Booking1X2FT"] = 29] = "Booking1X2FT";
        SbMarketId[SbMarketId["Booking1X2HT"] = 30] = "Booking1X2HT";
        SbMarketId[SbMarketId["BookingOverUnderFT"] = 31] = "BookingOverUnderFT";
        SbMarketId[SbMarketId["BookingOverUnderHT"] = 32] = "BookingOverUnderHT";
        SbMarketId[SbMarketId["BookingAsianHandicapFT"] = 33] = "BookingAsianHandicapFT";
        SbMarketId[SbMarketId["BookingAsianHandicapHT"] = 34] = "BookingAsianHandicapHT";
        return SbMarketId;
      }({}));
      var SbMarketStatus = exports('SbMarketStatus', /*#__PURE__*/function (SbMarketStatus) {
        SbMarketStatus[SbMarketStatus["Undefined"] = 0] = "Undefined";
        SbMarketStatus[SbMarketStatus["Active"] = 1] = "Active";
        SbMarketStatus[SbMarketStatus["Suspended"] = 2] = "Suspended";
        SbMarketStatus[SbMarketStatus["Hidden"] = 3] = "Hidden";
        return SbMarketStatus;
      }({}));
      var SbMarketGroupID = exports('SbMarketGroupID', /*#__PURE__*/function (SbMarketGroupID) {
        SbMarketGroupID[SbMarketGroupID["MainGroup"] = 1] = "MainGroup";
        SbMarketGroupID[SbMarketGroupID["FullTimeGroup"] = 2] = "FullTimeGroup";
        SbMarketGroupID[SbMarketGroupID["HalfTimeGroup"] = 3] = "HalfTimeGroup";
        SbMarketGroupID[SbMarketGroupID["CornerGroup"] = 4] = "CornerGroup";
        SbMarketGroupID[SbMarketGroupID["OtherGroup"] = 7] = "OtherGroup";
        SbMarketGroupID[SbMarketGroupID["ExtraGroup"] = 8] = "ExtraGroup";
        SbMarketGroupID[SbMarketGroupID["CardGroup"] = 9] = "CardGroup";
        return SbMarketGroupID;
      }({})); //kèo thẻ

      var SbMarketData = exports('SbMarketData', function SbMarketData() {
        this.marketName = "";
        this.marketId = -1;
        this.marketStatus = SbMarketStatus.Undefined;
        this.promotion = 0; //prt

        this.isParlay = false;
      } //cược xiên
      );
      var SbMarket = exports('default', (_dec = ccclass('SbMarket'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Prefab), _dec7 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMarket, _Component);

        function SbMarket() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "oddsParent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listOddsParentSecondary", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLock", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabOdds", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabBreakLine", _descriptor6, _assertThisInitialized(_this));

          _this.listOdds = [];
          _this.listBreakLine = [];
          _this.layoutHeight = 0;
          _this.marginBottom = 0;
          _this.matchData = null;
          _this.leagueData = null;
          _this.marketData = new SbMarketData();
          _this.isShowAllOdds = true; // hiển thị tất cả odds hay chỉ hiển 1 cặp thôi

          _this.sbFootballBettingController = null;
          return _this;
        }

        var _proto = SbMarket.prototype;

        _proto.init = function init(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        } // onLoad () {}
        ;

        _proto.start = function start() {};

        _proto.SetMatchData = function SetMatchData(data) {
          this.matchData = data;
        };

        _proto.SetLeagueData = function SetLeagueData(data) {
          this.leagueData = data;
        };

        _proto.GetMarketID = function GetMarketID() {
          return this.marketData.marketId;
        };

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          if (this.lbTitle != null) this.lbTitle.string = SbMarket.ConvertMaketIdToNameVietnamese(data.mi);
          this.marketData.marketId = data.mi;
          this.marketData.marketName = data.mn;
          if (data.hasOwnProperty("prt")) this.marketData.promotion = data.prt;
          if (data.hasOwnProperty("ip")) this.marketData.isParlay = data.ip;
          this.marketData.marketStatus = this.convertDataToStatus(data, isFirstTimeInit); // this.updateMarketStatus(Number(data.status));
        };

        _proto.SetDisplayAllOdds = function SetDisplayAllOdds(value) {
          this.isShowAllOdds = value;
        };

        _proto.RemoveAllOdds = function RemoveAllOdds() {
          // for (let i = 0; i < this.listOdds.length; i += 2) {
          //     this.removeBreakLine();
          // }
          this.removeBreakLine();
          this.listBreakLine = []; // for (let i = this.listOdds.length - 1; i >= 0; i--) {
          //     this.listOdds[i].RemoveAllAnimOddChange();
          //     this.putOddIntoPool(this.listOdds[i].node, this.GetMarketID());
          // }

          SbNodePoolManager.clearItemComp(this.listOdds);
          this.listOdds = [];
        };

        _proto.SetMarginBottom = function SetMarginBottom(vl) {
          this.marginBottom = vl;
          this.updateLayout();
        };

        _proto.SetMarketStatus = function SetMarketStatus(st) {
          this.updateMarketStatus(st);
        };

        _proto.GetContentSizeHeight = function GetContentSizeHeight() {
          return this.layoutHeight;
        };

        _proto.HasMarket = function HasMarket(data) {
          if (this.marketData.marketId == data.marketId) return true;
          return false;
        };

        _proto.HasDomainMarket = function HasDomainMarket(data) {
          if (this.marketData.marketId == data.domainMarketId) return true;
          return false;
        };

        _proto.CheckRemoveOddsOld = function CheckRemoveOddsOld(listOddsNew) {
          var isRemoved = false;

          for (var i = this.listOdds.length - 1; i >= 0; i--) {
            var needRemove = true;

            for (var j = 0; j < listOddsNew.length; j++) {
              if (this.listOdds[i].HasOdds(listOddsNew[j])) {
                needRemove = false;
                break;
              }
            }

            if (needRemove) {
              isRemoved = true;
              this.listOdds[i].RemoveAllAnimOddChange();
              SbNodePoolManager.clearItem([this.listOdds[i].node]); // this.listOdds[i].node = null;

              this.listOdds.splice(i, 1);
            }
          }

          if (isRemoved) this.updatePositionBreakLine();
        };

        _proto.NeedRemoveOdds = function NeedRemoveOdds(data) {
          var needInsertOdds = false;

          for (var i = this.listOdds.length - 1; i >= 0; i--) {
            if (this.listOdds[i].HasOdds(data) == false) {
              this.listOdds[i].RemoveAllAnimOddChange();
              SbNodePoolManager.clearItem([this.listOdds[i].node]);
              needInsertOdds = true;
            }
          }

          return needInsertOdds;
        };

        _proto.NeedInsertOdds = function NeedInsertOdds(data) {
          var needInsertOdds = true;

          for (var i = 0; i < this.listOdds.length; i++) {
            if (this.listOdds[i].HasOdds(data)) {
              needInsertOdds = false;
            }
          }

          return needInsertOdds;
        };

        _proto.OddsChange = function OddsChange(data) {
          // let needInsertOdds = true;
          for (var i = 0; i < this.listOdds.length; i++) {
            if (this.listOdds[i].HasOdds(data)) {
              this.listOdds[i].OddsChange(data); // // needInsertOdds = false;
            }
          } // if (needInsertOdds == true) {
          //     // this.node.runAction(cc.sequence(cc.delayTime(0.3),cc.callFunc(()=>{
          //     this.OddsInsert(SbOdds.ChangeFeildNameShort(data.odds));
          //     // })));
          // }


          this.updateLayout();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          this.updateLayout();
        };

        _proto.OddsRemove = function OddsRemove(data) {
          var listRemove = [];
          var odds = data.odds;

          for (var i = 0; i < this.listOdds.length; i++) {
            var oddsData = this.listOdds[i].GetOddsData();
            var oddType = this.listOdds[i].GetOddsType();

            if (oddsData.offerId.localeCompare(String(odds.strOfferId)) == 0) {
              if (oddsData.hasOwnProperty("selectionHomeId") && oddType == SbOddsType.Home && oddsData.selectionHomeId == odds.selectionHomeId) listRemove.push(this.listOdds[i]);
              if (oddsData.hasOwnProperty("selectionAwayId") && oddType == SbOddsType.Away && oddsData.selectionAwayId == odds.selectionAwayId) listRemove.push(this.listOdds[i]);
              if (oddsData.hasOwnProperty("selectionDrawId") && oddType == SbOddsType.Draw && oddsData.selectionDrawId == odds.selectionDrawId) listRemove.push(this.listOdds[i]);
            }
          }

          this.removeBreakLine();

          for (var _i = 0; _i < listRemove.length; _i++) {
            listRemove[_i].RemoveAllAnimOddChange();
          }

          SbNodePoolManager.clearItemComp(listRemove);
          this.updateLayout();
        };

        _proto.MarketChange = function MarketChange(data) {
          this.node.getComponent(UIOpacity).opacity = 255;
          this.updateMarketStatus(data.status);
          this.updateLayout();
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          for (var i = 0; i < this.listOdds.length; i++) {
            if (this.listOdds[i] != null && this.listOdds[i] != undefined) {
              this.listOdds[i].ChangeOddsStyle();
            }
          }
        };

        _proto.SetMarketCorrectExtra = function SetMarketCorrectExtra(marketExtra, scrollViewBetDetails) {};

        _proto.GetOddsLength = function GetOddsLength() {
          return this.listOdds.length;
        } // SetLayoutHeight(height) {
        //     this.node.setContentSize(new cc.Size(this.node.getContentSize().width, height));
        //     this.node.position = new cc.Vec2(this.node.position.x, 0);
        //     let widget = this.node.getComponent(cc.Widget);
        //     if (widget != null && widget != undefined) {
        //         widget.top = 0;
        //         widget.bottom = height;
        //         widget.updateAlignment();
        //     }
        //     let widgetLock = this.nodeLock.getComponent(cc.Widget);
        //     if (widgetLock != null && widgetLock != undefined) {
        //         widgetLock.top = 0;
        //         widgetLock.bottom = height;
        //         widgetLock.updateAlignment();
        //     }
        // }
        ;

        _proto.convertDataToStatus = function convertDataToStatus(data, isFirstTimeInit) {
          var status = SbMarketStatus.Active;

          if (isFirstTimeInit && data.hasOwnProperty("s")) {
            var vl = String(data.s);
            if (vl.localeCompare("true") == 0) //suppened
              status = SbMarketStatus.Suspended;
          } else {
            if (data.hasOwnProperty("status")) {
              status = Number(data.status);
            }
          }

          return status;
        };

        _proto.updateMarketStatus = function updateMarketStatus(status) {
          this.marketData.marketStatus = status;

          if (status == SbMarketStatus.Active) {
            this.setActiveMarket();
            this.setOddsEnable(true);
            this.node.getComponent(UIOpacity).opacity = 255;
          } else if (status == SbMarketStatus.Suspended) {
            this.setOddsEnable(true);
            this.setSuspendedMarket();
            this.node.getComponent(UIOpacity).opacity = 255;
          } else if (status == SbMarketStatus.Hidden) {
            this.node.getComponent(UIOpacity).opacity = 255;
            this.removeAllOdds();
          } else {
            error("updateMarketStatus fail: " + status);
          }
        };

        _proto.removeAllOdds = function removeAllOdds() {
          // for (let i = 0; i < this.listOdds.length; i++) {
          //     this.listOdds[i].node.removeFromParent();
          // }
          SbNodePoolManager.clearItemComp(this.listOdds); // for (let i = 0; i < this.listBreakLine.length; i++) {
          //     this.listBreakLine[i].removeFromParent();
          // }

          SbNodePoolManager.clearItem(this.listBreakLine);
          this.listOdds = [];
          this.listBreakLine = [];
          this.setActiveMarket();

          for (var i = 0; i < this.matchData.markets.length; i++) {
            if (this.matchData.markets[i].hasOwnProperty("mi") && this.matchData.markets[i].hasOwnProperty("o")) {
              if (this.matchData.markets[i].mi == this.marketData.marketId) {
                this.matchData.markets[i].o = [];
                break;
              }
            }
          }
        };

        _proto.addBreakLine = function addBreakLine() {
          var breakLine = SbNodePoolManager.createItemFromPrefab(this.prefabBreakLine);
          breakLine.parent = this.oddsParent;
          this.listBreakLine.push(breakLine);
        };

        _proto.removeBreakLine = function removeBreakLine() {
          // if (this.listBreakLine.length - 1 >= 0)
          //     this.listBreakLine[this.listBreakLine.length - 1].removeFromParent();
          SbNodePoolManager.clearItem(this.listBreakLine);
          this.listBreakLine = [];
        };

        _proto.setSuspendedMarket = function setSuspendedMarket() {
          this.nodeLock.active = true;
          var listChild = this.nodeLock.children;

          for (var i = 0; i < listChild.length; i++) {
            var aa = listChild[i].getComponent(Widget);
            if (aa != null && aa != undefined) aa.updateAlignment();
          }
        };

        _proto.setActiveMarket = function setActiveMarket() {
          this.nodeLock.active = false;
        };

        _proto.setOddsEnable = function setOddsEnable(value) {
          for (var i = 0; i < this.listOdds.length; i++) {
            this.listOdds[i].SetOddsEnable(value);
          }
        };

        _proto.setInfoDetail = function setInfoDetail(odds) {
          odds.init(this.sbFootballBettingController);
          odds.SetLeagueData(this.leagueData);
          odds.SetMatchData(this.matchData);
          odds.SetMarketData(this.marketData);
        };

        _proto.updateLayout = function updateLayout() {
          var widget = this.node.getComponent(Widget);
          var listWidget = this.node.getComponentsInChildren(Widget);

          for (var i = 0; i < listWidget.length; i++) if (listWidget[i] != null && listWidget[i] != undefined) {
            listWidget[i].updateAlignment();
          } //caculator layout size


          this.layoutHeight = TITLE_HEIGHT;
          var listChildOfParent = this.oddsParent.children;

          for (var _i2 = 0; _i2 < listChildOfParent.length; _i2++) {
            var h = listChildOfParent[_i2].getComponent(UITransform).height;

            this.layoutHeight += h;

            var aa = listChildOfParent[_i2].getComponent(Widget);

            if (aa != null && aa != undefined) aa.updateAlignment();
          }

          var lay = this.oddsParent.getComponent(Layout);
          this.layoutHeight += lay.spacingY * (listChildOfParent.length + 1);

          if (this.isShowAllOdds) {
            if (this.layoutHeight > MAX_SIZE_HEIGHT_MATCH_DETAILS) this.layoutHeight = MAX_SIZE_HEIGHT_MATCH_DETAILS;
          } else {
            if (this.layoutHeight < MAX_SIZE_HEIGHT_MATCH) this.layoutHeight = MAX_SIZE_HEIGHT_MATCH;
          }

          this.node.getComponent(UITransform).setContentSize(new Size(this.node.getComponent(UITransform).width, this.layoutHeight));
          this.node.setPosition(this.node.position.x, 0);

          if (widget != null && widget != undefined) {
            widget.top = 0;
            widget.bottom = this.marginBottom;
            widget.updateAlignment();
          }

          this.updatePositionBreakLine();
        };

        _proto.updatePositionBreakLine = function updatePositionBreakLine() {
          for (var i = 0; i < this.listBreakLine.length; i++) {
            this.listBreakLine[i].setSiblingIndex(this.listOdds.length + this.listBreakLine.length);
          }

          if (this.listBreakLine.length > 0) {
            for (var _i3 = 0; _i3 < this.listBreakLine.length; _i3++) {
              if (_i3 < this.listOdds.length / 2) {
                this.listBreakLine[_i3].active = true;

                this.listBreakLine[_i3].setSiblingIndex(2 + _i3 * 3);
              }
            }

            var aa = (this.listOdds.length - 2) / 2;
            var listRemove = [];

            for (var _i4 = this.listBreakLine.length - 1; _i4 >= aa; _i4--) {
              listRemove.push(this.listBreakLine[_i4]);
              this.listBreakLine.splice(_i4, 1);
            } // for (let i = 0; i < listRemove.length; i++) {
            //     if (listRemove[i] != undefined && listRemove[i] != null)
            //         listRemove[i].removeFromParent();
            // }


            SbNodePoolManager.clearItem(listRemove);
          }
        };

        _proto.updateLayoutMarketSecondary = function updateLayoutMarketSecondary() {
          var parentHeight = 0;
          var spacingY = 0;
          var padingTop = 32;
          var titleMarket = 70;

          for (var j = 0; j < this.listOddsParentSecondary.length; j++) {
            var height = 0;
            var spaceY = 0;
            var listChildOfParent = this.listOddsParentSecondary[j].children;

            for (var i = 1; i < listChildOfParent.length; i++) {
              var h = listChildOfParent[i].getComponent(UITransform).height;
              height += h;
            }

            var lay = this.listOddsParentSecondary[j].getComponent(Layout);
            spaceY += lay.spacingY * listChildOfParent.length;
            if (spaceY > spacingY) spacingY = spaceY;
            if (height > parentHeight) parentHeight = height;
          }

          this.node.parent.getComponent(UITransform).setContentSize(new Size(this.node.parent.getComponent(UITransform).width, parentHeight + spacingY + padingTop + titleMarket));
        };

        _proto.delayUpdateLayout = function delayUpdateLayout() {
          var _this2 = this;

          var listWidget = this.node.getComponentsInChildren(Widget);

          for (var i = 0; i < listWidget.length; i++) listWidget[i].alignMode = Widget.AlignMode.ALWAYS;

          tween(this.node).delay(1).call(function () {
            for (var _i5 = 0; _i5 < listWidget.length; _i5++) listWidget[_i5].alignMode = Widget.AlignMode.ON_WINDOW_RESIZE;

            _this2.updateLayout();
          }).start();
        };

        _proto.addOdds = function addOdds(data, type) {};

        SbMarket.ConvertMaketIdToNameVietnamese = function ConvertMaketIdToNameVietnamese(id) {
          switch (id) {
            case SbMarketId.AsianHandicapFT:
              return "Kèo chấp";

            case SbMarketId.OverUnderFT:
              return "Tài Xỉu";

            case SbMarketId.Market1X2FT:
              return "1X2";

            case SbMarketId.AsianHandicapHT:
              return "Kèo chấp hiệp 1";

            case SbMarketId.OverUnderHT:
              return "Tài Xỉu hiệp 1";

            case SbMarketId.Market1X2HT:
              return "1X2 hiệp 1";

            case SbMarketId.NextGoal:
              return "Bàn thắng kế tiếp";

            case SbMarketId.OddOrEvenFT:
              return "Chẵn/Lẻ";

            case SbMarketId.OddOrEvenHT:
              return "Chẵn/Lẻ hiệp 1";

            case SbMarketId.CorrectScoreFT:
              return "Tỷ số chính xác";

            case SbMarketId.CorrectScoreHT:
              return "Tỷ số chính xác hiệp 1";

            case SbMarketId.DoubleChanceFT:
              return "Cơ hội nhân đôi";

            case SbMarketId.DoubleChanceHT:
              return "Cơ hội nhân đôi hiệp 1";

            case SbMarketId.TotalScoreFT:
              return "Tổng số bàn thắng";

            case SbMarketId.TotalScoreHT:
              return "Tổng số bàn thắng hiệp 1";

            case SbMarketId.DrawNoBetFT:
              return "Hòa được hoàn tiền";

            case SbMarketId.Corner1X2FT:
              return "Phạt góc 1X2";

            case SbMarketId.Corner1X2HT:
              return "Phạt góc 1X2 hiệp 1";

            case SbMarketId.CornerHandicapFT:
              return "Phạt góc kèo chấp";

            case SbMarketId.CornerHandicapHT:
              return "Phạt góc kèo chấp hiệp 1";

            case SbMarketId.CornerOverUnderFT:
              return "Phạt góc Tài/Xỉu";

            case SbMarketId.CornerOverUnderHT:
              return "Phạt góc Tài/Xỉu hiệp 1";

            case SbMarketId.AsianHandicapExtraFT:
              return "Kèo chấp hiệp phụ";

            case SbMarketId.OverUnderExtraFT:
              return "Tài Xỉu hiệp phụ";

            case SbMarketId.Market1X2ExtraFT:
              return "1X2 hiệp phụ";

            case SbMarketId.AsianHandicapExtraHT:
              return "Kèo chấp hiệp phụ 1";

            case SbMarketId.OverUnderExtraHT:
              return "Tài Xỉu hiệp phụ 1";

            case SbMarketId.Market1X2ExtraHT:
              return "1X2 hiệp phụ 1";

            case SbMarketId.Booking1X2FT:
              return "Thẻ 1X2";

            case SbMarketId.Booking1X2HT:
              return "Thẻ 1X2 hiệp 1";

            case SbMarketId.BookingOverUnderFT:
              return "Thẻ Tài/Xỉu";

            case SbMarketId.BookingOverUnderHT:
              return "Thẻ Tài/Xỉu hiệp 1";

            case SbMarketId.BookingAsianHandicapFT:
              return "Thẻ kèo chấp";

            case SbMarketId.BookingAsianHandicapHT:
              return "Thẻ kèo chấp hiệp 1";

            default:
              return "Kèo...";
          }
        };

        SbMarket.ConvertMarketNameShortToVietnamese = function ConvertMarketNameShortToVietnamese(marketNameShort) {
          if (marketNameShort.localeCompare("1X2 FT") == 0) return "1X2";else if (marketNameShort.localeCompare("1X2 HT") == 0) return "1X2";else if (marketNameShort.localeCompare("OU FT") == 0) return "Tài/Xỉu";else if (marketNameShort.localeCompare("OU HT") == 0) return "Tài/Xỉu";else if (marketNameShort.localeCompare("AH FT") == 0) return "Kèo Chấp";else if (marketNameShort.localeCompare("AH HT") == 0) return "Kèo Chấp";else if (marketNameShort.localeCompare("Next Goal") == 0) return "Bàn Thắng Kế";else if (marketNameShort.localeCompare("OE PT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("OE HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("CS HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("CS HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("DC HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("DC HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("TS HT") == 0) return marketNameShort;else if (marketNameShort.localeCompare("TS HT") == 0) return marketNameShort;
          return marketNameShort;
        };

        SbMarket.IsMarketBooking = function IsMarketBooking(marketId) {
          return marketId == SbMarketId.Booking1X2FT || marketId == SbMarketId.Booking1X2HT || marketId == SbMarketId.BookingAsianHandicapFT || marketId == SbMarketId.BookingAsianHandicapHT || marketId == SbMarketId.BookingOverUnderFT || marketId == SbMarketId.BookingOverUnderHT;
        };

        SbMarket.IsMarketCorner = function IsMarketCorner(marketId) {
          return marketId == SbMarketId.Corner1X2FT || marketId == SbMarketId.Corner1X2HT || marketId == SbMarketId.CornerHandicapFT || marketId == SbMarketId.CornerHandicapHT || marketId == SbMarketId.CornerOverUnderFT || marketId == SbMarketId.CornerOverUnderHT;
        };

        SbMarket.IsCornerMatch = function IsCornerMatch(matchName) {
          var idx = matchName.search("" + SbLocalizationManager.getInstance().GetKeyValue('corner_betting', false));
          return idx >= 0;
        };

        SbMarket.IsBookingMatch = function IsBookingMatch(matchName) {
          var idx = matchName.search("" + SbLocalizationManager.getInstance().GetKeyValue('booking_betting', false));
          return idx >= 0;
        };

        _proto.reset = function reset() {
          this.nodeLock.active = false;
          this.listOdds = [];
          this.listBreakLine = [];
          this.layoutHeight = 0;
          this.marginBottom = 0;
          this.matchData = null;
          this.leagueData = null;
          this.marketData = new SbMarketData();
          this.isShowAllOdds = true;

          for (var i = 0; i < this.listOddsParentSecondary.length; i++) {
            var item = this.listOddsParentSecondary[i];

            for (var j = item.children.length - 1; j > 0; j--) {
              SbNodePoolManager.clearItem([item.children[j]]);
            }
          }
        };

        return SbMarket;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "oddsParent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listOddsParentSecondary", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeLock", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "prefabOdds", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "prefabBreakLine", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarket1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbMarket.ts', './SbOdds.ts', './SbOdds1X2.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, SbOddsType, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOdds1X2, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOdds1X2 = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3b330sNrRRAv7G844Z1/wKp", "SbMarket1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarket1X2 = exports('default', (_dec = ccclass('SbMarket1X2'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarket1X2, _SbMarket);

        function SbMarket1X2() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarket1X2.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }

              if (i != listOdds.length - 1) {
                this.addBreakLine();
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            var status = 1;

            if (data.hasOwnProperty("status")) {
              status = Number(data.status);
            }

            if (data.hasOwnProperty("es")) {
              status = Number(data.es);
            }

            if (data.hasOwnProperty("s")) {
              if (data.s == true) status = 2; // else
              //     this.matchData.markets[i].s = true;
            } //suppened


            _this.updateMarketStatus(status);
          }).start(); // this.updateMarketStatus(this.marketData.marketStatus);

          this.updateLayout();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          if (this.listOdds.length >= 3) this.addBreakLine();
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOdds1X2);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type); // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
          item.node.parent = this.oddsParent;
        };

        return SbMarket1X2;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketAsianHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsAsianHandicap.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsAsianHandicap, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsAsianHandicap = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "71bb3HXkndPq6J+9EMPnsAr", "SbMarketAsianHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketAsianHandicap = exports('default', (_dec = ccclass('SbMarketAsianHandicap'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketAsianHandicap, _SbMarket);

        function SbMarketAsianHandicap() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketAsianHandicap.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              //ở Match ở mainUI chỉ hiển thị 1 cặp odds, vào UI details mới hiển thị full
              if (this.isShowAllOdds == false && this.listOdds.length >= 2) break;

              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (i != listOdds.length - 1) {
                this.addBreakLine();
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayout();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          // if (data.odds.hasOwnProperty("isMainLine") && data.odds.isMainLine == false && IS_SKIP_ODDS_NOT_MAINLINE) {
          //     return;
          // }
          if (this.isShowAllOdds == false && this.listOdds.length >= 2) return;
          if (this.listOdds.length >= 2) this.addBreakLine();
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsAsianHandicap);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          item.node.parent = this.oddsParent; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketAsianHandicap;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketBooking1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbGameUtil.ts', './SbOddsBooking1X2.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsType, SbOddsBooking1X2, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOddsBooking1X2 = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0846bXClWdBuoqQOckiFED3", "SbMarketBooking1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketBooking1X2 = exports('default', (_dec = ccclass('SbMarketBooking1X2'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketBooking1X2, _SbMarket);

        function SbMarketBooking1X2() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketBooking1X2.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          this.updateMarketStatus(this.marketData.marketStatus);
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsBooking1X2);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketBooking1X2;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketBookingHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbGameUtil.ts', './SbOddsBookingHandicap.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsType, SbOddsBookingHandicap, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOddsBookingHandicap = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0b430YZM3xHBLSJNZck3qzE", "SbMarketBookingHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketBookingHandicap = exports('default', (_dec = ccclass('SbMarketBookingHandicap'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketBookingHandicap, _SbMarket);

        function SbMarketBookingHandicap() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketBookingHandicap.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsBookingHandicap);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketBookingHandicap;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketBookingOverUnder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbGameUtil.ts', './SbOddsBookingOverUnder.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsType, SbOddsBookingOverUnder, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOddsBookingOverUnder = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8cd770Z92ZMmoPUXbVbfY+Q", "SbMarketBookingOverUnder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketBookingOverUnder = exports('default', (_dec = ccclass('SbMarketBookingOverUnder'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketBookingOverUnder, _SbMarket);

        function SbMarketBookingOverUnder() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketBookingOverUnder.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsBookingOverUnder);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketBookingOverUnder;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketCorner1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsCorner1X2.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsCorner1X2, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsCorner1X2 = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8a6f0A8UatM1JfwyIO7lbLZ", "SbMarketCorner1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketCorner1X2 = exports('default', (_dec = ccclass('SbMarketCorner1X2'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketCorner1X2, _SbMarket);

        function SbMarketCorner1X2() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketCorner1X2.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          this.updateMarketStatus(this.marketData.marketStatus);
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsCorner1X2);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketCorner1X2;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketCornerHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsCornerHandicap.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsCornerHandicap, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsCornerHandicap = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "36869b1zDFD3oRx7ANiOAfq", "SbMarketCornerHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketCornerHandicap = exports('default', (_dec = ccclass('SbMarketCornerHandicap'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketCornerHandicap, _SbMarket);

        function SbMarketCornerHandicap() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketCornerHandicap.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsCornerHandicap);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketCornerHandicap;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketCornerOverUnder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsCornerOverUnder.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsCornerOverUnder, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsCornerOverUnder = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bd711Vs0oFOoaSOanm0Ikv0", "SbMarketCornerOverUnder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketCornerOverUnder = exports('default', (_dec = ccclass('SbMarketCornerOverUnder'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketCornerOverUnder, _SbMarket);

        function SbMarketCornerOverUnder() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketCornerOverUnder.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsCornerOverUnder);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketCornerOverUnder;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketCorrectScore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsCorrectScore.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Button, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsCorrectScore, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Button = module.Button;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsCorrectScore = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "1feb08XMDRLPphR8ErNDYGG", "SbMarketCorrectScore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketCorrectScore = exports('default', (_dec = ccclass('SbMarketCorrectScore'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Button), _dec(_class = (_class2 = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketCorrectScore, _SbMarket);

        function SbMarketCorrectScore() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbMarket.call.apply(_SbMarket, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabContainerOddsCorrectScore", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabOddsEmpty", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonShowMoreScore", _descriptor3, _assertThisInitialized(_this));

          _this.listContainerOddsCorrectScore = [];
          _this.listDataOddsHome = [];
          _this.listDataOddsAway = [];
          _this.listDataOddsDraw = [];
          _this.marketCorrectScoreExtra = null;
          _this.scrollViewBetDetails = null;
          return _this;
        }

        var _proto = SbMarketCorrectScore.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this2 = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          this.marketCorrectScoreExtra.Clean();

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                var home = Number(listOdds[i].p[0]);
                var away = Number(listOdds[i].p[2]);
                if (home > away) this.listDataOddsHome.push(listOdds[i]);else if (home < away) this.listDataOddsAway.push(listOdds[i]);else this.listDataOddsDraw.push(listOdds[i]);
              }
            }

            this.listDataOddsHome.sort(function (a, b) {
              return a.p[0] + a.p[2] - (b.p[0] + b.p[2]);
            });
            this.listDataOddsAway.sort(function (a, b) {
              return a.p[0] + a.p[2] - (b.p[0] + b.p[2]);
            });
            this.listDataOddsDraw.sort(function (a, b) {
              return a.p[0] + a.p[2] - (b.p[0] + b.p[2]);
            });

            for (var _i = 0; _i < this.listDataOddsHome.length; _i++) {
              this.addOdds(this.listDataOddsHome[_i], SbOddsType.Home);
            }

            for (var _i2 = 0; _i2 < this.listDataOddsAway.length; _i2++) {
              this.addOdds(this.listDataOddsAway[_i2], SbOddsType.Away);
            }

            for (var _i3 = 0; _i3 < this.listDataOddsDraw.length; _i3++) {
              this.addOdds(this.listDataOddsDraw[_i3], SbOddsType.Draw);
            } // for (let j = 0; j < this.listDataOddsAway.length; j++) {
            //     let hasOdds = false;
            //     let scoreReverse: string = this.listDataOddsAway[j].p.split("").reverse().join("");
            //     for (let i = 0; i < this.listContainerOddsCorrectScore.length; i++) {
            //         if (this.listContainerOddsCorrectScore[i].HasScore(scoreReverse)) {
            //             hasOdds = true;
            //         }
            //     }
            //     if (hasOdds == false) {
            //         // this.addOddsAwayNoHome(this.listDataOddsAway[j]);
            //         this.addOdds(this.listDataOddsAway[j], SbOddsType.Away);
            //     }
            // }

          }

          tween(this.node).delay(0.2).call(function () {
            _this2.updateMarketStatus(_this2.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary(); // if (this.countList > 13) {
          //     this.buttonShowMoreScore.interactable = true;
          //     this.buttonShowMoreScore.node.getComponent(UIOpacity).opacity = 255;
          // }
          // else {
          //     this.buttonShowMoreScore.interactable = false;
          //     this.buttonShowMoreScore.node.getComponent(UIOpacity).opacity = 255 * 0.3;
          // }
        };

        _proto.updateLayout = function updateLayout() {};

        _proto.onMarketCorrectScoreExtraHide = function onMarketCorrectScoreExtraHide() {
          this.scrollViewBetDetails.enabled = true;
        };

        _proto.SetMarketCorrectExtra = function SetMarketCorrectExtra(marketExtra, scrollViewBetDetails) {
          this.marketCorrectScoreExtra = marketExtra;
          this.scrollViewBetDetails = scrollViewBetDetails;
          this.marketCorrectScoreExtra.setHideCallback(this.onMarketCorrectScoreExtraHide.bind(this));
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsCorrectScore);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, SbOddsType.Home); //    <---- kèo này odds trả về all type là home, tự chia trên ui làm 3 là nhà-khách-hòa

          if (type == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (type == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[1];else if (type == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        _proto.reset = function reset() {
          _SbMarket.prototype.reset.call(this);

          this.listDataOddsHome = [];
          this.listDataOddsAway = [];
          this.listDataOddsDraw = [];
        };

        return SbMarketCorrectScore;
      }(SbMarket), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabContainerOddsCorrectScore", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefabOddsEmpty", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonShowMoreScore", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketCorrectScoreExtra.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopupBase.ts', './SbNodePoolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, SbPopupBase, SbNodePoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "73754V2o2dCtq0YxQcL6Dqo", "SbMarketCorrectScoreExtra", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketCorrectScoreExtra = exports('default', (_dec = ccclass('SbMarketCorrectScoreExtra'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbMarketCorrectScoreExtra, _SbPopupBase);

        function SbMarketCorrectScoreExtra() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeParentOdds", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabInfo", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbMarketCorrectScoreExtra.prototype;

        _proto.Clean = function Clean() {
          SbNodePoolManager.clearItem(this.nodeParentOdds.children);
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabInfo);
          item.parent = this.nodeParentOdds;
        };

        _proto.AddContainerOdds = function AddContainerOdds(nodeContainerOdds) {
          nodeContainerOdds.parent = this.nodeParentOdds;
        };

        return SbMarketCorrectScoreExtra;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeParentOdds", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefabInfo", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketDoubleChance.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsDoubleChance.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsDoubleChance, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsDoubleChance = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fe2caHFYsdOoKCV31j4LL5/", "SbMarketDoubleChance", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketDoubleChance = exports('default', (_dec = ccclass('SbMarketDoubleChance'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketDoubleChance, _SbMarket);

        function SbMarketDoubleChance() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketDoubleChance.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsDoubleChance);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketDoubleChance;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketDrawNoBet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsDrawNoBet.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsDrawNoBet, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsDrawNoBet = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3e7fdz9a5dLyr8VzGhWEnWp", "SbMarketDrawNoBet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketDrawNoBet = exports('default', (_dec = ccclass('SbMarketDrawNoBet'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketDrawNoBet, _SbMarket);

        function SbMarketDrawNoBet() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketDrawNoBet.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsDrawNoBet);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketDrawNoBet;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketOddOrEven.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsOddOrEven.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsOddOrEven, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsOddOrEven = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1ea699chkZChIs11m5qiQZn", "SbMarketOddOrEven", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketOddOrEven = exports('default', (_dec = ccclass('SbMarketOddOrEven'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketOddOrEven, _SbMarket);

        function SbMarketOddOrEven() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketOddOrEven.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        } // protected updateLayout(){
        //     let widget = this.node.getComponent(cc.Widget);
        //     if (widget != null && widget != undefined)
        //         widget.updateAlignment();
        //     let listWidget = this.node.getComponentsInChildren(cc.Widget);
        //     for (let i = 0; i < listWidget.length; i++)
        //         if (listWidget[i] != null && listWidget[i] != undefined)
        //             listWidget[i].updateAlignment();
        //     //caculator layout size
        //     this.layoutHeight = 0;
        //     let listChildOfParent: cc.Node[] = this.oddsParent.children;
        //     for (let i = 0; i < listChildOfParent.length; i++) {
        //         let h = listChildOfParent[i].getContentSize().height;
        //         this.layoutHeight += h;
        //         let aa = listChildOfParent[i].getComponent(cc.Widget);
        //         if (aa != null && aa != undefined)
        //             aa.updateAlignment();
        //     }
        //     let lay = this.oddsParent.getComponent(cc.Layout);
        //     this.layoutHeight += lay.spacingY * (listChildOfParent.length + 1);
        //     if (this.layoutHeight < MAX_SIZE_HEIGHT_MATCH)
        //         this.layoutHeight = MAX_SIZE_HEIGHT_MATCH;
        //     this.node.setContentSize(new cc.Size(this.node.getContentSize().width, this.layoutHeight));
        // }
        ;

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsOddOrEven);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          if (item.GetOddsType() == SbOddsType.Home) item.node.parent = this.listOddsParentSecondary[0];else if (item.GetOddsType() == SbOddsType.Away) item.node.parent = this.listOddsParentSecondary[1];else if (item.GetOddsType() == SbOddsType.Draw) item.node.parent = this.listOddsParentSecondary[2]; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketOddOrEven;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketTotalScore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsTotalScore.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsTotalScore, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsTotalScore = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4fe09VglK5Jd7BOOVIgBsi5", "SbMarketTotalScore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketTotalScore = exports('default', (_dec = ccclass('SbMarketTotalScore'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketTotalScore, _SbMarket);

        function SbMarketTotalScore() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketTotalScore.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (listOdds[i].hasOwnProperty("od")) {
                this.addOdds(listOdds[i], SbOddsType.Draw);
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayoutMarketSecondary();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          if (data.hasOwnProperty("od")) {
            this.addOdds(data, SbOddsType.Draw);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsTotalScore);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          item.node.parent = this.oddsParent; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketTotalScore;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMarketUO.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbMarket.ts', './SbOdds.ts', './SbOddsOU.ts', './SbGameUtil.ts', './SbNodePoolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, IS_SKIP_ODDS_NOT_MAINLINE, SbMarket, SbOdds, SbOddsOU, SbOddsType, SbNodePoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      IS_SKIP_ODDS_NOT_MAINLINE = module.IS_SKIP_ODDS_NOT_MAINLINE;
      SbMarket = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbOddsOU = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbNodePoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "664908JTlBCVpeKEfOBbgpy", "SbMarketUO", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMarketUO = exports('default', (_dec = ccclass('SbMarketUO'), _dec(_class = /*#__PURE__*/function (_SbMarket) {
        _inheritsLoose(SbMarketUO, _SbMarket);

        function SbMarketUO() {
          return _SbMarket.apply(this, arguments) || this;
        }

        var _proto = SbMarketUO.prototype;

        _proto.InitData = function InitData(data, isFirstTimeInit) {
          var _this = this;

          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          _SbMarket.prototype.InitData.call(this, data, isFirstTimeInit);

          if (data.hasOwnProperty("o")) {
            var listOdds = data.o;

            for (var i = 0; i < listOdds.length; i++) {
              //ở Match ở mainUI chỉ hiển thị 1 cặp odds, vào UI details mới hiển thị full
              if (this.isShowAllOdds == false && this.listOdds.length >= 2) break;

              if (listOdds[i].ml == false && IS_SKIP_ODDS_NOT_MAINLINE) {
                // ml= isMainline
                continue;
              }

              if (listOdds[i].hasOwnProperty("oh")) {
                this.addOdds(listOdds[i], SbOddsType.Home);
              }

              if (listOdds[i].hasOwnProperty("oa")) {
                this.addOdds(listOdds[i], SbOddsType.Away);
              }

              if (i != listOdds.length - 1) {
                this.addBreakLine();
              }
            }
          }

          tween(this.node).delay(0.2).call(function () {
            _this.updateMarketStatus(_this.marketData.marketStatus);
          }).start();
          this.updateLayout();
        };

        _proto.OddsInsert = function OddsInsert(data) {
          if (this.isShowAllOdds == false && this.listOdds.length >= 2) return;
          if (this.listOdds.length >= 2) this.addBreakLine();
          data = SbOdds.ChangeFeildNameShort(data.odds);

          if (data.hasOwnProperty("oh")) {
            this.addOdds(data, SbOddsType.Home);
          }

          if (data.hasOwnProperty("oa")) {
            this.addOdds(data, SbOddsType.Away);
          }

          _SbMarket.prototype.OddsInsert.call(this, data);
        };

        _proto.OddsRemove = function OddsRemove(data) {
          _SbMarket.prototype.OddsRemove.call(this, data);
        };

        _proto.addOdds = function addOdds(data, type) {
          var item = SbNodePoolManager.createItemFromPrefab(this.prefabOdds).getComponent(SbOddsOU);
          item.reset();
          this.setInfoDetail(item);
          item.InitData(data, type);
          item.node.parent = this.oddsParent; // item.SetRowColor(this.listOdds.length);

          this.listOdds.push(item);
        };

        return SbMarketUO;
      }(SbMarket)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMatch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUtils.ts', './SbMarket.ts', './SbMarket1X2.ts', './SbMarketAsianHandicap.ts', './SbMarketUO.ts', './SbMatchFavorite.ts', './SbOdds.ts', './SbSoundsManager.ts', './SbConfigManager.ts', './SbSkinSprite.ts', './SbGameUtil.ts', './SbTooltips.ts', './SbDefine.ts', './SbDisplayMatchInfo.ts', './SbLocalizationManager.ts', './SbNodeColorHelper.ts', './SbNodePoolManager.ts', './SbSkinListColor.ts', './SbParlayBetManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Node, Label, Toggle, Widget, Sprite, SpriteFrame, Color, director, UITransform, Size, Vec3, Layout, Button, UIOpacity, warn, tween, Tween, log, TweenSystem, view, Component, SbUtils, SbMarketStatus, SbMarket, SbMarketId, SbMarket1X2, SbMarketAsianHandicap, SbMarketUO, SbMatchFavorite, SbOdds, SbSoundsManager, SbConfigManager, SbSkinID, SbSkinSprite, ChangeFeildNameShortOfEvent, ChangeFeildNameShortOfLeague, SbTooltips, EVENT_LIST_PARLAY_BET_CHANGED, SB_EVENT_EVENT_MATCH_CHANGE_DATA, SB_EVENT_EVENT_MATCH_REMOVE, SB_COLOR_NAME_MATCH_LIVE, SB_COLOR_NAME_DEFAULT, SbMatchShortData, SbLocalizationManager, SbNodeColorHelper, SbNodePoolManager, SbSkinListColor, SbParlayBetManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      Toggle = module.Toggle;
      Widget = module.Widget;
      Sprite = module.Sprite;
      SpriteFrame = module.SpriteFrame;
      Color = module.Color;
      director = module.director;
      UITransform = module.UITransform;
      Size = module.Size;
      Vec3 = module.Vec3;
      Layout = module.Layout;
      Button = module.Button;
      UIOpacity = module.UIOpacity;
      warn = module.warn;
      tween = module.tween;
      Tween = module.Tween;
      log = module.log;
      TweenSystem = module.TweenSystem;
      view = module.view;
      Component = module.Component;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbMarketStatus = module.SbMarketStatus;
      SbMarket = module.default;
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbMarket1X2 = module.default;
    }, function (module) {
      SbMarketAsianHandicap = module.default;
    }, function (module) {
      SbMarketUO = module.default;
    }, function (module) {
      SbMatchFavorite = module.default;
    }, function (module) {
      SbOdds = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbSkinSprite = module.default;
    }, function (module) {
      ChangeFeildNameShortOfEvent = module.ChangeFeildNameShortOfEvent;
      ChangeFeildNameShortOfLeague = module.ChangeFeildNameShortOfLeague;
    }, function (module) {
      SbTooltips = module.SbTooltips;
    }, function (module) {
      EVENT_LIST_PARLAY_BET_CHANGED = module.EVENT_LIST_PARLAY_BET_CHANGED;
      SB_EVENT_EVENT_MATCH_CHANGE_DATA = module.SB_EVENT_EVENT_MATCH_CHANGE_DATA;
      SB_EVENT_EVENT_MATCH_REMOVE = module.SB_EVENT_EVENT_MATCH_REMOVE;
      SB_COLOR_NAME_MATCH_LIVE = module.SB_COLOR_NAME_MATCH_LIVE;
      SB_COLOR_NAME_DEFAULT = module.SB_COLOR_NAME_DEFAULT;
    }, function (module) {
      SbMatchShortData = module.SbMatchShortData;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbNodeColorHelper = module.SbNodeColorHelper;
    }, function (module) {
      SbNodePoolManager = module.default;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbParlayBetManager = module.SbParlayBetManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41;

      cclegacy._RF.push({}, "b9603oMOMRDe4hbTXGxcG+f", "SbMatch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_COLLAPSE_ITEM = 0.25;
      var MAX_SIZE_HEIGHT_MATCH = 235;
      var IS_SHOW_ICON_GOING_LIVE = false;
      var IS_SHOW_ICON_HOT = false;
      var PADING_TOP_OF_SCROLLVIEW_PARENT = exports('PADING_TOP_OF_SCROLLVIEW_PARENT', 260);
      var PADING_TOP = exports('PADING_TOP', 6);
      var SbMatchStatus = exports('SbMatchStatus', /*#__PURE__*/function (SbMatchStatus) {
        SbMatchStatus[SbMatchStatus["FirstHalf"] = 2] = "FirstHalf";
        SbMatchStatus[SbMatchStatus["HalfTime"] = 4] = "HalfTime";
        SbMatchStatus[SbMatchStatus["SecondHalf"] = 8] = "SecondHalf";
        SbMatchStatus[SbMatchStatus["Finished"] = 16] = "Finished";
        SbMatchStatus[SbMatchStatus["RegulaTimeFinished"] = 32] = "RegulaTimeFinished";
        SbMatchStatus[SbMatchStatus["FirstHalfExtraTime"] = 64] = "FirstHalfExtraTime";
        SbMatchStatus[SbMatchStatus["HaflTimeOfExtraTime"] = 128] = "HaflTimeOfExtraTime";
        SbMatchStatus[SbMatchStatus["SecondHalfExtraTime"] = 256] = "SecondHalfExtraTime";
        SbMatchStatus[SbMatchStatus["ExtraTimeFinished"] = 512] = "ExtraTimeFinished";
        SbMatchStatus[SbMatchStatus["PenaltyShootout"] = 1024] = "PenaltyShootout";
        return SbMatchStatus;
      }({}));
      var SbTypeMatch = exports('SbTypeMatch', /*#__PURE__*/function (SbTypeMatch) {
        SbTypeMatch[SbTypeMatch["Undefined"] = null] = "Undefined";
        SbTypeMatch[SbTypeMatch["Normal"] = 0] = "Normal";
        SbTypeMatch[SbTypeMatch["LeagueBetting"] = 1] = "LeagueBetting";
        SbTypeMatch[SbTypeMatch["LSports"] = 2] = "LSports";
        SbTypeMatch[SbTypeMatch["GSVirtualMatch"] = 3] = "GSVirtualMatch";
        SbTypeMatch[SbTypeMatch["VoltaMatch"] = 4] = "VoltaMatch";
        SbTypeMatch[SbTypeMatch["ClubFriendlyMatch"] = 8] = "ClubFriendlyMatch";
        return SbTypeMatch;
      }({}));
      var SbMatchData = exports('SbMatchData', /*#__PURE__*/function () {
        function SbMatchData() {
          //total info
          this.leagueName = "";
          this.leagueId = "";
          this.eventId = "";
          this.homeId = "";
          this.homeName = "";
          this.awayId = "";
          this.awayName = "";
          this.totalMarketsCount = "";
          this.homeLogoUrl = "";
          this.awayLogoUrl = "";
          this.isLive = false; //trận đấu có đang diễn ra hay ko

          this.isLivestream = false; //có video live hay không

          this.isGoingLive = false; //cho bet khi trận đang live

          this.isSuspended = false;
          this.isParlay = false; //cược xiên

          this.status = SbMarketStatus.Active;
          this.startDate = "2021-04-13T18:00:00Z";
          this.cornersHome = 0;
          this.cornersAway = 0;
          this.bookingsHome = 0;
          this.bookingsAway = 0;
          this.hotMatch = 0;
          this.type = SbTypeMatch.Normal; //type = 3 thì play with video.js

          this.markets = []; //for live

          this.gameTime = 0;
          this.gamePart = 0;
          this.homeScore = 0;
          this.awayScore = 0;
          this.redCardsHome = 0;
          this.redCardsAway = 0;
          this.yellowCardsHome = 0;
          this.yellowCardsAway = 0;
          this.stoppageTime = 0; //extra match

          this.homeScoreOT = 0; //hso

          this.awayScoreOT = 0;
        }

        var _proto = SbMatchData.prototype; //aso

        _proto.Reset = function Reset() {
          this.leagueName = "";
          this.leagueId = "";
          this.eventId = "";
          this.homeId = "";
          this.homeName = "";
          this.awayId = "";
          this.awayName = "";
          this.totalMarketsCount = "";
          this.homeLogoUrl = "";
          this.awayLogoUrl = "";
          this.isLive = false; //trận đấu có đang diễn ra hay ko

          this.isLivestream = false; //có video live hay không

          this.isGoingLive = false; //cho bet khi trận đang live

          this.isSuspended = false;
          this.status = SbMarketStatus.Active;
          this.startDate = "2021-04-13T18:00:00Z";
          this.cornersHome = 0;
          this.cornersAway = 0;
          this.bookingsHome = 0;
          this.bookingsAway = 0;
          this.hotMatch = 0;
          this.type = SbTypeMatch.Normal; //type = 3 thì play with video.js

          this.markets = []; //for live

          this.gameTime = 0;
          this.gamePart = 0;
          this.homeScore = 0;
          this.awayScore = 0;
          this.redCardsHome = 0;
          this.redCardsAway = 0;
          this.yellowCardsHome = 0;
          this.yellowCardsAway = 0;
          this.stoppageTime = 0; //extra match

          this.homeScoreOT = 0; //hso

          this.awayScoreOT = 0; //aso
        };

        return SbMatchData;
      }());
      var SbMatch = exports('default', (_dec = ccclass('SbMatch'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Label), _dec14 = property(Label), _dec15 = property(Label), _dec16 = property(Label), _dec17 = property(Label), _dec18 = property(Label), _dec19 = property(Label), _dec20 = property(Label), _dec21 = property(Node), _dec22 = property(Node), _dec23 = property(Node), _dec24 = property(Node), _dec25 = property(Prefab), _dec26 = property(Toggle), _dec27 = property(Node), _dec28 = property(Node), _dec29 = property(Widget), _dec30 = property(Sprite), _dec31 = property(SpriteFrame), _dec32 = property(Node), _dec33 = property(Widget), _dec34 = property(SbTooltips), _dec35 = property(Node), _dec36 = property(SbSkinListColor), _dec37 = property([Sprite]), _dec38 = property(Color), _dec39 = property(Label), _dec40 = property(SbNodeColorHelper), _dec41 = property(Node), _dec42 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMatch, _Component);

        function SbMatch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabMatch", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeMatchExtraParent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeMarketParent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeScoreOfMatchLive", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeTimeStartMatchNotLive", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLockMatch", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeOdd", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayOdd", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScoreOfTheMatch", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeOfTheMatch", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbIsGoingLive", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeStart", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbCountOddsHide", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeRedCard", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayRedCard", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeYellowCard", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayYellowCard", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHomeRedCard", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAwayRedCard", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHomeYellowCard", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAwayYellowCard", _descriptor23, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listPrefabMarket", _descriptor24, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleFavorite", _descriptor25, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listButtonShowBetDetails", _descriptor26, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listButtonInSceneBetDetails", _descriptor27, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listWidgetAlignTopBottomZero", _descriptor28, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgInfoMatch", _descriptor29, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listBgInfoExtraMatch", _descriptor30, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeDetail", _descriptor31, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "mainInfo", _descriptor32, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tooltips", _descriptor33, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeHot", _descriptor34, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinTeamHandicap", _descriptor35, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listBgOfMatch", _descriptor36, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorBgMatchIsLive", _descriptor37, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMessNoMarket", _descriptor38, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNodeChangeColor", _descriptor39, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconSupportParlayBet", _descriptor40, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconPlacedParlayBet", _descriptor41, _assertThisInitialized(_this));

          _this.market = [];
          _this.leagueData = null;
          _this.matchData = new SbMatchData();
          _this.isExpandAllMatchs = true;
          _this.isHiddenAllUI = null;
          _this.nodePlayAnim = new Node();
          _this.matchExtra = null;
          _this.isMatchExtra = false;
          _this.isShowUiForDetail = false;
          _this.isShowOnlyOddsHT = false;
          _this.nodeTransform = null;
          _this.nodeParentTransform = null;
          _this.nodeOpacity = null;
          _this.callbackStatusFavoriteChange = null;
          _this.skipCallbackStatusFavoriteChange = false;
          _this.callbackDataLiveChange = null;
          _this.sbFootballBettingController = null;
          return _this;
        }

        var _proto2 = SbMatch.prototype;

        _proto2.init = function init(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto2.start = function start() {
          director.on(EVENT_LIST_PARLAY_BET_CHANGED, this.onEventListParlayBetChanged.bind(this), this);
        };

        _proto2.onDestroy = function onDestroy() {
          director.off(EVENT_LIST_PARLAY_BET_CHANGED, this.onEventListParlayBetChanged.bind(this), this);
        };

        _proto2.SetLeagueData = function SetLeagueData(data) {
          this.leagueData = data;
          this.matchData.leagueName = data.leagueName;
        };

        _proto2.SetMatchExtra = function SetMatchExtra(value) {
          this.isMatchExtra = value;

          if (value) {
            this.HideAllUIForScreenDetails();
            this.bgInfoMatch.spriteFrame = this.listBgInfoExtraMatch[SbConfigManager.getInstance().GetSkinCurrent() + 1];
          }
        };

        _proto2.GetStatusHasMatchExtra = function GetStatusHasMatchExtra() {
          return this.isMatchExtra;
        };

        _proto2.InitData = function InitData(data, isFirstTimeInit) {
          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          } // cc.log("InitData match" + JSON.stringify(data));
          // if (data.ei == 13244) {
          //     let aa = 0;
          // }
          //store data


          this.matchData.leagueId = data.li;
          this.matchData.eventId = data.ei;
          this.matchData.homeId = data.hi;
          this.matchData.homeName = data.hn;
          this.matchData.awayId = data.ai;
          this.matchData.awayName = data.an;
          this.matchData.totalMarketsCount = data.mc;
          this.matchData.isLive = data.l;
          this.matchData.isGoingLive = data.gl;
          this.matchData.isParlay = data.ip;
          this.matchData.isSuspended = data.s;
          this.matchData.status = this.convertMatchStatus(data.es);
          this.matchData.startDate = data.et;
          this.matchData.markets = data.m;
          if (data.hasOwnProperty("hc") && data.hc != null) this.matchData.cornersHome = data.hc;
          if (data.hasOwnProperty("ac") && data.ac != null) this.matchData.cornersAway = data.ac;
          if (data.hasOwnProperty("hso") && data.hso != null) this.matchData.homeScoreOT = data.hso;
          if (data.hasOwnProperty("aso") && data.aso != null) this.matchData.awayScoreOT = data.aso;
          if (data.hasOwnProperty("hf") && data.hf != null) this.matchData.homeLogoUrl = data.hf;
          if (data.hasOwnProperty("af") && data.af != null) this.matchData.awayLogoUrl = data.af;

          if (this.matchData.isSuspended) {
            this.matchData.isSuspended = false;
            this.matchData.status = SbMarketStatus.Suspended;
          }

          if (data.hasOwnProperty("pt")) this.matchData.hotMatch = data.pt;
          if (data.hasOwnProperty("tp")) this.matchData.type = data.tp;
          if (data.hasOwnProperty("ls") && data.ls != null) this.matchData.isLivestream = data.ls;

          if (data.l) {
            this.matchData.gameTime = data.gt;
            this.matchData.gamePart = data.gp;
            this.matchData.homeScore = data.hs;
            this.matchData.awayScore = data.as;
            if (data.hasOwnProperty("stm")) this.matchData.stoppageTime = data.stm;
            if (data.hasOwnProperty("rch")) this.matchData.redCardsHome = data.rch;
            if (data.hasOwnProperty("rca")) this.matchData.redCardsAway = data.rca;
            if (data.hasOwnProperty("ych")) this.matchData.yellowCardsHome = data.ych;
            if (data.hasOwnProperty("yca")) this.matchData.yellowCardsAway = data.yca;
          } //update status for market


          if (isFirstTimeInit) {
            for (var i = 0; i < this.matchData.markets.length; i++) {
              if (this.matchData.markets[i].hasOwnProperty("s")) {
                if (String(this.matchData.markets[i].s).localeCompare("true") == 0) {
                  //suppened
                  this.matchData.markets[i].status = SbMarketStatus.Suspended;
                  delete this.matchData.markets[i].s;
                }
              }
            }
          }

          var isCornerMatch = SbMarket.IsCornerMatch(this.leagueData.leagueName) && !this.sbFootballBettingController.IsBettingDetailsAvailable();
          var isBookingMatch = SbMarket.IsBookingMatch(this.leagueData.leagueName) && !this.sbFootballBettingController.IsBettingDetailsAvailable(); //show market to UI

          this.showDataToUI(isFirstTimeInit, isCornerMatch, isBookingMatch);

          if (data.hasOwnProperty("m")) {
            var _this$getComponent;

            var listMarkets = this.matchData.markets;
            var marketContentSizeHeight = -1;
            var listAsianHandicapFT = [];
            var listOverUnderFT = [];
            var listMarket1X2FT = [];
            var listAsianHandicapHT = [];
            var listOverUnderHT = [];
            var listMarket1X2HT = [];
            var listMarketOther = [];
            var listCornerHandicapFT = [];
            var listBookingHandicapFT = [];
            var listCorner1x2FT = [];
            var listBooking1x2FT = [];
            var listCornerOverUnderFT = [];
            var listBookingOverUnderFT = []; //extra match

            var listAsianHandicapExtraFT = [];
            var listOverUnderExtraFT = [];
            var listMarket1X2ExtraFT = [];
            var listAsianHandicapExtraHT = [];
            var listOverUnderExtraHT = [];
            var listMarket1X2ExtraHT = [];
            var hasMatketExtra = false;

            for (var ii = 0; ii < listMarkets.length; ii++) {
              var id = listMarkets[ii].mi;

              if (this.isMatchExtra == false && hasMatketExtra == false) {
                hasMatketExtra = this.checkHasMarketOfExtraMatch(id);
              }

              if (id == SbMarketId.AsianHandicapFT) {
                listAsianHandicapFT.push(listMarkets[ii]);
                if (this.isShowUiForDetail == false && this.isMatchExtra == false) this.checkIsHomeHandicap(listMarkets[ii]);
              } else if (id == SbMarketId.OverUnderFT) listOverUnderFT.push(listMarkets[ii]);else if (id == SbMarketId.Market1X2FT) listMarket1X2FT.push(listMarkets[ii]);else if (id == SbMarketId.AsianHandicapHT) {
                listAsianHandicapHT.push(listMarkets[ii]);
                if (this.isShowUiForDetail && this.isMatchExtra == false) this.checkIsHomeHandicap(listMarkets[ii]);
              } else if (id == SbMarketId.OverUnderHT) listOverUnderHT.push(listMarkets[ii]);else if (id == SbMarketId.Market1X2HT) listMarket1X2HT.push(listMarkets[ii]);else if (id == SbMarketId.AsianHandicapExtraFT) {
                listAsianHandicapExtraFT.push(listMarkets[ii]);
                if (this.isShowUiForDetail == false && this.isMatchExtra) this.checkIsHomeHandicap(listMarkets[ii]);
              } else if (id == SbMarketId.OverUnderExtraFT) listOverUnderExtraFT.push(listMarkets[ii]);else if (id == SbMarketId.Market1X2ExtraFT) listMarket1X2ExtraFT.push(listMarkets[ii]);else if (id == SbMarketId.AsianHandicapExtraHT) {
                listAsianHandicapExtraHT.push(listMarkets[ii]);
                if (this.isShowUiForDetail && this.isMatchExtra) this.checkIsHomeHandicap(listMarkets[ii]);
              } else if (id == SbMarketId.OverUnderExtraHT) listOverUnderExtraHT.push(listMarkets[ii]);else if (id == SbMarketId.Market1X2ExtraHT) listMarket1X2ExtraHT.push(listMarkets[ii]);else if (id == SbMarketId.Corner1X2FT) {
                listCorner1x2FT.push(listMarkets[ii]);
              } else if (id == SbMarketId.CornerHandicapFT) {
                listCornerHandicapFT.push(listMarkets[ii]);
              } else if (id == SbMarketId.CornerOverUnderFT) {
                listCornerOverUnderFT.push(listMarkets[ii]);
              } else if (id == SbMarketId.Booking1X2FT) {
                listBooking1x2FT.push(listMarkets[ii]);
              } else if (id == SbMarketId.BookingAsianHandicapFT) {
                listBookingHandicapFT.push(listMarkets[ii]);
              } else if (id == SbMarketId.BookingOverUnderFT) {
                listBookingOverUnderFT.push(listMarkets[ii]);
              } else listMarketOther.push(listMarkets[ii]);
            }

            if (listAsianHandicapFT.length == 0) listAsianHandicapFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.AsianHandicapFT + ", \"gi\": 1 }"));
            if (listOverUnderFT.length == 0) listOverUnderFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.OverUnderFT + ", \"gi\": 1 }"));
            if (listMarket1X2FT.length == 0) listMarket1X2FT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Market1X2FT + ", \"gi\": 1 }"));
            if (listAsianHandicapHT.length == 0) listAsianHandicapHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.AsianHandicapHT + ", \"gi\": 1 }"));
            if (listOverUnderHT.length == 0) listOverUnderHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.OverUnderHT + ", \"gi\": 1 }"));
            if (listMarket1X2HT.length == 0) listMarket1X2HT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Market1X2HT + ", \"gi\": 1 }")); //extra match

            if (listAsianHandicapExtraFT.length == 0) listAsianHandicapExtraFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.AsianHandicapExtraFT + ", \"gi\": 1 }"));
            if (listOverUnderExtraFT.length == 0) listOverUnderExtraFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.OverUnderExtraFT + ", \"gi\": 1 }"));
            if (listMarket1X2ExtraFT.length == 0) listMarket1X2ExtraFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Market1X2ExtraFT + ", \"gi\": 1 }"));
            if (listAsianHandicapExtraHT.length == 0) listAsianHandicapExtraHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.AsianHandicapExtraHT + ", \"gi\": 1 }"));
            if (listOverUnderExtraHT.length == 0) listOverUnderExtraHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.OverUnderExtraHT + ", \"gi\": 1 }"));
            if (listMarket1X2ExtraHT.length == 0) listMarket1X2ExtraHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Market1X2ExtraHT + ", \"gi\": 1 }"));
            if (listOverUnderExtraHT.length == 0) listOverUnderExtraHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.OverUnderExtraHT + ", \"gi\": 1 }"));
            if (listMarket1X2ExtraHT.length == 0) listMarket1X2ExtraHT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Market1X2ExtraHT + ", \"gi\": 1 }"));
            if (listCorner1x2FT.length == 0) listCorner1x2FT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Corner1X2FT + ", \"gi\": 1 }"));
            if (listCornerHandicapFT.length == 0) listCornerHandicapFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.CornerHandicapFT + ", \"gi\": 1 }"));
            if (listCornerOverUnderFT.length == 0) listCornerOverUnderFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.CornerOverUnderFT + ", \"gi\": 1 }"));
            if (listBooking1x2FT.length == 0) listBooking1x2FT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.Booking1X2FT + ", \"gi\": 1 }"));
            if (listBookingHandicapFT.length == 0) listBookingHandicapFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.BookingAsianHandicapFT + ", \"gi\": 1 }"));
            if (listBookingOverUnderFT.length == 0) listBookingOverUnderFT.push(JSON.parse("{ \"o\": [ ], \"mi\": " + SbMarketId.BookingOverUnderFT + ", \"gi\": 1 }")); // let listMarketsSort = [].concat(listAsianHandicapFT, listOverUnderFT, listMarket1X2FT, listAsianHandicapHT, listOverUnderHT, listMarket1X2HT);

            var listMarketsSort = [].concat(listAsianHandicapFT, listOverUnderFT, listMarket1X2FT);
            var listMarketsSortHT = [].concat(listAsianHandicapHT, listOverUnderHT, listMarket1X2HT); // let listMarketsExtraSort = [].concat(listAsianHandicapExtraFT, listOverUnderExtraFT, listMarket1X2ExtraFT, listAsianHandicapExtraHT, listOverUnderExtraHT, listMarket1X2ExtraHT);

            var listMarketsExtraSort = [].concat(listAsianHandicapExtraFT, listOverUnderExtraFT, listMarket1X2ExtraFT);
            var listMarketsExtraSortHT = [].concat(listAsianHandicapExtraHT, listOverUnderExtraHT, listMarket1X2ExtraHT);
            var listMarket = [];

            if (this.isShowOnlyOddsHT == false) {
              if (this.isMatchExtra == false) listMarket = listMarketsSort;else listMarket = listMarketsExtraSort;
            } else {
              if (this.isMatchExtra == false) listMarket = listMarketsSortHT;else listMarket = listMarketsExtraSortHT;
            }

            if (!this.sbFootballBettingController.IsBettingDetailsAvailable()) {
              if (isCornerMatch) {
                listMarket = [].concat(listCornerHandicapFT, listCornerOverUnderFT, listCorner1x2FT);
              } else if (isBookingMatch) {
                listMarket = [].concat(listBookingHandicapFT, listBookingOverUnderFT, listBooking1x2FT);
              }
            }

            for (var iii = 0; iii < listMarket.length; iii++) {
              var item = this.getItemMarketByID(listMarket[iii].mi, listMarket[iii]);

              if (item != null) {
                item.init(this.sbFootballBettingController);
                item.SetMatchData(this.matchData);
                item.SetLeagueData(this.leagueData);
                item.SetDisplayAllOdds(this.isShowUiForDetail);
                item.InitData(listMarket[iii], isFirstTimeInit);
                item.node.parent = this.nodeMarketParent;
                this.market.push(item);
                if (marketContentSizeHeight < item.GetContentSizeHeight()) marketContentSizeHeight = item.GetContentSizeHeight();
              }
            }

            if (hasMatketExtra) this.AddMatchExtra(hasMatketExtra);
            if (listAsianHandicapHT.length > 0 || listOverUnderHT.length > 0 || listMarket1X2HT.length > 0) ;
            if (this.matchData.gamePart >= 8) ; // this.lbCountOddsHide.string = "+" + totalMarketOther.toString();
            // if (totalMarketOther == 0)
            //     this.setButtonShowBetDetailsDisable(false);

            var height = MAX_SIZE_HEIGHT_MATCH;
            if (marketContentSizeHeight > MAX_SIZE_HEIGHT_MATCH) height = marketContentSizeHeight + PADING_TOP;else height = MAX_SIZE_HEIGHT_MATCH + PADING_TOP;
            var matchExtraHeight = 0;

            if (this.matchExtra != null) {
              matchExtraHeight = this.matchExtra.node.getComponent(UITransform).height;
            }

            this.getNodeTransform().setContentSize(new Size(this.getNodeTransform().width, height + matchExtraHeight));

            for (var iiii = 0; iiii < this.market.length; iiii++) {
              this.market[iiii].SetMarginBottom(matchExtraHeight);
            }

            if (this.matchExtra != null) this.matchExtra.node.position = new Vec3(this.matchExtra.node.position.x, -1 * height);
            var widgetMatch = this.node.getComponent(Widget);
            widgetMatch.updateAlignment();
            (_this$getComponent = this.getComponent(Layout)) == null ? void 0 : _this$getComponent.updateLayout();
            this.updateCountMarketOrder();
            this.checkMarketDontHaveOdds("match InitData: " + JSON.stringify(this.matchData));
            this.updateStatusParlayBet();
          }
        };

        _proto2.AddMatchExtra = function AddMatchExtra(hasMatketExtra) {
          this.matchExtra = SbNodePoolManager.createItemFromPrefab(this.prefabMatch).getComponent(SbMatch);
          this.matchExtra.Reset();

          if (this.matchExtra != null && this.matchExtra != undefined) {
            this.matchExtra.node.parent = this.nodeMatchExtraParent;
            this.matchExtra.init(this.sbFootballBettingController);
            this.matchExtra.SetMatchExtra(hasMatketExtra);
            var skin = this.matchExtra.bgInfoMatch.node.getComponent(SbSkinSprite);
            if (skin != null && skin != undefined) skin.destroy();
            var matchDataTemp = ChangeFeildNameShortOfEvent(this.matchData);
            matchDataTemp = ChangeFeildNameShortOfLeague(matchDataTemp);
            this.matchExtra.SetLeagueData(this.leagueData);
            this.matchExtra.InitData(matchDataTemp);
            var widget = this.matchExtra.node.getComponent(Widget);
            widget.target = this.node;
            widget.left = 0;
            widget.right = 0;
            widget.updateAlignment(); // // this.matchExtra.node.setContentSize(new cc.Size(this.node.getContentSize(), 339));
            // // this.matchExtra.node.position = new cc.Vec2(this.node.position.x, this.matchExtra.node.position.y);

            this.delayUpdateContentSizeMatchExtra(0.2); // // this.matchExtra.UpdateAlight();

            this.isMatchExtra = true;
          }
        };

        _proto2.resetInfoMainMatch = function resetInfoMainMatch() {
          this.nodeScoreOfMatchLive.active = false;
        };

        _proto2.IsShowUiForDetail = function IsShowUiForDetail() {
          this.isShowUiForDetail = true;
        };

        _proto2.IsShowOnlyOddsHT = function IsShowOnlyOddsHT() {
          this.isShowOnlyOddsHT = true;
        };

        _proto2.ShowUiForDetail = function ShowUiForDetail() {
          var _this$getComponent2;

          var widgetMatch = this.node.getComponent(Widget);

          if (widgetMatch != null && widgetMatch != undefined) {
            widgetMatch.right = 0;
            widgetMatch.updateAlignment();

            if (this.isMatchExtra && this.matchExtra != null) {
              var widgetMatchExtra = this.matchExtra.node.getComponent(Widget);

              if (widgetMatchExtra != null && widgetMatchExtra != undefined) {
                widgetMatchExtra.right = -22;
                widgetMatchExtra.updateAlignment();
              }
            }
          }

          var widgetAllMarket = this.nodeMarketParent.getComponent(Widget);

          if (widgetAllMarket != null && widgetAllMarket != undefined) {
            widgetAllMarket.right = 18;
            widgetAllMarket.updateAlignment();
          }

          (_this$getComponent2 = this.getComponent(Layout)) == null ? void 0 : _this$getComponent2.updateLayout();
          this.nodeDetail.active = false;
          this.nodeScoreOfMatchLive.active = false;
        };

        _proto2.ChangeOddsStyle = function ChangeOddsStyle() {
          for (var i = 0; i < this.market.length; i++) {
            if (this.market[i] != null && this.market[i] != undefined) {
              var mId = this.market[i].GetMarketID();

              if (mId == SbMarketId.AsianHandicapFT || mId == SbMarketId.OverUnderFT || mId == SbMarketId.AsianHandicapHT || mId == SbMarketId.OverUnderHT || mId == SbMarketId.AsianHandicapExtraFT || mId == SbMarketId.OverUnderExtraFT || mId == SbMarketId.AsianHandicapExtraHT || mId == SbMarketId.OverUnderExtraHT || mId == SbMarketId.CornerHandicapFT || mId == SbMarketId.CornerHandicapHT || mId == SbMarketId.CornerOverUnderFT || mId == SbMarketId.CornerOverUnderHT || mId == SbMarketId.BookingAsianHandicapFT || mId == SbMarketId.BookingAsianHandicapHT || mId == SbMarketId.BookingOverUnderFT || mId == SbMarketId.BookingOverUnderHT) {
                this.market[i].ChangeOddsStyle();
              }
            }
          }
        };

        _proto2.HideAllUIForScreenDetails = function HideAllUIForScreenDetails() {
          for (var i = 0; i < this.listButtonInSceneBetDetails.length; i++) {
            if (this.listButtonInSceneBetDetails[i] != null) {
              this.listButtonInSceneBetDetails[i].active = false;
            }
          }

          if (this.toggleFavorite != null) this.toggleFavorite.node.active = false;
          this.nodeHomeRedCard.active = false;
          this.nodeHomeYellowCard.active = false;
          this.nodeAwayRedCard.active = false;
          this.nodeAwayYellowCard.active = false;
        };

        _proto2.RemoveAllMarket = function RemoveAllMarket() {
          for (var i = this.market.length - 1; i >= 0; i--) {
            if (this.market[i] != null) {
              this.market[i].RemoveAllOdds();
            }
          }

          SbNodePoolManager.clearItemComp(this.market);
          this.market = [];
        };

        _proto2.Reset = function Reset() {
          this.RemoveAllMarket();
          this.isHiddenAllUI = null;
          this.leagueData = null;
          this.nodeParentTransform = null;
          this.callbackStatusFavoriteChange = null;
          this.resetNormalColor();
          this.toggleFavorite.node.active = true;
          this.matchData.Reset();
        };

        _proto2.GetTimeStringOfTheMatch = function GetTimeStringOfTheMatch() {
          return this.lbTimeOfTheMatch.string;
        };

        _proto2.SkipUpdateStatusMatchFavoriteOnetime = function SkipUpdateStatusMatchFavoriteOnetime(value) {
          this.skipCallbackStatusFavoriteChange = value;
        };

        _proto2.SetCallbackDataLiveChange = function SetCallbackDataLiveChange(cb) {
          this.callbackDataLiveChange = cb;
        };

        _proto2.ClearCallbackDataLiveChange = function ClearCallbackDataLiveChange() {
          this.callbackDataLiveChange = null;
        };

        _proto2.setColorBgMatchLive = function setColorBgMatchLive(isLive) {
          if (isLive === void 0) {
            isLive = true;
          } // for (let i = 0; i < this.listBgOfMatch.length; i++) {
          //     this.listBgOfMatch[i].color = this.colorBgMatchIsLive;
          // }


          var color = isLive ? SB_COLOR_NAME_MATCH_LIVE : SB_COLOR_NAME_DEFAULT;

          for (var i = 0; i < this.listNodeChangeColor.length; i++) {
            this.listNodeChangeColor[i].ChangeColor(color);
          }
        };

        SbMatch.CheckHasMarketAvailable = function CheckHasMarketAvailable(data) {
          if (data.hasOwnProperty("m")) {
            var listMarkets = data.m;

            for (var i = 0; i < listMarkets.length; i++) {
              var id = listMarkets[i].mi;

              if (id == SbMarketId.AsianHandicapFT || id == SbMarketId.OverUnderFT || id == SbMarketId.Market1X2FT || id == SbMarketId.AsianHandicapHT || id == SbMarketId.OverUnderHT || id == SbMarketId.Market1X2HT || id == SbMarketId.AsianHandicapExtraFT || id == SbMarketId.OverUnderExtraFT || id == SbMarketId.Market1X2ExtraFT || id == SbMarketId.AsianHandicapExtraHT || id == SbMarketId.OverUnderExtraHT || id == SbMarketId.Market1X2ExtraHT || id == SbMarketId.Corner1X2FT || id == SbMarketId.Corner1X2HT || id == SbMarketId.CornerHandicapFT || id == SbMarketId.CornerHandicapHT || id == SbMarketId.CornerOverUnderFT || id == SbMarketId.CornerOverUnderHT || id == SbMarketId.Booking1X2FT || id == SbMarketId.Booking1X2HT || id == SbMarketId.BookingAsianHandicapFT || id == SbMarketId.BookingAsianHandicapHT || id == SbMarketId.BookingOverUnderFT || id == SbMarketId.BookingOverUnderHT) {
                return true;
              }
            }
          }

          return false;
        };

        _proto2.updateStatusParlayBet = function updateStatusParlayBet() {
          if (this.iconSupportParlayBet == null || this.iconPlacedParlayBet == null) {
            return;
          }

          if (this.matchData.isParlay) {
            if (SbParlayBetManager.getInstance().CheckMatchExist(this.matchData.eventId)) {
              //already in list
              this.iconPlacedParlayBet.active = true;
              this.iconSupportParlayBet.active = false;
            } else {
              this.iconSupportParlayBet.active = true;
              this.iconPlacedParlayBet.active = false;
            }
          } else {
            this.iconSupportParlayBet.active = false;
            this.iconPlacedParlayBet.active = false;
          }
        };

        SbMatch.IsVitualMatch = function IsVitualMatch(matchData, leagueData) {
          if (matchData.type == SbTypeMatch.GSVirtualMatch || matchData.type == SbTypeMatch.VoltaMatch || matchData.type == SbTypeMatch.LeagueBetting) {
            return true;
          } else if (matchData.type == SbTypeMatch.LSports) {
            var id = leagueData.leagueId;
            var listLeagueIdVirtualMatch = [1203, 1204, 1205, 1857];

            for (var i = 0; i < listLeagueIdVirtualMatch.length; i++) {
              if (id == listLeagueIdVirtualMatch[i]) return true;
            }
          }

          return false; //real match
        };

        _proto2.onEventListParlayBetChanged = function onEventListParlayBetChanged(eventId) {
          if (this.matchData == null || this.matchData.eventId == null) {
            return;
          }

          if (String(eventId).localeCompare(this.matchData.eventId) == 0) {
            console.log("onEventListParlayBetChanged: " + eventId + " " + Math.random());
            this.updateStatusParlayBet();
          }
        };

        _proto2.checkIsHomeHandicap = function checkIsHomeHandicap(marketAsianHandicapFT) {
          // check xem đội nào chấp để đổi màu label 
          if (marketAsianHandicapFT.hasOwnProperty("o")) {
            if (marketAsianHandicapFT.o.length > 0) {
              var p = Number(marketAsianHandicapFT.o[0].p);
              var colorHandicap = this.colorTeamHandicap[1] || Color.WHITE;

              if (p < 0) {
                this.lbHomeName.color = new Color(colorHandicap.r, colorHandicap.g, colorHandicap.b, this.lbHomeName.color.a);
                this.lbHomeOdd.color = this.lbHomeName.color;
              } else if (p > 0) {
                this.lbAwayName.color = new Color(colorHandicap.r, colorHandicap.g, colorHandicap.b, this.lbAwayName.color.a);
                this.lbAwayOdd.color = this.lbAwayName.color;
              }
            } else {
              this.resetNormalColor();
            }
          } else {
            this.resetNormalColor();
          }
        };

        _proto2.resetNormalColor = function resetNormalColor() {
          var colorNormal = this.colorTeamHandicap[0] || Color.BLACK;
          this.lbHomeName.color = new Color(colorNormal.r, colorNormal.g, colorNormal.b, this.lbHomeName.color.a);
          this.lbHomeOdd.color = this.lbHomeName.color;
          this.lbAwayName.color = new Color(colorNormal.r, colorNormal.g, colorNormal.b, this.lbAwayName.color.a);
          this.lbAwayOdd.color = this.lbAwayName.color;
        };

        _proto2.checkHasMarketOfExtraMatch = function checkHasMarketOfExtraMatch(marketID) {
          if (marketID >= 23 && marketID <= 28) return true;
          return false;
        };

        _proto2.setButtonShowBetDetailsDisable = function setButtonShowBetDetailsDisable(value) {
          for (var i = 0; i < this.listButtonShowBetDetails.length; i++) {
            if (this.listButtonShowBetDetails[i] != null) {
              var button = this.listButtonShowBetDetails[i].getComponent(Button);

              if (button != null && button != undefined) {
                if (value) {
                  button.interactable = true;
                  button.node.getComponent(UIOpacity).opacity = 255;
                } else {
                  button.interactable = false;
                  button.node.getComponent(UIOpacity).opacity = 255 * 0.3;
                }
              }
            }
          }
        };

        _proto2.showDataToUI = function showDataToUI(isFirstTimeInit, isCornerMatch, isBookingMatch) {
          if (isFirstTimeInit === void 0) {
            isFirstTimeInit = false;
          }

          if (isCornerMatch === void 0) {
            isCornerMatch = false;
          }

          if (isBookingMatch === void 0) {
            isBookingMatch = false;
          }

          this.lbHomeName.string = this.matchData.homeName;
          this.lbAwayName.string = this.matchData.awayName;
          this.lbHomeOdd.node.active = false;
          this.lbAwayOdd.node.active = false;

          if (isCornerMatch) {
            this.lbHomeOdd.node.active = true;
            this.lbAwayOdd.node.active = true;
            this.toggleFavorite.node.active = false;
            this.lbHomeOdd.string = "[" + SbLocalizationManager.getInstance().GetKeyValue('corner_odds') + "]";
            this.lbAwayOdd.string = "[" + SbLocalizationManager.getInstance().GetKeyValue('corner_odds') + "]";
          } else if (isBookingMatch) {
            this.lbHomeOdd.node.active = true;
            this.lbAwayOdd.node.active = true;
            this.toggleFavorite.node.active = false;
            this.lbHomeOdd.string = "[" + SbLocalizationManager.getInstance().GetKeyValue('booking_odds') + "]";
            this.lbAwayOdd.string = "[" + SbLocalizationManager.getInstance().GetKeyValue('booking_odds') + "]";
          } //====== update card ======//


          if (this.matchData.redCardsHome > 0) {
            this.lbHomeRedCard.string = this.matchData.redCardsHome.toString();
          }

          if (this.matchData.yellowCardsHome > 0) {
            this.lbHomeYellowCard.string = this.matchData.yellowCardsHome.toString();
          }

          if (this.matchData.redCardsAway > 0) {
            this.lbAwayRedCard.string = this.matchData.redCardsAway.toString();
          }

          if (this.matchData.yellowCardsAway > 0) {
            this.lbAwayYellowCard.string = this.matchData.yellowCardsAway.toString();
          }

          if (this.isShowUiForDetail == false) {
            this.nodeHomeRedCard.active = this.matchData.redCardsHome > 0 ? true : false;
            this.nodeHomeYellowCard.active = this.matchData.yellowCardsHome > 0 ? true : false;
            this.nodeAwayRedCard.active = this.matchData.redCardsAway > 0 ? true : false;
            this.nodeAwayYellowCard.active = this.matchData.yellowCardsAway > 0 ? true : false;
          }

          if (isCornerMatch) {
            this.nodeHomeRedCard.active = false;
            this.nodeHomeYellowCard.active = false;
            this.nodeAwayRedCard.active = false;
            this.nodeAwayYellowCard.active = false;
          } //======


          if (this.matchData.isLive) {
            if (this.isShowUiForDetail == false) {
              this.setColorBgMatchLive();
            } else {
              this.setColorBgMatchLive(false);
            }

            if (this.isMatchExtra) this.lbScoreOfTheMatch.string = this.matchData.homeScoreOT + " - " + this.matchData.awayScoreOT;else this.lbScoreOfTheMatch.string = this.matchData.homeScore + " - " + this.matchData.awayScore;

            if (isCornerMatch) {
              this.lbScoreOfTheMatch.string = this.matchData.cornersHome + " - " + this.matchData.cornersAway;
            }

            if (isBookingMatch) {
              this.lbScoreOfTheMatch.string = this.matchData.redCardsHome + this.matchData.yellowCardsHome + " - " + (this.matchData.redCardsAway + this.matchData.yellowCardsAway);
            }

            this.lbTimeOfTheMatch.string = SbMatch.ConvertGameTimeToMatchTimeFormat(this.matchData.gameTime, this.matchData.gamePart, this.matchData.stoppageTime);

            if (this.matchData.gamePart <= SbMatchStatus.RegulaTimeFinished) {
              if (this.isShowUiForDetail == false) this.nodeScoreOfMatchLive.active = true;
              this.nodeTimeStartMatchNotLive.active = false;
              this.lbIsGoingLive.node.active = false;
            } else if (this.isMatchExtra == false) {
              // this.resetInfoMainMatch();
              this.lbTimeOfTheMatch.string = "";

              if (SbConfigManager.getInstance().GetSkinCurrent() === SbSkinID.Skin0 || SbConfigManager.getInstance().GetSkinCurrent() === SbSkinID.Skin2) {
                this.lbTimeStart.string = "Hiệp chính đã kết thúc";
              } else {
                this.lbTimeStart.string = "Hiệp chính đã kết thúc";
              }

              this.lbIsGoingLive.node.active = false;
            }

            if (this.isMatchExtra && this.matchExtra == null && this.matchData.gamePart <= SbMatchStatus.RegulaTimeFinished) {
              this.lbTimeOfTheMatch.string = "Hiệp phụ";
            } else if (this.isMatchExtra && this.matchExtra == null && this.matchData.gamePart > SbMatchStatus.RegulaTimeFinished) {
              this.nodeTimeStartMatchNotLive.active = false;
            }

            this.mainInfo.top = 46;
            this.mainInfo.updateAlignment();
          } else {
            this.setColorBgMatchLive(false);
            var time = SbUtils.ConvertTimeStringToDDMM(this.matchData.startDate, true);
            this.lbTimeStart.string = SbUtils.ConvertTimeStringToTodayFormat(this.matchData.startDate) + (time.length > 0 ? "  - " + SbUtils.ConvertTimeStringToDDMM(this.matchData.startDate, true) : "");
            this.nodeScoreOfMatchLive.active = false;
            if (this.isShowUiForDetail) this.nodeTimeStartMatchNotLive.active = false;else this.nodeTimeStartMatchNotLive.active = true;
            this.mainInfo.top = 46;
            this.mainInfo.updateAlignment();
          }

          this.CheckMatchFavoriteStatus();
          if (this.matchData.isLive) this.lbIsGoingLive.node.active = false;else {
            if (this.matchData.isGoingLive && this.isShowUiForDetail == false && IS_SHOW_ICON_GOING_LIVE) //cho bet khi trận đang live
              this.lbIsGoingLive.node.active = true;else this.lbIsGoingLive.node.active = false;
          }
          if (this.isMatchExtra == false) this.updateMatchStatus(this.matchData.status, isFirstTimeInit);
          if (this.nodeHot != null && IS_SHOW_ICON_HOT) this.nodeHot.active = this.matchData.hotMatch === 1 ? true : false;
          this.fireCallbackDataLiveChange();
        };

        SbMatch.ConvertGameTimeToMatchTimeFormat = function ConvertGameTimeToMatchTimeFormat(gameTime, gamePart, stoppageTime, isMatchExtra) {
          var timeOfTheMatch = "";

          if (gamePart == SbMatchStatus.FirstHalf || gamePart == SbMatchStatus.SecondHalf || gamePart == SbMatchStatus.FirstHalfExtraTime || gamePart == SbMatchStatus.SecondHalfExtraTime) {
            if (stoppageTime > 0) {
              if (gamePart == SbMatchStatus.FirstHalf) timeOfTheMatch = "Bù giờ 1H " + stoppageTime + "'";else if (gamePart == SbMatchStatus.SecondHalf) timeOfTheMatch = "Bù giờ 2H " + stoppageTime + "'";else if (gamePart == SbMatchStatus.FirstHalfExtraTime) timeOfTheMatch = "Bù giờ 1H " + stoppageTime + "'";else if (gamePart == SbMatchStatus.SecondHalfExtraTime) timeOfTheMatch = "Bù giờ 2H " + stoppageTime + "'";
            } else {
              if (gameTime) {
                timeOfTheMatch = SbMatch.convertIdGamePartToString(gamePart) + SbMatch.convertStringTimeToSecond(gamePart, gameTime);
              } else {
                timeOfTheMatch = SbMatch.convertIdGamePartToString(gamePart);
                timeOfTheMatch = timeOfTheMatch.replace('-', '');
              }
            }
          } else timeOfTheMatch = SbMatch.convertIdGamePartToString(gamePart); // if (gamePart <= SbMatchStatus.RegulaTimeFinished) {
          //     timeOfTheMatch = "";
          // }


          return timeOfTheMatch; // //===
          // if (gamePart <= SbMatchStatus.RegulaTimeFinished) {
          //     timeOfTheMatch = "";
          // }
          // else if (isMatchExtra == false) {
          //     // this.resetInfoMainMatch();
          //     timeOfTheMatch = "";
          //     if (SbConfigManager.getInstance().GetSkinCurrent() === SbSkinID.Skin0 || SbConfigManager.getInstance().GetSkinCurrent() === SbSkinID.Skin2) {
          //         this.lbTimeStart.string = "Hiệp chính đã kết thúc";
          //     } else {
          //         this.lbTimeStart.string = "Hiệp chính đã kết thúc";
          //     }
          //     this.lbIsGoingLive.node.active = false;
          // }
          // if (isMatchExtra && gamePart <= SbMatchStatus.RegulaTimeFinished) {
          //     timeOfTheMatch = "Hiệp phụ";
          // }
          // else if (isMatchExtra && gamePart > SbMatchStatus.RegulaTimeFinished) {
          //     timeOfTheMatch = "";
          // }
        } //display data of match to screen detailt
        ;

        _proto2.fireCallbackDataLiveChange = function fireCallbackDataLiveChange() {
          if (this.callbackDataLiveChange != null) {
            this.callbackDataLiveChange(this.getDataForDataLiveChange());
          }
        };

        SbMatch.GetDataForDataLiveChangeFromMatchData = function GetDataForDataLiveChangeFromMatchData(matchData) {
          var data = new SbMatchShortData();
          data.leagueId = matchData.leagueId;
          data.eventId = matchData.eventId;
          data.gamePart = matchData.gamePart;
          data.leagueName = matchData.leagueName;
          data.redCardsHome = matchData.redCardsHome;
          data.yellowCardsHome = matchData.yellowCardsHome;
          data.redCardsAway = matchData.redCardsAway;
          data.yellowCardsAway = matchData.yellowCardsAway;
          data.strTimeStart = SbUtils.ConvertTimeStringToTodayFormat(matchData.startDate) + " " + SbUtils.ConvertTimeStringToDDMMYYYY(matchData.startDate, true); //this.lbTimeStart.string;

          data.isGoingLive = matchData.isLive != true && matchData.isGoingLive ? true : false;
          data.isLive = matchData.isLive;
          data.isLivestream = matchData.isLivestream;
          data.strTimeOfTheMatch = SbMatch.ConvertGameTimeToMatchTimeFormat(matchData.gameTime, matchData.gamePart, matchData.stoppageTime);
          data.homeName = matchData.homeName;
          data.awayName = matchData.awayName;

          if (matchData.gamePart == SbMatchStatus.FirstHalfExtraTime || matchData.gamePart == SbMatchStatus.HaflTimeOfExtraTime || matchData.gamePart == SbMatchStatus.SecondHalfExtraTime || matchData.gamePart == SbMatchStatus.ExtraTimeFinished || matchData.gamePart == SbMatchStatus.PenaltyShootout) {
            data.strScore = matchData.homeScoreOT + " - " + matchData.awayScoreOT;
          } else data.strScore = matchData.homeScore + " - " + matchData.awayScore;

          return data;
        };

        _proto2.getDataForDataLiveChange = function getDataForDataLiveChange() {
          var data = new SbMatchShortData();
          data.leagueId = this.matchData.leagueId;
          data.eventId = this.matchData.eventId;
          data.gamePart = this.matchData.gamePart;
          data.leagueName = this.matchData.leagueName;
          data.homeName = this.lbHomeName.string;
          data.awayName = this.lbAwayName.string;
          data.redCardsHome = this.matchData.redCardsHome;
          data.yellowCardsHome = this.matchData.yellowCardsHome;
          data.redCardsAway = this.matchData.redCardsAway;
          data.yellowCardsAway = this.matchData.yellowCardsAway;
          data.strScore = this.lbScoreOfTheMatch.string;
          data.strTimeOfTheMatch = this.lbTimeOfTheMatch.string;
          data.strTimeStart = SbUtils.ConvertTimeStringToTodayFormat(this.matchData.startDate) + " " + SbUtils.ConvertTimeStringToDDMMYYYY(this.matchData.startDate, true); //this.lbTimeStart.string;
          // if (this.matchData.isLive != true && this.matchData.isGoingLive )
          // data["isGoingLive"] =true;
          // else
          // data["isGoingLive"] = false;

          data.isGoingLive = this.matchData.isLive != true && this.matchData.isGoingLive ? true : false;
          data.isLive = this.matchData.isLive;
          data.isLivestream = this.matchData.isLivestream;
          data.isParlay = this.matchData.isParlay; // data["urlVideoLive"] = this.matchData.isLive;

          return data;
        };

        _proto2.updateMatchStatus = function updateMatchStatus(status, isOpenFromPageDetail) {
          if (isOpenFromPageDetail === void 0) {
            isOpenFromPageDetail = false;
          }

          if (status == SbMarketStatus.Active) {
            this.nodeLockMatch.active = false;
            this.setMatchOnPageDetailtEnable(this.nodeLockMatch.active);
            if (isOpenFromPageDetail == false) this.updateAllMarketStatus(status);
            return;
          } else if (status == SbMarketStatus.Suspended) {
            this.nodeLockMatch.active = true;
            this.setMatchOnPageDetailtEnable(this.nodeLockMatch.active);
            if (isOpenFromPageDetail == false) this.updateAllMarketStatus(status);
          } // if (status == undefined || status == null) {
          //     this.nodeLockMatch.active = false;
          //     this.setMatchOnPageDetailtEnable(this.nodeLockMatch.active)
          //     this.updateAllMarketStatus(SbMarketStatus.Active);
          //     return;
          // }
          // if (status.toLocaleLowerCase().localeCompare("active") == 0) {
          //     this.nodeLockMatch.active = false;
          //     this.setMatchOnPageDetailtEnable(this.nodeLockMatch.active)
          //     this.updateAllMarketStatus(SbMarketStatus.Active);
          // }
          // else if (status.toLocaleLowerCase().localeCompare("suspended") == 0) {
          //     this.nodeLockMatch.active = true;
          //     this.setMatchOnPageDetailtEnable(this.nodeLockMatch.active);
          //     this.updateAllMarketStatus(SbMarketStatus.Suspended);
          // }
          else {
              warn("updateMatchStatus fail " + status);
            }
        };

        _proto2.convertMatchStatus = function convertMatchStatus(srt) {
          if (srt == undefined || srt == null) {
            return SbMarketStatus.Active;
          } else if (srt.toLocaleLowerCase().localeCompare("active") == 0) {
            return SbMarketStatus.Active;
          } else if (srt.toLocaleLowerCase().localeCompare("suspended") == 0) {
            return SbMarketStatus.Suspended;
          }

          return SbMarketStatus.Active;
        };

        _proto2.delayUpdateContentSizeMatchExtra = function delayUpdateContentSizeMatchExtra(time) {
          var _this2 = this;

          if (this.isMatchExtra && this.matchExtra != null) {
            tween(this.matchExtra.node).delay(time).call(function () {
              _this2.updateContentSize();
            }).start();
          }
        };

        _proto2.updateContentSize = function updateContentSize() {
          var marketContentSizeHeight = -1;

          for (var i = 0; i < this.market.length; i++) {
            if (marketContentSizeHeight < this.market[i].GetContentSizeHeight()) marketContentSizeHeight = this.market[i].GetContentSizeHeight();
          }

          if (marketContentSizeHeight > 0) {
            // if (marketContentSizeHeight < MAX_SIZE_HEIGHT_MATCH)
            //     this.node.setContentSize(new cc.Size(this.node.getContentSize().width), MAX_SIZE_HEIGHT_MATCH + this.matchExtra.node.getContentSize().height);
            // else {
            //     this.node.setContentSize(new cc.Size(this.node.getContentSize().width), marketContentSizeHeight + this.matchExtra.node.getContentSize().height);
            //     for (let i = 0; i < this.market.length; i++)
            //         this.market[i].SetLayoutHeight(marketContentSizeHeight);
            // }
            var height = MAX_SIZE_HEIGHT_MATCH;
            if (marketContentSizeHeight < MAX_SIZE_HEIGHT_MATCH) height = MAX_SIZE_HEIGHT_MATCH + PADING_TOP;else height = marketContentSizeHeight + PADING_TOP;
            var matchExtraHeight = 0;

            if (this.matchExtra != null) {
              matchExtraHeight = this.matchExtra.node.getComponent(UITransform).height;
            }

            this.getNodeTransform().setContentSize(new Size(this.getNodeTransform().width, height + matchExtraHeight));

            if (this.matchExtra != null) {
              this.matchExtra.node.setPosition(this.matchExtra.node.position.x, -1 * height);

              for (var _i = 0; _i < this.market.length; _i++) this.market[_i].SetMarginBottom(matchExtraHeight);
            }
          }

          if (this.nodeLockMatch != null) {
            if (this.nodeLockMatch.active) {
              var wg = this.nodeLockMatch.getComponent(Widget);

              if (wg != null && wg != undefined) {
                wg.top = PADING_TOP;
                wg.bottom = 0;
                wg.left = 0;
                wg.right = 0;
                wg.updateAlignment();
              }
            }
          }

          this.updateAlignmentWidgetTopBottomZero(marketContentSizeHeight);
        };

        _proto2.updateAlignmentWidgetTopBottomZero = function updateAlignmentWidgetTopBottomZero(height) {
          for (var i = 0; i < this.listWidgetAlignTopBottomZero.length; i++) {
            var size = this.listWidgetAlignTopBottomZero[i].node.getComponent(UITransform);
            this.listWidgetAlignTopBottomZero[i].node.setPosition(this.listWidgetAlignTopBottomZero[i].node.position.x, -PADING_TOP);
            this.listWidgetAlignTopBottomZero[i].node.getComponent(UITransform).setContentSize(size.width, height);
          }
        };

        _proto2.Hide = function Hide() {
          this.getNodeOpacity().opacity = 0;
        };

        _proto2.Show = function Show() {
          this.getNodeOpacity().opacity = 255;
        };

        _proto2.ExpandItem = function ExpandItem() {
          {
            // this.node.active = true;
            this.isExpandAllMatchs = true;
            this.getNodeOpacity().opacity = 255;
            Tween.stopAllByTarget(this.node);
            tween(this.node).to(TIME_COLLAPSE_ITEM, {
              scale: new Vec3(1, 1, 1)
            }).start();
          }
        };

        _proto2.CollapseItem = function CollapseItem() {
          var _this3 = this;

          {
            Tween.stopAllByTarget(this.node);
            tween(this.node).to(TIME_COLLAPSE_ITEM, {
              scale: new Vec3(1, 0, 1)
            }).call(function () {
              _this3.getNodeOpacity().opacity = 0;
            }).start(); // this.node.active = false;

            this.isExpandAllMatchs = false;
          }
        };

        _proto2.HasMatch = function HasMatch(data) {
          if (this.matchData.eventId == data.eventId) return true;
          return false;
        };

        _proto2.HasMatchID = function HasMatchID(matchID) {
          if (this.matchData.eventId === matchID) return true;
          return false;
        };

        _proto2.HasDomainMatch = function HasDomainMatch(data) {
          if (this.matchData.eventId == data.domainEventId) return true;
          return false;
        };

        _proto2.CheckRemoveOddsOld = function CheckRemoveOddsOld(listNewOdds) {
          var hasMatketExtra = false;

          if (hasMatketExtra == false) {
            for (var i = 0; i < this.market.length; i++) {
              hasMatketExtra = this.checkHasMarketOfExtraMatch(listNewOdds[0].marketId);
              if (hasMatketExtra) break;
            }
          }

          if (hasMatketExtra && this.isMatchExtra && this.matchExtra != null) {
            this.matchExtra.CheckRemoveOddsOld(listNewOdds);
            return;
          } // //update UI


          for (var _i2 = 0; _i2 < this.market.length; _i2++) {
            if (this.market[_i2].HasMarket(listNewOdds[0])) {
              this.market[_i2].CheckRemoveOddsOld(listNewOdds);

              break;
            }
          }

          this.checkMarketDontHaveOdds("CheckRemoveOddsOld"); // //update data

          var listMarket = this.matchData.markets;

          for (var _i3 = 0; _i3 < listMarket.length; _i3++) {
            if (listMarket[_i3].mi == listNewOdds[0].marketId) {
              var listOdds = listMarket[_i3].o;

              for (var j = listOdds.length - 1; j >= 0; j--) {
                var odds = listNewOdds[0].odds;
                var needRemove = true;

                if (this.isCheckOddsWithPoints(listMarket[_i3].mi)) {
                  if (listOdds[j].p == odds.points) {
                    needRemove = false;
                  }
                } else {
                  if (listOdds[j].soi == odds.strOfferId) {
                    needRemove = false;
                  }
                }

                if (needRemove) listOdds.splice(j, 1);
              }
            }
          }
        };

        _proto2.OddsChange = function OddsChange(data) {
          var hasMatketExtra = false;

          if (hasMatketExtra == false) {
            hasMatketExtra = this.checkHasMarketOfExtraMatch(data.marketId);
          }

          if (hasMatketExtra && this.isMatchExtra == false) {
            this.AddMatchExtra(hasMatketExtra);
          }

          if (hasMatketExtra && this.isMatchExtra && this.matchExtra != null) {
            this.matchExtra.OddsChange(data);
            this.delayUpdateContentSizeMatchExtra(0.2);
            this.updateOddsData(this.matchData.markets, data);
            return;
          }

          for (var i = 0; i < this.market.length; i++) {
            if (this.market[i].HasMarket(data)) {
              if (this.market[i].NeedInsertOdds(data)) {
                this.OddsInsert(data);
              } else this.market[i].OddsChange(data);
            }
          } //update data


          this.updateOddsData(this.matchData.markets, data);
        };

        _proto2.OddsInsert = function OddsInsert(data) {
          for (var i = 0; i < this.market.length; i++) {
            if (this.market[i].HasMarket(data)) {
              this.market[i].OddsInsert(data);
            }
          }

          this.updateContentSize(); //update data

          this.updateOddsData(this.matchData.markets, data);
          if (this.matchData.isLive) this.checkMarketDontHaveOdds("OddsInsert");
          this.updateContentSize();
        };

        _proto2.OddsRemove = function OddsRemove(data) {
          for (var i = 0; i < this.market.length; i++) {
            if (this.market[i].HasMarket(data)) {
              this.market[i].OddsRemove(data);
            }
          }

          if (this.matchData.isLive) this.checkMarketDontHaveOdds("OddsRemove");
          this.updateContentSize();
        };

        _proto2.EventChange = function EventChange(data) {
          if (this.isMatchExtra && this.matchExtra != null) {
            this.matchExtra.EventChange(data);
            return;
          }

          this.matchData.status = this.convertMatchStatus(data.status);
          this.matchData.isLive = data.isLive;
          this.matchData.isGoingLive = data.isGoingLive;
          this.matchData.startDate = data.startDate;
          if (data.hasOwnProperty("cornersHome") && data.cornersHome != null) this.matchData.cornersHome = data.cornersHome;
          if (data.hasOwnProperty("cornersAway") && data.cornersAway != null) this.matchData.cornersAway = data.cornersAway; //sore data for live

          if (data.isLive) {
            this.matchData.gameTime = data.gameTime;
            this.matchData.gamePart = data.gamePart;
            this.matchData.homeScore = data.homeScore;
            this.matchData.awayScore = data.awayScore;
            this.matchData.redCardsHome = data.redCardsHome;
            this.matchData.redCardsAway = data.redCardsAway;
            this.matchData.yellowCardsHome = data.yellowCardsHome;
            this.matchData.yellowCardsAway = data.yellowCardsAway;
            if (data.hasOwnProperty("stoppageTime")) this.matchData.stoppageTime = data.stoppageTime;
            if (data.hasOwnProperty("awayScoreOT") && data.awayScoreOT != null) this.matchData.awayScoreOT = data.awayScoreOT;
            if (data.hasOwnProperty("homeScoreOT") && data.homeScoreOT != null) this.matchData.homeScoreOT = data.homeScoreOT;
          }

          if (this.isMatchExtra == false && (this.matchData.gamePart == SbMatchStatus.FirstHalfExtraTime || this.matchData.gamePart == SbMatchStatus.HaflTimeOfExtraTime || this.matchData.gamePart == SbMatchStatus.SecondHalfExtraTime || this.matchData.gamePart == SbMatchStatus.ExtraTimeFinished || this.matchData.gamePart == SbMatchStatus.PenaltyShootout)) this.resetInfoMainMatch();else this.showDataToUI();
          director.emit(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.matchData);
        };

        _proto2.EventRemove = function EventRemove(data) {
          director.emit(SB_EVENT_EVENT_MATCH_REMOVE, this.matchData);
        };

        _proto2.GetInfoMatchIsLives = function GetInfoMatchIsLives() {
          if (SbMatch.IsMatchHasVideoLivestream(this.matchData)) {
            return this.matchData;
          } else {
            return null;
          }
        };

        _proto2.GetShortInfoMatchIsLives = function GetShortInfoMatchIsLives() {
          if (this.matchData.isSuspended || this.matchData.gamePart == SbMatchStatus.Finished || this.matchData.gamePart == SbMatchStatus.RegulaTimeFinished || this.matchData.gamePart == SbMatchStatus.ExtraTimeFinished) {
            //match is suspended or finished
            return null;
          }

          if (this.matchData.isLivestream) return this.getDataForDataLiveChange();
          return null;
        };

        _proto2.MarketChange = function MarketChange(data) {
          var hasMatketExtra = false;

          if (hasMatketExtra == false) {
            hasMatketExtra = this.checkHasMarketOfExtraMatch(data.domainMarketId);
          }

          if (hasMatketExtra && this.isMatchExtra && this.matchExtra != null) {
            this.matchExtra.MarketChange(data);
            this.delayUpdateContentSizeMatchExtra(0.1);
            this.updateMarketData(data);
            return;
          }

          for (var i = 0; i < this.market.length; i++) {
            if (this.market[i].HasDomainMarket(data)) {
              this.market[i].MarketChange(data);
            }
          }

          this.updateContentSize(); // //update data

          this.updateMarketData(data);
          if (this.matchData.isLive) this.checkMarketDontHaveOdds("MarketChange");
        };

        _proto2.GetFullNameOfMatch = function GetFullNameOfMatch() {
          var nameMatch = this.matchData.homeName + this.matchData.awayName;
          nameMatch = nameMatch.toLocaleLowerCase();
          nameMatch = nameMatch.replace(/ /g, "");
          return nameMatch;
        };

        _proto2.ShowDetailOfMatch = function ShowDetailOfMatch(forceShowVideoPlayer) {
          if (forceShowVideoPlayer === void 0) {
            forceShowVideoPlayer = null;
          }

          this.showDetail(forceShowVideoPlayer);
        };

        _proto2.IsMatchFavorite = function IsMatchFavorite() {
          return this.toggleFavorite.isChecked;
        };

        _proto2.HideMatch = function HideMatch(time) {
          var _this4 = this; // if (time == 0) {
          //     this.node.setScale(this.node.scale.x, 0);
          //     this.getNodeOpacity().opacity = 0;
          // }
          // else {
          //     Tween.stopAllByTarget(this.getNodeOpacity());
          //     tween(this.getNodeOpacity()).to(time, { opacity: 0 }).call(() => {
          //         this.node.setScale(this.node.scale.x, 0);
          //         this.getNodeOpacity().opacity = 0;
          //     }).start();
          // }


          this.node.setScale(this.node.scale.x, 0);
          SbUtils.SetAllUIHiden(this.node, true);
          Tween.stopAllByTarget(this.getNodeOpacity());
          tween(this.getNodeOpacity()).delay(1).call(function () {
            _this4.isHiddenAllUI = null;

            _this4.checkUiOutOfView();
          }).start();
        };

        _proto2.ShowMatch = function ShowMatch(time) {
          // if (time == 0) {
          this.node.setScale(this.node.scale.x, 1); // this.getNodeOpacity().opacity = 255;
          // cheat update layout parent, fuck cc3

          this.getNodeTransform().height = this.getNodeTransform().height + 0.00000001; // }
          // else {
          //     this.node.setScale(this.node.scale.x, 1);
          //     this.getNodeOpacity().opacity = 0;
          //     Tween.stopAllByTarget(this.getNodeOpacity());
          //     tween(this.getNodeOpacity()).to(time, { opacity: 255 }).start();
          // }
          // SbUtils.SetAllUIHiden(this.node, false);
          // Tween.stopAllByTarget(this.getNodeOpacity());
          // tween(this.getNodeOpacity()).delay(0.3).call(()=>{
          //     this.isHiddenAllUI = null;
          //     this.checkUiOutOfView();
          // }).start();
        };

        _proto2.ForceShowAllUI = function ForceShowAllUI() {
          SbUtils.SetAllUIHiden(this.node, false);
        };

        _proto2.ForceHiddenAllUI = function ForceHiddenAllUI() {
          SbUtils.SetAllUIHiden(this.node, true);
        };

        _proto2.SetMatchIsFavorite = function SetMatchIsFavorite(value) {
          this.toggleFavorite.setIsCheckedWithoutNotify(value);
        };

        _proto2.SetCallbackStatusFavoriteChange = function SetCallbackStatusFavoriteChange(cb) {
          this.callbackStatusFavoriteChange = cb;
        };

        _proto2.IsMatchLive = function IsMatchLive() {
          if (this.matchData.isLive) {
            if (this.isShowUiForDetail == false) return true;
          }

          return false;
        };

        SbMatch.IsMatchHasVideoLivestream = function IsMatchHasVideoLivestream(matchData) {
          if (matchData.isSuspended || matchData.gamePart == SbMatchStatus.Finished || matchData.gamePart == SbMatchStatus.RegulaTimeFinished || matchData.gamePart == SbMatchStatus.ExtraTimeFinished || matchData.gamePart == SbMatchStatus.PenaltyShootout || matchData.gamePart == SbMatchStatus.HaflTimeOfExtraTime || matchData.gamePart == SbMatchStatus.FirstHalfExtraTime || matchData.gamePart == SbMatchStatus.SecondHalfExtraTime) {
            //match is suspended or finished
            return false;
          }

          if (matchData.isLivestream && matchData.isLive) return true;
          return false;
        };

        _proto2.checkMarketDontHaveOdds = function checkMarketDontHaveOdds(remove) {
          if (this.lbMessNoMarket != null) {
            // Extra don't show
            if (this.GetStatusHasMatchExtra()) {
              this.lbMessNoMarket.node.active = false;
              return;
            }

            if (this.sbFootballBettingController.IsBettingDetailsAvailable()) {
              return; //show detail stop update main
            }

            var countFT = 0;
            var countHT = 0;

            for (var i = 0; i < this.market.length; i++) {
              var mId = this.market[i].GetMarketID();

              if (mId == SbMarketId.AsianHandicapFT || mId == SbMarketId.OverUnderFT || mId == SbMarketId.Market1X2FT) {
                countFT += this.market[i].GetOddsLength();
              } else if (mId == SbMarketId.AsianHandicapHT || mId == SbMarketId.OverUnderHT || mId == SbMarketId.Market1X2HT) {
                countHT += this.market[i].GetOddsLength();
              }
            }

            var isCornerMatch = SbMarket.IsCornerMatch(this.leagueData.leagueName);
            var isBookingMatch = SbMarket.IsBookingMatch(this.leagueData.leagueName);

            if (isCornerMatch) {
              for (var _i4 = 0; _i4 < this.market.length; _i4++) {
                var _mId = this.market[_i4].GetMarketID();

                if (_mId == SbMarketId.CornerHandicapFT || _mId == SbMarketId.CornerOverUnderFT || _mId == SbMarketId.Corner1X2FT) {
                  countFT += this.market[_i4].GetOddsLength();
                } else if (_mId == SbMarketId.CornerHandicapHT || _mId == SbMarketId.CornerOverUnderHT || _mId == SbMarketId.Corner1X2HT) {
                  countHT += this.market[_i4].GetOddsLength();
                }
              }
            }

            if (isBookingMatch) {
              for (var _i5 = 0; _i5 < this.market.length; _i5++) {
                var _mId2 = this.market[_i5].GetMarketID();

                if (_mId2 == SbMarketId.BookingAsianHandicapFT || _mId2 == SbMarketId.BookingOverUnderFT || _mId2 == SbMarketId.Booking1X2FT) {
                  countFT += this.market[_i5].GetOddsLength();
                } else if (_mId2 == SbMarketId.BookingAsianHandicapHT || _mId2 == SbMarketId.BookingOverUnderHT || _mId2 == SbMarketId.Booking1X2HT) {
                  countHT += this.market[_i5].GetOddsLength();
                }
              }
            }

            if (this.isShowOnlyOddsHT) {
              if (countHT <= 0) {
                this.lbMessNoMarket.node.active = true;
                this.lbMessNoMarket.node.getComponent(Widget).updateAlignment();
              } else if (this.lbMessNoMarket.node.active) {
                this.lbMessNoMarket.node.active = false;
              }
            } else {
              if (countFT <= 0) {
                this.lbMessNoMarket.node.active = true;
                this.lbMessNoMarket.node.getComponent(Widget).updateAlignment();
              } else if (this.lbMessNoMarket.node.active) {
                this.lbMessNoMarket.node.active = false;
              }
            }

            if (this.market.length == 0) {
              this.lbMessNoMarket.node.active = true;
              this.lbMessNoMarket.node.getComponent(Widget).updateAlignment();
            } // this.lbMessNoMarket.node.active = count == 0 ? true : false;

          }
        };

        _proto2.isCheckOddsWithPoints = function isCheckOddsWithPoints(marketId) {
          if (marketId == SbMarketId.AsianHandicapFT || marketId == SbMarketId.AsianHandicapHT || marketId == SbMarketId.OverUnderFT || marketId == SbMarketId.OverUnderHT || marketId == SbMarketId.CornerHandicapFT || marketId == SbMarketId.CornerHandicapHT || marketId == SbMarketId.CornerOverUnderFT || marketId == SbMarketId.CornerOverUnderHT || marketId == SbMarketId.BookingAsianHandicapFT || marketId == SbMarketId.BookingAsianHandicapHT || marketId == SbMarketId.BookingOverUnderFT || marketId == SbMarketId.BookingOverUnderHT || marketId == SbMarketId.AsianHandicapExtraFT || marketId == SbMarketId.AsianHandicapExtraHT || marketId == SbMarketId.OverUnderExtraFT || marketId == SbMarketId.OverUnderExtraHT) {
            return true;
          }

          return false;
        };

        _proto2.showDetail = function showDetail(forceShowVideoPlayer) {
          if (forceShowVideoPlayer === void 0) {
            forceShowVideoPlayer = null;
          }

          var footballBettingController = this.sbFootballBettingController;

          if (footballBettingController != null && footballBettingController != undefined) {
            // cc.log("this.leagueData: " + JSON.stringify(this.leagueData))
            // cc.log("this.matchData: " + JSON.stringify(this.matchData))
            footballBettingController.ShowBettingDetails(this.leagueData, this.matchData, forceShowVideoPlayer);
          }
        };

        _proto2.onClickShowDetail = function onClickShowDetail() {
          SbSoundsManager.getInstance().playSfxClick();
          this.showDetail();
        };

        _proto2.setMatchOnPageDetailtEnable = function setMatchOnPageDetailtEnable(value) {
          //SbSoundsManager.getInstance().playSfxClick();
          var footballBettingController = this.sbFootballBettingController;

          if (footballBettingController != null && footballBettingController != undefined) {
            if (footballBettingController.IsBettingDetailsAvailable()) {
              // cc.log("setMatchOnPageDetailtEnable " + value)
              footballBettingController.SetBettingDetailsEnable(this.leagueData.leagueId, this.matchData.eventId, value);
            }
          }
        };

        _proto2.CheckMatchFavoriteStatus = function CheckMatchFavoriteStatus() {
          if (SbMatchFavorite.getInstance().IsListFavoriteHasMatch(parseInt(this.matchData.eventId))) {
            this.toggleFavorite.setIsCheckedWithoutNotify(true);
          } else {
            this.toggleFavorite.setIsCheckedWithoutNotify(false);
          }
        };

        _proto2.onToggleFavoriteClick = function onToggleFavoriteClick(toggle, customEventData) {
          var _this5 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (this.skipCallbackStatusFavoriteChange) {
            this.skipCallbackStatusFavoriteChange = false;
            return;
          }

          log("onToggleFavoriteClick: asssdd");

          var callbackMatch = function callbackMatch() {
            _this5.CheckMatchFavoriteStatus();

            if (_this5.callbackStatusFavoriteChange != null) {
              _this5.callbackStatusFavoriteChange();
            }
          };

          if (toggle.isChecked) {
            // , this.matchData.startDate, this.matchData.isLive, SbMatch.IsVitualMatch(this.matchData, this.leagueData)
            SbMatchFavorite.getInstance().PushMatch(this.leagueData.leagueId, parseFloat(this.matchData.eventId), callbackMatch, this.matchData.startDate);
          } else {
            SbMatchFavorite.getInstance().RemoveMatch(this.leagueData.leagueId, parseFloat(this.matchData.eventId), callbackMatch);
          }
        };

        _proto2.onClickShowGuideIconOnGoingLive = function onClickShowGuideIconOnGoingLive() {
          SbSoundsManager.getInstance().playSfxClick();
          this.tooltips.SetContent(SbLocalizationManager.getInstance().GetKeyValue("SupportBetLive"));
          this.tooltips.ShowTooltip();
        };

        _proto2.onClickShowGuideIconMatchHot = function onClickShowGuideIconMatchHot() {
          SbSoundsManager.getInstance().playSfxClick();
          this.tooltips.SetContent(SbLocalizationManager.getInstance().GetKeyValue("HotMatchPlzBet"));
          this.tooltips.ShowTooltip();
        };

        _proto2.expandOrCollapseAllItem = function expandOrCollapseAllItem() {
          if (this.isExpandAllMatchs) this.CollapseItem();else this.ExpandItem();
          this.isExpandAllMatchs = !this.isExpandAllMatchs;
        };

        SbMatch.CheckHasTodayMatch = function CheckHasTodayMatch(data) {
          if (SbUtils.IsToday(data.startDate && data.isLive == false)) return true;
          return false;
        };

        SbMatch.CheckHasLiveMatch = function CheckHasLiveMatch(data) {
          if (data.isLive == true) return true;
          return false;
        };

        SbMatch.CheckHasEarlyMatch = function CheckHasEarlyMatch(data) {
          if (SbUtils.IsTimeEarly(data.startDate) && data.isLive == false) return true;
          return false;
        };

        _proto2.getItemMarketByID = function getItemMarketByID(type, data) {
          var item = null;

          if (type == SbMarketId.AsianHandicapFT || type == SbMarketId.AsianHandicapHT || type == SbMarketId.AsianHandicapExtraFT || type == SbMarketId.AsianHandicapExtraHT || type == SbMarketId.CornerHandicapFT || type == SbMarketId.CornerHandicapHT || type == SbMarketId.BookingAsianHandicapFT || type == SbMarketId.BookingAsianHandicapHT) {
            var marketNode = SbNodePoolManager.createItemFromPrefab(this.listPrefabMarket[0]);

            if (marketNode) {
              item = marketNode.getComponent(SbMarketAsianHandicap);
              item.reset();
            }

            return item;
          } else if (type == SbMarketId.OverUnderFT || type == SbMarketId.OverUnderHT || type == SbMarketId.OverUnderExtraFT || type == SbMarketId.OverUnderExtraHT || type == SbMarketId.CornerOverUnderFT || type == SbMarketId.CornerOverUnderHT || type == SbMarketId.BookingOverUnderFT || type == SbMarketId.BookingOverUnderHT) {
            var _marketNode = SbNodePoolManager.createItemFromPrefab(this.listPrefabMarket[1]);

            if (_marketNode) {
              item = _marketNode.getComponent(SbMarketUO);
              item.reset();
            }

            return item;
          } else if (type == SbMarketId.Market1X2FT || type == SbMarketId.Market1X2HT || type == SbMarketId.Market1X2ExtraFT || type == SbMarketId.Market1X2ExtraHT || type == SbMarketId.Corner1X2FT || type == SbMarketId.Corner1X2HT || type == SbMarketId.Booking1X2FT || type == SbMarketId.Booking1X2HT) {
            var _marketNode2 = SbNodePoolManager.createItemFromPrefab(this.listPrefabMarket[2]);

            if (_marketNode2) {
              item = _marketNode2.getComponent(SbMarket1X2);
              item.reset();
            }

            return item;
          } else return null;
        };

        _proto2.convertMiliSecondDisplayTime = function convertMiliSecondDisplayTime(time) {
          var timeSecond = time / 1000;
          var h = "00" + Math.floor(timeSecond / 3600);
          var m = "00" + Math.floor(timeSecond % 3600 / 60);
          return h.slice(-2) + "h" + m.slice(-2) + "'";
        };

        SbMatch.convertStringTimeToSecond = function convertStringTimeToSecond(gamePart, time) {
          var timeSecond = time / 1000;
          var minus = Math.floor(timeSecond / 60);
          if (gamePart == SbMatchStatus.SecondHalf) minus = minus;else if (gamePart == SbMatchStatus.FirstHalfExtraTime) minus = minus - 90;else if (gamePart == SbMatchStatus.SecondHalfExtraTime) minus = minus - 105;
          var m = "00" + minus;
          return m.slice(-2) + "'";
        };

        SbMatch.convertIdGamePartToString = function convertIdGamePartToString(id) {
          if (id == 2) return "Hiệp 1 - ";else if (id == 4) return "Hết hiệp 1";else if (id == 8) return "Hiệp 2 - ";else if (id == 16) return "Trận đấu kết thúc";else if (id == 64) return "H.Phụ 1 - ";else if (id == 128) return "Hết H.Phụ 1";else if (id == 256) return "H.Phụ 2 - "; // else if (id == 512)
          //     return "Hết thời gian bù giờ";
          else if (id == 1024) return "Đá luân lưu";
          return "";
        };

        _proto2.update = function update(dt) {
          if (this.isExpandAllMatchs) {
            this.checkUiOutOfView();
          } // cheat update layout parent, fuck cc3


          if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.node) > 0) {
            this.getNodeTransform().height = this.getNodeTransform().height + 0.00000000001;
          } // if (this.isExpandAllMatchs) {
          //     let pos = this.node.parent.convertToWorldSpaceAR(this.node.position);
          //     let visibleSize = cc.view.getVisibleSize();
          //     let winSizeHeight = visibleSize.height;
          //     // if (pos.y < 0 || pos.y > cc.vis.height + this.node.getContentSize().height)
          //     if (pos.y < 0 || (pos.y + (this.node.getContentSize().height)) > (winSizeHeight + this.node.getContentSize().height*2)) {
          //         if (this.node.opacity > 0)
          //             this.node.opacity = 0;
          //     }
          //     else
          //         this.node.opacity = 255;
          // }

        };

        _proto2.checkUiOutOfView = function checkUiOutOfView() {
          var pos = this.getNodeParentTransform().convertToWorldSpaceAR(this.node.position);
          var visibleSize = view.getVisibleSize();
          var winSizeHeight = visibleSize.height - PADING_TOP_OF_SCROLLVIEW_PARENT;
          if (this.isShowUiForDetail) winSizeHeight = visibleSize.height; // // if (pos.y < 0 || pos.y > cc.vis.height + this.node.getContentSize().height)

          if (pos.y < 0 || pos.y > winSizeHeight + this.getNodeTransform().height || this.node.scale.y === 0) {
            if (this.isHiddenAllUI == true) return;
            this.isHiddenAllUI = true;
            SbUtils.SetAllUIHiden(this.node, true); // this.getNodeOpacity().opacity = 0;
          } else {
            if (this.isHiddenAllUI == false) return;
            this.isHiddenAllUI = false; // this.getNodeOpacity().opacity = 255;

            SbUtils.SetAllUIHiden(this.node, false);
          }
        } //========= update match data =======//
        ;

        _proto2.updateMarketData = function updateMarketData(dataUpdate) {
          for (var i = 0; i < this.matchData.markets.length; i++) {
            if (this.matchData.markets[i].mi == dataUpdate.domainMarketId) {
              this.matchData.markets[i].status = dataUpdate.status;
              if (this.matchData.markets[i].status == SbMarketStatus.Hidden) this.matchData.markets[i].o = [];
            }
          }
        } // private updateStatusMarket(dataUpdate) {
        //     for (let i = 0; i < this.matchData.markets.length; i++) {
        //         if (this.matchData.markets[i].mi == dataUpdate.domainMarketId) {
        //             this.matchData.markets[i].status = dataUpdate.status;
        //         }
        //     }
        // }
        ;

        _proto2.updateAllMarketStatus = function updateAllMarketStatus(st) {
          if (this.matchData.markets == null && this.matchData.markets == undefined) return;

          for (var i = 0; i < this.matchData.markets.length; i++) {
            this.matchData.markets[i].status = st; // if (Number(st) == SbMarketStatus.Active)
            // {
            //     if(this.matchData.markets[i].hasOwnProperty("s"))
            //     delete this.matchData.markets[i].this.matchData.markets[i].
            // }
            //     this.matchData.markets[i].s = false;
            // else
            //     this.matchData.markets[i].s = true;
          }

          for (var _i6 = 0; _i6 < this.market.length; _i6++) {
            this.market[_i6].SetMarketStatus(st);
          }
        };

        _proto2.updateOddsData = function updateOddsData(listMarket, oddsUpdateData) {
          var hasMarket = false;
          var hasOdds = false;

          for (var i = 0; i < listMarket.length; i++) {
            if (listMarket[i].mi == oddsUpdateData.marketId) {
              hasMarket = true;
              var listOdds = listMarket[i].o;

              for (var j = 0; j < listOdds.length; j++) {
                var odds = oddsUpdateData.odds;

                if (listOdds[j].soi == odds.strOfferId) {
                  listOdds[j].p = odds.points;
                  hasOdds = true;

                  if (listOdds[j].hasOwnProperty("oh")) {
                    if (listOdds[j].oh.hasOwnProperty("ma") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.ma = odds.oddsHome.hasOwnProperty("malay") ? odds.oddsHome.malay : null;
                    if (listOdds[j].oh.hasOwnProperty("in") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh["in"] = odds.oddsHome.hasOwnProperty("indo") ? odds.oddsHome.indo : null;
                    if (listOdds[j].oh.hasOwnProperty("de") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.de = odds.oddsHome.hasOwnProperty("decimal") ? odds.oddsHome.decimal : null;
                    if (listOdds[j].oh.hasOwnProperty("hk") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.hk = odds.oddsHome.hasOwnProperty("hk") ? odds.oddsHome.hk : null;
                  }

                  if (listOdds[j].hasOwnProperty("oa")) {
                    if (listOdds[j].oa.hasOwnProperty("ma") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.ma = odds.oddsAway.hasOwnProperty("malay") ? odds.oddsAway.malay : null;
                    if (listOdds[j].oa.hasOwnProperty("in") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa["in"] = odds.oddsAway.hasOwnProperty("indo") ? odds.oddsAway.indo : null;
                    if (listOdds[j].oa.hasOwnProperty("de") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.de = odds.oddsAway.hasOwnProperty("decimal") ? odds.oddsAway.decimal : null;
                    if (listOdds[j].oa.hasOwnProperty("hk") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.hk = odds.oddsAway.hasOwnProperty("hk") ? odds.oddsAway.hk : null;
                  }

                  if (listOdds[j].hasOwnProperty("od")) {
                    if (listOdds[j].od.hasOwnProperty("ma") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.ma = odds.oddsDraw.hasOwnProperty("malay") ? odds.oddsDraw.malay : null;
                    if (listOdds[j].od.hasOwnProperty("in") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od["in"] = odds.oddsDraw.hasOwnProperty("indo") ? odds.oddsDraw.indo : null;
                    if (listOdds[j].od.hasOwnProperty("de") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.de = odds.oddsDraw.hasOwnProperty("decimal") ? odds.oddsDraw.decimal : null;
                    if (listOdds[j].od.hasOwnProperty("hk") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.hk = odds.oddsDraw.hasOwnProperty("hk") ? odds.oddsDraw.hk : null;
                  }

                  return;
                }
              }
            }
          }

          if (hasMarket == false) {
            // add new market
            this.matchData.markets.push(JSON.parse("{\"mi\": " + oddsUpdateData.marketId + ", \"gi\": " + 1 + " ,\"o\": []}"));
          } //add new odds


          if (hasOdds == false) {
            for (var _i7 = 0; _i7 < this.matchData.markets.length; _i7++) {
              if (this.matchData.markets[_i7].mi == oddsUpdateData.marketId) {
                this.matchData.markets[_i7].o.push(SbOdds.ChangeFeildNameShort(oddsUpdateData.odds));
              }
            }
          }

          this.updateCountMarketOrder();
        };

        _proto2.updateCountMarketOrder = function updateCountMarketOrder() {
          var countMarketOrder = 0;

          for (var i = 0; i < this.matchData.markets.length; i++) {
            if (this.matchData.markets[i].o && this.matchData.markets[i].o.length > 0) {
              var id = Number(this.matchData.markets[i].mi);

              if (id == SbMarketId.AsianHandicapFT || id == SbMarketId.CornerHandicapFT || id == SbMarketId.BookingAsianHandicapFT || id == SbMarketId.OverUnderFT || id == SbMarketId.CornerOverUnderFT || id == SbMarketId.BookingOverUnderFT || id == SbMarketId.Market1X2FT || id == SbMarketId.Corner1X2FT || id == SbMarketId.Booking1X2FT || id == SbMarketId.AsianHandicapHT || id == SbMarketId.CornerHandicapHT || id == SbMarketId.BookingAsianHandicapHT || id == SbMarketId.OverUnderHT || id == SbMarketId.CornerOverUnderHT || id == SbMarketId.BookingOverUnderHT || id == SbMarketId.Market1X2HT || id == SbMarketId.Corner1X2HT || id == SbMarketId.Booking1X2HT || id == SbMarketId.AsianHandicapExtraFT || id == SbMarketId.OverUnderExtraFT || id == SbMarketId.Market1X2ExtraFT || id == SbMarketId.AsianHandicapExtraHT || id == SbMarketId.OverUnderExtraHT || id == SbMarketId.Market1X2ExtraHT || id == SbMarketId.OddOrEvenFT || id == SbMarketId.OddOrEvenHT || id == SbMarketId.CorrectScoreFT || id == SbMarketId.DoubleChanceFT || id == SbMarketId.DrawNoBetFT) {
                countMarketOrder++;
              }
            }
          }

          this.lbCountOddsHide.string = "+" + countMarketOrder.toString();
          if (countMarketOrder == 0) this.setButtonShowBetDetailsDisable(false);else this.setButtonShowBetDetailsDisable(true);
        };

        _proto2.updateAllAlign = function updateAllAlign() {
          var listWidget = this.node.getComponentsInChildren(Widget);

          for (var i = 0; i < listWidget.length; i++) listWidget[i].alignMode = Widget.AlignMode.ALWAYS; // setTimeout(() => {


          if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.nodePlayAnim) > 30) Tween.stopAllByTarget(this.nodePlayAnim);
          tween(this.nodePlayAnim).delay(1).call(function () {
            for (var _i8 = 0; _i8 < listWidget.length; _i8++) listWidget[_i8].alignMode = Widget.AlignMode.ON_WINDOW_RESIZE;
          }).start();
        };

        _proto2.getNodeTransform = function getNodeTransform() {
          if (this.nodeTransform === null) this.nodeTransform = this.node.getComponent(UITransform);
          return this.nodeTransform;
        };

        _proto2.getNodeParentTransform = function getNodeParentTransform() {
          if (this.nodeParentTransform === null) this.nodeParentTransform = this.node.parent.getComponent(UITransform);
          return this.nodeParentTransform;
        };

        _proto2.getNodeOpacity = function getNodeOpacity() {
          if (this.nodeOpacity === null) this.nodeOpacity = this.node.getComponent(UIOpacity);
          return this.nodeOpacity;
        } //===================================//
        ;

        _createClass(SbMatch, [{
          key: "colorTeamHandicap",
          get: function get() {
            var result = [];

            if (this.skinTeamHandicap) {
              result = this.skinTeamHandicap.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbMatch;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabMatch", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeMatchExtraParent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeMarketParent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeScoreOfMatchLive", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeTimeStartMatchNotLive", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeLockMatch", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeOdd", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayOdd", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbScoreOfTheMatch", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeOfTheMatch", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "lbIsGoingLive", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeStart", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "lbCountOddsHide", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeRedCard", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayRedCard", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeYellowCard", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayYellowCard", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "nodeHomeRedCard", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "nodeAwayRedCard", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "nodeHomeYellowCard", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "nodeAwayYellowCard", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "listPrefabMarket", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "toggleFavorite", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "listButtonShowBetDetails", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "listButtonInSceneBetDetails", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "listWidgetAlignTopBottomZero", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "bgInfoMatch", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "listBgInfoExtraMatch", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "nodeDetail", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "mainInfo", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "tooltips", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "nodeHot", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "skinTeamHandicap", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "listBgOfMatch", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "colorBgMatchIsLive", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(252, 238, 228, 255);
        }
      }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "lbMessNoMarket", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "listNodeChangeColor", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "iconSupportParlayBet", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "iconPlacedParlayBet", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMatchFavorite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbDefine.ts', './SbUtils.ts', './SbGameHTTPManager.ts', './SbConfigManager.ts', './SbCommonPrefabsManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, director, log, Component, SB_EVENT_CHECK_STATUS_FAVORITE, SB_NEED_UPDATE_COUNT_MATCH_FAVORITE, SbUtils, SbGameHTTPManager, SbConfigManager, SbCommonPrefabsManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      director = module.director;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SB_EVENT_CHECK_STATUS_FAVORITE = module.SB_EVENT_CHECK_STATUS_FAVORITE;
      SB_NEED_UPDATE_COUNT_MATCH_FAVORITE = module.SB_NEED_UPDATE_COUNT_MATCH_FAVORITE;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "42275R1DhRIb4y2C4hlN0LJ", "SbMatchFavorite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMatchFavorite = exports('default', (_dec = ccclass('SbMatchFavorite'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMatchFavorite, _Component);

        function SbMatchFavorite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listMatch = [];
          _this.listLeague = [];
          _this.countMatchFav = 0;
          return _this;
        }

        SbMatchFavorite.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbMatchFavorite();
            this.Instance.loadData();
          }

          return this.Instance;
        };

        var _proto = SbMatchFavorite.prototype;

        _proto.InitFavorite = function InitFavorite() {
          this.listMatch = [];
          this.listLeague = [];
          this.countMatchFav = 0;
          this.sendRequestFavoriteIds(true);
          this.FetchCountFavorite();
        };

        _proto.PushMatch = function PushMatch(leagueId, eventId, addFunc, startDate) {
          if (addFunc === void 0) {
            addFunc = null;
          }

          if (startDate === void 0) {
            startDate = '';
          }

          if (startDate && startDate.length > 0) {
            var now = SbUtils.GetDateCurrentTimeZone();
            now.setHours(0, 0, 0, 0);
            var start = SbUtils.GetDateCurrentTimeZone(startDate);
            start.setHours(0, 0, 0, 0);
            var distanceTime = start.getTime() - now.getTime();

            if (distanceTime > 0) {
              var day = distanceTime / (60 * 60 * 24 * 1000);

              if (Math.floor(day) >= SbConfigManager.getInstance().favoriteDistanceDate) {
                SbCommonPrefabsManager.getInstance().ShowMessage('Chỉ có thể yêu thích các trận gần diễn ra');

                if (addFunc) {
                  addFunc();
                }

                return;
              }
            }
          }

          this.pushMatch(leagueId, eventId, addFunc);
        };

        _proto.RemoveMatch = function RemoveMatch(leagueId, eventId, removeFunc) {
          if (removeFunc === void 0) {
            removeFunc = null;
          }

          this.removeMatch(leagueId, eventId, removeFunc);
        };

        _proto.PushLeague = function PushLeague(leagueId, addFunc) {
          if (addFunc === void 0) {
            addFunc = null;
          }

          this.sendRequestAddLeagueFavorite(leagueId, addFunc);
        };

        _proto.RemoveLeague = function RemoveLeague(leagueId, removeFunc) {
          if (removeFunc === void 0) {
            removeFunc = null;
          }

          this.sendRequestRemoveLeagueFavorite(leagueId, removeFunc);
        };

        _proto.IsListFavoriteHasMatch = function IsListFavoriteHasMatch(matchID) {
          return this.findIndexMatchInListFavorite(matchID) >= 0;
        };

        _proto.GetListFavorite = function GetListFavorite() {
          return this.listMatch;
        };

        _proto.CountListFavorite = function CountListFavorite() {
          return this.countMatchFav;
        };

        _proto.IsListFavoriteHasLeague = function IsListFavoriteHasLeague(leagueId) {
          return this.findIndexLeague(leagueId) >= 0;
        };

        _proto.Refesh = function Refesh(callback) {
          this.sendRequestGetFavorite(callback);
        };

        _proto.FetchCountFavorite = function FetchCountFavorite() {
          this.sendRequestGetFavorite(null, true);
        };

        _proto.findIndexLeague = function findIndexLeague(leagueId) {
          return this.listLeague.indexOf(leagueId);
        };

        _proto.findIndexMatchInListFavorite = function findIndexMatchInListFavorite(matchID) {
          return this.listMatch.findIndex(function (e) {
            return e.matchID === matchID;
          });
        };

        _proto.pushMatch = function pushMatch(leagueId, matchID, addFunc) {
          if (addFunc === void 0) {
            addFunc = null;
          } // let index = this.findIndexMatchInListFavorite(matchID);
          // if (index < 0) {
          //     this.listMatch.push({ "leagueID": leagueId, "matchID": matchID});
          //     this.saveData();
          // }


          this.sendRequestAddMatchFavorite(matchID, leagueId, addFunc);
        };

        _proto.removeMatch = function removeMatch(leagueId, matchID, removeFunc) {
          if (removeFunc === void 0) {
            removeFunc = null;
          } // let index = this.findIndexMatchInListFavorite(matchID);
          // if (index >= 0) {
          //     this.listMatch.splice(index, 1);
          //     this.saveData();
          // }


          this.sendRequestRemoveMatchFavorite(matchID, leagueId, removeFunc);
        };

        _proto.loadData = function loadData() {// let data = sys.localStorage.getItem(KEY_DATA_MATCH_FAVORITE);
          // if (data != null && data != undefined) {
          //     this.listMatch = JSON.parse(data);
          //     this.checkAndClearFavoriteInvalid();
          // }
          // else
          //     this.listMatch = [];
        };

        _proto.addToListLeague = function addToListLeague(leagueId) {
          var index = this.findIndexLeague(leagueId);

          if (index == -1) {
            this.listLeague.push(leagueId);
          }
        };

        _proto.removeFromListLeague = function removeFromListLeague(leagueId) {
          var index = this.findIndexLeague(leagueId);

          if (index != -1) {
            this.listLeague.splice(index, 1);
          }
        };

        _proto.addToListMatch = function addToListMatch(leagueId, matchId) {
          var obj = {
            leagueID: leagueId,
            matchID: matchId
          };
          var index = this.findIndexMatchInListFavorite(matchId);

          if (index == -1) {
            this.listMatch.push(obj);
          }
        };

        _proto.removeFromListMatch = function removeFromListMatch(leagueId, matchId) {
          if (matchId === void 0) {
            matchId = -1;
          }

          if (matchId == -1) {
            this.listMatch = this.listMatch.filter(function (a) {
              return a.leagueID != leagueId;
            }).slice();
          } else {
            var index = this.findIndexMatchInListFavorite(matchId);

            if (index != -1) {
              this.listMatch.splice(index, 1);
            }
          }
        } //======== http handlers ============//
        ;

        _proto.sendRequestFavoriteIds = function sendRequestFavoriteIds(isEmitEvent) {
          var _this2 = this;

          if (isEmitEvent === void 0) {
            isEmitEvent = false;
          }

          var url = SbConfigManager.getInstance().urlGetFavorite + "?sportId=" + 1;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            if (!obj) {
              return;
            }

            var data = obj['1'];

            if (data) {
              _this2.listMatch = [];
              _this2.listLeague = [];
              var listLeague = data['0'];
              var listIdsMerge = data['1'];

              if (listIdsMerge) {
                listIdsMerge.forEach(function (id) {
                  var info = id.split('_');

                  if (info.length >= 2) {
                    _this2.addToListMatch(parseInt(info[0]), parseInt(info[1]));
                  }
                });
              }

              if (listLeague) {
                listLeague.forEach(function (id) {
                  _this2.addToListLeague(parseInt(id));
                });
              }

              if (isEmitEvent) {
                director.emit(SB_EVENT_CHECK_STATUS_FAVORITE);
              }
            }
          }, function () {}, true);
        };

        _proto.sendRequestGetFavorite = function sendRequestGetFavorite(callback, isEmitEvent) {
          var _this3 = this;

          if (isEmitEvent === void 0) {
            isEmitEvent = false;
          }

          var url = SbConfigManager.getInstance().urlEventFavorite;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (responseSuccess) {
            log("sendPostHttpRequest: " + JSON.stringify(responseSuccess));

            if (responseSuccess && responseSuccess['1']) {
              var listDatas = responseSuccess['1'];

              if (callback) {
                callback(listDatas);
              }

              _this3.countMatchFav = 0;
              listDatas.forEach(function (league) {
                var _league$e;

                _this3.countMatchFav += ((_league$e = league['e']) == null ? void 0 : _league$e.length) || 0;
              });

              if (isEmitEvent) {
                director.emit(SB_NEED_UPDATE_COUNT_MATCH_FAVORITE);
              }
            }
          }, function (mes) {
            log("sendPostHttpRequest: ", mes);
          }, true);
        };

        _proto.sendRequestAddLeagueFavorite = function sendRequestAddLeagueFavorite(leagueId, leagueAddFunc) {
          var _this4 = this;

          var url = SbConfigManager.getInstance().urlLeagueFavorite;
          var body = {
            "leagueId": leagueId,
            "sportId": 1
          };
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (responseSuccess) {
            log("sendPostHttpRequest: " + JSON.stringify(responseSuccess));

            _this4.addToListLeague(leagueId);

            _this4.sendRequestFavoriteIds();

            _this4.FetchCountFavorite();

            if (leagueAddFunc) {
              leagueAddFunc();
            }
          }, function (errCode, mes) {
            log("sendPostHttpRequest: " + JSON.stringify(errCode + ": " + mes));

            if (leagueAddFunc) {
              leagueAddFunc();
            }
          }, true);
        };

        _proto.sendRequestRemoveLeagueFavorite = function sendRequestRemoveLeagueFavorite(leagueId, leagueRemoveFunc) {
          var _this5 = this;

          var url = SbConfigManager.getInstance().urlLeagueFavorite + '/delete';
          var body = {
            "leagueId": leagueId,
            "sportId": 1
          };
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (responseSuccess) {
            log("sendDeleteHttpRequest: " + JSON.stringify(responseSuccess));

            _this5.removeFromListLeague(leagueId);

            _this5.removeFromListMatch(leagueId, -1);

            _this5.sendRequestFavoriteIds();

            _this5.FetchCountFavorite();

            if (leagueRemoveFunc) {
              leagueRemoveFunc();
            }
          }, function (errCode, mes) {
            log("sendDeleteHttpRequest: " + JSON.stringify(errCode + ": " + mes));

            if (leagueRemoveFunc) {
              leagueRemoveFunc();
            }
          }, true);
        };

        _proto.sendRequestAddMatchFavorite = function sendRequestAddMatchFavorite(matchID, leagueId, matchAddFunc) {
          var _this6 = this;

          var url = SbConfigManager.getInstance().urlEventFavorite;
          var body = {
            "eventId": matchID,
            "leagueId": leagueId,
            "sportId": 1
          };
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (responseSuccess) {
            log("sendPostHttpRequest: " + JSON.stringify(responseSuccess));

            _this6.addToListMatch(leagueId, matchID);

            _this6.sendRequestFavoriteIds(true);

            _this6.FetchCountFavorite();

            if (matchAddFunc) {
              matchAddFunc();
            }
          }, function (errCode, mes) {
            log("sendPostHttpRequest: " + JSON.stringify(errCode + ": " + mes));

            if (matchAddFunc) {
              matchAddFunc();
            }
          }, true);
        };

        _proto.sendRequestRemoveMatchFavorite = function sendRequestRemoveMatchFavorite(matchID, leagueId, matchRemoveFunc) {
          var _this7 = this;

          var url = SbConfigManager.getInstance().urlEventFavorite + '/delete';
          var body = {
            "eventId": matchID,
            "leagueId": leagueId,
            "sportId": 1
          };
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (responseSuccess) {
            log("sendDeleteHttpRequest: " + JSON.stringify(responseSuccess));

            _this7.removeFromListMatch(leagueId, matchID);

            _this7.removeFromListLeague(leagueId);

            _this7.FetchCountFavorite();

            if (matchRemoveFunc) {
              matchRemoveFunc();
            }
          }, function (errCode, mes) {
            log("sendDeleteHttpRequest: " + JSON.stringify(errCode + ": " + mes));

            if (matchRemoveFunc) {
              matchRemoveFunc();
            }
          }, true);
        };

        return SbMatchFavorite;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMatchSchedule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemMatchSchedule.ts', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, instantiate, Widget, Component, SbItemMatchSchedule, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      instantiate = module.instantiate;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      SbItemMatchSchedule = module.SbItemMatchSchedule;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "6e777fmyEZINrCqXWoi8Qdq", "SbMatchSchedule", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMatchSchedule = exports('SbMatchSchedule', (_dec = ccclass('SbMatchSchedule'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMatchSchedule, _Component);

        function SbMatchSchedule() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemMatchSchedulePrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentAllItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbGroupName", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbMatchSchedule.prototype;

        _proto.initData = function initData(data, title, totalRound) {
          var roundCurrent = Number(title);

          if (!isNaN(roundCurrent)) {
            // title is a number
            if (roundCurrent > 0) {
              this.lbGroupName.string = 'Vòng đấu ' + title;
            } else {
              this.lbGroupName.string = "Lượt Đi " + title; //"Lượt trận " + title + " - Vòng bảng";

              if (roundCurrent >= totalRound / 2) {
                this.lbGroupName.string = "Lượt Về";
              } else {
                this.lbGroupName.string = "Lượt Đi";
              }
            }
          } else {
            var getVN = SbLocalizationManager.getInstance().GetKeyValue(title);
            this.lbGroupName.string = getVN.length > 0 ? getVN : title;
          } //--


          if (data && data.sport_event && data.sport_event.sport_event_context && data.sport_event.sport_event_context.groups) {
            var groups = data.sport_event.sport_event_context.groups;
            var nameInfo = groups[0];

            if (groups.length > 0 && nameInfo.name && nameInfo.name !== 'League') {
              var group = groups[0].name.toLocaleLowerCase();
              group = group.replace('-', '');
              group = SbLocalizationManager.getInstance().GetKeyValue(group);

              if (group.length > 0) {
                if (nameInfo.group_name && nameInfo.group_name.length > 0) {
                  this.lbGroupName.string = group + " - " + nameInfo.group_name;
                } else {
                  this.lbGroupName.string = group;
                }
              }
            }
          }

          var item = instantiate(this.itemMatchSchedulePrefab).getComponent(SbItemMatchSchedule);
          item.node.parent = this.nodeParentAllItem;
          item.InitData(data);
          var listWidget = this.node.getComponentsInChildren(Widget);

          for (var i = 0; i < listWidget.length; i++) if (listWidget[i] != null && listWidget[i] != undefined) {
            listWidget[i].updateAlignment();
          }
        };

        return SbMatchSchedule;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemMatchSchedulePrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentAllItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbGroupName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMenuLeft.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameHTTPManager.ts', './SbStringUtil.ts', './SbUIMenu.ts', './SbUtils.ts', './SbSportManager.ts', './SbUserInfo.ts', './SbConfigManager.ts', './SbSoundsManager.ts', './SbBridge.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, Toggle, Vec3, UITransform, log, Tween, tween, UIOpacity, TweenSystem, setDisplayStats, Component, SbGameHTTPManager, SbStringUtil, SbUIMenu, SbUtils, SbTypeTimeMatch, SbUserInfo, SbConfigManager, SbSkinID, SbSoundsManager, SbBridge;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Toggle = module.Toggle;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      log = module.log;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      TweenSystem = module.TweenSystem;
      setDisplayStats = module.setDisplayStats;
      Component = module.Component;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbBridge = module.SbBridge;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "58232OVLZhImKXtZNcnHIdi", "SbMenuLeft", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbMenuLeft = exports('default', (_dec = ccclass('SbMenuLeft'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(SbUIMenu), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Node), _dec13 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMenuLeft, _Component);

        function SbMenuLeft() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "board", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeCurrent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbUserName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMoney", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbVersion", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menu", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSport", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonBetHistory", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonBetSlip", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconRefreshUserInfo", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleChangeEnviromentProd", _descriptor12, _assertThisInitialized(_this));

          _this.onChangeTypeTimeMatch = null;
          _this.isCanChangeTypeTimeMatch = false;
          _this.positionHide = null;
          _this.positionShow = null;
          _this.intervalTime = null;
          _this.countTimeSecond = 1;
          _this.sbCommonPrefabsManager = null;
          _this.sbFootballBettingController = null;
          _this.countHidedebug = 0;
          return _this;
        }

        var _proto = SbMenuLeft.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager; // if (this.menu != null)
          //     this.menu.init(this.sbCommonPrefabsManager);
        };

        _proto.initFootballBettingController = function initFootballBettingController(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.onLoad = function onLoad() {
          var sizeNotch = 30; //SbSafeArea.GetSizeNotch();

          this.positionHide = new Vec3(-this.board.getComponent(UITransform).width, this.board.position.y);
          this.positionShow = new Vec3(sizeNotch, this.board.position.y);

          if (this.bg != null) {
            this.board.setPosition(this.positionHide);
            this.board.active = false;
          }

          if (this.bg != null) this.bg.active = false;
          this.node.active = false;
          this.updateCountdonwTime();
          this.intervalTime = setInterval(this.updateCountdonwTime.bind(this), 1000);
        };

        _proto.start = function start() {
          this.menu.SetIndexDefault(this.convertTypeTimeMatchToIndexMenu(SbUserInfo.getInstance().GetTypeTimeMatch()));
          this.menu.SetButtonClickCallback(this.onClickChangeTypeTimeMatch.bind(this));
          this.updateUserBalance();
          if (this.buttonBetHistory != null && this.buttonBetHistory.interactable == true) this.selectButtonChangeTypeTimeMatch(0); // //for dev

          if (this.toggleChangeEnviromentProd != null) {
            if (SbConfigManager.getInstance().GetEnv().indexOf("staging") >= 0) {
              this.toggleChangeEnviromentProd.isChecked = false;
            } else {
              this.toggleChangeEnviromentProd.isChecked = true;
            }
          }

          this.updateStatusMenuTypeTimeMatch();
          if (this.lbVersion != null) this.lbVersion.string = SbConfigManager.getInstance().GetVersionApp();
        };

        _proto.onDestroy = function onDestroy() {
          this.Clean();
        };

        _proto.onUserBalanceChange = function onUserBalanceChange(data) {
          this.UpdateUserBalance(data);
          this.updateUserBalance();
        };

        _proto.SetCallbackChangeTypeTimeMatch = function SetCallbackChangeTypeTimeMatch(cb) {
          // có cho đổi loại hay không
          this.onChangeTypeTimeMatch = cb;
        };

        _proto.GetMenuTypeTimeMatch = function GetMenuTypeTimeMatch() {
          return this.menu;
        };

        _proto.ConvertIndexTypeTimeMatchToString = function ConvertIndexTypeTimeMatchToString(index) {
          if (index == 0) return "Trận Đấu Sớm";else if (index == 1) return "Hôm Nay";
          if (index == 2) return "Trực Tiếp";
        };

        _proto.RequestRefreshUserInfo = function RequestRefreshUserInfo() {
          this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());
        };

        _proto.ShowBetHistory = function ShowBetHistory() {
          this.sbCommonPrefabsManager.showPopupBetHistory();
          this.sbCommonPrefabsManager.hidePopupBetSlip();
          this.sbCommonPrefabsManager.hideListLeague();
          this.selectButtonChangeTypeTimeMatch(1);
        };

        _proto.ShowBetSlip = function ShowBetSlip(isShowHeader) {
          if (isShowHeader === void 0) {
            isShowHeader = false;
          }

          this.sbCommonPrefabsManager.showPopupBetSlip(isShowHeader);
          this.sbCommonPrefabsManager.hidePopupBetHistory();
          this.sbCommonPrefabsManager.hideListLeague();
          this.selectButtonChangeTypeTimeMatch(2);
        };

        _proto.ShowSport = function ShowSport() {
          this.sbCommonPrefabsManager.hidePopupBetHistory();
          this.sbCommonPrefabsManager.hidePopupBetSlip();
          this.sbCommonPrefabsManager.showListLeague();
          this.selectButtonChangeTypeTimeMatch(0);
        };

        _proto.UpdateUserBalance = function UpdateUserBalance(data) {
          // // {"balance":22348282.000,"uid":"rik_jun123"}
          if (data.hasOwnProperty("cust_login")) {
            if (SbUserInfo.getInstance().GetUserName().localeCompare(data.cust_login) == 0) {
              if (data.hasOwnProperty("balance")) {
                SbUserInfo.getInstance().SetBalance(Number(data.balance) * 1000);
                this.updateUserBalance();
              }
            }
          }
        };

        _proto.updateStatusMenuTypeTimeMatch = function updateStatusMenuTypeTimeMatch() {
          var typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();

          if (typeTimeMatch == SbTypeTimeMatch.Today) {
            this.menu.SetIndexButton(1);
            this.menu.SetPositionButton(1);
          } else if (typeTimeMatch == SbTypeTimeMatch.Live) {
            this.menu.SetIndexButton(2);
            this.menu.SetPositionButton(2);
          } else if (typeTimeMatch == SbTypeTimeMatch.Early) {
            this.menu.SetIndexButton(0);
            this.menu.SetPositionButton(0);
          } else if (typeTimeMatch == SbTypeTimeMatch.CustomDate) {
            this.menu.SetIndexButton(3);
            this.menu.SetPositionButton(3);
          }
        };

        _proto.updateCountdonwTime = function updateCountdonwTime() {
          if (this.lbTimeCurrent != null) {
            var now = SbUtils.GetDateCurrentTimeZone();
            var dayOfWeek = SbUtils.GetNameDayOfWeek(now.getDay());
            var time = now.getDate() + "/" + (now.getMonth() + 1) + "/" + now.getFullYear() + ", " + SbStringUtil.formatTimes(now.getHours(), now.getMinutes(), now.getSeconds());
            var timeZone = "";
            this.lbTimeCurrent.string = dayOfWeek + " " + time + " " + timeZone;
          }

          if (SbConfigManager.getInstance().isMaintainGame == false && SbConfigManager.getInstance().isRefeshUserBalanceByAPI) this.checkUpdateUserBalance();
        };

        _proto.checkUpdateUserBalance = function checkUpdateUserBalance() {
          this.countTimeSecond++;
          if (this.countTimeSecond % SbConfigManager.getInstance().timeRefeshUserBalanceByAPI == 0) this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());
        };

        _proto.updateUserBalance = function updateUserBalance() {
          this.lbUserName.string = SbUserInfo.getInstance().GetUserName();
          this.lbMoney.string = SbStringUtil.formatMoneyNumberWithComma(SbUserInfo.getInstance().GetBalance());
        };

        _proto.onQueryRefreshUserInfoSuccess = function onQueryRefreshUserInfoSuccess(data) {
          SbUserInfo.getInstance().InitData(data);
          this.updateUserBalance();
        };

        _proto.requestRefreshUserInfo = function requestRefreshUserInfo(token) {
          var _this2 = this;

          var url = SbConfigManager.getInstance().urlAPIGetBalanceUser + "?token=" + token;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            // //success
            // log("login success", JSON.stringify(obj));
            if (obj == null || JSON.stringify(obj).length <= 2) {
              _this2.BackToGame();

              return;
            }

            _this2.onQueryRefreshUserInfoSuccess(obj);
          }, function (obj) {
            log("erorr" + JSON.stringify(obj));
          }, true);
        };

        _proto.onClickChangeTypeTimeMatch = function onClickChangeTypeTimeMatch(customData) {
          // //SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();

          if (this.onChangeTypeTimeMatch != null) {
            this.onChangeTypeTimeMatch(customData);
            this.ShowSport();
          }
        };

        _proto.convertTypeTimeMatchToIndexMenu = function convertTypeTimeMatchToIndexMenu(type) {
          if (type == SbTypeTimeMatch.Early) return 0;
          if (type == SbTypeTimeMatch.Today) return 1;
          if (type == SbTypeTimeMatch.Live) return 2;
          return 1;
        };

        _proto.hideMenu = function hideMenu() {
          var _this3 = this;

          if (this.board != null) {
            Tween.stopAllByTarget(this.board);
            tween(this.board).to(0.3, {
              position: this.positionHide
            }, {
              easing: 'circOut'
            }).start();
          }

          if (this.bg != null) {
            this.bg.active = true;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.3, {
              opacity: 0
            }).call(function () {
              _this3.bg.active = false;
            }).start();
          }
        };

        _proto.ShowMenu = function ShowMenu() {
          this.node.active = true;

          if (this.board != null) {
            this.board.active = true;
            Tween.stopAllByTarget(this.board);
            tween(this.board).to(0.3, {
              position: this.positionShow
            }, {
              easing: 'circOut'
            }).start();
          }

          if (this.bg != null) {
            this.bg.active = true;
            this.bg.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.25, {
              opacity: 255 * 0.65
            }).start();
          }
        };

        _proto.Clean = function Clean() {
          if (this.intervalTime != null) clearInterval(this.intervalTime);
        };

        _proto.BackToGame = function BackToGame() {
          this.backToGame();
        };

        _proto.backToGame = function backToGame() {
          this.sbCommonPrefabsManager.ShowLoadingFullScreen();
          this.hideMenu();

          if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
            this.sbFootballBettingController.Clean(); // @ts-ignore

            if (typeof closeCreatorGame === 'function') {
              // @ts-ignore
              closeCreatorGame();
            }
          } else {
            // director.preloadScene(SbConfigManager.getInstance().sceneHomeName, function () {
            //     this.sbFootballBettingController.Clean();
            //     director.loadScene(SbConfigManager.getInstance().sceneHomeName);
            // }.bind(this));
            this.sbFootballBettingController.Clean();
            SbBridge.BackToGame();
          }
        };

        _proto.onClickRefesh = function onClickRefesh() {
          SbSoundsManager.getInstance().playSfxClick();
          this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());

          if (this.iconRefreshUserInfo != null && TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.iconRefreshUserInfo) == 0) {
            tween(this.iconRefreshUserInfo).by(1, {
              angle: -360
            }).start();
          }
        };

        _proto.onClickHide = function onClickHide() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();
        };

        _proto.onClickSelectSport = function onClickSelectSport() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();
          this.sbCommonPrefabsManager.hidePopupBetHistory();
          this.sbCommonPrefabsManager.hidePopupBetSlip();
          this.sbCommonPrefabsManager.showListLeague();
          this.selectButtonChangeTypeTimeMatch(0);
        };

        _proto.onClickSetting = function onClickSetting() {
          SbSoundsManager.getInstance().playSfxClick();
          this.sbCommonPrefabsManager.showPopupSeting();
        };

        _proto.onClickBackToGame = function onClickBackToGame() {
          SbSoundsManager.getInstance().playSfxClick(); // // this.Clean();

          this.backToGame();
        };

        _proto.onClickBetHistory = function onClickBetHistory() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();
          this.ShowBetHistory();
        };

        _proto.onClickBetSlip = function onClickBetSlip() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();
          this.ShowBetSlip();
        };

        _proto.selectButtonChangeTypeTimeMatch = function selectButtonChangeTypeTimeMatch(index) {
          if (this.buttonBetHistory == null && this.buttonBetSlip == null && this.buttonSport == null) {
            return;
          }

          this.buttonBetHistory.interactable = true;
          this.buttonBetSlip.interactable = true;
          this.buttonSport.interactable = true;
          if (index == 0) this.buttonSport.interactable = false;else if (index == 1) this.buttonBetHistory.interactable = false;else if (index == 2) this.buttonBetSlip.interactable = false;
        };

        _proto.onClickChangeEnvServerProd = function onClickChangeEnvServerProd() {
          var _this4 = this;

          SbSoundsManager.getInstance().playSfxClick();
          this.sbCommonPrefabsManager.ShowPopup2Button("Thông Báo", "Đổi sang server prod, nếu acc chưa được add vào Prod thì phải đưa userName cho dev add vào thêm 1 lần nữa mới quay trở lại game được :(", function () {
            SbConfigManager.getInstance().SetEnv("prod");

            _this4.onClickBackToGame();
          }, function () {// //cancel
          });
        };

        _proto.onClickChangeEnvServerStaging = function onClickChangeEnvServerStaging() {
          var _this5 = this;

          SbSoundsManager.getInstance().playSfxClick();
          this.sbCommonPrefabsManager.ShowPopup2Button("Thông Báo", "Đổi sang server Staging, nếu acc chưa được add vào Staging thì phải đưa userName cho dev add vào thêm 1 lần nữa mới quay trở lại game được :(", function () {
            SbConfigManager.getInstance().SetEnv("staging");

            _this5.onClickBackToGame();
          }, function () {// //cancel
          });
        };

        _proto.onClickShowInfoDebug = function onClickShowInfoDebug() {
          log("onClickShowInfoDebug");
          this.countHidedebug++;

          if (this.countHidedebug > 15) {
            setDisplayStats(true);
          } else if (this.countHidedebug > 20) {
            setDisplayStats(false);
          }
        };

        return SbMenuLeft;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "board", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeCurrent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbUserName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbMoney", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbVersion", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "buttonSport", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "buttonBetHistory", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "buttonBetSlip", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "iconRefreshUserInfo", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "toggleChangeEnviromentProd", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbMenuTop.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbCommonPrefabsManager.ts', './SbGameHTTPManager.ts', './SbStringUtil.ts', './SbUIMenu.ts', './SbUtils.ts', './SbSportManager.ts', './SbUserInfo.ts', './SbConfigManager.ts', './SbSoundsManager.ts', './SbFootballEventDataManager.ts', './SbBridge.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, Toggle, Vec3, UITransform, director, game, Game, log, Tween, tween, UIOpacity, TweenSystem, setDisplayStats, Component, SbCommonPrefabsManager, SbGameHTTPManager, SbStringUtil, SbUIMenu, SbUtils, SbTypeTimeMatch, SbUserInfo, SbConfigManager, SbSkinID, SbSoundsManager, SbFootballEventDataManager, SbBridge;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Toggle = module.Toggle;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      director = module.director;
      game = module.game;
      Game = module.Game;
      log = module.log;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      TweenSystem = module.TweenSystem;
      setDisplayStats = module.setDisplayStats;
      Component = module.Component;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbFootballEventDataManager = module.default;
    }, function (module) {
      SbBridge = module.SbBridge;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "19837rNQQpP2pkzWXXk1BTu", "SbMenuTop", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GAME_EVENT_MONEY_UPDATE = "INTEGRATION_MONEY_UPDATED"; //IndexButton

      var SbIndexMenuTopItem = /*#__PURE__*/function (SbIndexMenuTopItem) {
        SbIndexMenuTopItem[SbIndexMenuTopItem["Sport"] = 0] = "Sport";
        SbIndexMenuTopItem[SbIndexMenuTopItem["BetHistory"] = 1] = "BetHistory";
        SbIndexMenuTopItem[SbIndexMenuTopItem["BetSlip"] = 2] = "BetSlip";
        SbIndexMenuTopItem[SbIndexMenuTopItem["SportVirtual"] = 3] = "SportVirtual";
        SbIndexMenuTopItem[SbIndexMenuTopItem["VideoLivestream"] = 4] = "VideoLivestream";
        SbIndexMenuTopItem[SbIndexMenuTopItem["Settings"] = 5] = "Settings";
        SbIndexMenuTopItem[SbIndexMenuTopItem["Search"] = 6] = "Search";
        return SbIndexMenuTopItem;
      }(SbIndexMenuTopItem || {});

      var SbMenuTop = exports('default', (_dec = ccclass('SbMenuTop'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(SbUIMenu), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Button), _dec14 = property(Node), _dec15 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbMenuTop, _Component);

        function SbMenuTop() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this; //moved to bottom 

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "board", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTimeCurrent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbUserName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMoney", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbVersion", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "menu", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSport", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSportVirtual", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonWatchVideoAllMatch", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonBetHistory", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonBetSlip", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconRefreshUserInfo", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleChangeEnviromentProd", _descriptor14, _assertThisInitialized(_this));

          _this.onChangeTypeTimeMatch = null;
          _this.isCanChangeTypeTimeMatch = false;
          _this.positionHide = null;
          _this.positionShow = null;
          _this.intervalTime = null;
          _this.countTimeSecond = 1;
          _this.indexMenuTopCurrent = SbIndexMenuTopItem.Sport;
          _this.needBackToGame = false;
          _this.sbFootballBettingController = null;
          _this.countHidedebug = 0;
          return _this;
        }

        var _proto = SbMenuTop.prototype;

        _proto.initFootballBettingController = function initFootballBettingController(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.onLoad = function onLoad() {
          // if (this.menu != null)
          //     this.menu.init(SbCommonPrefabsManager.getInstance());
          var sizeNotch = 30; //SbSafeArea.GetSizeNotch();

          if (this.board != null) {
            this.positionHide = new Vec3(-this.board.getComponent(UITransform).width, this.board.position.y);
            this.positionShow = new Vec3(sizeNotch, this.board.position.y);
          }

          if (this.bg != null) {
            this.board.setPosition(this.positionHide);
            this.board.active = false;
          }

          if (this.bg != null) this.bg.active = false; // this.node.active = false;

          this.updateCountdonwTime();
          this.intervalTime = setInterval(this.updateCountdonwTime.bind(this), 1000); //1000

          SbCommonPrefabsManager.getInstance().InitMenuTop(this);
          director.off(GAME_EVENT_MONEY_UPDATE, this.setUserBalance, this);
          director.on(GAME_EVENT_MONEY_UPDATE, this.setUserBalance, this);
          game.on(Game.EVENT_SHOW, this.onFocus, this);
          game.on(Game.EVENT_HIDE, this.onLostFocus, this);
        };

        _proto.onFocus = function onFocus() {
          log("onFocus");

          if (this.needBackToGame) {
            this.backToGame();
          }
        };

        _proto.onLostFocus = function onLostFocus() {
          log("onFocus");
        };

        _proto.start = function start() {
          // if (this.menu != null)
          //     this.menu.init(SbCommonPrefabsManager.getInstance());
          this.menu.SetIndexDefault(this.convertTypeTimeMatchToIndexMenu(SbUserInfo.getInstance().GetTypeTimeMatch()));
          this.menu.SetButtonClickCallback(this.onClickChangeTypeTimeMatch.bind(this));
          this.updateUserBalance();
          if (this.buttonBetHistory != null && this.buttonBetHistory.interactable == true) this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.Sport); // //for dev

          if (this.toggleChangeEnviromentProd != null) {
            if (SbConfigManager.getInstance().GetEnv().indexOf("staging") >= 0) {
              this.toggleChangeEnviromentProd.isChecked = false;
            } else {
              this.toggleChangeEnviromentProd.isChecked = true;
            }
          }

          this.updateStatusMenuTypeTimeMatch();
          if (this.lbVersion != null) this.lbVersion.string = SbConfigManager.getInstance().GetVersionApp();
        };

        _proto.onDestroy = function onDestroy() {
          this.Clean();
        };

        _proto.onUserBalanceChange = function onUserBalanceChange(data) {
          this.UpdateUserBalance(data);
          this.updateUserBalance();
        };

        _proto.SetCallbackChangeTypeTimeMatch = function SetCallbackChangeTypeTimeMatch(cb) {
          // có cho đổi loại hay không
          this.onChangeTypeTimeMatch = cb;
        };

        _proto.GetMenuTypeTimeMatch = function GetMenuTypeTimeMatch() {
          return this.menu;
        };

        _proto.ConvertIndexTypeTimeMatchToString = function ConvertIndexTypeTimeMatchToString(index) {
          if (index == 0) return "Trận Đấu Sớm";else if (index == 1) return "Hôm Nay";
          if (index == 2) return "Trực Tiếp";
        };

        _proto.RequestRefreshUserInfo = function RequestRefreshUserInfo() {
          this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());
        };

        _proto.ShowBetHistory = function ShowBetHistory() {
          SbCommonPrefabsManager.getInstance().showPopupBetHistory();
          SbCommonPrefabsManager.getInstance().hidePopupBetSlip();
          SbCommonPrefabsManager.getInstance().hideListLeague();
          this.sbFootballBettingController.HideTabListLivestreamHighlight();
          this.sbFootballBettingController.HideLoading();
          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.BetHistory);
        };

        _proto.ShowBetSlip = function ShowBetSlip(isShowHeader, headerIndex) {
          if (isShowHeader === void 0) {
            isShowHeader = false;
          }

          if (headerIndex === void 0) {
            headerIndex = -1;
          }

          SbCommonPrefabsManager.getInstance().showPopupBetSlip(isShowHeader, headerIndex);
          SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
          SbCommonPrefabsManager.getInstance().hideListLeague();
          this.sbFootballBettingController.HideTabListLivestreamHighlight();
          this.sbFootballBettingController.HideLoading();
          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.BetSlip);
        };

        _proto.ShowSport = function ShowSport() {
          SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
          SbCommonPrefabsManager.getInstance().hidePopupBetSlip();
          this.sbFootballBettingController.HideTabListLivestreamHighlight();
          SbCommonPrefabsManager.getInstance().showListLeague();

          if (!this.sbFootballBettingController.IsFavoriteMode()) {
            this.updateStatusMenuTypeTimeMatch();
          } // let typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();
          // if (typeTimeMatch == SbTypeTimeMatch.SearchResult) {
          //     //change mode to live if last mode is search result
          //     SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.Live);
          //     this.sbFootballBettingController.ShowLoading();
          //     SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          // }
          // if (SbFootballEventDataManager.getInstance().IsVirtualSport()) {
          //     SbFootballEventDataManager.getInstance().SetIsVirtualSport(false);
          //     this.sbFootballBettingController.ShowLoading();
          //     SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          // }


          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.Sport);
        };

        _proto.ShowLivestreamHighlight = function ShowLivestreamHighlight() {
          SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
          SbCommonPrefabsManager.getInstance().hidePopupBetSlip();
          SbCommonPrefabsManager.getInstance().hideListLeague();
          this.sbFootballBettingController.ShowListLivestreamHighlight();
          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.VideoLivestream);
        };

        _proto.ShowVirtualSport = function ShowVirtualSport() {
          SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
          SbCommonPrefabsManager.getInstance().hidePopupBetSlip();
          SbCommonPrefabsManager.getInstance().showListLeague();
          this.sbFootballBettingController.HideTabListLivestreamHighlight();

          if (SbFootballEventDataManager.getInstance().IsVirtualSport() == false) {
            SbFootballEventDataManager.getInstance().SetIsVirtualSport(true);
            this.sbFootballBettingController.ShowLoading();
            SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          }

          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.SportVirtual);
        };

        _proto.UpdateUserBalance = function UpdateUserBalance(data) {
          // // {"balance":22348282.000,"uid":"rik_jun123"}
          if (data.hasOwnProperty("cust_login")) {
            if (SbUserInfo.getInstance().GetUserName().localeCompare(data.cust_login) == 0) {
              if (data.hasOwnProperty("balance")) {
                SbUserInfo.getInstance().SetBalance(Number(data.balance) * 1000);
                this.updateUserBalance();
              }
            }
          }
        };

        _proto.updateStatusMenuTypeTimeMatch = function updateStatusMenuTypeTimeMatch() {
          var typeTimeMatch = SbUserInfo.getInstance().GetTypeTimeMatch();

          if (typeTimeMatch == SbTypeTimeMatch.Today) {
            this.menu.SetIndexButton(1);
            this.menu.SetPositionButton(1);
          } else if (typeTimeMatch == SbTypeTimeMatch.Live) {
            this.menu.SetIndexButton(2);
            this.menu.SetPositionButton(2);
          } else if (typeTimeMatch == SbTypeTimeMatch.Early) {
            this.menu.SetIndexButton(0);
            this.menu.SetPositionButton(0);
          } else if (typeTimeMatch == SbTypeTimeMatch.CustomDate) {
            this.menu.SetIndexButton(3);
            this.menu.SetPositionButton(3);
          } else if (typeTimeMatch == SbTypeTimeMatch.SearchResult) ;
        };

        _proto.updateCountdonwTime = function updateCountdonwTime() {
          if (this.lbTimeCurrent != null) {
            var now = SbUtils.GetDateCurrentTimeZone();
            var dayOfWeek = SbUtils.GetNameDayOfWeek(now.getDay());
            var time = now.getDate() + "/" + (now.getMonth() + 1) + "/" + now.getFullYear() + ", " + SbStringUtil.formatTimes(now.getHours(), now.getMinutes(), now.getSeconds());
            var timeZone = "";
            this.lbTimeCurrent.string = dayOfWeek + " " + time + " " + timeZone;
          }

          if (SbConfigManager.getInstance().isMaintainGame == false && SbConfigManager.getInstance().isRefeshUserBalanceByAPI) this.checkUpdateUserBalance();
        };

        _proto.checkUpdateUserBalance = function checkUpdateUserBalance() {
          this.countTimeSecond++;
          if (this.countTimeSecond % SbConfigManager.getInstance().timeRefeshUserBalanceByAPI == 0) this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());
        };

        _proto.setUserBalance = function setUserBalance(value) {
          if (value != null && value != undefined && !Number.isNaN(value)) {
            SbUserInfo.getInstance().SetBalance(String(value));
            this.updateUserBalance();
          }
        };

        _proto.updateUserBalance = function updateUserBalance() {
          this.lbUserName.string = SbUserInfo.getInstance().GetUserName();
          this.lbMoney.string = SbStringUtil.formatMoneyNumberWithComma(SbUserInfo.getInstance().GetBalance());
        };

        _proto.onQueryRefreshUserInfoSuccess = function onQueryRefreshUserInfoSuccess(data) {
          SbUserInfo.getInstance().InitData(data);
          this.updateUserBalance();
        };

        _proto.requestRefreshUserInfo = function requestRefreshUserInfo(token) {
          var _this2 = this;

          var url = SbConfigManager.getInstance().urlAPIGetBalanceUser + "?token=" + token;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            // //success
            log("login success", JSON.stringify(obj));

            if (obj == null || JSON.stringify(obj).length <= 2) {
              if (!_this2.needBackToGame) {
                _this2.needBackToGame = true;

                _this2.backToGame();
              }

              return;
            }

            _this2.onQueryRefreshUserInfoSuccess(obj);
          }, function (obj) {
            log("erorr" + JSON.stringify(obj));
          }, true);
        };

        _proto.onClickChangeTypeTimeMatch = function onClickChangeTypeTimeMatch(customData) {
          // //SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();

          if (this.onChangeTypeTimeMatch != null) {
            this.onChangeTypeTimeMatch(customData); // if (SbFootballEventDataManager.getInstance().IsVirtualSport() == false)
            //     this.ShowSport();
            // else
            //     this.ShowVirtualSport();
          }
        };

        _proto.convertTypeTimeMatchToIndexMenu = function convertTypeTimeMatchToIndexMenu(type) {
          if (type == SbTypeTimeMatch.Early) return 0;
          if (type == SbTypeTimeMatch.Today) return 1;
          if (type == SbTypeTimeMatch.Live) return 2;
          return 1;
        };

        _proto.hideMenu = function hideMenu() {
          var _this3 = this;

          this.sbFootballBettingController.SetHideChat();

          if (this.board != null) {
            Tween.stopAllByTarget(this.board);
            tween(this.board).to(0.3, {
              position: this.positionHide
            }, {
              easing: 'circOut'
            }).start();
          }

          if (this.bg != null) {
            this.bg.active = true;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.3, {
              opacity: 0
            }).call(function () {
              _this3.bg.active = false;
            }).start();
          }

          this.sbFootballBettingController.SetShowCommonGroup(false);
        };

        _proto.ShowMenu = function ShowMenu() {
          this.node.active = true;

          if (this.board != null) {
            this.board.active = true;
            Tween.stopAllByTarget(this.board);
            tween(this.board).to(0.3, {
              position: this.positionShow
            }, {
              easing: 'circOut'
            }).start();
          }

          if (this.bg != null) {
            this.bg.active = true;
            this.bg.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.25, {
              opacity: 255 * 0.65
            }).start();
          }
        };

        _proto.Clean = function Clean() {
          game.off(Game.EVENT_SHOW, this.onFocus, this);
          game.off(Game.EVENT_HIDE, this.onLostFocus, this);
          director.off(GAME_EVENT_MONEY_UPDATE, this.setUserBalance, this);
          if (this.intervalTime != null) clearInterval(this.intervalTime);
        };

        _proto.BackToGame = function BackToGame() {
          this.backToGame();
        };

        _proto.GetIndexItemMenuTopCurrent = function GetIndexItemMenuTopCurrent() {
          return this.indexMenuTopCurrent;
        };

        _proto.IsShowLivestreamHighlight = function IsShowLivestreamHighlight() {
          return this.indexMenuTopCurrent == SbIndexMenuTopItem.VideoLivestream;
        };

        _proto.backToGame = function backToGame() {
          SbCommonPrefabsManager.getInstance().ShowLoadingFullScreen();
          this.hideMenu();

          if (SbConfigManager.getInstance().GetSkinCurrent() == SbSkinID.Skin4) {
            this.sbFootballBettingController.Clean(); // @ts-ignore

            if (typeof closeCreatorGame === 'function') {
              // @ts-ignore
              closeCreatorGame();
            }
          } else {
            // director.preloadScene(SbConfigManager.getInstance().sceneHomeName, function () {
            //     this.sbFootballBettingController.Clean();
            //     director.loadScene(SbConfigManager.getInstance().sceneHomeName);
            // }.bind(this));
            this.sbFootballBettingController.Clean();
            SbBridge.BackToGame();
          }
        };

        _proto.onClickRefesh = function onClickRefesh() {
          SbSoundsManager.getInstance().playSfxClick();
          this.requestRefreshUserInfo(SbUserInfo.getInstance().GetUserToken());

          if (this.iconRefreshUserInfo != null && TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.iconRefreshUserInfo) == 0) {
            tween(this.iconRefreshUserInfo).by(1, {
              angle: -360
            }).start();
          }
        };

        _proto.onClickHide = function onClickHide() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hideMenu();
        };

        _proto.onClickSelectSport = function onClickSelectSport() {
          SbSoundsManager.getInstance().playSfxClick();
          SbConfigManager.getInstance().isShowExtraBet = true;
          this.hideMenu();
          this.ShowSport();
        };

        _proto.onClickSelectSportVirtual = function onClickSelectSportVirtual() {
          SbSoundsManager.getInstance().playSfxClick();
          SbConfigManager.getInstance().isShowExtraBet = false;
          this.hideMenu();
          SbCommonPrefabsManager.getInstance().hidePopupBetHistory();
          SbCommonPrefabsManager.getInstance().hidePopupBetSlip();
          SbCommonPrefabsManager.getInstance().hideListLeague();

          if (SbFootballEventDataManager.getInstance().IsVirtualSport() == false) {
            SbFootballEventDataManager.getInstance().SetIsVirtualSport(true);
            this.sbFootballBettingController.ShowLoading();
            SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          }

          this.selectButtonChangeTypeTimeMatch(SbIndexMenuTopItem.SportVirtual);
        };

        _proto.onClickLivestreamHighlight = function onClickLivestreamHighlight() {
          SbSoundsManager.getInstance().playSfxClick();
          SbConfigManager.getInstance().isShowExtraBet = false;
          this.hideMenu();
          this.ShowLivestreamHighlight(); // if (SbFootballEventDataManager.getInstance().IsVirtualSport() == false) {
          //     SbFootballEventDataManager.getInstance().SetIsVirtualSport(true);
          //     this.sbFootballBettingController.ShowLoading();
          //     SbFootballEventDataManager.getInstance().requestEventData(SbConfigManager.getInstance().urlAPIEvents, SbUserInfo.getInstance().GetTypeTimeMatch());
          // }
        };

        _proto.onClickSetting = function onClickSetting() {
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().showPopupSeting();
          this.sbFootballBettingController.SetHideChat();
        };

        _proto.onClickChat = function onClickChat() {
          SbSoundsManager.getInstance().playSfxClick();
          this.sbFootballBettingController.SetToggleChat();
        };

        _proto.onClickBackToGame = function onClickBackToGame() {
          SbSoundsManager.getInstance().playSfxClick(); // // this.Clean();

          this.backToGame();
          this.sbFootballBettingController.SetShowCommonGroup(false);
        };

        _proto.onClickBetHistory = function onClickBetHistory() {
          SbSoundsManager.getInstance().playSfxClick();
          SbConfigManager.getInstance().isShowExtraBet = false;
          this.hideMenu();
          this.ShowBetHistory();
        };

        _proto.onClickShowPopupDeposit = function onClickShowPopupDeposit() {
          SbSoundsManager.getInstance().playSfxClick(); // PopupNapTien.createAndShow();
          // director.emit("ShowPopupDepositFromSportbook", null);

          SbBridge.ShowPopupDeposit();
        };

        _proto.onClickCommingsoonVirtualSport = function onClickCommingsoonVirtualSport() {
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowMessage("Chức năng sẽ sớm ra mắt!");
        };

        _proto.onClickBetSlip = function onClickBetSlip() {
          SbSoundsManager.getInstance().playSfxClick();
          SbConfigManager.getInstance().isShowExtraBet = false;
          this.hideMenu();
          this.ShowBetSlip();
        };

        _proto.selectButtonChangeTypeTimeMatch = function selectButtonChangeTypeTimeMatch(index) {
          if (this.buttonBetHistory == null && this.buttonBetSlip == null && this.buttonSport == null && this.buttonSportVirtual == null && this.buttonWatchVideoAllMatch == null) {
            return;
          }

          this.buttonBetHistory.interactable = true;
          this.buttonBetSlip.interactable = true;
          this.buttonSport.interactable = true;
          this.buttonSportVirtual.interactable = true;
          this.buttonWatchVideoAllMatch.interactable = true;
          this.resetStatusAllButtonBottom();

          if (index == SbIndexMenuTopItem.Sport) {
            this.buttonSport.disabledSprite = this.buttonSport.pressedSprite;
            this.buttonSport.interactable = false;
          } else if (index == SbIndexMenuTopItem.BetHistory) {
            this.buttonBetHistory.disabledSprite = this.buttonBetHistory.pressedSprite;
            this.buttonBetHistory.interactable = false;
          } else if (index == SbIndexMenuTopItem.BetSlip) {
            this.buttonBetSlip.disabledSprite = this.buttonBetSlip.pressedSprite;
            this.buttonBetSlip.interactable = false;
          } else if (index == SbIndexMenuTopItem.SportVirtual) {
            this.buttonSportVirtual.disabledSprite = this.buttonSportVirtual.pressedSprite;
            this.buttonSportVirtual.interactable = false;
          } else if (index == SbIndexMenuTopItem.VideoLivestream) {
            this.buttonWatchVideoAllMatch.disabledSprite = this.buttonWatchVideoAllMatch.pressedSprite;
            this.buttonWatchVideoAllMatch.interactable = false;
          }

          this.indexMenuTopCurrent = index;
        };

        _proto.resetStatusAllButtonBottom = function resetStatusAllButtonBottom() {
          this.buttonSport.disabledSprite = this.buttonSport.hoverSprite;
          this.buttonSportVirtual.disabledSprite = this.buttonSportVirtual.hoverSprite;
          this.buttonBetHistory.disabledSprite = this.buttonBetHistory.hoverSprite;
          this.buttonBetSlip.disabledSprite = this.buttonBetSlip.hoverSprite;
          this.buttonWatchVideoAllMatch.disabledSprite = this.buttonWatchVideoAllMatch.hoverSprite;
        };

        _proto.onClickChangeEnvServerProd = function onClickChangeEnvServerProd() {
          var _this4 = this;

          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowPopup2Button("Thông Báo", "Đổi sang server prod, nếu acc chưa được add vào Prod thì phải đưa userName cho dev add vào thêm 1 lần nữa mới quay trở lại game được :(", function () {
            SbConfigManager.getInstance().SetEnv("prod");

            _this4.onClickBackToGame();
          }, function () {// //cancel
          });
        };

        _proto.onClickChangeEnvServerStaging = function onClickChangeEnvServerStaging() {
          var _this5 = this;

          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowPopup2Button("Thông Báo", "Đổi sang server Staging, nếu acc chưa được add vào Staging thì phải đưa userName cho dev add vào thêm 1 lần nữa mới quay trở lại game được :(", function () {
            SbConfigManager.getInstance().SetEnv("staging");

            _this5.onClickBackToGame();
          }, function () {// //cancel
          });
        };

        _proto.onClickShowInfoDebug = function onClickShowInfoDebug() {
          log("onClickShowInfoDebug");
          this.countHidedebug++;

          if (this.countHidedebug > 15) {
            setDisplayStats(true);
          } else if (this.countHidedebug > 20) {
            setDisplayStats(false);
          }
        };

        return SbMenuTop;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "board", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbTimeCurrent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbUserName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbMoney", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbVersion", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "buttonSport", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "buttonSportVirtual", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "buttonWatchVideoAllMatch", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "buttonBetHistory", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "buttonBetSlip", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "iconRefreshUserInfo", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "toggleChangeEnviromentProd", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbNodeColorHelper.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSkinListColor.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Color, CCString, Component, SbSkinListColor, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Color = module.Color;
      CCString = module.CCString;
      Component = module.Component;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "ca16eCfZ7BKJLbLifHh9+Ax", "SbNodeColorHelper", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbNodeColorHelper = exports('SbNodeColorHelper', (_dec = ccclass('SbNodeColorHelper'), _dec2 = property(Sprite), _dec3 = property(Label), _dec4 = property([Color]), _dec5 = property(SbSkinListColor), _dec6 = property({
        type: CCString
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbNodeColorHelper, _Component);

        function SbNodeColorHelper() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "label", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColor", _descriptor3, _assertThisInitialized(_this)); // Use only SbSkinListColor or this


          _initializerDefineProperty(_this, "listColorBySkin", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listDefineNameColor", _descriptor5, _assertThisInitialized(_this));

          _this.indexColor = -1;
          return _this;
        }

        var _proto = SbNodeColorHelper.prototype;

        _proto.onLoad = function onLoad() {
          if (this.listColor.length > 0 && this.listDefineNameColor.length > 0) {
            if (this.sprite == null) this.sprite = this.node.getComponent(Sprite);
            if (this.label == null) this.label = this.node.getComponent(Label);
          }
        };

        _proto.ChangeColor = function ChangeColor(nameColor) {
          this.changeColor(nameColor);
        };

        _proto.changeColor = function changeColor(nameColor) {
          this.indexColor = this.getIndexColor(nameColor);

          if (this.indexColor >= 0) {
            var colorSet = this.listColorsResult[this.indexColor];

            if (this.sprite && this.sprite.color.toHEX() != colorSet.toHEX()) {
              this.sprite.color = colorSet;
            }

            if (this.label && this.label.color.toHEX() != colorSet.toHEX()) {
              this.label.color = colorSet;
            }
          }
        };

        _proto.getIndexColor = function getIndexColor(nameColor) {
          for (var i = 0; i < this.listDefineNameColor.length; i++) {
            if (this.listDefineNameColor[i].localeCompare(nameColor) == 0) return i;
          }

          return -1;
        };

        _createClass(SbNodeColorHelper, [{
          key: "listColorsResult",
          get: function get() {
            var result = this.listColor;

            if (this.listColorBySkin) {
              result = this.listColorBySkin.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbNodeColorHelper;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listColor", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listColorBySkin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listDefineNameColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbNodePoolManager.ts", ['cc'], function (exports) {
  var cclegacy, _decorator, NodePool, instantiate;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
    }],
    execute: function () {
      var _class, _class2;

      cclegacy._RF.push({}, "bf6f6qTIApLLLT8e6bbfoy5", "SbNodePoolManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbNodePoolManager = exports('default', ccclass(_class = (_class2 = /*#__PURE__*/function () {
        function SbNodePoolManager() {}

        SbNodePoolManager.get = function get(key) {
          if (this.pools.has(key)) {
            var pool = this.pools.get(key);
            return pool.get(key);
          }

          return null;
        };

        SbNodePoolManager.put = function put(key, node) {
          var pool = this.pools.get(key);

          if (pool == null) {
            pool = new NodePool();
          }

          pool.put(node);
          this.pools.set(key, pool);
        };

        SbNodePoolManager.createItem = function createItem(itemNode) {
          var key = itemNode.name;
          var node = SbNodePoolManager.get(key);

          if (node == null) {
            node = instantiate(itemNode);
          }

          node.setParent(itemNode.parent);
          itemNode.active = false;
          node.active = true;
          return node;
        };

        SbNodePoolManager.createItemFromPrefab = function createItemFromPrefab(prefab) {
          var key = prefab.name;
          var node = SbNodePoolManager.get(key);

          if (node == null) {
            node = instantiate(prefab);
            this.totalNewNode++; //console.log(`>>> this.totalNode=${this.totalNewNode}`)
          }

          node.active = true;
          return node;
        };

        SbNodePoolManager.clearItem = function clearItem(itemNodes) {
          //console.log(`>>> total reuse node=${itemNodes.length}`)
          itemNodes.forEach(function (itemNode) {
            if (itemNode && itemNode.name) {
              var key = itemNode.name;
              SbNodePoolManager.put(key, itemNode);
            }
          });
          itemNodes = [];
        };

        SbNodePoolManager.clearItemComp = function clearItemComp(itemComps) {
          itemComps.forEach(function (itemComp) {
            var key = itemComp.node.name;
            SbNodePoolManager.put(key, itemComp.node);
          });
          itemComps = [];
        };

        return SbNodePoolManager;
      }(), _class2.pools = new Map(), _class2.totalNewNode = 0, _class2)) || _class);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbNotchManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, view, sys, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "c2752oPEk1P/YSU+GZk1Y9s", "SbNotchManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbNotchManager = exports('default', (_dec = ccclass('SbNotchManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbNotchManager, _Component);

        function SbNotchManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.winSize = null;
          _this.visibleSize = null;
          _this.safeAreaSize = null;
          return _this;
        }

        SbNotchManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbNotchManager();
            this.Instance.init();
          }

          return this.Instance;
        };

        var _proto = SbNotchManager.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.init = function init() {
          this.winSize = view.getVisibleSize();
          this.visibleSize = view.getVisibleSize();
          this.safeAreaSize = sys.getSafeAreaRect();
        } // update (dt) {}
        ;

        return SbNotchManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOdds.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbCommonPrefabsManager.ts', './SbMarket.ts', './SbSoundsManager.ts', './SbConfigManager.ts', './SbGameUtil.ts', './SbSkinListColor.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, log, UIOpacity, Button, Tween, tween, Color, Component, SbUserInfo, SbCommonPrefabsManager, SbMarketId, SbSoundsManager, SbConfigManager, SbOddsType, SbOddsStyle, SbOddsData, ODDS_VALUE_DEFAULT, SbSkinListColor;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      log = module.log;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
      Tween = module.Tween;
      tween = module.tween;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
      SbOddsStyle = module.SbOddsStyle;
      SbOddsData = module.SbOddsData;
      ODDS_VALUE_DEFAULT = module.ODDS_VALUE_DEFAULT;
    }, function (module) {
      SbSkinListColor = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "74013GCEQ1Mjp4laMoMEgKn", "SbOdds", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_SHOW_ODDS_CHANGE = 30;
      var SbOdds = exports('default', (_dec = property(Label), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(SbSkinListColor), _dec8 = property(SbSkinListColor), (_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbOdds, _Component);

        function SbOdds() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbBettingOdds", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOdds", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowUp", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrowDown", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bgOddsChange", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLock", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinOddColorCtr", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinLineColorCtr", _descriptor8, _assertThisInitialized(_this)); // //for desktop
          // @property(cc.Label)
          // protected lbOddsHome: cc.Label = null;
          // @property(cc.Label)
          // protected lbOddsAway: cc.Label = null;


          _this.oddType = SbOddsType.None;
          _this.oddStyle = SbOddsStyle.Decimal;
          _this.matchData = null;
          _this.leagueData = null;
          _this.marketData = null;
          _this.oddsData = new SbOddsData();
          _this.oddsDataOld = new SbOddsData();
          _this.isShowPopupBetting = false;
          _this.sbFootballBettingController = null;
          return _this;
        }

        var _proto = SbOdds.prototype;

        _proto.init = function init(sbFootballBettingController) {
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.start = function start() {};

        _proto.SetLeagueData = function SetLeagueData(data) {
          this.leagueData = data;
        };

        _proto.SetMatchData = function SetMatchData(data) {
          this.matchData = data;
        };

        _proto.SetMarketData = function SetMarketData(data) {
          this.marketData = data;
        };

        _proto.GetLeagueData = function GetLeagueData() {
          return this.leagueData;
        };

        _proto.GetMatchData = function GetMatchData() {
          return this.matchData;
        };

        _proto.GetMarketData = function GetMarketData() {
          return this.marketData;
        };

        _proto.GetOddsData = function GetOddsData() {
          log("GetOddsData: " + JSON.stringify(this.oddsData));
          return this.oddsData;
        };

        _proto.GetOddsType = function GetOddsType() {
          return this.oddType;
        };

        _proto.SetOddsEnable = function SetOddsEnable(value) {
          this.nodeLock.active = !value;
          this.node.getComponent(UIOpacity).opacity = value ? 255 : 30;
        };

        _proto.InitData = function InitData(data, type) {
          this.oddType = type;
          if (this.isOddsAlwaysStyleDecimal()) this.oddStyle = SbOddsStyle.Decimal; //alway is Decimal
          else this.oddStyle = SbUserInfo.getInstance().GetOddsStyleID();
        };

        _proto.getOddsValue = function getOddsValue(typeNeed) {
          if (typeNeed === void 0) {
            typeNeed = null;
          }

          var oddsStyle = SbUserInfo.getInstance().GetOddsStyleID();
          if (this.isOddsAlwaysStyleDecimal()) oddsStyle = SbOddsStyle.Decimal; //alway is Decimal

          if (typeNeed != null) {
            oddsStyle = typeNeed;
          }

          if (this.oddType == SbOddsType.Home) return this.oddsData.oddsHome[oddsStyle];else if (this.oddType == SbOddsType.Away) return this.oddsData.oddsAway[oddsStyle];else if (this.oddType == SbOddsType.Draw) return this.oddsData.oddsDraw[oddsStyle];else return 0;
        };

        _proto.forceSetOddsValueFromAPI = function forceSetOddsValueFromAPI(value) {
          var oddsStyle = SbUserInfo.getInstance().GetOddsStyleID();
          if (this.isOddsAlwaysStyleDecimal()) oddsStyle = SbOddsStyle.Decimal; //alway is Decimal

          if (this.oddType == SbOddsType.Home) this.oddsData.oddsHome[oddsStyle] = value;else if (this.oddType == SbOddsType.Away) this.oddsData.oddsAway[oddsStyle] = value;else if (this.oddType == SbOddsType.Draw) this.oddsData.oddsDraw[oddsStyle] = value;
        };

        _proto.getOddsOldValue = function getOddsOldValue() {
          var oddsStyle = SbUserInfo.getInstance().GetOddsStyleID();
          if (this.isOddsAlwaysStyleDecimal()) oddsStyle = SbOddsStyle.Decimal; //alway is Decimal

          if (this.oddType == SbOddsType.Home) return this.oddsDataOld.oddsHome[oddsStyle];else if (this.oddType == SbOddsType.Away) return this.oddsDataOld.oddsAway[oddsStyle];else if (this.oddType == SbOddsType.Draw) return this.oddsDataOld.oddsDraw[oddsStyle];else return 0;
        };

        _proto.getSelectionID = function getSelectionID() {
          if (this.oddType == SbOddsType.Home) return this.oddsData.selectionHomeId;else if (this.oddType == SbOddsType.Away) return this.oddsData.selectionAwayId;else if (this.oddType == SbOddsType.Draw) return this.oddsData.selectionDrawId;
          return "undefine";
        };

        _proto.getSelectionTeamName = function getSelectionTeamName() {
          if (this.oddType == SbOddsType.Home) return this.matchData.homeName;else if (this.oddType == SbOddsType.Away) return this.matchData.awayName;else if (this.oddType == SbOddsType.Draw) return "Draw";
          return "undefined";
        };

        _proto.getSelectionName = function getSelectionName() {
          if (this.marketData.marketId == SbMarketId.AsianHandicapFT || this.marketData.marketId == SbMarketId.AsianHandicapHT || this.marketData.marketId == SbMarketId.AsianHandicapExtraFT || this.marketData.marketId == SbMarketId.AsianHandicapExtraHT || this.marketData.marketId == SbMarketId.CornerHandicapFT || this.marketData.marketId == SbMarketId.CornerHandicapHT || this.marketData.marketId == SbMarketId.BookingAsianHandicapFT || this.marketData.marketId == SbMarketId.BookingAsianHandicapHT) {
            return this.getSelectionTeamName();
          } else if (this.marketData.marketId == SbMarketId.OverUnderFT || this.marketData.marketId == SbMarketId.OverUnderHT || this.marketData.marketId == SbMarketId.OverUnderExtraFT || this.marketData.marketId == SbMarketId.OverUnderExtraHT || this.marketData.marketId == SbMarketId.CornerOverUnderFT || this.marketData.marketId == SbMarketId.CornerOverUnderHT || this.marketData.marketId == SbMarketId.BookingOverUnderFT || this.marketData.marketId == SbMarketId.BookingOverUnderHT) {
            if (this.oddType == SbOddsType.Home) return "Over";else if (this.oddType == SbOddsType.Away) return "Under";
            return "undefine";
          } else if (this.marketData.marketId == SbMarketId.DoubleChanceFT || this.marketData.marketId == SbMarketId.DoubleChanceHT) {
            if (this.oddType == SbOddsType.Home) return "1X";else if (this.oddType == SbOddsType.Away) return "X2";else if (this.oddType == SbOddsType.Draw) return "12";
            return "undefine";
          } else if (this.marketData.marketId == SbMarketId.CorrectScoreFT || this.marketData.marketId == SbMarketId.CorrectScoreHT) {
            var score1 = this.oddsData.points[0];
            var score2 = this.oddsData.points[2];
            if (score1 > score2) return "Home";else if (score1 < score2) return "Away";else return "Draw";
          } else if (this.marketData.marketId == SbMarketId.OddOrEvenFT || this.marketData.marketId == SbMarketId.OddOrEvenHT) {
            if (this.oddType == SbOddsType.Home) return "Odd";else if (this.oddType == SbOddsType.Away) return "Even";
            return "undefine";
          } else if (this.marketData.marketId == SbMarketId.TotalScoreFT || this.marketData.marketId == SbMarketId.TotalScoreHT) {
            return "undefine"; // hiện tại chưa có kèo
          } else {
            if (this.oddType == SbOddsType.Home) return "Home";else if (this.oddType == SbOddsType.Away) return "Away";else if (this.oddType == SbOddsType.Draw) return "Draw";
            return "undefine";
          }
        };

        _proto.GetOddsStyle = function GetOddsStyle() {
          if (this.marketData.marketId == SbMarketId.Market1X2FT || this.marketData.marketId == SbMarketId.Market1X2HT || this.marketData.marketId == SbMarketId.Corner1X2FT || this.marketData.marketId == SbMarketId.Corner1X2HT || this.marketData.marketId == SbMarketId.Booking1X2FT || this.marketData.marketId == SbMarketId.Booking1X2HT || this.marketData.marketId == SbMarketId.Market1X2ExtraFT || this.marketData.marketId == SbMarketId.Market1X2ExtraHT || this.marketData.marketId == SbMarketId.DoubleChanceFT || this.marketData.marketId == SbMarketId.DoubleChanceHT) return SbOddsStyle.Decimal; //alway is Decimal

          return this.oddStyle;
        };

        _proto.HasOdds = function HasOdds(data) {
          if (this.marketData.marketId == SbMarketId.Market1X2FT || this.marketData.marketId == SbMarketId.Market1X2HT || this.marketData.marketId == SbMarketId.Corner1X2FT || this.marketData.marketId == SbMarketId.Corner1X2HT || this.marketData.marketId == SbMarketId.Booking1X2FT || this.marketData.marketId == SbMarketId.Booking1X2HT || this.marketData.marketId == SbMarketId.Market1X2ExtraFT || this.marketData.marketId == SbMarketId.Market1X2ExtraHT || this.marketData.marketId == SbMarketId.DoubleChanceFT || this.marketData.marketId == SbMarketId.DoubleChanceHT || this.marketData.marketId == SbMarketId.AsianHandicapFT || this.marketData.marketId == SbMarketId.AsianHandicapHT || this.marketData.marketId == SbMarketId.OverUnderFT || this.marketData.marketId == SbMarketId.OverUnderHT || this.marketData.marketId == SbMarketId.CornerHandicapFT || this.marketData.marketId == SbMarketId.CornerHandicapHT || this.marketData.marketId == SbMarketId.CornerOverUnderFT || this.marketData.marketId == SbMarketId.CornerOverUnderHT || this.marketData.marketId == SbMarketId.BookingAsianHandicapFT || this.marketData.marketId == SbMarketId.BookingAsianHandicapHT || this.marketData.marketId == SbMarketId.BookingOverUnderFT || this.marketData.marketId == SbMarketId.BookingOverUnderHT || this.marketData.marketId == SbMarketId.AsianHandicapExtraFT || this.marketData.marketId == SbMarketId.AsianHandicapExtraHT || this.marketData.marketId == SbMarketId.OverUnderExtraFT || this.marketData.marketId == SbMarketId.OverUnderExtraHT) {
            if (this.oddsData.points.localeCompare(String(data.odds.points)) == 0) return true;
          } else {
            if (this.oddsData.offerId.localeCompare(String(data.odds.strOfferId)) == 0) return true;
          }

          return false;
        };

        _proto.OddsChange = function OddsChange(data) {
          this.setValue(data.odds);
          if (this.isShowPopupBetting) this.showPopupCalculatorBet(true);
        };

        _proto.SetRowColor = function SetRowColor(index) {
          var button = this.node.getComponent(Button);

          if (button != undefined) {
            if (index % 2 != 0) index = index - 1;

            if (index / 2 % 2 == 0) {
              button.normalColor = this.listColorLine[0];
              button.hoverColor = this.listColorLine[0];
            } else {
              button.normalColor = this.listColorLine[1];
              button.hoverColor = this.listColorLine[1];
            }
          }
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          if (this.isOddsAlwaysStyleDecimal()) this.oddStyle = SbOddsStyle.Decimal; //alway is Decimal
          else this.oddStyle = SbUserInfo.getInstance().GetOddsStyleID();
        };

        _proto.RemoveAllAnimOddChange = function RemoveAllAnimOddChange() {
          Tween.stopAllByTarget(this.bgOddsChange);
          Tween.stopAllByTarget(this.arrowUp);
          Tween.stopAllByTarget(this.arrowDown);
          this.bgOddsChange.active = false;
          this.arrowUp.active = false;
          this.arrowDown.active = false;
        };

        _proto.formatOdds = function formatOdds(bettingOdds) {
          return String(Number(bettingOdds).toFixed(2)); // let stringOdds = String(Number(bettingOdds).toFixed(2));
          // return stringOdds[stringOdds.length - 1].localeCompare("0") == 0 ? String(Number(bettingOdds).toFixed(1)) : stringOdds;
        };

        _proto.changeFeildNameShort = function changeFeildNameShort(data) {
          var dataTemp = JSON.stringify(data);
          dataTemp = dataTemp.replace(/strOfferId/g, "soi");
          dataTemp = dataTemp.replace(/isMainLine/g, "ml");
          dataTemp = dataTemp.replace(/points/g, "p");
          dataTemp = dataTemp.replace(/selectionHomeId/g, "shi");
          dataTemp = dataTemp.replace(/selectionAwayId/g, "sai");
          dataTemp = dataTemp.replace(/selectionDrawId/g, "sdi");
          dataTemp = dataTemp.replace(/oddsHome/g, "oh");
          dataTemp = dataTemp.replace(/oddsAway/g, "oa");
          dataTemp = dataTemp.replace(/oddsDraw/g, "od");
          dataTemp = dataTemp.replace(/malay/g, "ma");
          dataTemp = dataTemp.replace(/indo/g, "in");
          dataTemp = dataTemp.replace(/decimal/g, "de");
          return JSON.parse(dataTemp);
        };

        SbOdds.ChangeFeildNameShort = function ChangeFeildNameShort(data) {
          var dataTemp = JSON.stringify(data);
          dataTemp = dataTemp.replace(/strOfferId/g, "soi");
          dataTemp = dataTemp.replace(/isMainLine/g, "ml");
          dataTemp = dataTemp.replace(/points/g, "p");
          dataTemp = dataTemp.replace(/selectionHomeId/g, "shi");
          dataTemp = dataTemp.replace(/selectionAwayId/g, "sai");
          dataTemp = dataTemp.replace(/selectionDrawId/g, "sdi");
          dataTemp = dataTemp.replace(/oddsHome/g, "oh");
          dataTemp = dataTemp.replace(/oddsAway/g, "oa");
          dataTemp = dataTemp.replace(/oddsDraw/g, "od");
          dataTemp = dataTemp.replace(/malay/g, "ma");
          dataTemp = dataTemp.replace(/indo/g, "in");
          dataTemp = dataTemp.replace(/decimal/g, "de");
          return JSON.parse(dataTemp);
        };

        _proto.isOddsAlwaysStyleDecimal = function isOddsAlwaysStyleDecimal() {
          if (this.marketData.marketId == SbMarketId.Market1X2FT || this.marketData.marketId == SbMarketId.Market1X2HT || this.marketData.marketId == SbMarketId.DoubleChanceFT || this.marketData.marketId == SbMarketId.DoubleChanceHT || this.marketData.marketId == SbMarketId.NextGoal || this.marketData.marketId == SbMarketId.CorrectScoreFT || this.marketData.marketId == SbMarketId.CorrectScoreHT || this.marketData.marketId == SbMarketId.TotalScoreFT || this.marketData.marketId == SbMarketId.TotalScoreHT || this.marketData.marketId == SbMarketId.DrawNoBetFT || this.marketData.marketId == SbMarketId.Corner1X2FT || this.marketData.marketId == SbMarketId.Corner1X2HT || this.marketData.marketId == SbMarketId.Booking1X2FT || this.marketData.marketId == SbMarketId.Booking1X2HT || this.marketData.marketId == SbMarketId.Market1X2ExtraFT || this.marketData.marketId == SbMarketId.Market1X2ExtraHT) return true;
          return false;
        };

        _proto.setValue = function setValue(data) {
          this.oddsDataOld = null;
          this.oddsDataOld = JSON.parse(JSON.stringify(this.oddsData));
          if (data.hasOwnProperty("soi")) this.oddsData.offerId = String(data.soi);
          if (data.hasOwnProperty("ml")) this.oddsData.isMainLine = data.ml;
          if (data.hasOwnProperty("p")) this.oddsData.points = data.p;
          if (data.hasOwnProperty("shi")) this.oddsData.selectionHomeId = data.shi;
          if (data.hasOwnProperty("sai")) this.oddsData.selectionAwayId = data.sai;
          if (data.hasOwnProperty("sdi")) this.oddsData.selectionDrawId = data.sdi;
          if (data.hasOwnProperty("oh")) this.oddsData.oddsHome = [Number(data.oh.ma), Number(data.oh["in"]), Number(data.oh.de), Number(data.oh.hk)];
          if (data.hasOwnProperty("oa")) this.oddsData.oddsAway = [Number(data.oa.ma), Number(data.oa["in"]), Number(data.oa.de), Number(data.oa.hk)];
          if (data.hasOwnProperty("od")) this.oddsData.oddsDraw = [Number(data.od.ma), Number(data.od["in"]), Number(data.od.de), Number(data.od.hk)];
          this.updateValueToUI();
        };

        _proto.setValueWithFieldNameLong = function setValueWithFieldNameLong(data) {
          this.oddsDataOld = null;
          this.oddsDataOld = JSON.parse(JSON.stringify(this.oddsData)); // if (data.hasOwnProperty("offerId"))
          //     this.oddsData.offerId = data.soi;

          if (data.hasOwnProperty("strOfferId")) this.oddsData.offerId = data.soi;
          if (data.hasOwnProperty("isMainLine")) this.oddsData.isMainLine = data.ml;
          if (data.hasOwnProperty("points")) this.oddsData.points = data.p;
          if (data.hasOwnProperty("selectionHomeId")) this.oddsData.selectionHomeId = data.shi;
          if (data.hasOwnProperty("selectionAwayId")) this.oddsData.selectionAwayId = data.sai;
          if (data.hasOwnProperty("selectionDrawId")) this.oddsData.selectionDrawId = data.sdi;
          if (data.hasOwnProperty("oddsHome")) this.oddsData.oddsHome = [Number(data.oddsHome.malay), Number(data.oddsHome.indo), Number(data.oddsHome.decimal), Number(data.oddsHome.hk)];
          if (data.hasOwnProperty("oddsAway")) this.oddsData.oddsAway = [Number(data.oddsAway.malay), Number(data.oddsAway.indo), Number(data.oddsAway.decimal), Number(data.oddsAway.hk)];
          if (data.hasOwnProperty("oddsDraw")) this.oddsData.oddsDraw = [Number(data.oddsDraw.malay), Number(data.oddsDraw.indo), Number(data.oddsDraw.decimal), Number(data.oddsDraw.hk)];
          this.updateValueToUI();
        };

        _proto.convertPoint = function convertPoint(oddsData, oddsType) {
          var p = Math.abs(Number(oddsData.points));
          var value = "";

          if (Number(oddsData.points) <= 0) {
            if (oddsType == SbOddsType.Home) value = String(p * -1);else if (oddsType == SbOddsType.Away) value = String(p);
          } else {
            if (oddsType == SbOddsType.Home) value = String(p);else if (oddsType == SbOddsType.Away) value = String(p * -1);
          }

          return value;
        };

        _proto.updateUIOddsIncreaseOrDecrease = function updateUIOddsIncreaseOrDecrease(oddsOld, odds) {
          if (this.oddType != SbOddsType.None && oddsOld != ODDS_VALUE_DEFAULT) {
            if (odds == oddsOld) ;else if (odds > oddsOld) {
              this.arrowUp.active = true;
              this.arrowDown.active = false;
              this.animOddChange(); // let repeatUp = this.arrowUp.getComponent(SbRepeatMove);
              // if (repeatUp != null)
              //     repeatUp.StartRepeatMove();
              // let repeatDown = this.arrowDown.getComponent(SbRepeatMove);
              // if (repeatDown != null)
              //     repeatDown.Stop();
            } else {
              this.arrowUp.active = false;
              this.arrowDown.active = true;
              this.animOddChange(); // let repeatUp = this.arrowUp.getComponent(SbRepeatMove);
              // if (repeatUp != null)
              //     repeatUp.Stop();
              // let repeatDown = this.arrowDown.getComponent(SbRepeatMove);
              // if (repeatDown != null)
              //     repeatDown.StartRepeatMove();
            }
          }
        };

        _proto.animOddChange = function animOddChange() {
          var _this2 = this;

          Tween.stopAllByTarget(this.bgOddsChange.getComponent(UIOpacity));
          this.bgOddsChange.active = true;

          if (this.bgOddsChange.getComponent(UIOpacity).opacity != 0) {
            tween(this.bgOddsChange.getComponent(UIOpacity)).to(0.05, {
              opacity: 0
            }).to(0.25, {
              opacity: 255
            }).delay(TIME_SHOW_ODDS_CHANGE).to(0.25, {
              opacity: 0
            }).call(function () {
              _this2.bgOddsChange.active = false;
            }).start();
          } else {
            this.bgOddsChange.getComponent(UIOpacity).opacity = 0;
            tween(this.bgOddsChange.getComponent(UIOpacity)).to(0.25, {
              opacity: 255
            }).delay(TIME_SHOW_ODDS_CHANGE).to(0.25, {
              opacity: 0
            }).call(function () {
              _this2.bgOddsChange.active = false;
            }).start();
          }
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {};

        _proto.onClickBet = function onClickBet() {
          SbSoundsManager.getInstance().playSfxClick();
          log("onClickBet");
          this.showPopupCalculatorBet();
        };

        _proto.showPopupCalculatorBet = function showPopupCalculatorBet(isUpdateOdds) {
          if (isUpdateOdds === void 0) {
            isUpdateOdds = false;
          }

          var bodyRequest = {
            "isLive": this.matchData.isLive,
            "leagueId": String(this.leagueData.leagueId),
            "matchTime": String(this.matchData.startDate),
            "displayOdds": String(this.getOddsValue()),
            "selectionId": String(this.getSelectionID()),
            "offerId": String(this.oddsData.offerId),
            "oddsStyle": SbUserInfo.getInstance().GetOddsStyleString(this.marketData.marketId, this.oddStyle)
          };
          SbCommonPrefabsManager.getInstance().showPopupCalculatorBet(JSON.stringify(bodyRequest), this, this.oddType, this.onClosePopupBettingCallback.bind(this), isUpdateOdds, this.sbFootballBettingController);
          this.isShowPopupBetting = true;
        };

        _proto.onClosePopupBettingCallback = function onClosePopupBettingCallback() {
          this.isShowPopupBetting = false;
        };

        _proto.updateColorOdds = function updateColorOdds() {
          var listColor = this.listColorOdds;
          var color = listColor[0]; //default

          if (this.oddStyle == SbOddsStyle.Indo || this.oddStyle == SbOddsStyle.Malay) {
            if (this.getOddsValue() < 0) color = listColor[1];
          }

          this.lbOdds.color = color;
        };

        _proto.reset = function reset() {
          this.bgOddsChange.active = false;
          this.nodeLock.active = false;
        };

        _createClass(SbOdds, [{
          key: "listColorOdds",
          get: function get() {
            var result = [new Color(51, 51, 51, 255), new Color(222, 68, 26, 255)];

            if (this.skinOddColorCtr) {
              result = this.skinOddColorCtr.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }, {
          key: "listColorLine",
          get: function get() {
            var result = [Color.WHITE, Color.CYAN];

            if (this.skinLineColorCtr) {
              result = this.skinLineColorCtr.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbOdds;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "lbBettingOdds", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "lbOdds", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "arrowUp", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "arrowDown", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "bgOddsChange", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, "nodeLock", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, "skinOddColorCtr", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, "skinLineColorCtr", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class)));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOdds1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1ec1afYkhpIfaxYoH3/f75j", "SbOdds1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOdds1X2 = exports('default', (_dec = ccclass('SbOdds1X2'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOdds1X2, _SbOdds);

        function SbOdds1X2() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOdds1X2.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "1 ";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "2";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "X";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        };

        _proto.updateColorOdds = function updateColorOdds() {
          var listColor = this.listColorOdds;
          this.lbOdds.color = listColor[0]; //default
        };

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOdds1X2;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsAsianHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "078d6V5kHZFZ4HEnxf51pmr", "SbOddsAsianHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsAsianHandicap = exports('default', (_dec = ccclass('SbOddsAsianHandicap'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsAsianHandicap, _SbOdds);

        function SbOddsAsianHandicap() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsAsianHandicap.prototype; // // for desktop
        // private oddsHome = [0, 0, 0, 0];//thứ tự index = [malay, indo, decimal, hk]
        // private oddsAway = [0, 0, 0, 0];

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.setValue = function setValue(data) {
          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = 0;
          var bettingOddsOld = null;
          bettingOdds = this.getOddsValue();
          bettingOddsOld = this.getOddsOldValue();
          this.lbOdds.string = this.formatOdds(this.getOddsValue());

          if (Number(this.oddsData.points) <= 0) {
            if (this.oddType == SbOddsType.Home) {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));
              // this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
              var strPoints = Math.abs(Number(this.oddsData.points)).toString();
              if (Number(this.oddsData.points) == 0) this.lbBettingOdds.string = strPoints;else this.lbBettingOdds.string = "-" + strPoints;
            } else this.lbBettingOdds.string = "";
          } else {
            if (this.oddType == SbOddsType.Home) this.lbBettingOdds.string = "";else {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));// String(this.oddsData.points);
              this.lbBettingOdds.string = "-" + Math.abs(Number(this.oddsData.points)).toString();
            }
          }

          this.updateColorOdds();
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
        };

        return SbOddsAsianHandicap;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsBooking1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b28a2Br/WJMUZAlfdgnVc1E", "SbOddsBooking1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsBooking1X2 = exports('default', (_dec = ccclass('SbOddsBooking1X2'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsBooking1X2, _SbOdds);

        function SbOddsBooking1X2() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsBooking1X2.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "Đội Nhà";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "Đội Khách";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "Hòa";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        };

        _proto.updateColorOdds = function updateColorOdds() {
          var listColor = this.listColorOdds;
          this.lbOdds.color = listColor[0]; //default
        };

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsBooking1X2;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsBookingHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "197b7T6ZzlJaJm8L8JeASiB", "SbOddsBookingHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsBookingHandicap = exports('default', (_dec = ccclass('SbOddsBookingHandicap'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsBookingHandicap, _SbOdds);

        function SbOddsBookingHandicap() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsBookingHandicap.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (Number(this.oddsData.points) <= 0) {
            if (this.oddType == SbOddsType.Home) {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));
              // this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
              var strPoints = Math.abs(Number(this.oddsData.points)).toString();
              if (Number(this.oddsData.points) == 0) this.lbBettingOdds.string = strPoints;else this.lbBettingOdds.string = "-" + strPoints;
            } else this.lbBettingOdds.string = "";
          } else {
            if (this.oddType == SbOddsType.Home) this.lbBettingOdds.string = "";else {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));// String(this.oddsData.points);
              this.lbBettingOdds.string = "-" + Math.abs(Number(this.oddsData.points)).toString();
            }
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsBookingHandicap;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsBookingOverUnder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d33felyTW9KqrnIWJfXhdFo", "SbOddsBookingOverUnder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsBookingOverUnder = exports('default', (_dec = ccclass('SbOddsBookingOverUnder'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsBookingOverUnder, _SbOdds);

        function SbOddsBookingOverUnder() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsBookingOverUnder.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Number(this.oddsData.points));
            this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
          } else if (this.oddType == SbOddsType.Away) {
            // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Number(this.oddsData.points));
            this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsBookingOverUnder;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsCorner1X2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "16dfa48fEpDeJrmB10HTsv7", "SbOddsCorner1X2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsCorner1X2 = exports('default', (_dec = ccclass('SbOddsCorner1X2'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsCorner1X2, _SbOdds);

        function SbOddsCorner1X2() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsCorner1X2.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "Đội Nhà";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "Đội Khách";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "Hòa";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        };

        _proto.updateColorOdds = function updateColorOdds() {
          var listColor = this.listColorOdds;
          this.lbOdds.color = listColor[0]; //default
        };

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsCorner1X2;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsCornerHandicap.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b7bd1Flsf9OZbgup+DjA/fr", "SbOddsCornerHandicap", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsCornerHandicap = exports('default', (_dec = ccclass('SbOddsCornerHandicap'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsCornerHandicap, _SbOdds);

        function SbOddsCornerHandicap() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsCornerHandicap.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (Number(this.oddsData.points) <= 0) {
            if (this.oddType == SbOddsType.Home) {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));
              // this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
              var strPoints = Math.abs(Number(this.oddsData.points)).toString();
              if (Number(this.oddsData.points) == 0) this.lbBettingOdds.string = strPoints;else this.lbBettingOdds.string = "-" + strPoints;
            } else this.lbBettingOdds.string = "";
          } else {
            if (this.oddType == SbOddsType.Home) this.lbBettingOdds.string = "";else {
              // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Math.abs(Number(this.oddsData.points)));// String(this.oddsData.points);
              this.lbBettingOdds.string = "-" + Math.abs(Number(this.oddsData.points)).toString();
            }
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsCornerHandicap;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsCornerOverUnder.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b83f6YNfjhEtZJ1YtPdmmZa", "SbOddsCornerOverUnder", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsCornerOverUnder = exports('default', (_dec = ccclass('SbOddsCornerOverUnder'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsCornerOverUnder, _SbOdds);

        function SbOddsCornerOverUnder() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsCornerOverUnder.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Number(this.oddsData.points));
            this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
          } else if (this.oddType == SbOddsType.Away) {
            // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Number(this.oddsData.points));
            this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsCornerOverUnder;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsCorrectScore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b2f9bcwfxBOharQKygYKM/r", "SbOddsCorrectScore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsCorrectScore = exports('default', (_dec = ccclass('SbOddsCorrectScore'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsCorrectScore, _SbOdds);

        function SbOddsCorrectScore() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsCorrectScore.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = this.convertPointToScore(this.oddsData.points);
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = this.convertPointToScore(this.oddsData.points);
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = this.convertPointToScore(this.oddsData.points);
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        };

        _proto.convertPointToScore = function convertPointToScore(sc) {
          if (String(sc).localeCompare("9:9") == 0) return "AOS";else return String(sc);
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsCorrectScore;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsDoubleChance.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "37b18n0v6VGiI/xaDMC+LJa", "SbOddsDoubleChance", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsDoubleChance = exports('default', (_dec = ccclass('SbOddsDoubleChance'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsDoubleChance, _SbOdds);

        function SbOddsDoubleChance() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsDoubleChance.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "Đội Nhà hoặc hòa";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "Đội Khách hoặc hòa";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "Đội Nhà hoặc đội Khách";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsDoubleChance;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsDrawNoBet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "64f77cSBIxM7IjqpFXGGT+t", "SbOddsDrawNoBet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsDrawNoBet = exports('default', (_dec = ccclass('SbOddsDrawNoBet'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsDrawNoBet, _SbOdds);

        function SbOddsDrawNoBet() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsDrawNoBet.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "Đội nhà";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "Đội khách";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsDrawNoBet;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsNextGoal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "02b7cuceiVCb5XwdWMuoMBR", "SbOddsNextGoal", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsNextGoal = exports('default', (_dec = ccclass('SbOddsNextGoal'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsNextGoal, _SbOdds);

        function SbOddsNextGoal() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsNextGoal.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "1 ";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "2";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "X";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsNextGoal;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsOddOrEven.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cd76fX8/AhHo4YY6bNcSiCR", "SbOddsOddOrEven", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsOddOrEven = exports('default', (_dec = ccclass('SbOddsOddOrEven'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsOddOrEven, _SbOdds);

        function SbOddsOddOrEven() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsOddOrEven.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "Lẻ";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "Chẵn";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsOddOrEven;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsOU.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "dac08SqcRNF4qJoVqKqvrGq", "SbOddsOU", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsOU = exports('default', (_dec = ccclass('SbOddsOU'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsOU, _SbOdds);

        function SbOddsOU() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsOU.prototype;

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.setValue = function setValue(data) {
          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            // this.lbBettingOdds.string = SbUtils.ConvertPointToString(Number(this.oddsData.points));
            this.lbBettingOdds.string = Math.abs(Number(this.oddsData.points)).toString();
          } else if (this.oddType == SbOddsType.Away) this.lbBettingOdds.string = "U";

          this.lbOdds.string = this.formatOdds(bettingOdds);
          this.updateColorOdds();
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
        } // updateColorOdds(bettingOdds) {
        //     let color = this.listColorOdds[0];//default
        //     if (bettingOdds > 0)
        //         color = this.listColorOdds[0];
        //     else
        //         color = this.listColorOdds[1];
        //     this.lbOdds.node.color = color;
        // }
        ;

        return SbOddsOU;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbOddsTotalScore.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbOdds.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbOddsType, SbOdds;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbOddsType = module.SbOddsType;
    }, function (module) {
      SbOdds = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "59574iR3pBAD6rUqNCcwGqy", "SbOddsTotalScore", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbOddsTotalScore = exports('default', (_dec = ccclass('SbOddsTotalScore'), _dec(_class = /*#__PURE__*/function (_SbOdds) {
        _inheritsLoose(SbOddsTotalScore, _SbOdds);

        function SbOddsTotalScore() {
          return _SbOdds.apply(this, arguments) || this;
        }

        var _proto = SbOddsTotalScore.prototype; // @property(cc.Label)
        // private lbOddsDraw: cc.Label = null;
        // private oddsDraw = [0, 0, 0, 0];
        // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          _SbOdds.prototype.start.call(this);
        };

        _proto.InitData = function InitData(data, type) {
          this.oddsData.selectionDrawId = data.sdi;

          _SbOdds.prototype.InitData.call(this, data, type);

          this.setValue(data);
        };

        _proto.ChangeOddsStyle = function ChangeOddsStyle() {
          _SbOdds.prototype.ChangeOddsStyle.call(this);

          this.updateValueToUI(false);
        };

        _proto.updateValueToUI = function updateValueToUI(isUpdateIncreaseOrDecrease) {
          if (isUpdateIncreaseOrDecrease === void 0) {
            isUpdateIncreaseOrDecrease = true;
          }

          _SbOdds.prototype.updateValueToUI.call(this, isUpdateIncreaseOrDecrease);

          var bettingOdds = this.getOddsValue();
          var bettingOddsOld = this.getOddsOldValue();

          if (this.oddType == SbOddsType.Home) {
            this.lbBettingOdds.string = "1 ";
          } else if (this.oddType == SbOddsType.Away) {
            this.lbBettingOdds.string = "2";
          } else if (this.oddType == SbOddsType.Draw) {
            this.lbBettingOdds.string = "X";
          }

          if (bettingOdds != null) this.lbOdds.string = this.formatOdds(bettingOdds);
          if (isUpdateIncreaseOrDecrease) this.updateUIOddsIncreaseOrDecrease(bettingOddsOld, bettingOdds);
          this.updateColorOdds();
        } // protected updateColorOdds() {
        //     this.lbOdds.node.color = this.listColorOdds[0];//default
        // }
        ;

        _proto.setValue = function setValue(data) {
          this.oddsData.selectionDrawId = data.signed;

          _SbOdds.prototype.setValue.call(this, data);
        };

        _proto.OddsChange = function OddsChange(data) {
          _SbOdds.prototype.OddsChange.call(this, this.changeFeildNameShort(data));
        };

        return SbOddsTotalScore;
      }(SbOdds)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbParlayBetBadge.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, director, Tween, tween, Component, EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      director = module.director;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT = module.EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "08a25MhaFxIuLdyNN06iyrR", "SbParlayBetBadge", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbParlayBetBadge = exports('SbParlayBetBadge', (_dec = ccclass('SbParlayBetBadge'), _dec2 = property(Label), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbParlayBetBadge, _Component);

        function SbParlayBetBadge() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbBadge", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "container", _descriptor2, _assertThisInitialized(_this));

          _this.amount = 0;
          return _this;
        }

        var _proto = SbParlayBetBadge.prototype;

        _proto.onLoad = function onLoad() {
          this.hide();

          if (this.lbBadge != null) {
            director.on(EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT, this.onAmountTicketParlayBetChanged.bind(this), this);
          }
        };

        _proto.onEnable = function onEnable() {
          this.updateValueToUI();
        };

        _proto.onDestroy = function onDestroy() {
          director.off(EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT, this.onAmountTicketParlayBetChanged.bind(this), this);
        };

        _proto.onAmountTicketParlayBetChanged = function onAmountTicketParlayBetChanged(amount) {
          var _this2 = this;

          if (this.amount < amount) {
            this.amount = amount;

            if (this.lbBadge.node != null && this.lbBadge.node != undefined) {
              Tween.stopAllByTarget(this.lbBadge.node);
              tween(this.lbBadge.node).delay(0.05).call(function () {
                _this2.updateValueToUI();
              }).start();
            }
          } else {
            this.amount = amount;
            this.updateValueToUI();
          }
        };

        _proto.updateValueToUI = function updateValueToUI() {
          if (this.lbBadge != null) {
            this.lbBadge.string = String(this.amount);

            if (this.amount <= 0) {
              this.hide();
            } else {
              this.show();
            }
          }
        };

        _proto.show = function show() {
          if (this.container != null) {
            this.container.active = true;
          }
        };

        _proto.hide = function hide() {
          if (this.container != null) {
            this.container.active = false;
          }
        };

        return SbParlayBetBadge;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbBadge", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "container", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbParlayBetManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbUserInfo.ts', './SbConfigManager.ts', './SbGameHTTPManager.ts', './SbDefine.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Node, director, Tween, tween, Component, SbOddsStyle, SbUserInfo, SbConfigManager, SbGameHTTPManager, EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT, EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE, EVENT_LIST_PARLAY_BET_CHANGED;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      director = module.director;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      SbOddsStyle = module.SbOddsStyle;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT = module.EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT;
      EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE = module.EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE;
      EVENT_LIST_PARLAY_BET_CHANGED = module.EVENT_LIST_PARLAY_BET_CHANGED;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "947edGD0x1F2aBV81oSvsz7", "SbParlayBetManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbParlayBetManager = exports('SbParlayBetManager', (_dec = ccclass('SbParlayBetManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbParlayBetManager, _Component);

        function SbParlayBetManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.listOddParlay = [];
          _this.valueOddParlay = 0;
          _this.onCallbackCalculatorBetSuccess = null;
          _this.onCallbackCalculatorBetFail = null;
          _this.onCallbackDisableAllOdds = null;
          _this.onCallbackListOddsEmpty = null;
          _this.needCalculatorOddsOnOddChange = false;
          _this.nodeDebouncing = new Node();
          return _this;
        }

        SbParlayBetManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbParlayBetManager();
          }

          return this.Instance;
        };

        var _proto = SbParlayBetManager.prototype;

        _proto.Clean = function Clean() {
          if (SbParlayBetManager.Instance != null) {
            SbParlayBetManager.Instance = null;
          }
        };

        _proto.SetNeedCalculatorOddsOnOddChange = function SetNeedCalculatorOddsOnOddChange(value) {
          this.needCalculatorOddsOnOddChange = value;
        };

        _proto.SetCallbackCalculatorBet = function SetCallbackCalculatorBet(onCallbackSuccess, onCallbackFail) {
          this.onCallbackCalculatorBetSuccess = onCallbackSuccess;
          this.onCallbackCalculatorBetFail = onCallbackFail;
        };

        _proto.SetCallbackDisableAllOdds = function SetCallbackDisableAllOdds(callBack) {
          this.onCallbackDisableAllOdds = callBack;
        };

        _proto.SetCallbackListOddsEmpty = function SetCallbackListOddsEmpty(callBack) {
          this.onCallbackListOddsEmpty = callBack;
        };

        _proto.GetOddParlayValue = function GetOddParlayValue() {
          return this.valueOddParlay;
        };

        _proto.OnOddsChangeValue = function OnOddsChangeValue(oddsData, odds) {
          if (this.listOddParlay.length == 0) return;
          var offerId = oddsData.offerId;
          var listSelection = [oddsData.selectionHomeId, oddsData.selectionDrawId, oddsData.selectionAwayId];

          for (var i = 0; i < listSelection.length; i++) {
            if (this.CheckOddsExist(listSelection[i], offerId)) {
              this.updateOddsData(listSelection[i], offerId, odds);

              if (this.needCalculatorOddsOnOddChange) {
                this.debouncingCalculatorParlayBet();
              }

              break;
            }
          }
        };

        _proto.CheckOddsExist = function CheckOddsExist(selectionId, offerId) {
          if (this.listOddParlay.length == 0) return false;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].selectionId.localeCompare(selectionId) == 0 && this.listOddParlay[i].offerId.localeCompare(offerId) == 0) return true;
          }

          return false;
        };

        _proto.CheckMatchExist = function CheckMatchExist(matchId) {
          if (this.listOddParlay.length == 0) return false;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (String(this.listOddParlay[i].matchId).localeCompare(matchId) == 0) return true;
          }

          return false;
        };

        _proto.SetOddsEnable = function SetOddsEnable(selectionId, offerId, value) {
          var odds = this.getOdds(selectionId, offerId);

          if (odds != null) {
            odds.isEnable = value;
          }

          if (this.GetOddsParlayEnableLength() > 0) {
            this.CalculateParlayBet();
          } else if (this.onCallbackDisableAllOdds != null) {
            this.onCallbackDisableAllOdds();
          }
        };

        _proto.Add = function Add(parlayData) {
          if (!this.CheckOddsExist(parlayData.selectionId, parlayData.offerId)) {
            this.listOddParlay.push(parlayData);
            this.countOddValue();
            this.emitEventListParlayBetChanged(parlayData.matchId);
            return true;
          } else {
            console.warn("odds Parlay already added");
            return false;
          }
        };

        _proto.Replace = function Replace(parlayData) {
          if (this.listOddParlay.length == 0) return false;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].matchId === parlayData.matchId) {
              this.listOddParlay[i] = parlayData;
              this.countOddValue();
              this.CalculateParlayBet();
              this.emitEventListParlayBetChanged(this.listOddParlay[i].matchId);
              return true;
            }
          }

          return false;
        };

        _proto.Remove = function Remove(parlayData) {
          if (this.listOddParlay.length == 0) return false;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].offerId === parlayData.offerId) {
              var matchIdRemoved = this.listOddParlay[i].matchId;
              this.listOddParlay.splice(i, 1);
              this.countOddValue();
              this.CalculateParlayBet();
              this.emitEventListParlayBetChanged(matchIdRemoved);

              if (this.listOddParlay.length == 0 && this.onCallbackListOddsEmpty != null) {
                this.onCallbackListOddsEmpty();
              }

              return true;
            }
          }

          return false;
        };

        _proto.RemoveAllItems = function RemoveAllItems() {
          var listMatchRemoved = [];

          for (var i = 0; i < this.listOddParlay.length; i++) {
            var id = this.listOddParlay[i].matchId;
            listMatchRemoved.push(id);
          }

          this.listOddParlay = [];
          this.valueOddParlay = 0;

          for (var _i = 0; _i < listMatchRemoved.length; _i++) {
            this.emitEventListParlayBetChanged(listMatchRemoved[_i]);
          }

          director.emit(EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT, this.listOddParlay.length);
        };

        _proto.CalculateParlayBet = function CalculateParlayBet(onSuccess, onFail) {
          var _this2 = this;

          if (onSuccess === void 0) {
            onSuccess = null;
          }

          if (onFail === void 0) {
            onFail = null;
          }

          if (this.listOddParlay.length == 0) {
            return;
          }

          var listOddsForCalculatedBet = this.getListOddsForCalculatedBet();

          if (listOddsForCalculatedBet.length == 0) {
            return;
          }

          var body = {
            "agentId": 1,
            "calculateBetRequests": listOddsForCalculatedBet,
            "currency": "VND",
            "oddsStyle": SbUserInfo.getInstance().ConverttOddsStyleString(SbOddsStyle.Decimal),
            "parlay": true
          };
          console.log("PlaceBet: " + JSON.stringify(body));
          var url = SbConfigManager.getInstance().urlAPICaculateParlayBet;
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (response) {
            console.log("urlAPICaculateParlayBetsuccess: " + JSON.stringify(response)); //success

            if (response == null) {
              if (_this2.onCallbackCalculatorBetFail != null) {
                _this2.onCallbackCalculatorBetFail("error");
              }

              if (onFail != null) {
                onFail(response);
              }

              return;
            }

            if (_this2.onCallbackCalculatorBetSuccess != null) {
              _this2.onCallbackCalculatorBetSuccess(response);
            }

            if (onSuccess != null) {
              onSuccess(response);
            }
          }, function (obj, msg) {
            //fail
            if (_this2.onCallbackCalculatorBetFail != null) {
              _this2.onCallbackCalculatorBetFail(msg);
            }

            if (onFail != null) {
              onFail(obj, msg);
            }
          }, true);
        };

        _proto.GetOddsParlay = function GetOddsParlay(parlayData) {
          if (this.listOddParlay.length == 0) return null;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].matchId === parlayData.matchId) {
              var temp = this.listOddParlay[i];
              return temp;
            }
          }

          return null;
        };

        _proto.GetListOddsParlay = function GetListOddsParlay() {
          return this.listOddParlay;
        };

        _proto.GetOddsParlayLength = function GetOddsParlayLength() {
          return this.listOddParlay.length;
        };

        _proto.GetOddsParlayEnableLength = function GetOddsParlayEnableLength() {
          var count = 0;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].isEnable) count++;
          }

          return count;
        };

        _proto.SetValueOddParlay = function SetValueOddParlay(value) {
          this.valueOddParlay = value;
        };

        _proto.FetchNewData = function FetchNewData() {
          for (var i = 0; i < this.listOddParlay.length; i++) {
            this.listOddParlay[i].displayOdds = this.listOddParlay[i].odds.getOddsValue(SbOddsStyle.Decimal);
            director.emit(EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE, this.listOddParlay[i].odds, this.listOddParlay[i].selectionId);
          }
        };

        _proto.debouncingCalculatorParlayBet = function debouncingCalculatorParlayBet() {
          var _this3 = this;

          if (this.nodeDebouncing != null && this.nodeDebouncing != undefined) {
            Tween.stopAllByTarget(this.nodeDebouncing);
            tween(this.nodeDebouncing).delay(1).call(function () {
              _this3.CalculateParlayBet();
            });
          }
        };

        _proto.emitEventListParlayBetChanged = function emitEventListParlayBetChanged(eventID) {
          director.emit(EVENT_LIST_PARLAY_BET_CHANGED, eventID);
          director.emit(EVENT_LIST_PARLAY_BET_CHANGED_AMOUNT, this.listOddParlay.length);
        };

        _proto.countOddValue = function countOddValue() {// let count = 0;
          // for (let i = 0; i < this.listOddParlay.length; i++) {
          //     count *= this.listOddParlay[i].odds.getOddsValue();
          // }
          // this.valueOddParlay = count;
        };

        _proto.updateOddsData = function updateOddsData(selectionId, offerId, odds) {
          if (this.listOddParlay.length == 0) return;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].selectionId.localeCompare(selectionId) == 0 && this.listOddParlay[i].offerId.localeCompare(offerId) == 0) {
              this.listOddParlay[i].odds = odds;
              this.listOddParlay[i].displayOdds = odds.getOddsValue(SbOddsStyle.Decimal);
              director.emit(EVENT_ODDS_INLIST_PARLAY_BET_CHANGE_VALUE, odds, selectionId);
            }
          }
        };

        _proto.getOdds = function getOdds(selectionId, offerId) {
          if (this.listOddParlay.length == 0) return;

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].selectionId.localeCompare(selectionId) == 0 && this.listOddParlay[i].offerId.localeCompare(offerId) == 0) return this.listOddParlay[i];
          }

          return null;
        };

        _proto.getListOddsForCalculatedBet = function getListOddsForCalculatedBet() {
          var listOdds = [];

          for (var i = 0; i < this.listOddParlay.length; i++) {
            if (this.listOddParlay[i].isEnable) {
              listOdds.push({
                displayOdds: Number(this.listOddParlay[i].displayOdds),
                isLive: this.listOddParlay[i].isLive,
                leagueId: this.listOddParlay[i].leagueId,
                matchId: this.listOddParlay[i].matchId,
                matchTime: this.listOddParlay[i].matchTime,
                offerId: this.listOddParlay[i].offerId,
                selectionId: this.listOddParlay[i].selectionId
              });
            }
          }

          return listOdds;
        };

        return SbParlayBetManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts', './SbTooltips.ts', './SbSkinListSprite.ts', './SbConfigManager.ts', './SbSkinListColor.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Sprite, Color, Component, SbSoundsManager, SbTooltips, SbSkinListSprite, SbConfigManager, SbSkinListColor;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbTooltips = module.SbTooltips;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbSkinListColor = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "09c80CLSM9GqKcGrVi094Mo", "SbPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPlayer = exports('SbPlayer', (_dec = ccclass('SbPlayer'), _dec2 = property(Node), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(Sprite), _dec11 = property(SbSkinListSprite), _dec12 = property(SbSkinListColor), _dec13 = property(SbTooltips), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbPlayer, _Component);

        function SbPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "avatar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbPlayerName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTshirtNumber", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbPosition", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconScore", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconOwnGoal", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconPlayerIn", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconPlayerOut", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconCard", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cardSkinSprFrames", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "cardSkinColors", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tooltipsInfoDetailt", _descriptor12, _assertThisInitialized(_this));

          _this.playerInfo = null;
          return _this;
        }

        var _proto = SbPlayer.prototype;

        _proto.InitData = function InitData(data, mapPlayerInfo) {
          if (mapPlayerInfo === void 0) {
            mapPlayerInfo = null;
          }

          this.playerInfo = data; // let dataFake = {
          //     "id": "sr:player:50666",
          //     "name": "Ost, Jesse",
          //     "type": "goalkeeper",
          //     "date_of_birth": "1990-10-20",
          //     "nationality": "Finland",
          //     "country_code": "FIN",
          //     "height": 191,
          //     "weight": 74,
          //     "jersey_number": 1,
          //     "preferred_foot": "right",
          //     "starter": true,
          //     "played": true,
          //     "order": 1,
          //     "position": "goalkeeper"
          // };

          if (data.hasOwnProperty("name")) {
            this.lbPlayerName.string = SbPlayer.ShortPlayerName(data.name);
          }

          if (data.hasOwnProperty("jersey_number")) {
            this.lbTshirtNumber.string = String(data.jersey_number);
          }

          this.resetExtendInfo();
          var extendInfo = mapPlayerInfo ? mapPlayerInfo.get(data.id) : null;

          if (extendInfo) {
            this.setScoreInfo(extendInfo.score);
            this.setOwnGoalInfo(extendInfo.ownGoal);
            this.setCardReceivedInfo(extendInfo);
            this.setPlayerIn(extendInfo.playerIn);
            this.setPlayerOut(extendInfo.playerOut);
          }
        };

        _proto.resetExtendInfo = function resetExtendInfo() {
          this.setPlayerIn(false);
          this.setPlayerOut(false);

          if (this.iconScore) {
            this.iconScore.active = false;
          }

          if (this.iconOwnGoal) {
            this.iconOwnGoal.active = false;
          }

          if (this.iconCard) {
            this.iconCard.node.active = false;
          }
        };

        _proto.setPlayerIn = function setPlayerIn(active) {
          if (this.iconPlayerIn) {
            this.iconPlayerIn.active = active;
          }
        };

        _proto.setPlayerOut = function setPlayerOut(active) {
          if (this.iconPlayerOut) {
            this.iconPlayerOut.active = active;
          }
        };

        _proto.setScoreInfo = function setScoreInfo(score) {
          if (!this.iconScore) {
            return;
          }

          this.iconScore.active = score > 0;
          var childLabel = this.iconScore.children[0];

          if (childLabel) {
            childLabel.active = score > 1;
            var nodeScore = childLabel.children[0];

            if (nodeScore && nodeScore.getComponent(Label)) {
              nodeScore.getComponent(Label).string = score.toString();
            }
          }
        };

        _proto.setOwnGoalInfo = function setOwnGoalInfo(ownGoal) {
          if (!this.iconOwnGoal) {
            return;
          }

          this.iconOwnGoal.active = ownGoal > 0;
          var childLabel = this.iconOwnGoal.children[0];

          if (childLabel) {
            childLabel.active = ownGoal > 1;
            var nodeOG = childLabel.children[0];

            if (nodeOG && nodeOG.getComponent(Label)) {
              nodeOG.getComponent(Label).string = ownGoal.toString();
            }
          }
        };

        _proto.setCardReceivedInfo = function setCardReceivedInfo(extendInfo) {
          if (!this.iconCard) {
            return;
          }

          var bonusCard = this.iconCard.node.children[0];
          var cards = [];
          var colors = [Color.WHITE, Color.WHITE];

          if (this.cardSkinSprFrames) {
            cards = this.cardSkinSprFrames.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
          }

          if (this.cardSkinColors) {
            colors = this.cardSkinColors.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
          }

          if (extendInfo.numCardYellow > 0) {
            this.iconCard.node.active = true;
            this.iconCard.color = colors[0];
            this.iconCard.spriteFrame = cards[0];

            if (bonusCard) {
              bonusCard.active = extendInfo.numCardYellow > 1;
            }
          } else if (extendInfo.numCardRed > 0) {
            this.iconCard.node.active = true;
            this.iconCard.color = colors[1];
            this.iconCard.spriteFrame = cards[1];

            if (bonusCard) {
              bonusCard.active = false;
            }
          }
        };

        _proto.onClickAvatar = function onClickAvatar() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.tooltipsInfoDetailt != null) {
            this.tooltipsInfoDetailt.SetContent("T\xEAn: " + this.playerInfo.name + "\nS\u1ED1 \xE1o: " + this.playerInfo.jersey_number);
            this.tooltipsInfoDetailt.ShowTooltip(2);
          }
        };

        SbPlayer.ShortPlayerName = function ShortPlayerName(name) {
          if (name.indexOf(", ") > -1) {
            var list = name.split(", ");
            return list[1][0] + ". " + list[0];
          }

          return name;
        };

        return SbPlayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbPlayerName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbTshirtNumber", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbPosition", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "iconScore", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "iconOwnGoal", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "iconPlayerIn", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "iconPlayerOut", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "iconCard", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "cardSkinSprFrames", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "cardSkinColors", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "tooltipsInfoDetailt", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopup1Button.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopupBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, SbPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      SbPopupBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "1ac4e4ns7BB56Dctr8gZQ7x", "SbPopup1Button", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPopup1Button = exports('default', (_dec = ccclass('SbPopup1Button'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopup1Button, _SbPopupBase);

        function SbPopup1Button() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbContent", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTitle", _descriptor2, _assertThisInitialized(_this));

          _this.onOKCallback = null;
          return _this;
        }

        var _proto = SbPopup1Button.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {};

        _proto.setTitle = function setTitle(title) {
          this.lbTitle.string = title;
        };

        _proto.setContent = function setContent(content) {
          this.lbContent.string = content;
        };

        _proto.hideTemporary = function hideTemporary() {
          this.node.active = false;
          this.popup.active = false;
        };

        _proto.onOKClicked = function onOKClicked(event) {
          this.hide();

          if (this.onOKCallback != null) {
            this.onOKCallback();
          }
        };

        _proto.onCloseClicked = function onCloseClicked(event) {
          this.hide();
        };

        _proto.onDestroy = function onDestroy() {};

        return SbPopup1Button;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbContent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopup2Button.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopupBase.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, SbPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      SbPopupBase = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "802bfBF/xBO1IfLbQ8XJmIt", "SbPopup2Button", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPopup2Button = exports('default', (_dec = ccclass('SbPopup2Button'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopup2Button, _SbPopupBase);

        function SbPopup2Button() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbContent", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTitle", _descriptor2, _assertThisInitialized(_this));

          _this.onOKCallback = null;
          _this.onCancelCallback = null;
          return _this;
        }

        var _proto = SbPopup2Button.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {};

        _proto.setTitle = function setTitle(title) {
          this.lbTitle.string = title;
        };

        _proto.setContent = function setContent(content) {
          this.lbContent.string = content;
        };

        _proto.hideTemporary = function hideTemporary() {
          this.node.active = false;
          this.popup.active = false;
        };

        _proto.SetOkCallback = function SetOkCallback(cb) {
          this.onOKCallback = cb;
        };

        _proto.SetCancelCallback = function SetCancelCallback(cb) {
          this.onCancelCallback = cb;
        };

        _proto.onOKClicked = function onOKClicked(event) {
          this.hide();

          if (this.onOKCallback != null) {
            this.onOKCallback();
          }
        };

        _proto.onCancelClick = function onCancelClick() {
          this.hide();

          if (this.onCancelCallback != null) {
            this.onCancelCallback();
          }
        };

        _proto.onCloseClicked = function onCloseClicked(event) {
          this.hide();
        };

        _proto.onDestroy = function onDestroy() {};

        return SbPopup2Button;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbContent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupBase.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts', './SbLive.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, EditBox, v2, Vec3, director, UIOpacity, Tween, tween, TweenSystem, view, log, sys, UITransform, Component, Button, SbSoundsManager, SbLiveState;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      EditBox = module.EditBox;
      v2 = module.v2;
      Vec3 = module.Vec3;
      director = module.director;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      tween = module.tween;
      TweenSystem = module.TweenSystem;
      view = module.view;
      log = module.log;
      sys = module.sys;
      UITransform = module.UITransform;
      Component = module.Component;
      Button = module.Button;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbLiveState = module.SbLiveState;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "469b4MC8KBPyJ0P8+Fa2R3K", "SbPopupBase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EPopupID = exports('EPopupID', /*#__PURE__*/function (EPopupID) {
        EPopupID[EPopupID["NONE"] = 0] = "NONE";
        EPopupID[EPopupID["POPUP_1_BUTTON"] = 0] = "POPUP_1_BUTTON";
        EPopupID[EPopupID["POPUP_BUY_IN"] = 1] = "POPUP_BUY_IN";
        EPopupID[EPopupID["POPUP_2_BUTTON"] = 2] = "POPUP_2_BUTTON";
        return EPopupID;
      }({})); //use for extending

      var SbPopupBase = exports('default', (_dec = ccclass('SbPopupBase'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property([EditBox]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbPopupBase, _Component);

        function SbPopupBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this; // protected constructor() {
          //     super();
          // }
          // popup has 1 part: background and popup, popup is used for animation

          _initializerDefineProperty(_this, "popup", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAnimations", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeAnimationDownUp", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrayEditbox", _descriptor5, _assertThisInitialized(_this));

          _this.posStart = v2(0, 0);
          _this.showCallBack = null;
          _this.hideCallBack = null;
          _this.isDestroyOnHide = true;
          _this.isShowDone = false;
          _this.positionOriginBoard = new Vec3();

          _initializerDefineProperty(_this, "canCloseWhenChangeScene", _descriptor6, _assertThisInitialized(_this)); // // Move popup IOS when show keyboard


          _this.kbSize = 0;
          _this.screenSize = 0;
          _this.tyleManHinh = 0;
          _this.distance = 0;
          _this.isMove = false;
          _this.editbox = null;
          _this.tempKbSize = 0;
          _this.evenData = "";
          return _this;
        }

        var _proto = SbPopupBase.prototype;

        _proto.onLoad = function onLoad() {
          this.posStart = v2(this.popup.position.x, 0);
          this.positionOriginBoard = this.popup.position.clone();
        };

        _proto.start = function start() {
          this.positionOriginBoard = this.popup.position.clone();
        };

        _proto.onEnable = function onEnable() {
          director.emit(SbLiveState.LiveHide, this.node.name + this.node.uuid);
        };

        _proto.onDisable = function onDisable() {
          director.emit(SbLiveState.LiveShow, this.node.name + this.node.uuid);
        } // update (dt) {}
        ;

        _proto.setShowCallback = function setShowCallback(callback) {
          this.showCallBack = callback;
        };

        _proto.setHideCallback = function setHideCallback(callback) {
          this.hideCallBack = callback;
        } //must reference popup to a node contain popup, not contain the blacklayer
        ;

        _proto.show = function show(callback, time, scale, xPos) {
          var _this2 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (time === void 0) {
            time = 0.4;
          }

          if (scale === void 0) {
            scale = 1.0;
          }

          if (this.popup == null) return; // this.popup.opacity = 50;

          this.node.active = true;
          this.popup.setScale(1, 1, 1);
          this.popup.active = true;
          this.popup.position = this.positionOriginBoard;

          if (this.bg != null) {
            this.bg.active = true;
            this.bg.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 255 * 0.7
            }).start();
          }

          Tween.stopAllByTarget(this.popup.getComponent(UIOpacity));
          tween(this.popup.getComponent(UIOpacity)).to(time, {
            opacity: 255
          }).start();
          this.isShowDone = true; // if (xPos == null) {
          //     this.popup.x = -cc.winSize.width / 2;
          // } else {
          // this.popup.x = this.movePosX;
          // }
          // this.popup.scale = scale;

          this.popup.setScale(1, 0.5, 1);
          Tween.stopAllByTarget(this.popup);
          tween(this.popup).to(0.3, {
            scale: new Vec3(scale, scale, scale)
          }, {
            easing: 'backOut'
          }).call(function () {
            // // this.popup.runAction(cc.sequence(cc.moveTo(time, this.movePosX, 0).easing(cc.easeBackOut()), cc.callFunc(function () {
            _this2.positionOriginBoard = _this2.popup.position.clone();

            if (callback == null) {
              if (_this2.showCallBack != null) {
                _this2.showCallBack(_this2);
              }
            } else {
              callback(_this2);
            }
          }).start(); // if (this.popupButtonClose != null) {
          //     this.popupButtonClose.scale = 0;
          //     this.popupButtonClose.runAction(cc.sequence(cc.delayTime(time * 0.3), cc.scaleTo(time, 1).easing(cc.easeBackOut())));
          // }

          var _loop = function _loop() {
            var node = _this2.nodeAnimations[i];
            if (node == null) return "continue";

            if (node.getComponent(Button) !== null && node.getComponent(Button) !== undefined) {
              node.getComponent(Button).interactable = false;
            }

            node.setScale(0, 0);
            Tween.stopAllByTarget(node);
            tween(node).delay(time * 0.3).to(time * 1.2, {
              scale: new Vec3(1, 1, 1)
            }, {
              easing: 'backOut'
            }).call(function () {
              if (node.getComponent(Button) !== null && node.getComponent(Button) !== undefined) {
                node.getComponent(Button).interactable = true;
              }
            }).start();
          };

          for (var i = 0; i < this.nodeAnimations.length; i++) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }

          for (var _i = 0; _i < this.nodeAnimationDownUp.length; _i++) {
            var node = this.nodeAnimationDownUp[_i];
            if (node == null) continue;
            var destPosition = node.position;
            node.setPosition(node.position.x, node.position.y + 100);
            Tween.stopAllByTarget(node);
            tween(node).delay(time * 0.3).to(time * 1.2, {
              position: new Vec3(destPosition.x, destPosition.y)
            }, {
              easing: 'backOut'
            }).start();
          } // // this.popup.runAction(cc.scaleTo(time, scale).easing(cc.easeBackOut()));
          // // this.popup.runAction(cc.sequence(cc.scaleTo(time, scale).easing(cc.easeBackOut()), cc.callFunc(function () {
          // //     if (GameConfigManager.getInstance() != null) {
          // //         GameConfigManager.getInstance().isShowPopupDone = true;
          // //     }
          // //     if (callback == null) {
          // //         if (this.showCallBack != null) {
          // //             this.showCallBack(this);
          // //         }
          // //     } else {
          // //         callback(this);
          // //     }
          // // }.bind(this))));

        };

        _proto.onClickHide = function onClickHide() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hide();
        };

        _proto.onClickHideNoDetroy = function onClickHideNoDetroy() {
          SbSoundsManager.getInstance().playSfxClick();
          this.hide(null, 0.4, false);
        };

        _proto.HideNoDetroy = function HideNoDetroy() {
          this.hide(null, 0.4, false);
        };

        _proto.HideNoAnim = function HideNoAnim() {
          if (this.bg != null) {
            this.bg.getComponent(UIOpacity).opacity = 0;
          }

          this.node.active = false;
        };

        _proto.hide = function hide(callback, time, isDestroy, isPlaySfx) {
          var _this3 = this;

          if (callback === void 0) {
            callback = null;
          }

          if (isDestroy === void 0) {
            isDestroy = true;
          }

          if (this.popup == null || TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.popup) > 0) {
            return;
          }

          if (this.bg != null) {
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 0
            }).start();
          } // this.popup.runAction(cc.fadeOut(0.35));
          // this.board.runAction(cc.spawn(cc.rotateTo(0.3, 60).easing(cc.easeBackIn()), cc.scaleTo(0.3, 0).easing(cc.easeBackIn())));


          tween(this.popup).by(0.2, {
            position: new Vec3(0, -view.getVisibleSize().height)
          }).call(function () {
            _this3.isShowDone = false;

            if (callback == null) {
              if (_this3.hideCallBack != null) {
                _this3.hideCallBack(_this3);
              }
            } else {
              callback(_this3);
            }

            _this3.node.active = false;

            if (isDestroy && _this3.isDestroyOnHide) {
              _this3.node.destroy();

              log("Popup destroy()");
            }
          }).start();
        };

        _proto.hideWithoutAnimation = function hideWithoutAnimation(callback, isDestroy) {
          if (isDestroy === void 0) {
            isDestroy = true;
          }

          if (isDestroy) {
            this.node.destroy();
          } else {
            this.node.active = false;
          }
        };

        _proto.nextEditbox = function nextEditbox(editbox, _eventData) {
          var _this4 = this;

          if (sys.isBrowser && sys.isNative && sys.isMobile) {
            return;
          }

          if (_eventData !== null && _eventData !== undefined) {
            tween(this.node).delay(0.1).call(function () {
              // // cc.log(this.arrayEditbox[_eventData].node.activeInHierarchy)
              if (_eventData < _this4.arrayEditbox.length && _this4.arrayEditbox[_eventData].node.activeInHierarchy) {
                _this4.arrayEditbox[_eventData].focus();
              }
            }).start();
          }
        };

        _proto.onMoveUp = function onMoveUp(_editbox, _eventData) {
          if (_eventData === void 0) {
            _eventData = "";
          }

          this.editbox = _editbox;
          this.evenData = _eventData;
          this.isMove = true;
          this.kbSize = parseFloat(sys.localStorage.getItem("kbheight"));
          this.screenSize = parseFloat(sys.localStorage.getItem("screensize"));
          this.tempKbSize = this.kbSize;
          this.tyleManHinh = this.kbSize - this.screenSize / 2;
          var localPosY = _editbox.node.position.y;

          if (localPosY === 0) {
            localPosY = _editbox.node.parent.position.y;
          }

          if (this.screenSize !== 0) {
            if (!sys.isBrowser && sys.isNative && sys.os === sys.OS.IOS) {
              this.distance = this.tyleManHinh * view.getDesignResolutionSize().height / this.screenSize - localPosY + _editbox.node.getComponent(UITransform).height / 1.7;

              if (this.distance < 0) {
                this.distance = 0;
              }
            }

            Tween.stopAllByTarget(this.popup);
            tween(this.popup).to(0.15, {
              position: new Vec3(this.posStart.x, this.distance)
            }).start();
          }
        };

        _proto.onMoveDown = function onMoveDown(_editbox, _eventData) {
          if (_eventData === void 0) {
            _eventData = "";
          }

          if (this.node === null || this.node === undefined) {
            return;
          }

          this.isMove = false;
          this.kbSize = 0;
          this.tempKbSize = 0;

          if (!sys.isBrowser && sys.isNative && sys.os === sys.OS.IOS) {
            if (!(_eventData.localeCompare("close") === 0 && this.editbox.string.length > 0)) {
              Tween.stopAllByTarget(this.popup);
            }

            tween(this.popup).to(0.15, {
              position: new Vec3(this.posStart.x, 0)
            }).start();
          }
        };

        _proto.update = function update(dt) {
          if (!sys.isNative || sys.os !== sys.OS.IOS || sys.isBrowser || !this.isMove) {
            return;
          }

          this.kbSize = parseFloat(sys.localStorage.getItem("kbheight"));

          if (this.tempKbSize !== this.kbSize && this.tempKbSize !== 0 && this.isMove && this.editbox !== null) {
            this.onMoveUp(this.editbox, this.evenData);
          }
        };

        _proto.getID = function getID() {
          return EPopupID.NONE;
        };

        return SbPopupBase;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popup", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeAnimations", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeAnimationDownUp", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "arrayEditbox", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "canCloseWhenChangeScene", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupBetHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbGameHTTPManager.ts', './SbLoadingNode.ts', './SbPopupBase.ts', './SbUIComboBox.ts', './SbConfigManager.ts', './SbItemBetHistory.ts', './SbSoundsManager.ts', './SbHeaderUI.ts', './SbUIMenu.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, ScrollView, Label, sys, view, Vec3, UITransform, log, Tween, tween, UIOpacity, TweenSystem, instantiate, SbUserInfo, SbGameHTTPManager, SbLoadingNode, SbPopupBase, SbUIComboBox, SbConfigManager, SbItemBetHistory, SbSoundsManager, SbHeaderUI, SbUIMenu;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Label = module.Label;
      sys = module.sys;
      view = module.view;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      log = module.log;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      TweenSystem = module.TweenSystem;
      instantiate = module.instantiate;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbUIComboBox = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbItemBetHistory = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbHeaderUI = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "4bcaeu9M5BOBIVxXcT0Rbtc", "SbPopupBetHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_INDEX_MENU_BET_HISTORY_CURRENT = "key_45678iknbg21==";
      var SbBetHistoryStatus = exports('SbBetHistoryStatus', /*#__PURE__*/function (SbBetHistoryStatus) {
        SbBetHistoryStatus[SbBetHistoryStatus["Active"] = 0] = "Active";
        SbBetHistoryStatus[SbBetHistoryStatus["Settled"] = 1] = "Settled";
        SbBetHistoryStatus[SbBetHistoryStatus["None"] = 2] = "None";
        return SbBetHistoryStatus;
      }({}));
      var SbPopupBetHistory = exports('default', (_dec = ccclass('SbPopupBetHistory'), _dec2 = property(SbUIMenu), _dec3 = property(Node), _dec4 = property(ScrollView), _dec5 = property(SbUIComboBox), _dec6 = property(SbHeaderUI), _dec7 = property(SbLoadingNode), _dec8 = property(Label), _dec9 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupBetHistory, _SbPopupBase);

        function SbPopupBetHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "menu", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentBetHistory", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollViewBetHistory", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "comboBox", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "header", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLoading", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsg", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMenuWebMobile", _descriptor8, _assertThisInitialized(_this));

          _this.itemBetHistoryTemplate = null;
          _this.betHistoryStatus = SbBetHistoryStatus.Active;
          _this.listDataActive = null;
          _this.listDataSettled = null;
          _this.indexCurrent = null;
          _this.sbCommonPrefabsManager = null; // update (dt) {}

          _this.dataFake = "[\n        {\n          \"0\": \"7304\",\n          \"1\": \"2021-04-24T09:15:13Z\",\n          \"2\": 1,\n          \"3\": \"Championship\",\n          \"4\": \"Bournemouth vs Brentford\",\n          \"5\": \"X2\",\n          \"6\": \"DC FT\",\n          \"7\": \"0.0\",\n          \"8\": \"1.61\",\n          \"9\": 100000,\n          \"10\": 161000,\n          \"11\": \"Won\",\n          \"12\": \"Settled\",\n          \"13\": 161000,\n          \"14\": \"1:1\",\n          \"15\": 12,\n          \"16\": \"0:0\"\n        },\n        {\n          \"0\": \"7303\",\n          \"1\": \"2021-04-24T09:15:08Z\",\n          \"2\": 1,\n          \"3\": \"Championship\",\n          \"4\": \"Bournemouth vs Brentford\",\n          \"5\": \"1X\",\n          \"6\": \"DC FT\",\n          \"7\": \"0.0\",\n          \"8\": \"1.33\",\n          \"9\": 100000,\n          \"10\": 133000,\n          \"11\": \"Won\",\n          \"12\": \"Settled\",\n          \"13\": 133000,\n          \"14\": \"1:1\",\n          \"15\": 12,\n          \"16\": \"0:0\"\n        }\n      ]";
          return _this;
        }

        var _proto = SbPopupBetHistory.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager;
          this.header.init(this.sbCommonPrefabsManager); // this.menu.init(this.sbCommonPrefabsManager);
        };

        _proto.start = function start() {
          this.clearUI();
          this.menu.SetButtonClickCallback(this.onMenuButtonClickCallback.bind(this));
          this.indexCurrent = sys.localStorage.getItem(KEY_INDEX_MENU_BET_HISTORY_CURRENT);
          if (this.indexCurrent == null || this.indexCurrent == undefined) this.indexCurrent = 0;
          this.requestData(this.indexCurrent);
          this.menu.SetIndexDefault(this.indexCurrent); // this.comboBox.initData(this.getListStringBetHistoryStatus());
          // this.comboBox.setTick(this.indexCurrent);
          // this.comboBox.setCallbackClick(this.requestDataWithIndex.bind(this));

          this.updatePositionAndContentSize(); //demo
          // this.nodeParentBetHistory.removeAllChildren();
          // let obj = JSON.parse(this.dataFake);
          // let itemTemplate = CommonPrefabsManager.getInstance().GetItemBetHistoryTemplate();
          // for (let i = 0; i < obj.length; i++) {
          // 	let item = cc.instantiate(itemTemplate).getComponent(ItemBetHistory);
          // 	item.node.parent = this.nodeParentBetHistory;
          // 	item.InitData(obj[i]);
          // }
        };

        _proto.update = function update(dt) {// if (sys.isBrowser && sys.isMobile == false)
          //         this.updatePositionAndContentSize();
        };

        _proto.updatePositionAndContentSize = function updatePositionAndContentSize() {
          var headerHeight = 295;
          var bottomHeight = 146;
          var visibleSize = view.getVisibleSize();
          this.scrollViewBetHistory.node.setPosition(new Vec3(0, visibleSize.height / 2 - headerHeight));
          this.scrollViewBetHistory.node.getComponent(UITransform).setContentSize(visibleSize.width, visibleSize.height - headerHeight - bottomHeight); // this.comboBox.node.setPosition(new Vec3(this.comboBox.node.position.x, (visibleSize.height / 2) - (headerHeight + 14)));
          // this.btnMenuWebMobile.setPosition(new Vec3(this.btnMenuWebMobile.position.x, (visibleSize.height / 2) - (headerHeight + 35)));
          // this.header.node.setPosition(new Vec3(this.header.node.position.x, (visibleSize.height / 2)));
        };

        _proto.ShowHeader = function ShowHeader(value) {
          this.header.node.active = value;
          if (value) this.btnMenuWebMobile.active = false;
        } //load data mới
        ;

        _proto.RequestData = function RequestData(type) {
          if (type == this.comboBox.GetIndexCurrent()) {
            this.sbCommonPrefabsManager.ShowMessage("Bạn đang xem vé " + this.getListStringBetHistoryStatus()[this.comboBox.GetIndexCurrent()] + "!");
            return;
          }

          this.requestData(type);
        };

        _proto.Refresh = function Refresh() {
          if (this.indexCurrent != null) {
            this.requestData(this.indexCurrent);
          }
        };

        _proto.clearUI = function clearUI() {
          this.nodeParentBetHistory.removeAllChildren();
          this.lbMsg.node.active = false;
        };

        _proto.getListStringBetHistoryStatus = function getListStringBetHistoryStatus() {
          return ["Cược Chưa Tính", "Cược Đã Tính"];
        };

        _proto.requestDataWithIndex = function requestDataWithIndex(index) {
          log("requestDataWithIndex: " + index);
          this.RequestData(index);
        };

        _proto.onMenuButtonClickCallback = function onMenuButtonClickCallback(customData) {
          //SbSoundsManager.getInstance().playSfxClick();
          log("Button Click: " + customData);

          if (customData == this.menu.GetIndexCurrent()) {
            //     this.sbCommonPrefabsManager.ShowMessage("Bạn đang xem vé " + this.getTabNameWithIndexButton(customData) + "!");
            return;
          }

          this.RequestData(customData);
        };

        _proto.showMsg = function showMsg(str) {
          this.lbMsg.string = str;
          this.lbMsg.node.setScale(this.lbMsg.node.scale.x, 0);
          this.lbMsg.node.active = true;
          Tween.stopAllByTarget(this.lbMsg.node);
          tween(this.lbMsg.node).delay(0.1).to(0.2, {
            scale: new Vec3(1, 1)
          }, {
            easing: 'backOut'
          }).start();
        };

        _proto.showLoading = function showLoading() {
          this.nodeLoading.ShowLoading();
        };

        _proto.hideLoading = function hideLoading() {
          this.nodeLoading.HideLoading();
        };

        _proto.requestData = function requestData(betHistoryStatus) {
          var _this2 = this;

          this.indexCurrent = betHistoryStatus;
          var status = "Settled";
          if (betHistoryStatus == SbBetHistoryStatus.Active) status = "Active";
          var uToken = SbUserInfo.getInstance().GetUserToken();
          var url = SbConfigManager.getInstance().urlAPIGetReportBet + "?sportId=" + 1 + "&status=" + status + "&token=" + uToken;
          this.showLoading();
          this.clearUI();
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            //success
            // let obj = JSON.parse(this.dataFake);
            // let itemTemplate = CommonPrefabsManager.getInstance().GetItemBetHistoryTemplate();
            for (var i = 0; i < obj.length; i++) {
              _this2.addItem(obj[i]);
            }

            if (obj.length == 0) _this2.showMsg("Không có dữ liệu!");

            _this2.hideLoading();
          }, function () {
            //fail
            _this2.hideLoading();
          }, true);
          sys.localStorage.setItem(KEY_INDEX_MENU_BET_HISTORY_CURRENT, betHistoryStatus.toString());
        };

        _proto.addItem = /*#__PURE__*/function () {
          var _addItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
            var itemTemplate, item;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  itemTemplate = this.sbCommonPrefabsManager.GetItemBetHistoryTemplate();
                  item = instantiate(itemTemplate).getComponent(SbItemBetHistory);
                  item.node.parent = this.nodeParentBetHistory;
                  item.InitData(data);

                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function addItem(_x) {
            return _addItem.apply(this, arguments);
          }

          return addItem;
        }();

        _proto.onClickShowMenu = function onClickShowMenu() {
          SbSoundsManager.getInstance().playSfxClick();
          this.sbCommonPrefabsManager.GetMenuLeft().ShowMenu();
        };

        _proto.show = function show(callback, time, scale, xPos) {
          if (callback === void 0) {
            callback = null;
          }

          if (time === void 0) {
            time = 0.4;
          }

          if (this.popup == null) return; // this.popup.opacity = 50;

          this.node.active = true;
          this.popup.setScale(1, 1, 1);
          this.popup.active = true;
          this.popup.position = this.positionOriginBoard;

          if (this.bg != null) {
            this.bg.active = true;
            this.bg.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 255 * 0.7
            }).start();
          }

          Tween.stopAllByTarget(this.popup.getComponent(UIOpacity));
          tween(this.popup.getComponent(UIOpacity)).to(time, {
            opacity: 255
          }).start();
          this.isShowDone = true;
          this.positionOriginBoard = this.popup.position.clone();

          if (callback == null) {
            if (this.showCallBack != null) {
              this.showCallBack(this);
            }
          } else {
            callback(this);
          }
        };

        _proto.hide = function hide(callback, time, isDestroy, isPlaySfx) {
          if (callback === void 0) {
            callback = null;
          }

          if (isDestroy === void 0) {
            isDestroy = true;
          }

          if (this.popup == null || TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.popup) > 0) {
            return;
          }

          this.isShowDone = false;

          if (callback == null) {
            if (this.hideCallBack != null) {
              this.hideCallBack(this);
            }
          } else {
            callback(this);
          }

          this.node.active = false;

          if (isDestroy && this.isDestroyOnHide) {
            this.node.destroy();
            log("Popup destroy()");
          }
        };

        return SbPopupBetHistory;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentBetHistory", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scrollViewBetHistory", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "comboBox", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeLoading", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbMsg", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnMenuWebMobile", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupBetSlip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbGameHTTPManager.ts', './SbLoadingNode.ts', './SbPopupBase.ts', './SbUIMenu.ts', './SbConfigManager.ts', './SbItemBetSlip.ts', './SbSoundsManager.ts', './SbHeaderUI.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ScrollView, Label, Prefab, sys, view, Vec3, UITransform, log, instantiate, Tween, tween, UIOpacity, TweenSystem, SbUserInfo, SbGameHTTPManager, SbLoadingNode, SbPopupBase, SbUIMenu, SbConfigManager, SbItemBetSlip, SbSoundsManager, SbHeaderUI;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Label = module.Label;
      Prefab = module.Prefab;
      sys = module.sys;
      view = module.view;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      log = module.log;
      instantiate = module.instantiate;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      TweenSystem = module.TweenSystem;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbItemBetSlip = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbHeaderUI = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "3f92c/GRmVDwp+ResgzQO44", "SbPopupBetSlip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_INDEX_MENU_BETSLIP_CURRENT = exports('KEY_INDEX_MENU_BETSLIP_CURRENT', "key_45678iknbg==");
      var SbBetSlipStatus = exports('SbBetSlipStatus', /*#__PURE__*/function (SbBetSlipStatus) {
        SbBetSlipStatus[SbBetSlipStatus["Active"] = 0] = "Active";
        SbBetSlipStatus[SbBetSlipStatus["Pending"] = 1] = "Pending";
        SbBetSlipStatus[SbBetSlipStatus["Declined"] = 2] = "Declined";
        SbBetSlipStatus[SbBetSlipStatus["None"] = 3] = "None";
        return SbBetSlipStatus;
      }({}));
      var SbPopupBetSlip = exports('default', (_dec = ccclass('SbPopupBetSlip'), _dec2 = property(SbUIMenu), _dec3 = property(SbHeaderUI), _dec4 = property(Node), _dec5 = property(ScrollView), _dec6 = property(SbLoadingNode), _dec7 = property(Label), _dec8 = property(Node), _dec9 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupBetSlip, _SbPopupBase);

        function SbPopupBetSlip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "menu", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "header", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentBetSlip", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollViewBetSlip", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLoading", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsg", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnMenuWebMobile", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemMiniBetSlipTemplate", _descriptor8, _assertThisInitialized(_this));

          _this.itemBetHistoryTemplate = null;
          _this.betSlipStatus = SbBetSlipStatus.Active;
          _this.listDataActive = null;
          _this.listDataSettled = null;
          _this.indexCurrent = null;
          _this.sbCommonPrefabsManager = null;
          _this.IsFirstLoadDone = false;
          _this.dataFake = "[\n        {\n            \"homeName\": \"SCM Argesul Pitesti\",\n            \"awayName\": \"UTA Arad\",\n            \"id\": \"7945\",\n            \"stake\": 58000,\n            \"status\": \"Active\",\n            \"displayOdds\": \"-0.58\",\n            \"score\": \"[0-0]\",\n            \"cls\": \"-0.5\",\n            \"oddsName\": \"SCM Argesul Pitesti\",\n            \"ticketId\": \"7945\",\n            \"marketName\": \"AH FT\",\n            \"sportId\": 1,\n            \"marketId\": 5,\n            \"selectionId\": \"75100050000995h\"\n        },\n        {\n            \"homeName\": \"SCM Argesul Pitesti\",\n            \"awayName\": \"UTA Arad\",\n            \"id\": \"7943\",\n            \"stake\": 98000,\n            \"status\": \"Active\",\n            \"displayOdds\": \"-0.98\",\n            \"score\": \"[0-0]\",\n            \"cls\": \"0.0\",\n            \"oddsName\": \"UTA Arad\",\n            \"ticketId\": \"7943\",\n            \"marketName\": \"AH FT\",\n            \"sportId\": 1,\n            \"marketId\": 5,\n            \"selectionId\": \"75100050000000a\"\n        },\n        {\n            \"homeName\": \"SCM Argesul Pitesti\",\n            \"awayName\": \"UTA Arad\",\n            \"id\": \"7941\",\n            \"stake\": 74000,\n            \"status\": \"Active\",\n            \"displayOdds\": \"-0.74\",\n            \"score\": \"[0-0]\",\n            \"cls\": \"1.5\",\n            \"oddsName\": \"Under\",\n            \"ticketId\": \"7941\",\n            \"marketName\": \"OU FT\",\n            \"sportId\": 1,\n            \"marketId\": 3,\n            \"selectionId\": \"75100030001005a\"\n        }\n    ]";
          return _this;
        }

        var _proto = SbPopupBetSlip.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager; // this.menu.init(this.sbCommonPrefabsManager);

          this.header.init(this.sbCommonPrefabsManager);
        };

        _proto.start = function start() {
          this.IsFirstLoadDone = true;
          this.menu.SetButtonClickCallback(this.onMenuButtonClickCallback.bind(this));
          this.indexCurrent = sys.localStorage.getItem(KEY_INDEX_MENU_BETSLIP_CURRENT);

          if (this.indexCurrent == null || this.indexCurrent == undefined) {
            this.indexCurrent = 0;
          }

          this.SetHeaderPopup(this.indexCurrent);
          this.requestDataWithIndexButton(this.indexCurrent); //init position default

          this.updatePositionAndContentSize();
          this.clearUI(); // //demo
          // this.nodeParentBetSlip.removeAllChildren();
          // let obj = JSON.parse(this.dataFake);
          // let itemTemplate = CommonPrefabsManager.getInstance().GetItemBetSlipTemplate();
          // for (let i = 0; i < obj.length; i++) {
          //     let item = cc.instantiate(itemTemplate).getComponent(ItemBetSlip);
          //     item.node.parent = this.nodeParentBetSlip;
          //     item.InitData(obj[i]);
          // }
        };

        _proto.SetHeaderPopup = function SetHeaderPopup(tab) {
          if (tab == -1) {
            return;
          }

          this.menu.SetIndexDefault(tab);
        };

        _proto.updatePositionAndContentSize = function updatePositionAndContentSize() {
          var headerHeight = 279;
          var bottomHeight = 146;
          var visibleSize = view.getVisibleSize();
          this.scrollViewBetSlip.node.setPosition(new Vec3(0, visibleSize.height / 2 - headerHeight));
          this.scrollViewBetSlip.node.getComponent(UITransform).setContentSize(visibleSize.width, visibleSize.height - headerHeight - bottomHeight); // this.menu.node.setPosition(new Vec3(this.menu.node.position.x, (visibleSize.height / 2) - (headerHeight)));
          // this.header.node.setPosition(new Vec3(this.header.node.position.x, (visibleSize.height / 2)));
          // this.btnMenuWebMobile.setPosition(new Vec3(this.btnMenuWebMobile.position.x, (visibleSize.height / 2) - (headerHeight + 35)));
        };

        _proto.ShowHeader = function ShowHeader(value) {
          this.header.node.active = value;

          if (value) {
            this.btnMenuWebMobile.active = false;
          }
        };

        _proto.update = function update(dt) {// if (sys.isBrowser && sys.isMobile == false)
          //     this.updatePositionAndContentSize();
        } //load data mới
        ;

        _proto.RequestData = function RequestData(type) {
          this.requestData(type);
        };

        _proto.Refresh = function Refresh(headerIndex) {
          if (headerIndex === void 0) {
            headerIndex = -1;
          }

          if (headerIndex !== -1) {
            this.indexCurrent = headerIndex;
          }

          if (this.indexCurrent != null) {
            this.requestData(this.indexCurrent);
          }
        } //dùng chuyển tab
        ;

        _proto.LoadData = function LoadData(type) {};

        _proto.clearUI = function clearUI() {
          this.nodeParentBetSlip.removeAllChildren();
          this.lbMsg.node.active = false;
        };

        _proto.onMenuButtonClickCallback = function onMenuButtonClickCallback(customData) {
          //SbSoundsManager.getInstance().playSfxClick();
          log("Button Click: " + customData);

          if (customData == this.menu.GetIndexCurrent()) {
            this.sbCommonPrefabsManager.ShowMessage("Bạn đang xem vé " + this.getTabNameWithIndexButton(customData) + "!");
            return;
          }

          this.requestDataWithIndexButton(customData);
          sys.localStorage.setItem(KEY_INDEX_MENU_BETSLIP_CURRENT, customData);
        };

        _proto.requestDataWithIndexButton = function requestDataWithIndexButton(index) {
          if (index == 0) this.requestData(SbBetSlipStatus.Active);else if (index == 1) this.requestData(SbBetSlipStatus.Pending);else if (index == 2) this.requestData(SbBetSlipStatus.Declined);
        };

        _proto.getTabNameWithIndexButton = function getTabNameWithIndexButton(index) {
          if (index == 0) return "Đang diễn ra";else if (index == 1) return "Đang chờ";else if (index == 2) return "Hủy";
        };

        _proto.requestData = function requestData(betSlipStatus) {
          var _this2 = this;

          this.indexCurrent = betSlipStatus;
          var status = "Active";
          if (betSlipStatus == SbBetSlipStatus.Declined) status = "Declined";else if (betSlipStatus == SbBetSlipStatus.Pending) status = "Pending";
          var uToken = SbUserInfo.getInstance().GetUserToken();
          var url = SbConfigManager.getInstance().urlAPIGetBetSlip + "?sportId=" + 1 + "&status=" + status + "&token=" + uToken;
          this.showLoading();
          this.clearUI();
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            //success
            _this2.clearUI();

            var itemTemplate = _this2.itemMiniBetSlipTemplate || _this2.sbCommonPrefabsManager.GetItemBetSlipTemplate();

            for (var i = 0; i < obj.length; i++) {
              var item = instantiate(itemTemplate).getComponent(SbItemBetSlip);
              item.node.parent = _this2.nodeParentBetSlip;
              item.InitData(obj[i]);
            }

            if (obj.length == 0) _this2.showMsg("Không có dữ liệu!");

            _this2.hideLoading();
          }, function () {
            //fail
            _this2.hideLoading();
          }, true);
        };

        _proto.showMsg = function showMsg(str) {
          this.lbMsg.string = str;
          this.lbMsg.node.setScale(this.lbMsg.node.scale.x, 0);
          this.lbMsg.node.active = true;
          Tween.stopAllByTarget(this.lbMsg.node);
          tween(this.lbMsg.node).delay(0.1).to(0.2, {
            scale: new Vec3(1, 1)
          }, {
            easing: 'backOut'
          }).start();
        };

        _proto.showLoading = function showLoading() {
          this.nodeLoading.ShowLoading(); // this.menu.SetActive(false);
        };

        _proto.hideLoading = function hideLoading() {
          this.nodeLoading.HideLoading(); // this.menu.SetActive(true);
        };

        _proto.onClickShowMenu = function onClickShowMenu() {
          SbSoundsManager.getInstance().playSfxClick();
          this.sbCommonPrefabsManager.GetMenuLeft().ShowMenu();
        };

        _proto.show = function show(callback, time, scale, xPos) {
          if (callback === void 0) {
            callback = null;
          }

          if (time === void 0) {
            time = 0.4;
          }

          if (this.popup == null) return; // this.popup.opacity = 50;

          this.node.active = true;
          this.popup.setScale(1, 1, 1);
          this.popup.active = true;
          this.popup.position = this.positionOriginBoard;

          if (this.bg != null) {
            this.bg.active = true;
            this.bg.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
            tween(this.bg.getComponent(UIOpacity)).to(0.2, {
              opacity: 255 * 0.7
            }).start();
          }

          Tween.stopAllByTarget(this.popup.getComponent(UIOpacity));
          tween(this.popup.getComponent(UIOpacity)).to(time, {
            opacity: 255
          }).start();
          this.isShowDone = true;
          this.positionOriginBoard = this.popup.position.clone();

          if (callback == null) {
            if (this.showCallBack != null) {
              this.showCallBack(this);
            }
          } else {
            callback(this);
          }
        };

        _proto.hide = function hide(callback, time, isDestroy, isPlaySfx) {
          if (callback === void 0) {
            callback = null;
          }

          if (isDestroy === void 0) {
            isDestroy = true;
          }

          if (this.popup == null || TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.popup) > 0) {
            return;
          }

          this.isShowDone = false;

          if (callback == null) {
            if (this.hideCallBack != null) {
              this.hideCallBack(this);
            }
          } else {
            callback(this);
          }

          this.node.active = false;

          if (isDestroy && this.isDestroyOnHide) {
            this.node.destroy();
            log("Popup destroy()");
          }
        };

        return SbPopupBetSlip;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentBetSlip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "scrollViewBetSlip", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeLoading", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbMsg", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnMenuWebMobile", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "itemMiniBetSlipTemplate", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupBetSuccess.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts', './SbStringUtil.ts', './SbPopupBase.ts', './SbDefine.ts', './SbSkinListSprite.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Sprite, director, UITransform, SbSoundsManager, SbStringUtil, SbPopupBase, SB_EVENT_SHOW_BETSLIP, SB_EVENT_CHAT_DO_SHARE, SbSkinListSprite, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      director = module.director;
      UITransform = module.UITransform;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SB_EVENT_SHOW_BETSLIP = module.SB_EVENT_SHOW_BETSLIP;
      SB_EVENT_CHAT_DO_SHARE = module.SB_EVENT_CHAT_DO_SHARE;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "2f72et2PtdIUJstilu/phRx", "SbPopupBetSuccess", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // import SbFootballBettingDetails from "../../../Scripts/Games/Football/Scenes/SbFootballBettingDetails";

      var SbPopupBetSuccess = exports('default', (_dec = ccclass('SbPopupBetSuccess'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Node), _dec12 = property(Label), _dec13 = property(Sprite), _dec14 = property(SbSkinListSprite), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupBetSuccess, _SbPopupBase);

        function SbPopupBetSuccess() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeAndAwayName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMarketName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSelected", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSumaryOdds", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTotalMoney", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRefund", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeMatchName", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTicketStatus", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spriteTicketStatus", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinTicketSprites", _descriptor13, _assertThisInitialized(_this));

          _this.sbFootballBettingController = null;
          _this.localInfo = null;
          _this.currentStatusTicket = -1;
          return _this;
        }

        var _proto = SbPopupBetSuccess.prototype;

        _proto.init = function init(sbFootballBettingController) {
          // this.sbCommonPrefabsManager = sbCommonPrefabsManager;
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.start = function start() {
          director.emit("SbRequestRefreshUserInfo");
        };

        _proto.initData = function initData(data, localInfo) {
          // data = {
          //     "id": "6077c7c6a4e772340002b533",
          //     "ticketId": "275243",
          //     "createdAt": "2021-04-15T04:57:42.338Z",
          //     "status": "Active",
          //     "betTime": "Apr 15, 2021 11:57:42 AM",
          //     "matchId": 6958,
          //     "userName": "testlee",
          //     "userId": 22647453,
          //     "singleBet": false,
          //     "acceptMaxStake": false,
          //     "acceptBetterOdds": true,
          //     "clientId": null,
          //     "selections": [
          //         {
          //             "selectionId": "69580010000000d",
          //             "offerId": null,
          //             "oddsStyle": "de",
          //             "cls": null,
          //             "selectionName": "Draw",
          //             "trueOdds": 2.957167159935681,
          //             "displayOdds": 2.96,
          //             "stake": 50000,
          //             "winnings": 148000.00,
          //             "homeScore": null,
          //             "awayScore": null
          //         }
          //     ]
          // }
          this.localInfo = localInfo;
          this.lbLeagueName.string = localInfo.leagueName;
          this.lbMarketName.string = localInfo.marketName;
          this.lbHomeName.string = localInfo.homeName;
          this.lbAwayName.string = localInfo.awayName;

          if (this.lbHomeAndAwayName != null) {
            this.lbHomeAndAwayName.string = localInfo.homeName + " vs " + localInfo.awayName;
          }

          this.lbSumaryOdds.string = localInfo.sumOdds;
          if (String(localInfo.teamSelected).localeCompare("9:9") == 0) this.lbSelected.string = "AOS";else this.lbSelected.string = localInfo.teamSelected;
          var selections = data.selections[0];
          this.lbTotalMoney.string = SbStringUtil.formatMoneyNumberWithComma(selections.stake / 1000) + " K";
          this.lbRefund.string = SbStringUtil.formatMoneyNumberWithComma(selections.winnings / 1000) + " K";

          if (this.nodeMatchName.getComponent(UITransform).width > 650) {
            var listLabel = this.nodeMatchName.getComponentsInChildren(Label);

            for (var i = 0; i < listLabel.length; i++) {
              if (listLabel[i] != null && listLabel[i] != undefined) listLabel[i].fontSize = 25;
            }
          }

          this.currentStatusTicket = -1;

          if (data.hasOwnProperty("status")) {
            var status = data.status;

            if (status.localeCompare("Active") == 0) {
              //success
              this.lbTicketStatus.string = "Đặt cược thành công!"; // this.lbTicketStatus.node.color = new Color(55, 108, 28, 255);

              this.spriteTicketStatus.spriteFrame = this.spriteFrameTicketStatus[0];
              this.currentStatusTicket = 0;
            } else if (status.localeCompare("Pending") == 0 || status.localeCompare("Awaiting") == 0) {
              //Vé đang chờ, có thể nhận(Active) hoặc hủy(Declined)
              this.lbTicketStatus.string = "Vé cược đang chờ"; // this.lbTicketStatus.node.color = new Color(164, 85, 30, 255);

              this.spriteTicketStatus.spriteFrame = this.spriteFrameTicketStatus[1];
              this.currentStatusTicket = 1;
            } else if (status.localeCompare("Declined") == 0) {
              //Vé bị hủy
              this.lbTicketStatus.string = "Cược bị hủy"; // this.lbTicketStatus.node.color = new Color(178, 37, 25, 255);

              this.spriteTicketStatus.spriteFrame = this.spriteFrameTicketStatus[2];
              this.currentStatusTicket = 2;
            }
          }
        };

        _proto.onClickShowBetSlip = function onClickShowBetSlip() {
          SbSoundsManager.getInstance().playSfxClick(); // if (this.sbFootballBettingController.bettingDetails == null)
          //     this.sbCommonPrefabsManager.GetMenuLeft().ShowBetSlip();
          // else {
          //     let isPopupActive = this.sbFootballBettingController.bettingDetails.IsActive();
          //     if (isPopupActive != null || isPopupActive == undefined || isPopupActive == false)
          //         this.sbCommonPrefabsManager.GetMenuLeft().ShowBetSlip();
          //     else
          //         this.sbCommonPrefabsManager.GetMenuLeft().ShowBetSlip(true);
          // }

          director.emit(SB_EVENT_SHOW_BETSLIP, this.currentStatusTicket);
          this.hide();
        };

        _proto.onClickShareTicketBet = function onClickShareTicketBet() {
          this.onClickHide();
          var dataShare = this.localInfo;
          director.emit(SB_EVENT_CHAT_DO_SHARE, dataShare);
        };

        _createClass(SbPopupBetSuccess, [{
          key: "spriteFrameTicketStatus",
          get: function get() {
            var result = [];

            if (this.skinTicketSprites) {
              result = this.skinTicketSprites.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbPopupBetSuccess;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeAndAwayName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbMarketName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbSelected", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbSumaryOdds", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbTotalMoney", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbRefund", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "nodeMatchName", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbTicketStatus", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "spriteTicketStatus", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "skinTicketSprites", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupCalculatorBet.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbCommonPrefabsManager.ts', './SbGameHTTPManager.ts', './SbStringUtil.ts', './SbLoadingNode.ts', './SbPopupBase.ts', './SbMarket.ts', './SbConfigManager.ts', './SbSportManager.ts', './SbSoundsManager.ts', './SbLocalizationManager.ts', './SbGameUtil.ts', './SbSkinListColor.ts', './SbParlayBetManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, EditBox, Toggle, Node, Tween, tween, UIOpacity, log, UITransform, SbUserInfo, SbCommonPrefabsManager, SbGameHTTPManager, SbStringUtil, SbLoadingNode, SbPopupBase, SbMarket, SbMarketId, SbConfigManager, SbSportManager, SbSoundsManager, SbLocalizationManager, SbOddsType, SbOddsStyle, SbSkinListColor, SbParlayBetManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      EditBox = module.EditBox;
      Toggle = module.Toggle;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      log = module.log;
      UITransform = module.UITransform;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbStringUtil = module.default;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbMarket = module.default;
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbSportManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbOddsType = module.SbOddsType;
      SbOddsStyle = module.SbOddsStyle;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbParlayBetManager = module.SbParlayBetManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19;

      cclegacy._RF.push({}, "17569P7AVJNlrdShJBB/ej7", "SbPopupCalculatorBet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var SbTypeButtonEditParlayBet = /*#__PURE__*/function (SbTypeButtonEditParlayBet) {
        SbTypeButtonEditParlayBet[SbTypeButtonEditParlayBet["Add"] = 0] = "Add";
        SbTypeButtonEditParlayBet[SbTypeButtonEditParlayBet["Remove"] = 1] = "Remove";
        SbTypeButtonEditParlayBet[SbTypeButtonEditParlayBet["Replace"] = 2] = "Replace";
        return SbTypeButtonEditParlayBet;
      }(SbTypeButtonEditParlayBet || {});

      var SbPopupCalculatorBet = exports('default', (_dec = ccclass('SbPopupCalculatorBet'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Label), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Label), _dec10 = property(Label), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(EditBox), _dec14 = property(Toggle), _dec15 = property(SbLoadingNode), _dec16 = property(Node), _dec17 = property(Label), _dec18 = property(SbSkinListColor), _dec19 = property(Node), _dec20 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupCalculatorBet, _SbPopupBase);

        function SbPopupCalculatorBet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeagueName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMarketName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSelected", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSumaryOdds", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSumaryOddsValue", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMinStake", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMaxStake", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTotalMoney", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbRefund", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "textBoxMoney", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "checkBoxAcceptOddsGood", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLoading", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeWarningOddsChange", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbOddChange", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinOddsColor", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listButtonBetParlay", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "positionAnimTicketParlay", _descriptor19, _assertThisInitialized(_this));

          _this.minStake = 0;
          _this.maxStake = 0;
          _this.maxPayout = 0; // private leagueData: LeagueData = null;
          // private matchData: MatchData = null;
          // private marketData: MarketData = null;
          // private OddsData: OddsData = null;

          _this.oddsSelected = null;
          _this.winnings = 0;
          _this.stake = 0;
          _this.oddOldValue = null;
          _this.textBoxMoneyValue = "";
          _this.isCaculatingBet = false;
          _this.callbackHidePopupBetting = null;
          _this.dataForBetting = null;
          _this.sbCommonPrefabsManager = null;
          _this.sbFootballBettingController = null;
          _this.extendBetInfo = {};
          return _this;
        }

        var _proto = SbPopupCalculatorBet.prototype;

        _proto.init = function init(sbCommonPrefabsManager, sbFootballBettingController) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager;
          this.sbFootballBettingController = sbFootballBettingController;
        };

        _proto.start = function start() {
          if (SbUserInfo.getInstance().IsAutoAcceptBetterOdds()) this.checkBoxAcceptOddsGood.isChecked = true;else this.checkBoxAcceptOddsGood.isChecked = false;
        };

        _proto.convertPoint = function convertPoint(oddsData, oddsType) {
          var p = Math.abs(Number(oddsData.points));
          var value = "";

          if (Number(oddsData.points) <= 0) {
            if (oddsType == SbOddsType.Home) value = String(p * -1);else if (oddsType == SbOddsType.Away) value = String(p);
          } else {
            if (oddsType == SbOddsType.Home) value = String(p);else if (oddsType == SbOddsType.Away) value = String(p * -1);
          }

          return value;
        };

        _proto.setDataCalculatorBet = function setDataCalculatorBet(body, oddsObj, oddsType, popupBettingHideCallback, isUpdateOdds) {
          var _this2 = this;

          if (isUpdateOdds === void 0) {
            isUpdateOdds = false;
          }

          this.oddsSelected = oddsObj;
          this.dataForBetting = JSON.parse(body);
          this.callbackHidePopupBetting = popupBettingHideCallback;
          var leagueData = this.oddsSelected.GetLeagueData();
          var matchData = this.oddsSelected.GetMatchData();
          var marketData = this.oddsSelected.GetMarketData();
          var oddsData = this.oddsSelected.GetOddsData();
          this.lbLeagueName.string = leagueData.leagueName;
          this.lbHomeName.string = matchData.homeName;
          this.lbAwayName.string = matchData.awayName;
          this.lbMarketName.string = SbSportManager.ConvertSportIdToName(leagueData.sportId) + " / " + SbMarket.ConvertMaketIdToNameVietnamese(marketData.marketId);
          this.extendBetInfo = {
            sportId: 1,
            marketId: marketData.marketId,
            oddsType: oddsType
          };
          var score = "";

          if (matchData.isLive) {
            if (marketData.marketId == SbMarketId.AsianHandicapExtraFT || marketData.marketId == SbMarketId.AsianHandicapExtraHT || marketData.marketId == SbMarketId.OverUnderExtraFT || marketData.marketId == SbMarketId.OverUnderExtraHT || marketData.marketId == SbMarketId.Market1X2ExtraFT || marketData.marketId == SbMarketId.Market1X2ExtraHT) {
              score = "[" + matchData.homeScoreOT + "-" + matchData.awayScoreOT + "]";
            } else score = "[" + matchData.homeScore + "-" + matchData.awayScore + "]";
          }

          var odds = oddsObj.getOddsValue();
          var points = "";

          if (marketData.marketId == SbMarketId.AsianHandicapFT || marketData.marketId == SbMarketId.AsianHandicapHT || marketData.marketId == SbMarketId.AsianHandicapExtraFT || marketData.marketId == SbMarketId.AsianHandicapExtraHT) {
            points = this.convertPoint(oddsData, oddsType);
            if (oddsType == SbOddsType.Home) this.lbSelected.string = matchData.homeName;else if (oddsType == SbOddsType.Away) this.lbSelected.string = matchData.awayName;
          } else if (marketData.marketId == SbMarketId.OverUnderFT || marketData.marketId == SbMarketId.OverUnderHT || marketData.marketId == SbMarketId.OverUnderExtraFT || marketData.marketId == SbMarketId.OverUnderExtraHT) {
            points = Math.abs(Number(oddsData.points)).toString();
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Tài";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Xỉu";
          } else if (marketData.marketId == SbMarketId.Market1X2FT || marketData.marketId == SbMarketId.Market1X2ExtraFT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "FT.1";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "FT.2";else if (oddsType == SbOddsType.Draw) this.lbSelected.string = "FT.X";
          } else if (marketData.marketId == SbMarketId.Market1X2HT || marketData.marketId == SbMarketId.Market1X2ExtraHT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "HT.1";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "HT.2";else if (oddsType == SbOddsType.Draw) this.lbSelected.string = "HT.X";
          } else if (marketData.marketId == SbMarketId.DoubleChanceFT || marketData.marketId == SbMarketId.DoubleChanceHT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Đội Nhà hoặc hòa";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Đội Khách hoặc hòa";else if (oddsType == SbOddsType.Draw) this.lbSelected.string = "Đội Nhà hoặc đội Khách";
          } else if (marketData.marketId == SbMarketId.OddOrEvenFT || marketData.marketId == SbMarketId.OddOrEvenHT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Lẻ";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Chẵn";
          } else if (marketData.marketId == SbMarketId.CorrectScoreFT || marketData.marketId == SbMarketId.CorrectScoreHT) {
            var _points = oddsObj.GetOddsData().points.toString();

            if (_points.localeCompare("9:9") == 0) this.lbSelected.string = "AOS";else this.lbSelected.string = _points;
          } else if (marketData.marketId == SbMarketId.TotalScoreFT || marketData.marketId == SbMarketId.TotalScoreHT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Đội Nhà";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Đội Khách";
          } else if (marketData.marketId == SbMarketId.Corner1X2FT || marketData.marketId == SbMarketId.Corner1X2HT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Đội Nhà";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Đội Khách";else if (oddsType == SbOddsType.Draw) this.lbSelected.string = "Hòa";
          } else if (marketData.marketId == SbMarketId.DrawNoBetFT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Đội Nhà";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Đội Khách";
          } else if (marketData.marketId == SbMarketId.CornerOverUnderFT || marketData.marketId == SbMarketId.CornerOverUnderHT) {
            points = Math.abs(Number(oddsData.points)).toString();
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Tài";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Xỉu";
          } else if (marketData.marketId == SbMarketId.CornerHandicapFT || marketData.marketId == SbMarketId.CornerHandicapHT) {
            points = this.convertPoint(oddsData, oddsType);
            if (oddsType == SbOddsType.Home) this.lbSelected.string = matchData.homeName;else if (oddsType == SbOddsType.Away) this.lbSelected.string = matchData.awayName;
          } else if (marketData.marketId == SbMarketId.Booking1X2FT || marketData.marketId == SbMarketId.Booking1X2HT) {
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Đội Nhà";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Đội Khách";else if (oddsType == SbOddsType.Draw) this.lbSelected.string = "Hòa";
          } else if (marketData.marketId == SbMarketId.BookingOverUnderFT || marketData.marketId == SbMarketId.BookingOverUnderHT) {
            points = Math.abs(Number(oddsData.points)).toString();
            if (oddsType == SbOddsType.Home) this.lbSelected.string = "Tài";else if (oddsType == SbOddsType.Away) this.lbSelected.string = "Xỉu";
          } else if (marketData.marketId == SbMarketId.BookingAsianHandicapFT || marketData.marketId == SbMarketId.BookingAsianHandicapHT) {
            points = this.convertPoint(oddsData, oddsType);
            if (oddsType == SbOddsType.Home) this.lbSelected.string = matchData.homeName;else if (oddsType == SbOddsType.Away) this.lbSelected.string = matchData.awayName;
          } else if (marketData.marketId == SbMarketId.BookingAsianHandicapFT || marketData.marketId == SbMarketId.BookingAsianHandicapHT) {
            points = this.convertPoint(oddsData, oddsType);
            if (oddsType == SbOddsType.Home) this.lbSelected.string = matchData.homeName;else if (oddsType == SbOddsType.Away) this.lbSelected.string = matchData.awayName;
          }

          this.lbSumaryOdds.string = points + score + "@";
          this.lbSumaryOddsValue.string = String(odds.toFixed(2));
          if (odds < 0) this.lbSumaryOddsValue.color = this.oddListColors[0];

          if (this.oddOldValue != odds) {
            if (isUpdateOdds) {
              this.nodeWarningOddsChange.active = true;
              this.lbOddChange.string = "Tỷ lệ cược thay đổi từ " + this.oddOldValue + " sang " + odds;
              Tween.stopAllByTarget(this.nodeWarningOddsChange);
              tween(this.nodeWarningOddsChange).delay(10).call(function () {
                _this2.nodeWarningOddsChange.active = false;
              }).start();
              SbSoundsManager.getInstance().playSfxOdd();
            }

            this.oddOldValue = odds;
          }

          this.checkUiParlayBet(oddsObj);
          var url = SbConfigManager.getInstance().urlAPICaculateBet;
          this.isCaculatingBet = true;
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, body, function (obj) {
            if (_this2.node == null) return; //success

            _this2.isCaculatingBet = false;
            _this2.minStake = obj.minStake;
            _this2.maxStake = obj.maxStake;
            _this2.maxPayout = obj.maxPayout;
            _this2.lbMinStake.string = SbStringUtil.formatMoneyNumberWithComma(obj.minStake) + " K";
            _this2.lbMaxStake.string = SbStringUtil.formatMoneyNumberWithComma(obj.maxStake) + " K";
            _this2.lbTotalMoney.string = "0 K";
            _this2.lbRefund.string = "0 K";

            if (obj.hasOwnProperty("displayOdds")) {
              _this2.updateOddsValue(obj.displayOdds);
            }

            if (_this2.textBoxMoneyValue.length == 0) _this2.textBoxMoneyValue = "0";
            if (_this2.textBoxMoney.string.length > 0) _this2.calculatorInputNumber(Number(_this2.textBoxMoneyValue));
          }, function (obj, msg) {//fail
          }, true);
        };

        _proto.hideAllButtonParlayBet = function hideAllButtonParlayBet() {
          //default is hide
          if (this.listButtonBetParlay != null) {
            this.listButtonBetParlay.forEach(function (element) {
              if (element != null) element.active = false;
            });
          }
        };

        _proto.checkUiParlayBet = function checkUiParlayBet(oddObj) {
          this.hideAllButtonParlayBet();

          if (!oddObj.GetMarketData().isParlay) {
            return;
          }

          if (this.listButtonBetParlay.length == 0) {
            return;
          }

          var matchData = oddObj.GetMatchData();
          var oddsData = oddObj.GetOddsData();
          var isOddsExits = SbParlayBetManager.getInstance().CheckOddsExist(oddObj.getSelectionID(), oddsData.offerId);
          var isMatchExits = SbParlayBetManager.getInstance().CheckMatchExist(matchData.eventId);

          if (isOddsExits) {
            //need to show remove odd
            // this.listButtonBetParlay[1].active = true;
            this.showButtonParlayBet(SbTypeButtonEditParlayBet.Remove);
          } else if (isMatchExits) {
            //need to show replace
            // this.listButtonBetParlay[2].active = true;
            this.showButtonParlayBet(SbTypeButtonEditParlayBet.Replace);
          } else if (matchData.isParlay && !isMatchExits && !isMatchExits) {
            //need to show add
            // this.listButtonBetParlay[0].active = true;
            this.showButtonParlayBet(SbTypeButtonEditParlayBet.Add);
          }
        };

        _proto.showButtonParlayBet = function showButtonParlayBet(indexInList) {
          if (this.listButtonBetParlay != null && indexInList < this.listButtonBetParlay.length) {
            this.listButtonBetParlay[indexInList].active = true;
            Tween.stopAllByTarget(this.listButtonBetParlay[indexInList].getComponent(UIOpacity));
            this.listButtonBetParlay[indexInList].getComponent(UIOpacity).opacity = 255; // this.listButtonBetParlay[indexInList].stopAllActions();
            // this.listButtonBetParlay[indexInList].opacity = 255;
          }
        };

        _proto.setAnimationLoadingButtonParlayBet = function setAnimationLoadingButtonParlayBet(indexInList) {
          if (this.listButtonBetParlay != null && indexInList < this.listButtonBetParlay.length) {
            Tween.stopAllByTarget(this.listButtonBetParlay[indexInList].getComponent(UIOpacity)); // this.listButtonBetParlay[indexInList].stopAllActions();

            tween(this.listButtonBetParlay[indexInList].getComponent(UIOpacity)).to(0.25, {
              opacity: 255 * 0.7
            }).to(0.25, {
              opacity: 255
            }).union().repeatForever().start(); // this.listButtonBetParlay[indexInList].runAction(cc.repeatForever(cc.sequence(cc.fadeTo(0.25, 255 * 0.7), cc.fadeTo(0.25, 255))));
          }
        };

        _proto.updateOddsValue = function updateOddsValue(displayOdds) {
          var odds = Number(displayOdds);
          this.lbSumaryOddsValue.string = String(odds.toFixed(2));
          if (odds < 0) this.lbSumaryOddsValue.color = this.oddListColors[0];
          this.oddsSelected.forceSetOddsValueFromAPI(odds);
        };

        _proto.onEditBoxChanged = function onEditBoxChanged(textbox, customData) {
          var str = this.correctInputNumber(textbox.string); // let totalCost = this.getTotalCostBet(this.oddsSelected.getOddsValue(), str, this.oddsSelected.GetOddsStyle(), this.oddsSelected.GetMarketData().marketId);
          // let userBalance = SbUserInfo.getInstance().GetBalance();
          // if (Number(totalCost) > userBalance || Number(totalCost) > this.maxStake) {
          //     this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded"));
          //     if (userBalance > this.maxStake)
          //         totalCost = Math.floor(this.maxStake);
          //     else
          //         totalCost = Math.floor(userBalance);
          // }
          // textbox.string = SbStringUtil.formatMoneyNumberWithComma(Number(totalCost));
          // this.calculatorBet(Number(totalCost));

          var input = Number(str);
          var num = this.checkInputMaxValue(input);
          this.calculatorInputNumber(num);
        };

        _proto.onEditBoxChangeValue = function onEditBoxChangeValue(text, textbox, customEventData) {
          var str = this.correctInputNumber(textbox.string); // let totalCost = this.getTotalCostBet(this.oddsSelected.getOddsValue(), str, this.oddsSelected.GetOddsStyle(), this.oddsSelected.GetMarketData().marketId);
          // let userBalance = SbUserInfo.getInstance().GetBalance();
          // if (Number(totalCost) > userBalance || Number(totalCost) > this.maxStake) {
          //     this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded"));
          //     if (userBalance > this.maxStake)
          //         totalCost = Math.floor(this.maxStake);
          //     else
          //         totalCost = Math.floor(userBalance);
          // }
          // // textbox.string = SbStringUtil.formatMoneyNumberWithComma(Number(str));
          // this.textBoxMoneyValue = totalCost.toString();
          // this.calculatorBet(Number(this.textBoxMoneyValue));

          var input = Number(str);
          var num = this.checkInputMaxValue(input);
          this.calculatorInputNumber(num);
        };

        _proto.calculatorBet = function calculatorBet(stake, costBet) {
          var odds = Math.abs(this.oddsSelected.getOddsValue()); // this.winnings = stake * odds;
          // this.stake = stake;

          this.winnings = this.getPaymentMoney(odds, stake, this.oddsSelected.GetOddsStyle(), this.oddsSelected.GetMarketData().marketId);
          this.stake = stake; // cc.log("winnings: " + this.winnings);
          // if(this.oddsSelected.GetOddsStyle() == SbOddsStyle.Malay)
          //     stake = stake * odds;

          this.lbTotalMoney.string = SbStringUtil.formatMoneyNumberWithComma(costBet) + " K";
          this.lbRefund.string = SbStringUtil.formatMoneyNumberWithComma(this.winnings) + " K";
        };

        _proto.isCheckMarketHasDecimal = function isCheckMarketHasDecimal(marketId) {
          var marketData = this.oddsSelected.GetMarketData();
          return false;
        };

        _proto.getPaymentMoney = function getPaymentMoney(oddValue, money, oddsStyle, sportMarketId) {
          if (oddsStyle === void 0) {
            oddsStyle = SbOddsStyle.Decimal;
          }

          if (!money || !oddValue || !sportMarketId) return 0;
          var displayOdds = oddValue;
          var stake = money;
          var winning = 0;

          if (oddsStyle === SbOddsStyle.Decimal || !!this.isCheckMarketHasDecimal(sportMarketId)) {
            winning = stake * displayOdds;
            return winning;
          }

          if (oddsStyle === SbOddsStyle.Malay) {
            if (displayOdds > 0.01 && displayOdds <= 1) {
              winning = stake * displayOdds + stake;
              return winning;
            } else if (displayOdds < 0) {
              var newStake = stake * -displayOdds;
              winning = stake + newStake;
              return winning;
            }
          }

          if (oddsStyle === SbOddsStyle.Indo) {
            if (displayOdds >= 1) {
              winning = stake * displayOdds + stake;
              return winning;
            } else if (displayOdds < -1) {
              var _newStake = stake * -displayOdds;

              winning = stake + _newStake;
              return winning;
            }
          }

          if (oddsStyle === SbOddsStyle.HK) {
            winning = stake * displayOdds + stake;
            return winning;
          }

          return winning;
        };

        _proto.getTotalCostBet = function getTotalCostBet(oddValue, money, oddsStyle, sportMarketId) {
          if (oddsStyle === void 0) {
            oddsStyle = SbOddsStyle.Decimal;
          }

          if (!money || !oddValue || !sportMarketId) return 0;
          var acceptedStake = Number(money);
          var displayOdds = oddValue;

          if (oddsStyle === SbOddsStyle.Decimal || sportMarketId === SbMarketId.Market1X2FT || sportMarketId === SbMarketId.Market1X2HT || sportMarketId === SbMarketId.Corner1X2FT || sportMarketId === SbMarketId.Corner1X2HT || sportMarketId === SbMarketId.Booking1X2FT || sportMarketId === SbMarketId.Booking1X2HT || sportMarketId === SbMarketId.CorrectScoreFT || sportMarketId === SbMarketId.CorrectScoreHT || sportMarketId === SbMarketId.DoubleChanceFT || sportMarketId === SbMarketId.DoubleChanceHT) {
            return Math.floor(acceptedStake);
          }

          if (oddsStyle === SbOddsStyle.Malay) {
            if (displayOdds < 0) {
              return Math.floor(acceptedStake * -displayOdds);
            }
          }

          if (oddsStyle === SbOddsStyle.Indo) {
            if (displayOdds < -1) {
              return Math.floor(acceptedStake * -displayOdds);
            }
          }

          return Math.floor(acceptedStake);
        };

        _proto.getMaxPayoutWithOddsStyle = function getMaxPayoutWithOddsStyle(oddValue, maxPayout, oddsStyle, maxStake) {
          if (oddsStyle === void 0) {
            oddsStyle = SbOddsStyle.Decimal;
          }

          var displayOdds = oddValue;

          if (oddsStyle === SbOddsStyle.Malay) {
            if (displayOdds < 0) {
              return Math.floor(maxPayout);
            }
          }

          if (oddsStyle === SbOddsStyle.Indo) {
            if (displayOdds < -1) {
              return Math.floor(maxPayout);
            }
          }

          return Math.floor(maxStake);
        }
        /*
            Tổng tiền hoàn lại: getPaymentMoney
        
            getTotalCostBet: Tổng chi phí
        
            getMaxPayoutWithOddsStyle: button cược tối đa
            */
        ;

        _proto.onCheckboxAutoAcceptOddsGoodChangeValue = function onCheckboxAutoAcceptOddsGoodChangeValue(toggle, customEventData) {
          SbSoundsManager.getInstance().playSfxClick();
          SbUserInfo.getInstance().SetAutoAcceptBetterOdds(toggle.isChecked);
        };

        _proto.checkInputNumberInvalid = function checkInputNumberInvalid(str) {
          var list = ["<script", "javascript", "src", "onmouse", "onerror", "body", "http", "iframe", "input", "onload"];
          var strLowerCase = str.toLocaleLowerCase();

          for (var i = 0; i < list.length; i++) {
            if (strLowerCase.toLocaleLowerCase().indexOf(list[i]) >= 0) {
              this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("INVALID_CONTENT"));
              return true;
            }
          }

          return false;
        };

        _proto.correctInputNumber = function correctInputNumber(str) {
          var text;
          if (this.checkInputNumberInvalid(str)) text = "0";
          text = str.replace(/^\D+/g, "");
          text = str.replace(/,/g, "");
          text = str.replace(/-/g, "");
          if (text.length > 9) text = text.slice(0, 9);
          if (text.length == 0) return "0";
          var num = Number(text);
          if (isNaN(num) == true) num = 0;
          return String(Number(num));
        };

        _proto.checkBetInvalid = function checkBetInvalid() {
          var userBalance = SbUserInfo.getInstance().GetBalance() / 1000;

          if (Number(this.textBoxMoneyValue) > userBalance) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          }

          if (this.isCaculatingBet) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BetCountedWait"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          }

          if (this.stake == 0) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("NoInputBets"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          }

          if (Number(this.textBoxMoneyValue) < this.minStake) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BetGreaterMin"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          } else if (this.stake > this.maxStake) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BetLessMax"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          }

          return false;
        };

        _proto.getInfoBet = function getInfoBet() {
          var data = {
            sportId: this.extendBetInfo.sportId,
            marketId: this.extendBetInfo.marketId,
            oddsType: this.extendBetInfo.oddsType,
            "leagueName": this.lbLeagueName.string,
            "marketName": this.lbMarketName.string,
            "sumOdds": this.lbSumaryOdds.string + this.lbSumaryOddsValue.string,
            "homeName": this.lbHomeName.string,
            "awayName": this.lbAwayName.string,
            "teamSelected": this.lbSelected.string
          };
          return data;
        };

        _proto.onClickBet = function onClickBet() {
          var _this3 = this;

          SbSoundsManager.getInstance().playSfxClick();
          if (this.checkBetInvalid()) return;
          this.nodeLoading.ShowLoading();
          var matchData = this.oddsSelected.GetMatchData();
          var oddsData = this.oddsSelected.GetOddsData();
          var pointString = String(Math.abs(Number(oddsData.points)));

          if (this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerHandicapFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerHandicapHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapExtraFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapExtraHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingAsianHandicapFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingAsianHandicapHT) {
            var point = Math.abs(Number(oddsData.points));

            if (Number(oddsData.points) > 0) {
              if (this.oddsSelected.GetOddsType() == SbOddsType.Home) point = Math.abs(point);else if (this.oddsSelected.GetOddsType() == SbOddsType.Away) point *= -1;
            } else {
              if (this.oddsSelected.GetOddsType() == SbOddsType.Home) point *= -1;else if (this.oddsSelected.GetOddsType() == SbOddsType.Away) point = Math.abs(point);
            }

            pointString = String(point);
          }

          if (this.oddsSelected.GetMarketData().marketId == SbMarketId.CorrectScoreFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CorrectScoreFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.TotalScoreFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.TotalScoreHT) {
            pointString = oddsData.points;
          } else {
            if (parseInt(String(Math.abs(Number(pointString)))) == Math.abs(Number(pointString))) {
              pointString += ".0";
            } // // if (String(Math.abs(Number(pointString))).length == 1) {
            // //     pointString += ".0";
            // // }

          }

          var homeScore = "0";
          var awayScore = "0";

          if (this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerHandicapFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerHandicapHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerOverUnderFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.CornerOverUnderHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.Corner1X2FT || this.oddsSelected.GetMarketData().marketId == SbMarketId.Corner1X2HT) {
            homeScore = String(matchData.cornersHome);
            awayScore = String(matchData.cornersAway);
          } else if (this.oddsSelected.GetMarketData().marketId == SbMarketId.Market1X2ExtraFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.Market1X2ExtraHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.OverUnderExtraFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.OverUnderExtraHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapExtraFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.AsianHandicapExtraHT) {
            homeScore = String(matchData.homeScoreOT);
            awayScore = String(matchData.awayScoreOT);
          } else if (this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingAsianHandicapFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingAsianHandicapHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingOverUnderFT || this.oddsSelected.GetMarketData().marketId == SbMarketId.BookingOverUnderHT || this.oddsSelected.GetMarketData().marketId == SbMarketId.Booking1X2FT || this.oddsSelected.GetMarketData().marketId == SbMarketId.Booking1X2HT) {
            homeScore = String(matchData.bookingsHome);
            awayScore = String(matchData.bookingsAway);
          } else {
            homeScore = String(matchData.homeScore);
            awayScore = String(matchData.awayScore);
          }

          var url = SbConfigManager.getInstance().urlAPIPlaceBet;
          var body = {
            "acceptBetterOdds": SbUserInfo.getInstance().IsAutoAcceptBetterOdds(),
            "acceptMaxStake": true,
            "matchId": matchData.eventId,
            "selections": [{
              "homeScore": homeScore,
              "awayScore": awayScore,
              "cls": pointString,
              "displayOdds": Number(this.oddsSelected.getOddsValue()),
              "oddsStyle": SbUserInfo.getInstance().GetOddsStyleString(this.oddsSelected.GetMarketData().marketId, this.oddsSelected.GetOddsStyle()),
              "selectionId": this.oddsSelected.getSelectionID(),
              "selectionName": this.oddsSelected.getSelectionName(),
              "offerId": String(oddsData.offerId),
              "stake": this.stake * 1000,
              "trueOdds": 0,
              //default
              "winnings": Math.round(this.winnings * 1000)
            }],
            "singleBet": true
          }; //  let bodyTest = `{"acceptBetterOdds":true,"acceptMaxStake":true,"matchId":6581,"selections":[{"awayScore":"0","cls":"0.0","displayOdds":3.4,"homeScore":"0","oddsStyle":"de","selectionId":"65810010000000h","selectionName":"Home","offerId":"1894559285245000","stake":100000,"trueOdds":0,"winnings":340000}],"singleBet":true,"userName":"setagamma","userId":21406704}`;

          log("body bet " + JSON.stringify(body));
          SbGameHTTPManager.getInstance().sendPostHttpRequest(url, JSON.stringify(body), function (response) {
            log("PLACEBESTsuccess: " + JSON.stringify(response)); //success

            if (_this3.node == null) return;

            _this3.nodeLoading.HideLoading();

            if (response.hasOwnProperty("errorCode")) {
              _this3.showMessageWithError(response.errorCode);

              return;
            }

            _this3.onBetSuccess(response, _this3.getInfoBet());
          }, function (obj, msg) {
            //fail
            _this3.nodeLoading.HideLoading();

            var errCode = -1;
            if (obj !== null && obj !== undefined && !SbStringUtil.isNullOrEmpty(obj.errorCode)) errCode = obj.errorCode;

            _this3.showMessageWithError(errCode);
          }, true);
        };

        _proto.onBetSuccess = function onBetSuccess(response, localInfo) {
          this.hidePopupCalculatorBet();
          this.sbCommonPrefabsManager.showPopupBetSuccess(response, localInfo, this.sbFootballBettingController);
          this.sbCommonPrefabsManager.resetPopupCalculatorBet();
          SbSoundsManager.getInstance().playSfxBetOk();
        };

        _proto.getDataBetParlay = function getDataBetParlay() {
          var dataBetParlay = {
            displayOdds: 0,
            isLive: false,
            leagueId: "0",
            leagueName: "0",
            matchId: "",
            matchTime: "",
            offerId: "",
            selectionId: "",
            odds: null,
            sumaryOddsString: "",
            sumaryOddsValueDecimal: 0,
            isEnable: true
          };
          var oddsSelectedClone = this.oddsSelected;
          var matchData = this.oddsSelected.GetMatchData();
          var leagueData = this.oddsSelected.GetLeagueData();
          dataBetParlay.sumaryOddsString = this.lbSumaryOdds.string;
          dataBetParlay.sumaryOddsValueDecimal = this.oddsSelected.getOddsValue(SbOddsStyle.Decimal);
          dataBetParlay.leagueId = String(leagueData.leagueId);
          dataBetParlay.leagueName = leagueData.leagueName;
          dataBetParlay.matchId = String(matchData.eventId);
          if (this.dataForBetting.hasOwnProperty("displayOdds")) dataBetParlay.displayOdds = this.dataForBetting.displayOdds;
          if (this.dataForBetting.hasOwnProperty("isLive")) dataBetParlay.isLive = this.dataForBetting.isLive;
          if (this.dataForBetting.hasOwnProperty("matchTime")) dataBetParlay.matchTime = this.dataForBetting.matchTime;
          if (this.dataForBetting.hasOwnProperty("offerId")) dataBetParlay.offerId = this.dataForBetting.offerId;
          if (this.dataForBetting.hasOwnProperty("selectionId")) dataBetParlay.selectionId = this.dataForBetting.selectionId;
          dataBetParlay.odds = this.oddsSelected; //oddsSelectedClone;

          return dataBetParlay;
        };

        _proto.onClickAddParlayBet = function onClickAddParlayBet() {
          var _this4 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (this.isCaculatingBet) {
            SbCommonPrefabsManager.getInstance().ShowMessage("Vui lòng chờ!");
            return;
          }

          var dataParlayBet = this.getDataBetParlay();
          var result = SbParlayBetManager.getInstance().Add(dataParlayBet);
          this.setAnimationLoadingButtonParlayBet(SbTypeButtonEditParlayBet.Add);
          this.isCaculatingBet = true;
          SbParlayBetManager.getInstance().CalculateParlayBet(function (response) {
            _this4.isCaculatingBet = false; //check odds available

            var isAvailable = true;
            var errMess = "";

            if (response != null || response.hasOwnProperty("selectionIdOdds")) {
              if (response.selectionIdOdds.hasOwnProperty(dataParlayBet.selectionId)) {
                var oddValue = Number(response.selectionIdOdds[dataParlayBet.selectionId]);

                if (isNaN(oddValue) || oddValue == 0 || oddValue == null || oddValue == undefined) {
                  errMess = "Kèo đã đóng, vui lòng chọn kèo khác!";
                  isAvailable = false;
                }
              }

              if (SbParlayBetManager.getInstance().GetOddsParlayEnableLength() > 1 && response.hasOwnProperty("maxStake") && response.hasOwnProperty("minStake") && response.maxStake < response.minStake) {
                errMess = "Đã vượt quá tỉ lệ kết hợp tối đa!";
                isAvailable = false;
              }
            }

            _this4.hideAllButtonParlayBet();

            if (result && isAvailable) {
              // this.listButtonBetParlay[1].active = true;
              _this4.showButtonParlayBet(SbTypeButtonEditParlayBet.Remove);

              SbCommonPrefabsManager.getInstance().ShowMessage("Đã thêm thành công!");

              _this4.playAnimAddTicketToListParlayBetSuccess();
            } else {
              // this.listButtonBetParlay[0].active = true;
              _this4.showButtonParlayBet(SbTypeButtonEditParlayBet.Add);

              SbParlayBetManager.getInstance().Remove(dataParlayBet);
              SbCommonPrefabsManager.getInstance().ShowMessage(errMess);
            }
          }, function (errCode) {
            _this4.isCaculatingBet = false;
            SbParlayBetManager.getInstance().Remove(dataParlayBet);

            _this4.showMessageWithError(errCode);
          });
        };

        _proto.playAnimAddTicketToListParlayBetSuccess = function playAnimAddTicketToListParlayBetSuccess() {
          if (this.positionAnimTicketParlay != null) {
            Tween.stopAllByTarget(this.positionAnimTicketParlay);
            var pos = this.positionAnimTicketParlay.parent.getComponent(UITransform).convertToWorldSpaceAR(this.positionAnimTicketParlay.position);
            SbCommonPrefabsManager.getInstance().playAnimAddTicketToParlayBet(pos);
            SbSoundsManager.getInstance().playSfxBetOk();
          }
        };

        _proto.onClickReplaceParlayBet = function onClickReplaceParlayBet() {
          var _this5 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (this.isCaculatingBet) {
            SbCommonPrefabsManager.getInstance().ShowMessage("Vui lòng chờ!");
            return;
          }

          var dataParlayBet = this.getDataBetParlay();
          var dataParlayBetCurrent = SbParlayBetManager.getInstance().GetOddsParlay(dataParlayBet); // let result = SbParlayBetManager.getInstance().Replace(dataParlayBet);
          // this.hideAllButtonParlayBet();
          // if (result) {
          //     this.listButtonBetParlay[1].active = true;
          //     SbCommonPrefabsManager.getInstance().ShowMessage("Đã đổi thành công!");
          // }
          //====

          var result = SbParlayBetManager.getInstance().Replace(dataParlayBet);
          this.setAnimationLoadingButtonParlayBet(SbTypeButtonEditParlayBet.Replace);
          SbParlayBetManager.getInstance().CalculateParlayBet(function (response) {
            _this5.isCaculatingBet = false; //check odds available

            var isAvailable = true;
            var errMess = "";

            if (response != null || response.hasOwnProperty("selectionIdOdds")) {
              if (response.selectionIdOdds.hasOwnProperty(dataParlayBet.selectionId)) {
                var oddValue = Number(response.selectionIdOdds[dataParlayBet.selectionId]);

                if (isNaN(oddValue) || oddValue == 0 || oddValue == null || oddValue == undefined) {
                  errMess = "Kèo đã đóng, vui lòng chọn kèo khác!";
                  isAvailable = false;
                }
              }

              if (SbParlayBetManager.getInstance().GetOddsParlayEnableLength() > 1 && response.hasOwnProperty("maxStake") && response.hasOwnProperty("minStake") && response.maxStake < response.minStake) {
                errMess = "Đã vượt quá tỉ lệ kết hợp tối đa!";
                isAvailable = false;
              }
            }

            _this5.hideAllButtonParlayBet();

            if (result && isAvailable) {
              // this.listButtonBetParlay[1].active = true;
              _this5.showButtonParlayBet(SbTypeButtonEditParlayBet.Remove);

              SbCommonPrefabsManager.getInstance().ShowMessage("Đã đổi thành công!");

              _this5.playAnimAddTicketToListParlayBetSuccess();
            } else {
              // this.listButtonBetParlay[0].active = true;
              _this5.showButtonParlayBet(SbTypeButtonEditParlayBet.Add);

              SbParlayBetManager.getInstance().Add(dataParlayBet);
              SbCommonPrefabsManager.getInstance().ShowMessage(errMess);
            }
          }, function (errCode) {
            _this5.isCaculatingBet = false;
            SbParlayBetManager.getInstance().Add(dataParlayBet);

            _this5.showMessageWithError(errCode);
          });
        };

        _proto.onClickRemoveParlayBet = function onClickRemoveParlayBet() {
          SbSoundsManager.getInstance().playSfxClick();
          var result = SbParlayBetManager.getInstance().Remove(this.getDataBetParlay());
          this.hideAllButtonParlayBet();

          if (result) {
            // this.listButtonBetParlay[0].active = true;
            this.showButtonParlayBet(SbTypeButtonEditParlayBet.Add);
            SbCommonPrefabsManager.getInstance().ShowMessage("Đã xóa thành công!");
          } else {
            // this.listButtonBetParlay[0].active = true;
            this.showButtonParlayBet(SbTypeButtonEditParlayBet.Add);
            SbCommonPrefabsManager.getInstance().ShowMessage("Xóa không thành công, vui lòng thử lại sau!");
          }
        };

        _proto.onClickNumber = function onClickNumber(sender, customData) {
          SbSoundsManager.getInstance().playSfxClick();
          log("onClickNumber: " + customData);

          if (this.isCaculatingBet) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BetCountedWait"));
            SbSoundsManager.getInstance().playSfxBetError();
            return true;
          }

          var strInput = customData;
          var userBalance = SbUserInfo.getInstance().GetBalance() / 1000;

          if (userBalance <= 1) {
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("NotEnoughBalance"));
            return;
          }

          var num = 0;

          if (strInput.localeCompare("max") == 0) {
            var max = this.getMaxPayoutWithOddsStyle(this.oddsSelected.getOddsValue(), this.maxPayout, this.oddsSelected.GetOddsStyle(), this.maxStake);
            var input = max;
            num = this.checkInputMaxValue(input);
          } else if (strInput.localeCompare("100") == 0 || strInput.localeCompare("200") == 0 || strInput.localeCompare("500") == 0) {
            var _input = Number(this.textBoxMoneyValue) + Number(strInput);

            num = this.checkInputMaxValue(_input);
          } else if (strInput.localeCompare("-1") == 0) {
            this.textBoxMoneyValue = this.textBoxMoneyValue.slice(0, this.textBoxMoneyValue.length - 1); // // this.textBoxMoneyValue = num.toString();

            num = Number(this.textBoxMoneyValue);
          } else {
            if ((this.textBoxMoneyValue + strInput).length > 10) {
              this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("CantInput"));
              return;
            }

            var _input2 = Number(this.textBoxMoneyValue + strInput);

            num = this.checkInputMaxValue(_input2);
          }

          this.calculatorInputNumber(num);
        };

        _proto.checkInputMaxValue = function checkInputMaxValue(input) {
          var userBalance = SbUserInfo.getInstance().GetBalance() / 1000;
          var max = this.getMaxPayoutWithOddsStyle(this.oddsSelected.getOddsValue(), this.maxPayout, this.oddsSelected.GetOddsStyle(), this.maxStake);
          var num = 0;

          if (input <= max && input <= Number(userBalance)) {
            num = input;
            this.textBoxMoneyValue = Math.floor(num).toString();
          } else {
            if (input >= Number(userBalance)) {
              if (Number(userBalance) > max) num = max;else num = userBalance;
            } else {
              num = max;
            }

            this.textBoxMoneyValue = Math.floor(num).toString();
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded"));
          }

          return num;
        };

        _proto.calculatorInputNumber = function calculatorInputNumber(num) {
          var userBalance = SbUserInfo.getInstance().GetBalance() / 1000;

          if (num > userBalance || num > this.maxStake) {
            if (num > this.maxStake && num <= userBalance) {
              this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded2"));
            }

            if (num > userBalance) {
              this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BalanceExceeded"));
            }
          }

          if (Number(this.textBoxMoneyValue) == 0) {
            this.textBoxMoneyValue = "0";
          }

          this.textBoxMoney.string = SbStringUtil.formatMoneyNumberWithComma(Number(this.textBoxMoneyValue));
          var costBet = this.getTotalCostBet(this.oddsSelected.getOddsValue(), String(num), this.oddsSelected.GetOddsStyle(), this.oddsSelected.GetMarketData().marketId);
          this.calculatorBet(Number(this.textBoxMoneyValue), costBet);
        };

        _proto.onClickHidePopupCaculatorBet = function onClickHidePopupCaculatorBet() {
          this.hidePopupCalculatorBet();
        };

        _proto.hidePopupCalculatorBet = function hidePopupCalculatorBet() {
          this.sbCommonPrefabsManager.resetPopupCalculatorBet();
          this.onClickHide();
          if (this.callbackHidePopupBetting != null) this.callbackHidePopupBetting();
        };

        _proto.onClickClearTextBox = function onClickClearTextBox() {
          SbSoundsManager.getInstance().playSfxClick();
          this.textBoxMoneyValue = "";
          this.textBoxMoney.string = "";
          this.calculatorInputNumber(0);
        };

        _proto.onClickConfirmBet = function onClickConfirmBet() {
          SbSoundsManager.getInstance().playSfxClick();
        };

        _proto.onClickCancelBet = function onClickCancelBet() {
          SbSoundsManager.getInstance().playSfxClick();
        };

        _proto.showMessageWithError = function showMessageWithError(errCode) {
          if (errCode == 603) {
            //oods have changed
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("ODDS_CHANGED"));
          } else if (errCode == 400) {
            //Error
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("BAD_REQUEST"));
          } else if (errCode == 603) {
            //oods have changed
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("ODDS_CHANGED"));
          } else if (errCode == 616) {
            //"Odds Style is not supported"
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("ODDS_STYLE_IS_NOT_SUPPORTED"));
          } else if (errCode == 605) {
            //"Stake is lower than the minimum stake."
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("STAKE_TOO_SMALL"));
          } else if (errCode == 613) {
            //"Odds is closed"
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("ODDS_IS_CLOSED"));
          } else if (errCode == 600) {
            //Sorry, you have insufficient funds available.
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("FUNDS_NOT_ENOUGH"));
          } else if (errCode == 601) {
            //Match is not available. Please try again!
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MATCH_NOT_ACTIVE"));
          } else if (errCode == 602) {
            //Market is not available. Please try again!
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MARKET_NOT_ACTIVE"));
          } else if (errCode == 604) {
            //Score have changed.
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("SCORE_CHANGED"));
          } else if (errCode == 606) {
            //Stake is higher than the maximum stake.
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("STAKE_TOO_LARGE"));
          } else if (errCode == 607) {
            //Odds not found
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("ODDS_NOT_FOUND"));
          } else if (errCode == 608) {
            //Limit setting not found
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("LIMIT_SETTING_NOT_FOUND"));
          } else if (errCode == 609) {
            //Limit setting line step not found
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("LIMIT_SETTING_LINE_STEP_NOT_FOUND"));
          } else if (errCode == 610) {
            //Limit setting main line CLS not found
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("LIMIT_SETTING_MAIN_LINE_CLS_NOT_FOUND"));
          } else if (errCode == 611) {
            //"Odds is closed"
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("CLS_NOT_ALLOW"));
          } else if (errCode == 614) {
            //Player status is blocked.
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("PLAYER_STATUS_IS_BLOCKED"));
          } else if (errCode == 615) {
            //Max stake is lower than the minimum stake.
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("MAX_STAKE_LOWER_THAN_MIN_STAKE"));
          } else if (errCode == 617) {
            //Player's match liability is higher than the maximum
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("OVER_PLAYER_MATCH_MAX_LIABILITY"));
          } else if (errCode == 618) {
            //Over market LAL
            this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("OVER_MARKET_LAL"));
          }
        };

        _createClass(SbPopupCalculatorBet, [{
          key: "oddListColors",
          get: function get() {
            var result = [];

            if (this.skinOddsColor) {
              result = this.skinOddsColor.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbPopupCalculatorBet;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeagueName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbMarketName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbSelected", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbSumaryOdds", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbSumaryOddsValue", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "lbMinStake", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "lbMaxStake", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbTotalMoney", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbRefund", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "textBoxMoney", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "checkBoxAcceptOddsGood", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "nodeLoading", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "nodeWarningOddsChange", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "lbOddChange", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "skinOddsColor", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "listButtonBetParlay", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "positionAnimTicketParlay", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupMessageUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Vec3, Tween, UIOpacity, view, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      UIOpacity = module.UIOpacity;
      view = module.view;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "bb0dfkCURpP6qMkiSBHOjLU", "SbPopupMessageUtil", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPopupMessageUtil = exports('default', (_dec = ccclass('SbPopupMessageUtil'), _dec2 = property(Label), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbPopupMessageUtil, _Component);

        function SbPopupMessageUtil() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "messageLb", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "popupBg", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbPopupMessageUtil.prototype;

        _proto.showMessage = function showMessage(msg, upPos, delayTime) {
          if (upPos === void 0) {
            upPos = Vec3.ZERO;
          }

          if (delayTime === void 0) {
            delayTime = 2;
          }

          if (msg.charAt(msg.length - 1) == '\n') {
            msg = msg.substr(0, msg.length - 1);
          }

          this.node.active = true;
          Tween.stopAllByTarget(this.popupBg);
          Tween.stopAllByTarget(this.popupBg.getComponent(UIOpacity));
          this.messageLb.string = msg;

          if (upPos.x === 0 && upPos.y === 0) {
            upPos = new Vec3(0, view.getVisibleSize().height * 0.25 / this.node.scale.x);
          } //cc.log(" abs " + this.node.scale);


          var downPos = new Vec3(0, upPos.y - 25);
          this.popupBg.setPosition(upPos);
          this.popupBg.getComponent(UIOpacity).opacity = 0;
          tween(this.popupBg.getComponent(UIOpacity)).to(0.2, {
            opacity: 255
          }).delay(delayTime).to(0.3, {
            opacity: 0
          }).delay(0.05).call(function () {//   this.node.removeFromParent(true);
          }).start();
          tween(this.popupBg).to(0.2, {
            position: downPos
          }).delay(delayTime).to(0.3, {
            position: upPos
          }).start();
        };

        _proto.hideMessage = function hideMessage() {
          if (this.popupBg != null) {
            this.node.active = false;
          }
        };

        return SbPopupMessageUtil;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "messageLb", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupBg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupMiniBetSlip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPopupBetSlip.ts', './SbSoundsManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SbPopupBetSlip, SbSoundsManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SbPopupBetSlip = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "92eaa/ce2xM6LZcQ5bXKDWP", "SbPopupMiniBetSlip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPopupMiniBetSlip = exports('default', (_dec = ccclass('SbPopupMiniBetSlip'), _dec(_class = /*#__PURE__*/function (_SbPopupBetSlip) {
        _inheritsLoose(SbPopupMiniBetSlip, _SbPopupBetSlip);

        function SbPopupMiniBetSlip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBetSlip.call.apply(_SbPopupBetSlip, [this].concat(args)) || this;
          _this.ShareCloseCallback = null;
          return _this;
        }

        var _proto = SbPopupMiniBetSlip.prototype;

        _proto.onEnable = function onEnable() {} // Hide ShareChat
        ;

        _proto.onClickShareClose = function onClickShareClose() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.ShareCloseCallback) {
            this.ShareCloseCallback();
          }
        };

        return SbPopupMiniBetSlip;
      }(SbPopupBetSlip)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupSearch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbGameHTTPManager.ts', './SbPopupBase.ts', './SbConfigManager.ts', './SbItemSearchMatch.ts', './SbItemSearchLeague.ts', './SbLoadingNodeMini.ts', './SbLocalizationManager.ts', './SbSoundsManager.ts', './SbGameUtil.ts', './SbSportManager.ts', './SbFootballEventDataManager.ts', './SbDefine.ts', './SbUIDropdown.ts', './SbUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Prefab, Node, ScrollView, EditBox, Label, director, log, view, Vec3, UITransform, Tween, tween, TweenSystem, UIOpacity, instantiate, SbUserInfo, SbGameHTTPManager, SbPopupBase, SbConfigManager, SbItemSearchMatch, SbItemSearchLeague, SbLoadingNodeMini, SbLocalizationManager, SbSoundsManager, ScrollView_EventType, SbTypeTimeMatch, SbFootballEventDataManager, SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID, SB_EVENT_REQUEST_DATA_MATCH_WITH_ID, SB_EVENT_SHOW_LOADING_FULL_SCREEN, SB_EVENT_HIDE_LOADING_FULL_SCREEN, SB_EVENT_SHOW_MESSAGE_ULTIL, SbUIDropdown, SbUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      EditBox = module.EditBox;
      Label = module.Label;
      director = module.director;
      log = module.log;
      view = module.view;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Tween = module.Tween;
      tween = module.tween;
      TweenSystem = module.TweenSystem;
      UIOpacity = module.UIOpacity;
      instantiate = module.instantiate;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbItemSearchMatch = module.SbItemSearchMatch;
    }, function (module) {
      SbItemSearchLeague = module.SbItemSearchLeague;
    }, function (module) {
      SbLoadingNodeMini = module.SbLoadingNodeMini;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      ScrollView_EventType = module.ScrollView_EventType;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbFootballEventDataManager = module.default;
    }, function (module) {
      SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID = module.SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID;
      SB_EVENT_REQUEST_DATA_MATCH_WITH_ID = module.SB_EVENT_REQUEST_DATA_MATCH_WITH_ID;
      SB_EVENT_SHOW_LOADING_FULL_SCREEN = module.SB_EVENT_SHOW_LOADING_FULL_SCREEN;
      SB_EVENT_HIDE_LOADING_FULL_SCREEN = module.SB_EVENT_HIDE_LOADING_FULL_SCREEN;
      SB_EVENT_SHOW_MESSAGE_ULTIL = module.SB_EVENT_SHOW_MESSAGE_ULTIL;
    }, function (module) {
      SbUIDropdown = module.SbUIDropdown;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;

      cclegacy._RF.push({}, "54772arg+5OBY18OFwD30KC", "SbPopupSearch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSearchStatus = exports('SbSearchStatus', /*#__PURE__*/function (SbSearchStatus) {
        SbSearchStatus[SbSearchStatus["Active"] = 0] = "Active";
        SbSearchStatus[SbSearchStatus["Settled"] = 1] = "Settled";
        SbSearchStatus[SbSearchStatus["None"] = 2] = "None";
        return SbSearchStatus;
      }({}));
      var TIME_DELAY_SEARCH = 0.5;
      var MIN_CHARACTER_SEARCH = 3;
      var SbPopupSearch = exports('default', (_dec = ccclass('SbPopupSearch'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(ScrollView), _dec9 = property(EditBox), _dec10 = property(SbLoadingNodeMini), _dec11 = property(Label), _dec12 = property(Label), _dec13 = property(Node), _dec14 = property(SbUIDropdown), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupSearch, _SbPopupBase);

        function SbPopupSearch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemSearchMatchTemplate", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemSearchLeagueTemplate", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleResultSearchMatch", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "titleResultSearchLeague", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentResultSearchMatch", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentResultSearchLeague", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollViewSearch", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBoxSearch", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLoadingMini", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTooltips", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsg", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonScrollToTop", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listDropdownlist", _descriptor13, _assertThisInitialized(_this));

          _this.stringSearch = "";
          _this.stringSearched = "";
          _this.scheduleRequestString = null;
          _this.timeLastRequest = 0;
          _this.stringTooltipDefault = "";
          _this.stringTooltipMinCharacter = "";
          _this.lastEmptySearch = false;
          _this.onRequestDataFinish = null;
          return _this;
        }

        var _proto = SbPopupSearch.prototype; // private sbCommonPrefabsManager: SbCommonPrefabsManager = null;
        // init(sbCommonPrefabsManager: SbCommonPrefabsManager) {
        // 	this.sbCommonPrefabsManager = sbCommonPrefabsManager;
        // }

        _proto.start = function start() {
          this.clearUI(); // this.updatePositionAndContentSize();

          this.scheduleRequestString = this.checkRequestString.bind(this);
          this.stringTooltipDefault = SbLocalizationManager.getInstance().GetKeyValue("SearchDescription");
          this.stringTooltipMinCharacter = SbUtils.ReplacePlaceholders(SbLocalizationManager.getInstance().GetKeyValue("SearchTooltipMinCharacter"), MIN_CHARACTER_SEARCH);
        };

        _proto.SetCallbackOnRequestDataFinish = function SetCallbackOnRequestDataFinish(cb) {
          this.onRequestDataFinish = cb;
        };

        _proto.onEnable = function onEnable() {
          _SbPopupBase.prototype.onEnable.call(this);

          this.addEventListener();
        };

        _proto.onDisable = function onDisable() {
          _SbPopupBase.prototype.onDisable.call(this);

          this.clearUI();
          director.off(SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID, this.onClickRequestLeagueData, this);
          director.off(SB_EVENT_REQUEST_DATA_MATCH_WITH_ID, this.onClickRequestEventData, this);
        };

        _proto.addEventListener = function addEventListener() {
          // director.off(SB_EVENT_EVENT_MATCH_CHANGE_DATA);
          director.on(SB_EVENT_REQUEST_DATA_LEAGUE_WITH_ID, this.onClickRequestLeagueData, this);
          director.on(SB_EVENT_REQUEST_DATA_MATCH_WITH_ID, this.onClickRequestEventData, this);
        };

        _proto.checkRequestString = function checkRequestString() {
          if (this.stringSearch.length < MIN_CHARACTER_SEARCH) {
            if (this.checkWhitelistString(this.stringSearch) == false) {
              this.lbTooltips.string = this.stringTooltipMinCharacter;
              this.hideLoading();
              return;
            }
          } else if (this.stringSearched.toLowerCase().localeCompare(this.stringSearch.toLowerCase()) == 0) {
            if (this.lastEmptySearch) {
              this.showMsg(SbLocalizationManager.getInstance().GetKeyValue("SearchNotFound"));
            }

            this.hideLoading();
            return;
          } else {
            this.lbTooltips.string = this.stringTooltipDefault;
          }

          this.requestSearch(this.stringSearch);
        };

        _proto.checkWhitelistString = function checkWhitelistString(str) {
          if (str.length > 0) {
            var name = str.toLowerCase();

            if (name.localeCompare("y") == 0 || name.localeCompare("ý") == 0 || name.localeCompare("ao") == 0 || name.localeCompare("áo") == 0 || name.localeCompare("bi") == 0 || name.localeCompare("bỉ") == 0) {
              return true;
            }
          }

          return false;
        };

        _proto.getAmountDayRequest = function getAmountDayRequest(keyWordSearch) {
          var length = keyWordSearch.length;

          if (length > 0 && length <= 3) {
            return 1;
          } else if (length >= 4 && length <= 5) {
            return 4;
          } else {
            return 7;
          }
        };

        _proto.requestSearch = function requestSearch(searchText) {
          var _this2 = this;

          this.stringSearched = searchText;
          log("requestSearch: " + searchText);
          var uToken = SbUserInfo.getInstance().GetUserToken();
          var url = SbConfigManager.getInstance().urlSearch + "?sportId=" + 1 + "&txtSearch=" + searchText;
          this.clearResultSearch();
          this.timeLastRequest = new Date().getTime();
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj, infoRequest) {
            _this2.hideLoading();

            _this2.clearResultSearch();

            if (infoRequest != null && infoRequest != undefined) {
              if (infoRequest.hasOwnProperty("timeRequest")) {
                if (infoRequest.timeRequest < _this2.timeLastRequest) return;
                _this2.lbMsg.node.active = false;

                if (Object.keys(obj).length == 0) {
                  _this2.showMsg(SbLocalizationManager.getInstance().GetKeyValue("SearchNotFound"));

                  return;
                }

                var hasResult = false;

                if (obj.hasOwnProperty("1")) {
                  //events
                  if (obj["1"].length > 0) {
                    hasResult = true;
                    _this2.titleResultSearchMatch.active = true;

                    for (var i = 0; i < obj["1"].length; i++) {
                      _this2.addItemMatch(obj["1"][i]);
                    }
                  }
                }

                if (obj.hasOwnProperty("0")) {
                  //leagues
                  if (obj["0"].length > 0) {
                    hasResult = true;
                    _this2.titleResultSearchLeague.active = true;

                    for (var _i = 0; _i < obj["0"].length; _i++) {
                      _this2.addItemLeague(obj["0"][_i]);
                    }
                  }
                }

                if (!hasResult) {
                  _this2.showMsg(SbLocalizationManager.getInstance().GetKeyValue("SearchNotFound"));

                  return;
                }
              }
            } else {
              _this2.showMsg(SbLocalizationManager.getInstance().GetKeyValue("SearchNotFound"));

              return;
            }
          }, function (mess) {
            //fail
            _this2.showMsg(mess);

            _this2.hideLoading();
          }, true, [["lng", "vi"]]);
        };

        _proto.resetAllUIDropdown = function resetAllUIDropdown() {
          for (var i = 0; i < this.listDropdownlist.length; i++) {
            this.listDropdownlist[i].ExpandItem();
          }
        };

        _proto.onClickRequestEventData = function onClickRequestEventData(data) {
          director.emit(SB_EVENT_SHOW_LOADING_FULL_SCREEN);
          SbFootballEventDataManager.getInstance().requestEventDataWithEventId(SbConfigManager.getInstance().urlGetEventMarketByEventId, data.id, this.onRequestDataSuccess.bind(this), this.onRequestDataFail.bind(this));
        };

        _proto.onClickRequestLeagueData = function onClickRequestLeagueData(data) {
          director.emit(SB_EVENT_SHOW_LOADING_FULL_SCREEN);
          SbFootballEventDataManager.getInstance().requestEventDataWithLeagueId(SbConfigManager.getInstance().urlGetEventMarketByLeagueId, data.id, this.onRequestDataSuccess.bind(this), this.onRequestDataFail.bind(this));
        };

        _proto.onRequestDataSuccess = function onRequestDataSuccess() {
          director.emit(SB_EVENT_HIDE_LOADING_FULL_SCREEN);

          if (SbFootballEventDataManager.getInstance().getListLeagueLength() > 0) {
            SbUserInfo.getInstance().SetTypeTimeMatch(SbTypeTimeMatch.SearchResult);

            if (this.onRequestDataFinish != null) {
              this.onRequestDataFinish();
            }

            this.HideNoDetroy();
          } else {
            director.emit(SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager.getInstance().GetKeyValue("CantFindTheMatch"));
          }
        };

        _proto.onRequestDataFail = function onRequestDataFail() {
          director.emit(SB_EVENT_HIDE_LOADING_FULL_SCREEN);
          director.emit(SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager.getInstance().GetKeyValue("ErrorPleaseTryAgain"));
        };

        _proto.onEditBoxChanged = function onEditBoxChanged(textbox, customData) {
          this.lbTooltips.string = this.stringTooltipDefault;
          if (textbox.string.length < 2) return;
          this.stringSearch = textbox.string;
          this.unschedule(this.scheduleRequestString);
          this.scheduleOnce(this.scheduleRequestString, TIME_DELAY_SEARCH);
          this.showLoading();
        };

        _proto.onEditBoxChangeValue = function onEditBoxChangeValue(str, textbox, customEventData) {
          this.stringSearch = textbox.string;
          this.unschedule(this.scheduleRequestString);
          this.scheduleOnce(this.scheduleRequestString, TIME_DELAY_SEARCH);
          if (textbox.string.length >= 2) this.showLoading();
        };

        _proto.clearEdibox = function clearEdibox() {
          if (this.editBoxSearch != null) this.editBoxSearch.string = "";
        };

        _proto.onClickClearEditbox = function onClickClearEditbox() {
          SbSoundsManager.getInstance().playSfxClick();
          this.clearUI();
        };

        _proto.updatePositionAndContentSize = function updatePositionAndContentSize() {
          var headerHeight = 65;
          var visibleSize = view.getVisibleSize();
          this.scrollViewSearch.node.setPosition(new Vec3(0, visibleSize.height / 2 - headerHeight));
          this.scrollViewSearch.node.getComponent(UITransform).setContentSize(visibleSize.width, visibleSize.height - headerHeight);
          this.editBoxSearch.node.setPosition(new Vec3(this.editBoxSearch.node.position.x, visibleSize.height / 2 - (headerHeight + 14)));
        };

        _proto.clearUI = function clearUI() {
          this.clearResultSearch();
          this.lbMsg.node.active = false;
          this.clearEdibox();
          this.stringSearch = "";
          this.stringSearched = "";
          this.nodeLoadingMini.HideLoading();
        };

        _proto.clearResultSearch = function clearResultSearch() {
          this.lastEmptySearch = false;
          this.nodeParentResultSearchMatch.removeAllChildren();
          this.nodeParentResultSearchLeague.removeAllChildren();
          this.titleResultSearchMatch.active = false;
          this.titleResultSearchLeague.active = false;
          this.resetAllUIDropdown();
          this.hideButtonScrollToTop();
        };

        _proto.showMsg = function showMsg(str) {
          this.lastEmptySearch = true;
          this.lbMsg.string = str;
          this.lbMsg.node.setScale(this.lbMsg.node.scale.x, 0);
          this.lbMsg.node.active = true;
          Tween.stopAllByTarget(this.lbMsg.node);
          tween(this.lbMsg.node).delay(0.1).to(0.2, {
            scale: new Vec3(1, 1)
          }, {
            easing: 'backOut'
          }).start();
        };

        _proto.showLoading = function showLoading() {
          this.nodeLoadingMini.ShowLoading();
          this.lbMsg.node.active = false;
        };

        _proto.hideLoading = function hideLoading() {
          this.nodeLoadingMini.HideLoading();
        };

        _proto.addItemMatch = /*#__PURE__*/function () {
          var _addItemMatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
            var item;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (this.titleResultSearchMatch.active == false) {
                    this.titleResultSearchMatch.active = true;
                  }

                  item = instantiate(this.itemSearchMatchTemplate).getComponent(SbItemSearchMatch);
                  item.node.parent = this.nodeParentResultSearchMatch;
                  item.SetInfo(data);

                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function addItemMatch(_x) {
            return _addItemMatch.apply(this, arguments);
          }

          return addItemMatch;
        }();

        _proto.addItemLeague = /*#__PURE__*/function () {
          var _addItemLeague = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {
            var item;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (this.titleResultSearchLeague.active == false) {
                    this.titleResultSearchLeague.active = true;
                  }

                  item = instantiate(this.itemSearchLeagueTemplate).getComponent(SbItemSearchLeague);
                  item.node.parent = this.nodeParentResultSearchLeague;
                  item.SetInfo(data);

                case 4:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function addItemLeague(_x2) {
            return _addItemLeague.apply(this, arguments);
          }

          return addItemLeague;
        }() //========== handle tab item has scrollview ===============
        ;

        _proto.scrollToTop = function scrollToTop() {
          if (this.scrollViewSearch != null) this.scrollViewSearch.scrollToTop();
          this.hideButtonScrollToTop();
        };

        _proto.onClickScrollToTop = function onClickScrollToTop() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.scrollViewSearch != null) {
            this.scrollViewSearch.scrollToTop(0.3);
          }
        };

        _proto.onScrollviewEvenCallback = function onScrollviewEvenCallback(scrollview, eventType, customEventData) {
          if (eventType == ScrollView_EventType.SCROLLING) {
            this.checkAndShowButtonScrollToTop(scrollview);
          }
        };

        _proto.checkAndShowButtonScrollToTop = function checkAndShowButtonScrollToTop(scrollview) {
          if (this.buttonScrollToTop != null) {
            if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.buttonScrollToTop) == 0) {
              var index = scrollview.getScrollOffset().y / scrollview.getMaxScrollOffset().y;

              if (index > 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity == 0) {
                this.showButtonScrollToTop();
              } else if (index <= 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity > 0) {
                this.hideButtonScrollToTop();
              }
            }
          }
        };

        _proto.hideButtonScrollToTop = function hideButtonScrollToTop() {
          var _this3 = this;

          if (this.buttonScrollToTop != null) {
            Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
            tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
              opacity: 0
            }).call(function () {
              _this3.buttonScrollToTop.active = false;
              _this3.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
            }).start();
          }
        };

        _proto.showButtonScrollToTop = function showButtonScrollToTop() {
          if (this.buttonScrollToTop != null) {
            this.buttonScrollToTop.active = true;
            this.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
            tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
              opacity: 255
            }).start();
          }
        } //================================================================
        //========================
        ;

        _proto.onCliclDebug = function onCliclDebug() {
          this.nodeLoadingMini.ShowLoading();
          this.addItemMatch("");
          this.addItemLeague("");
        };

        _proto.onCliclDebug2 = function onCliclDebug2() {
          this.nodeLoadingMini.HideLoading();
          this.clearUI();
        };

        return SbPopupSearch;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemSearchMatchTemplate", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "itemSearchLeagueTemplate", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "titleResultSearchMatch", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "titleResultSearchLeague", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentResultSearchMatch", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentResultSearchLeague", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "scrollViewSearch", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "editBoxSearch", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "nodeLoadingMini", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "lbTooltips", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "lbMsg", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "buttonScrollToTop", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "listDropdownlist", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPopupSetting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbPopupBase.ts', './SbUIComboBox.ts', './SbSoundsManager.ts', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Toggle, log, SbUserInfo, SbPopupBase, SbUIComboBox, SbSoundsManager, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Toggle = module.Toggle;
      log = module.log;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbPopupBase = module.default;
    }, function (module) {
      SbUIComboBox = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "afcb9Jd2MpKqIavqhMRCL9q", "SbPopupSetting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      /**
      export enum OddsStyle {
          Malay = 0,
          Indo = 1,
          Decimal = 2,
          HK = 3,
          US = 4
      } */

      var SbPopupSetting = exports('default', (_dec = ccclass('SbPopupSetting'), _dec2 = property(SbUIComboBox), _dec3 = property(Toggle), _dec(_class = (_class2 = /*#__PURE__*/function (_SbPopupBase) {
        _inheritsLoose(SbPopupSetting, _SbPopupBase);

        function SbPopupSetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbPopupBase.call.apply(_SbPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "comboBoxOddsStyle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listToggle", _descriptor2, _assertThisInitialized(_this));

          _this.callbackDone = null;
          _this.sbCommonPrefabsManager = null;
          _this.indexCurrent = 0;
          return _this;
        }

        var _proto = SbPopupSetting.prototype;

        _proto.init = function init(sbCommonPrefabsManager) {
          this.sbCommonPrefabsManager = sbCommonPrefabsManager;
        };

        _proto.start = function start() {
          this.indexCurrent = SbUserInfo.getInstance().GetOddsStyleID();
          this.listToggle[this.indexCurrent].isChecked = true; // this.comboBoxOddsStyle.initData(this.getListStringOddsStyle());
          // this.comboBoxOddsStyle.setTick(indexCurrent);
        };

        _proto.SetCallBackChangeOddsStyle = function SetCallBackChangeOddsStyle(cb) {
          this.callbackDone = cb;
        };

        _proto.onToggleChangeValue = function onToggleChangeValue(combobox, customData) {
          SbSoundsManager.getInstance().playSfxClick();
          log("Setting onToggleChangeValue: " + customData);
          this.indexCurrent = Number(customData);
        };

        _proto.onClickOK = function onClickOK() {
          SbSoundsManager.getInstance().playSfxClick(); // let indexCurrent = this.comboBoxOddsStyle.GetIndexCurrent();

          SbUserInfo.getInstance().SetOddsStyleID(this.indexCurrent);
          if (this.callbackDone != null) this.callbackDone();
          this.sbCommonPrefabsManager.ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("SelectingOdds") + " " + this.getListStringOddsStyle()[this.indexCurrent]);
          this.hide();
        };

        _proto.getListStringOddsStyle = function getListStringOddsStyle() {
          return ["Malaysia", "Indonesia", "Decimal", "Hongkong"];
        };

        return SbPopupSetting;
      }(SbPopupBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "comboBoxOddsStyle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbPrefabsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, game, resources, error, instantiate, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      game = module.game;
      resources = module.resources;
      error = module.error;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3;

      cclegacy._RF.push({}, "1b7fcBHi2VOFIkEpYlRX0+6", "SbPrefabsManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbPrefabsManager = exports('default', (_dec = ccclass('SbPrefabsManager'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbPrefabsManager, _Component);

        function SbPrefabsManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listPrefabOdds", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listPrefabMarket", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabLeague", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefabMatch", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "prefaLoadingFullScreen", _descriptor5, _assertThisInitialized(_this));

          _this.popupSetting = null;
          _this.popupBetting = null;
          _this.count = 0;
          return _this;
        }

        SbPrefabsManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbPrefabsManager();
          }

          return this.Instance;
        };

        var _proto = SbPrefabsManager.prototype;

        _proto.onLoad = function onLoad() {
          SbPrefabsManager.Instance = this;
          game.addPersistRootNode(this.node); // this.node.zIndex = 400;
        };

        _proto.Clean = function Clean() {
          if (this.node != null) {
            game.removePersistRootNode(this.node);
            this.node.removeFromParent();
          }
        };

        _proto.GetLoadingFullScreen = function GetLoadingFullScreen() {
          return this.listPrefabOdds;
        };

        _proto.GetListPrefabOdds = function GetListPrefabOdds() {
          return this.listPrefabOdds;
        };

        _proto.GetListPrefabMarket = function GetListPrefabMarket() {
          return this.listPrefabMarket;
        };

        _proto.GetPrefabLeague = function GetPrefabLeague() {
          return this.prefabLeague;
        };

        _proto.GetPrefabMatch = function GetPrefabMatch() {
          return this.prefabMatch;
        };

        _proto.preloadPrefabs = function preloadPrefabs(callBack) {
          var _this2 = this;

          this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupSeting", function (node) {
            _this2.popupSetting = node;

            _this2.isLoadDone(callBack);
          });
          this.loadPrefab("Sportsbook/prefabs/Football/Popup/PopupBetting", function (node) {
            _this2.popupBetting = node;

            _this2.isLoadDone(callBack);
          });
        };

        _proto.isLoadDone = function isLoadDone(callBack) {
          this.count++;

          if (this.count === 2) {
            if (callBack !== null) callBack();
          }
        };

        _proto.loadPrefab = function loadPrefab(url, callback) {
          resources.load(url, function (err, prefab) {
            if (prefab === null) {
              error("prefab null: " + url);
              callback(null);
            } else {
              var nodeTemp = instantiate(prefab);
              callback(nodeTemp);
            }
          }.bind(this));
        };

        _proto.getPopupSetting = function getPopupSetting() {
          return instantiate(this.popupSetting);
        };

        _proto.getPopupBetting = function getPopupBetting() {
          return instantiate(this.popupBetting);
        };

        _proto.getLoadingFullScreen = function getLoadingFullScreen() {
          return instantiate(this.prefaLoadingFullScreen);
        };

        return SbPrefabsManager;
      }(Component), _class3.Instance = null, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPrefabOdds", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listPrefabMarket", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "prefabLeague", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "prefabMatch", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "prefaLoadingFullScreen", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbProgressBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSkinListSprite.ts', './SbConfigManager.ts', './SbSkinListColor.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, UITransform, ProgressBar, SbSkinListSprite, SbConfigManager, SbSkinListColor;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      ProgressBar = module.ProgressBar;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbSkinListColor = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "4e2c912UD5HupJBZbbnHlg6", "SbProgressBar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbProgressBar = exports('SbProgressBar', (_dec = ccclass('SbProgressBar'), _dec2 = property(SbSkinListSprite), _dec3 = property(SbSkinListColor), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_ProgressBar) {
        _inheritsLoose(SbProgressBar, _ProgressBar);

        function SbProgressBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ProgressBar.call.apply(_ProgressBar, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "barListSprFrame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "displaySkinColors", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbDisplayValue", _descriptor3, _assertThisInitialized(_this));

          _this.maxValue = 5;
          return _this;
        }

        var _proto = SbProgressBar.prototype;

        _proto.onLoad = function onLoad() {
          this.totalLength = this.node.getComponent(UITransform).width;
        };

        _proto.SetValue = function SetValue(value) {
          this.lbDisplayValue.string = value.toString();
          this.progress = value / this.maxValue;
        };

        _proto.SetMaxValue = function SetMaxValue(value) {
          this.maxValue = value;
        };

        _proto.SetColorDark = function SetColorDark() {
          var barDark = this.barSprFrames[1];

          if (barDark) {
            this.lbDisplayValue.color = this.displayColors[1];
            this.barSprite.spriteFrame = barDark;
          }
        };

        _proto.SetColorLight = function SetColorLight() {
          var barLight = this.barSprFrames[0];

          if (barLight) {
            this.lbDisplayValue.color = this.displayColors[0];
            this.barSprite.spriteFrame = barLight;
          }
        };

        _createClass(SbProgressBar, [{
          key: "barSprFrames",
          get: function get() {
            var listSprFrames = [];

            if (this.barListSprFrame) {
              listSprFrames = this.barListSprFrame.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return listSprFrames;
          }
        }, {
          key: "displayColors",
          get: function get() {
            var colors = [];

            if (this.displaySkinColors) {
              colors = this.displaySkinColors.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return colors;
          }
        }]);

        return SbProgressBar;
      }(ProgressBar), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "barListSprFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "displaySkinColors", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbDisplayValue", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbProgressCompare2Number.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbProgressBar.ts', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, SbProgressBar, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      SbProgressBar = module.SbProgressBar;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7f6dchl9hNAQZ5kJax7vOaf", "SbProgressCompare2Number", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbProgressCompare2Number = exports('SbProgressCompare2Number', (_dec = ccclass('SbProgressCompare2Number'), _dec2 = property(SbProgressBar), _dec3 = property(SbProgressBar), _dec4 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbProgressCompare2Number, _Component);

        function SbProgressCompare2Number() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "progressBarLeft", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "progressBarRight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbName", _descriptor3, _assertThisInitialized(_this));

          _this.key = "";
          return _this;
        }

        var _proto = SbProgressCompare2Number.prototype;

        _proto.SetKey = function SetKey(key, maxValue) {
          this.key = key;
          this.progressBarLeft.SetMaxValue(maxValue);
          this.progressBarRight.SetMaxValue(maxValue);
        };

        _proto.GetKey = function GetKey() {
          return this.key;
        };

        _proto.SetData = function SetData(key, valueL, valueR) {
          if (this.key.localeCompare(key) != 0) return;
          this.lbName.string = SbLocalizationManager.getInstance().GetKeyValue(key);
          this.progressBarLeft.SetValue(valueL);
          this.progressBarRight.SetValue(valueR);

          if (valueL > valueR) {
            this.progressBarLeft.SetColorLight();
            this.progressBarRight.SetColorDark();
          } else if (valueL < valueR) {
            this.progressBarLeft.SetColorDark();
            this.progressBarRight.SetColorLight();
          } else {
            this.progressBarLeft.SetColorDark();
            this.progressBarRight.SetColorDark();
          }
        };

        return SbProgressCompare2Number;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "progressBarLeft", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "progressBarRight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbQueue.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, _decorator;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6d2b2uzaiRA9Yp22eFp/aFL", "SbQueue", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbQueue = exports('SbQueue', (_dec = ccclass('SbQueue'), _dec(_class = /*#__PURE__*/function () {
        function SbQueue(initialCapacity) {
          if (initialCapacity === void 0) {
            initialCapacity = 10;
          }

          this.headIndex = 0;
          this.tailIndex = 0;
          this._length = 0;
          this.initialCapacity = 0;
          this.currentCapacity = 0;
          this.container = [];
          this.initialCapacity = initialCapacity;
          this.currentCapacity = initialCapacity;
          this.container.length = initialCapacity;
        }

        var _proto = SbQueue.prototype;

        _proto.enqueue = function enqueue(element) {
          if (this._length >= this.currentCapacity) {
            this.expand();
          }

          this.container[this.tailIndex] = element;
          this._length++;
          this.tailIndex++;

          if (this.tailIndex === this.currentCapacity) {
            this.tailIndex = 0;
          }
        };

        _proto.dequeue = function dequeue() {
          if (this._length <= 0) {
            return null;
          }

          var tmp = this.container[this.headIndex];
          this.headIndex++;
          this._length--;

          if (this.headIndex === this.currentCapacity) {
            this.headIndex = 0;
          }

          if (this._length === this.currentCapacity / 4 && this._length > this.initialCapacity) {
            this.shrink();
          }

          return tmp;
        };

        _proto.peek = function peek() {
          if (this._length === 0) {
            return null;
          }

          return this.container[this.headIndex];
        };

        _proto.indexOf = function indexOf(element) {
          return this.container.indexOf(element);
        };

        _proto.expand = function expand() {
          var currentSource = this.headIndex;
          var currentTarget = 0;
          var newContainer = [];
          newContainer.length = 2 * this.currentCapacity;

          while (currentTarget < this.currentCapacity) {
            newContainer[currentTarget] = this.container[currentSource];
            currentSource++;
            currentTarget++;

            if (currentSource === this.currentCapacity) {
              currentSource = 0;
            }
          }

          this.container = newContainer;
          this.headIndex = 0;
          this.tailIndex = this.currentCapacity;
          this.currentCapacity *= 2;
        };

        _proto.shrink = function shrink() {
          var currentSource = this.headIndex;
          var currentTarget = 0;
          var newContainer = [];
          newContainer.length = this.currentCapacity / 4;

          while (currentTarget < this.currentCapacity) {
            newContainer[currentTarget] = this.container[currentSource];
            currentSource++;
            currentTarget++;

            if (currentSource === this.currentCapacity) {
              currentSource = 0;
            }
          }

          this.container = newContainer;
          this.headIndex = 0;
          this.tailIndex = this.currentCapacity;
          this.currentCapacity /= 4;
        };

        _createClass(SbQueue, [{
          key: "length",
          get: function get() {
            return this._length;
          }
        }, {
          key: "isEmpty",
          get: function get() {
            return this._length <= 0;
          }
        }]);

        return SbQueue;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbQuickChatController.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4ca6dirNSlHBbViEOmgVDgl", "SbQuickChatController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbQuickChatController = exports('SbQuickChatController', (_dec = ccclass('SbQuickChatController'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbQuickChatController, _Component);

        function SbQuickChatController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._quickchatContents = [];
          return _this;
        }

        var _proto = SbQuickChatController.prototype;
        /*
        1. If NOT already exist in quickchatContents -> push to first position
        2. If already exist in quickchatContents -> move it to first position
        */

        _proto.cacheNewestContent = function cacheNewestContent(content) {
          if (this._quickchatContents.length > 0 && content === this._quickchatContents[0]) {
            return;
          }

          if (this._quickchatContents.indexOf(content) !== -1) {
            var index = this._quickchatContents.indexOf(content);

            this._quickchatContents.splice(index, 1); // Remove the existing element from its current position


            this._quickchatContents.unshift(content); // Add the existing element to the beginning of the array

          } else {
            this._quickchatContents = [content].concat(this._quickchatContents.slice(0, this._quickchatContents.length - 1));
          }
        };

        _createClass(SbQuickChatController, [{
          key: "quickChatContents",
          get: function get() {
            return this._quickchatContents;
          },
          set: function set(value) {
            this._quickchatContents = value;
          }
        }]);

        return SbQuickChatController;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbRepeatFadeInOut.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UIOpacity, Tween, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "f7b6dOdE4NMUrtX3Bx3cLuS", "SbRepeatFadeInOut", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbRepeatFadeInOut = exports('SbRepeatFadeInOut', (_dec = ccclass('SbRepeatFadeInOut'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbRepeatFadeInOut, _Component);

        function SbRepeatFadeInOut() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeAnimation", _descriptor, _assertThisInitialized(_this));

          _this.myOpacity = null;
          return _this;
        }

        var _proto = SbRepeatFadeInOut.prototype;

        _proto.start = function start() {
          // this.positionDefault = this.node.position.clone();
          // let widget = this.node.getComponent(Widget);
          // if (widget != null && widget != undefined)
          //     widget.updateAlignment();
          // let posMoveTo = new Vec3(this.node.position.x + this.deltaPosition.x, this.node.position.y + this.deltaPosition.y);
          this.myOpacity = this.node.getComponent(UIOpacity);

          if (this.myOpacity != null && this.myOpacity != undefined) {
            Tween.stopAllByTarget(this.myOpacity);
            tween(this.myOpacity).to(this.timeAnimation, {
              opacity: 0
            }).to(this.timeAnimation, {
              opacity: 255
            }).union().repeatForever().start();
          } // let button = this.node.getComponent(Button);
          // if (button != null && button != undefined) {
          //     if (button.interactable == false) {
          //         Tween.stopAllByTarget(this.node);
          //         this.node.setPosition(this.positionDefault);
          //     }
          // }

        };

        return SbRepeatFadeInOut;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeAnimation", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbRepeatMove.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec2, Vec3, Widget, tween, Button, Tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec2 = module.Vec2;
      Vec3 = module.Vec3;
      Widget = module.Widget;
      tween = module.tween;
      Button = module.Button;
      Tween = module.Tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "265f2jkufNESYwaTpHEHdYa", "SbRepeatMove", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbRepeatMove = exports('default', (_dec = ccclass('SbRepeatMove'), _dec2 = property(Vec2), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbRepeatMove, _Component);

        function SbRepeatMove() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeMove", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "deltaPosition", _descriptor2, _assertThisInitialized(_this));

          _this.positionDefault = new Vec3(0, 0);
          _this.widget = new Widget();
          _this.alignLeft = 0;
          _this.alignRight = 0;
          return _this;
        }

        var _proto = SbRepeatMove.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.positionDefault = this.node.position.clone();
          var widget = this.node.getComponent(Widget);
          if (widget != null && widget != undefined) widget.updateAlignment();
          var posMoveTo = new Vec3(this.node.position.x + this.deltaPosition.x, this.node.position.y + this.deltaPosition.y);
          tween(this.node).delay(0.1).call(function () {
            tween(_this2.node).to(_this2.timeMove, {
              position: posMoveTo
            }).to(_this2.timeMove, {
              position: _this2.positionDefault
            }).union().repeatForever().start();
          }).start();
          var button = this.node.getComponent(Button);

          if (button != null && button != undefined) {
            if (button.interactable == false) {
              Tween.stopAllByTarget(this.node);
              this.node.setPosition(this.positionDefault);
            }
          }
        } // StartRepeatMove() {
        //     if (this.node.active == false)
        //         return;
        //     if (this.widget != null && this.widget != undefined) {
        //         if (this.widget.isAlignLeft)
        //             this.widget.left = this.alignLeft;
        //         if (this.widget.isAlignRight)
        //             this.widget.right = this.alignRight;
        //         this.widget.updateAlignment();
        //     }
        //     this.node.stopAllActions();
        //     this.node.runAction(cc.sequence(cc.delayTime(0.1), cc.callFunc(() => {
        //         this.node.position = this.positionDefault;
        //         let posMoveTo = new cc.Vec2(this.node.position.x + this.deltaPosition.x, this.node.position.y + this.deltaPosition.y);
        //         this.node.runAction(cc.repeatForever(cc.sequence(cc.moveTo(0.3, posMoveTo), cc.moveTo(0.3, this.node.position))));
        //     })));
        //     let button = this.node.getComponent(cc.Button);
        //     if (button != null && button != undefined) {
        //         if (button.interactable == false) {
        //             this.node.stopAllActions();
        //             this.node.position = this.positionDefault;
        //         }
        //     }
        // }
        // Stop() {
        //     this.node.stopAllActions();
        //     this.node.position = this.positionDefault;
        // }
        // update (dt) {}
        ;

        return SbRepeatMove;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeMove", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.3;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "deltaPosition", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec2(0, 0);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbRotateObject.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "59ce3QNq61PrLkykQK6WTSF", "SbRotateObject", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbRotateObject = exports('default', (_dec = ccclass('SbRotateObject'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbRotateObject, _Component);

        function SbRotateObject() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "timeRotate", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbRotateObject.prototype;

        _proto.start = function start() {
          tween(this.node).to(this.timeRotate, {
            angle: -360
          }).set({
            angle: 0
          }).union().repeatForever().start();
        };

        return SbRotateObject;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "timeRotate", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbShowHideWithPlatform.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "e84eaakXcREs7OI/CQvINyd", "SbShowHideWithPlatform", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbShowHideWithPlatform = exports('default', (_dec = ccclass('SbShowHideWithPlatform'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbShowHideWithPlatform, _Component);

        function SbShowHideWithPlatform() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "isShowOnlyWebMobileSafari", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbShowHideWithPlatform.prototype;

        _proto.start = function start() {
          if (this.isWebMobileSafari()) {
            this.node.active = this.isShowOnlyWebMobileSafari;
          } else {
            this.node.active = !this.isShowOnlyWebMobileSafari;
          }
        };

        _proto.isWebMobileSafari = function isWebMobileSafari() {
          if (sys.platform === sys.Platform.MOBILE_BROWSER && sys.browserType === sys.BrowserType.SAFARI) {
            if (navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") <= -1 && navigator.userAgent.indexOf("CriOS") <= -1 && navigator.userAgent.indexOf("Firefox") <= -1) {
              return true;
            } else {
              return false;
            }
          }

          return false;
        };

        return SbShowHideWithPlatform;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "isShowOnlyWebMobileSafari", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinActive.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, CCBoolean, Component, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "67800nsdy5Dh7GCW9209u4P", "SbSkinActive", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinActive = exports('SbSkinActive', (_dec = ccclass('SbSkinActive'), _dec2 = property([CCBoolean]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinActive, _Component);

        function SbSkinActive() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "skinActiveValue", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbSkinActive.prototype; // Need Active Node first

        _proto.onLoad = function onLoad() {
          var id = SbConfigManager.getInstance().GetSkinCurrent() + 1;

          if (id >= 0) {
            this.ChangeSkin(id);
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          this.node.active = this.skinActiveValue[id];
        };

        return SbSkinActive;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "skinActiveValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinButtonTransition.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Color, CCBoolean, Button, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Color = module.Color;
      CCBoolean = module.CCBoolean;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;

      cclegacy._RF.push({}, "f34f9FKuO5CQ7j2XIHAHe+l", "SbSkinButtonTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinButtonTransition = exports('default', (_dec = ccclass('SbSkinButtonTransition'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec6 = property(Color), _dec7 = property(Color), _dec8 = property(Color), _dec9 = property(Color), _dec10 = property([CCBoolean]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinButtonTransition, _Component);

        function SbSkinButtonTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSpriteFrame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFramePressed", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrameHover", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrameDisabled", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColor", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorPressed", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorHover", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColorDisabled", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isSetPos", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posY1", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posY2", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posY3", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posY4", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posY5", _descriptor14, _assertThisInitialized(_this));

          _this.button = null;
          return _this;
        }

        var _proto = SbSkinButtonTransition.prototype;

        _proto.onLoad = function onLoad() {
          this.button = this.node.getComponent(Button);

          if (this.button !== null) {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          if (this.button.transition === Button.Transition.SPRITE) {
            this.button.normalSprite = this.listSpriteFrame[id];
            this.button.pressedSprite = this.listSpriteFramePressed[id];
            this.button.hoverSprite = this.listSpriteFrameHover[id];
            this.button.disabledSprite = this.listSpriteFrameDisabled[id];
          } else if (this.button.transition === Button.Transition.COLOR) {
            this.button.normalColor = this.listColor[id];
            this.button.pressedColor = this.listColorPressed[id];
            this.button.hoverColor = this.listColorHover[id];
            this.button.disabledColor = this.listColorDisabled[id];
          }

          if (id === SbSkinID.Skin1 && this.isSetPos[0]) this.button.node.setPosition(this.button.node.position.x, this.posY1);
          if (id === SbSkinID.Skin2 && this.isSetPos[1]) this.button.node.setPosition(this.button.node.position.x, this.posY2);
          if (id === SbSkinID.Skin3 && this.isSetPos[2]) this.button.node.setPosition(this.button.node.position.x, this.posY3);
          if (id === SbSkinID.Skin4 && this.isSetPos[3]) this.button.node.setPosition(this.button.node.position.x, this.posY4);
          if (id === SbSkinID.Skin5 && this.isSetPos[4]) this.button.node.setPosition(this.button.node.position.x, this.posY5);
        };

        return SbSkinButtonTransition;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFramePressed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrameHover", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrameDisabled", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listColor", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listColorPressed", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listColorHover", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listColorDisabled", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isSetPos", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "posY1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "posY2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "posY3", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "posY4", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "posY5", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinCalendar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbCalendarDay.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component, SbConfigManager, SbSkinID, SbCalendarDay;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbCalendarDay = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "4d1ccwnVR1JGbDsmR5mphp3", "SbSkinCalendar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinCalendar = exports('default', (_dec = ccclass('SbSkinCalendar'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec6 = property(SpriteFrame), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinCalendar, _Component);

        function SbSkinCalendar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSpriteFrame1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame2", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame3", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame4", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame5", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame6", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame7", _descriptor7, _assertThisInitialized(_this));

          _this.item = null;
          return _this;
        }

        var _proto = SbSkinCalendar.prototype;

        _proto.onLoad = function onLoad() {
          this.item = this.node.getComponent(SbCalendarDay);

          if (this.item !== null) {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          switch (id) {
            case SbSkinID.Skin1:
              this.item.listSpriteFrame = this.listSpriteFrame1;
              break;

            case SbSkinID.Skin2:
              this.item.listSpriteFrame = this.listSpriteFrame2;
              break;

            case SbSkinID.Skin3:
              this.item.listSpriteFrame = this.listSpriteFrame3;
              break;

            case SbSkinID.Skin4:
              this.item.listSpriteFrame = this.listSpriteFrame4;
              break;

            case SbSkinID.Skin5:
              this.item.listSpriteFrame = this.listSpriteFrame5;
              break;

            case SbSkinID.Skin6:
              this.item.listSpriteFrame = this.listSpriteFrame6;
              break;

            case SbSkinID.Skin7:
              this.item.listSpriteFrame = this.listSpriteFrame7;
              break;
          }
        };

        return SbSkinCalendar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame5", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame6", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame7", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinEditbox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, EditBox, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bc982Sc39RKOL0hNXy+jM61", "SbSkinEditbox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinEditbox = exports('SbSkinEditbox', (_dec = ccclass('SbSkinEditbox'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinEditbox, _Component);

        function SbSkinEditbox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.edb = null;
          return _this;
        }

        var _proto = SbSkinEditbox.prototype;

        _proto.onLoad = function onLoad() {
          this.edb = this.node.getComponent(EditBox); // On/Off for dispatch SkinFont onload

          if (this.edb) {
            this.edb.textLabel.node.active = true;
            this.edb.textLabel.node.active = false;
          }
        };

        return SbSkinEditbox;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinFont.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Font, Color, CCBoolean, CCFloat, Label, Widget, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Font = module.Font;
      Color = module.Color;
      CCBoolean = module.CCBoolean;
      CCFloat = module.CCFloat;
      Label = module.Label;
      Widget = module.Widget;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;

      cclegacy._RF.push({}, "e53acxD9YlEfrbs2Fa2Mc5G", "SbSkinFont", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinFont = exports('default', (_dec = ccclass('SbSkinFont'), _dec2 = property(Font), _dec3 = property(Color), _dec4 = property([CCBoolean]), _dec5 = property([CCFloat]), _dec6 = property([CCFloat]), _dec7 = property([CCFloat]), _dec8 = property([CCFloat]), _dec9 = property([CCFloat]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinFont, _Component);

        function SbSkinFont() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listFont", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spacingX1", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setSpacingX1", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColorX1", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColorX2", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColorX3", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColorX4", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColorX5", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setFontSize", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "fontSize", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posXBonus", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posYBonus", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpacingX", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLineHeight", _descriptor15, _assertThisInitialized(_this));

          _this.label = null;
          return _this;
        }

        var _proto = SbSkinFont.prototype;

        _proto.onLoad = function onLoad() {
          this.label = this.node.getComponent(Label);

          if (this.label !== null) {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          this.label.font = this.listFont[id];

          if (id === SbSkinID.Skin1) {
            if (this.setColorX1 === true) {
              this.label.color = this.listColor[id];
            }

            if (this.setSpacingX1 === true) {
              this.label.spacingX = this.spacingX1;
            }

            if (this.listFont[id].name.indexOf("f_Eurostile_R_fnt") > -1) {
              this.label.spacingX = -1.5;
            } // if (this.listFont[id].name.indexOf("f_Eurostile_B_fnt") > -1) {
            //     this.label.spacingX = -1.0;
            // }

          } else if (id === SbSkinID.Skin2) {
            if (this.setColorX2 === true) {
              this.label.color = this.listColor[id];
            } // Skin 2 use font same skin 1


            if (this.setSpacingX1 === true) {
              this.label.spacingX = this.spacingX1;
            }

            if (this.listFont[id].name.indexOf("Eurostile_Intel_Font") > -1) {
              this.label.spacingX = -1.5;
            }
          } else if (id === SbSkinID.Skin3) {
            if (this.setColorX3 === true) {
              this.label.color = this.listColor[id];
            }

            if (this.listFont[id].name.indexOf("regular") > -1) {
              this.label.spacingX = 0;
            }
          } else if (id === SbSkinID.Skin4) {
            if (this.setColorX4 === true) {
              this.label.color = this.listColor[id];
            }

            if (this.listFont[id].name.indexOf("Bold") === -1) {
              this.label.spacingX = 0;
            }
          } else if (id === SbSkinID.Skin5) {
            if (this.setColorX5 === true) {
              this.label.color = this.listColor[id];
            }
          }

          var defaultSize = this.label.fontSize;
          var widget = this.node.getComponent(Widget);

          if (id >= 0) {
            // Set X Bonus
            var xBonus = this.posXBonus[id] || 0;
            this.label.node.setPosition(this.label.node.position.x + xBonus, this.label.node.position.y); // Set Y Bonus

            var yBonus = this.posYBonus[id] || 0;
            this.label.node.setPosition(this.label.node.position.x, this.label.node.position.y + yBonus);
            var spacingX = this.listSpacingX[id] || 0;

            if (spacingX !== 0) {
              this.label.spacingX = spacingX;
            }

            var lineHeight = this.listLineHeight[id] || 0;

            if (lineHeight !== 0) {
              this.label.lineHeight = lineHeight;
            } // Set Font Size custom


            if (this.setFontSize[id] === true) {
              this.label.fontSize = this.fontSize[id] || defaultSize;
            }

            if (widget) {
              widget.enabled = false;
            }
          }
        };

        return SbSkinFont;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listFont", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listColor", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spacingX1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "setSpacingX1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "setColorX1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "setColorX2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "setColorX3", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "setColorX4", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "setColorX5", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "setFontSize", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "fontSize", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "posXBonus", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "posYBonus", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "listSpacingX", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "listLineHeight", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinListColor.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Color, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "e398cPQRexEU5xsPcFYR8Sr", "SbSkinListColor", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinListColor = exports('default', (_dec = property([Color]), _dec2 = property([Color]), _dec3 = property([Color]), _dec4 = property([Color]), _dec5 = property([Color]), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinListColor, _Component);

        function SbSkinListColor() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "defaultSkin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin2", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin3", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin4", _descriptor5, _assertThisInitialized(_this));

          _this._listColors = [];
          return _this;
        }

        var _proto = SbSkinListColor.prototype;

        _proto.onLoad = function onLoad() {
          this.FetchChangeSkin();
        };

        _proto.FetchChangeSkin = function FetchChangeSkin() {
          var id = SbConfigManager.getInstance().GetSkinCurrent();
          this.ChangeSkin(id);
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          var infos = this.defaultSkin;

          if (id >= 0) {
            switch (id) {
              case SbSkinID.Skin1:
                infos = this.listSprFrameSkin1;
                break;

              case SbSkinID.Skin2:
                infos = this.listSprFrameSkin2;
                break;

              case SbSkinID.Skin3:
                infos = this.listSprFrameSkin3;
                break;

              case SbSkinID.Skin4:
                infos = this.listSprFrameSkin4;
                break;
            }

            if (infos.length === 0) {
              infos = this.defaultSkin;
            }
          }

          this._listColors = infos;
          return infos;
        };

        _createClass(SbSkinListColor, [{
          key: "ListColors",
          get: function get() {
            return this._listColors;
          }
        }]);

        return SbSkinListColor;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "defaultSkin", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinListSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, SpriteFrame, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "6f0eaW7C71C66ID6YUTY7MG", "SbSkinListSprite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinListSprite = exports('default', (_dec = property([SpriteFrame]), _dec2 = property([SpriteFrame]), _dec3 = property([SpriteFrame]), _dec4 = property([SpriteFrame]), _dec5 = property([SpriteFrame]), ccclass(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinListSprite, _Component);

        function SbSkinListSprite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "defaultSkin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin2", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin3", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSprFrameSkin4", _descriptor5, _assertThisInitialized(_this));

          _this._listSprFrames = [];
          return _this;
        }

        var _proto = SbSkinListSprite.prototype;

        _proto.onLoad = function onLoad() {
          this.FetchChangeSkin();
        };

        _proto.FetchChangeSkin = function FetchChangeSkin() {
          var id = SbConfigManager.getInstance().GetSkinCurrent();
          this.ChangeSkin(id);
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          var infos = this.defaultSkin;

          if (id >= 0) {
            switch (id) {
              case SbSkinID.Skin1:
                infos = this.listSprFrameSkin1;
                break;

              case SbSkinID.Skin2:
                infos = this.listSprFrameSkin2;
                break;

              case SbSkinID.Skin3:
                infos = this.listSprFrameSkin3;
                break;

              case SbSkinID.Skin4:
                infos = this.listSprFrameSkin4;
                break;
            }

            if (infos.length === 0) {
              infos = this.defaultSkin;
            }
          }

          this._listSprFrames = infos;
          return infos;
        };

        _createClass(SbSkinListSprite, [{
          key: "ListSpriteFrames",
          get: function get() {
            return this._listSprFrames;
          }
        }]);

        return SbSkinListSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "defaultSkin", [_dec], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listSprFrameSkin4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinLoginBg.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbLoginScene.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component, SbLoginScene, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      SbLoginScene = module.default;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "8d7c38tID9F0LQmDp9kSaOU", "SbSkinLoginBg", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinLoginBg = exports('default', (_dec = ccclass('SbSkinLoginBg'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec6 = property(SpriteFrame), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinLoginBg, _Component);

        function SbSkinLoginBg() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSpriteFrame1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame2", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame3", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame4", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame5", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame6", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame7", _descriptor7, _assertThisInitialized(_this));

          _this.item = null;
          return _this;
        }

        var _proto = SbSkinLoginBg.prototype;

        _proto.onLoad = function onLoad() {
          this.item = this.node.getComponent(SbLoginScene);

          if (this.item !== null) {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          switch (id) {
            case SbSkinID.Skin1:
              this.item.listBg = this.listSpriteFrame1;
              break;

            case SbSkinID.Skin2:
              this.item.listBg = this.listSpriteFrame2;
              break;

            case SbSkinID.Skin3:
              this.item.listBg = this.listSpriteFrame3;
              break;

            case SbSkinID.Skin4:
              this.item.listBg = this.listSpriteFrame4;
              break;

            case SbSkinID.Skin5:
              this.item.listBg = this.listSpriteFrame5;
              break;

            case SbSkinID.Skin6:
              this.item.listBg = this.listSpriteFrame6;
              break;

            case SbSkinID.Skin7:
              this.item.listBg = this.listSpriteFrame7;
              break;
          }
        };

        return SbSkinLoginBg;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame5", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame6", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame7", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinProperty.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Size, UITransform, Component, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Size = module.Size;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "ddbcccA985LqZ0C9ZB8mQZ3", "SbSkinProperty", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinProperty = exports('SbSkinProperty', (_dec = ccclass('SbSkinProperty'), _dec2 = property([Size]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinProperty, _Component);

        function SbSkinProperty() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sizeCustom", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbSkinProperty.prototype;

        _proto.onLoad = function onLoad() {
          var id = SbConfigManager.getInstance().GetSkinCurrent();

          if (id >= 0) {
            this.ChangeSkin(id);
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          var size = this.sizeCustom[id];

          if (size && size !== Size.ZERO) {
            this.node.getComponent(UITransform).setContentSize(size);
          }
        };

        return SbSkinProperty;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "sizeCustom", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinResultHistory.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbItemBetHistory.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component, SbConfigManager, SbSkinID, SbItemBetHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }, function (module) {
      SbItemBetHistory = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "30da9wB0sdNm6T5rcId/gMQ", "SbSkinResultHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinResultHistory = exports('default', (_dec = ccclass('SbSkinResultHistory'), _dec2 = property(SpriteFrame), _dec3 = property(SpriteFrame), _dec4 = property(SpriteFrame), _dec5 = property(SpriteFrame), _dec6 = property(SpriteFrame), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinResultHistory, _Component);

        function SbSkinResultHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSpriteFrame1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame2", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame3", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame4", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame5", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame6", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listSpriteFrame7", _descriptor7, _assertThisInitialized(_this));

          _this.item = null;
          return _this;
        }

        var _proto = SbSkinResultHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.item = this.node.getComponent(SbItemBetHistory);

          if (this.item !== null) {
            var id = SbConfigManager.getInstance().GetSkinCurrent();

            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          switch (id) {
            case SbSkinID.Skin1:
              this.item.listSpriteResult = this.listSpriteFrame1;
              break;

            case SbSkinID.Skin2:
              this.item.listSpriteResult = this.listSpriteFrame2;
              break;

            case SbSkinID.Skin3:
              this.item.listSpriteResult = this.listSpriteFrame3;
              break;

            case SbSkinID.Skin4:
              this.item.listSpriteResult = this.listSpriteFrame4;
              break;

            case SbSkinID.Skin5:
              this.item.listSpriteResult = this.listSpriteFrame5;
              break;

            case SbSkinID.Skin6:
              this.item.listSpriteResult = this.listSpriteFrame6;
              break;

            case SbSkinID.Skin7:
              this.item.listSpriteResult = this.listSpriteFrame7;
              break;
          }
        };

        return SbSkinResultHistory;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame3", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame4", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame5", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame6", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame7", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSkinSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Color, CCFloat, Size, Sprite, Widget, UITransform, Component, SbConfigManager, SbSkinID;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Color = module.Color;
      CCFloat = module.CCFloat;
      Size = module.Size;
      Sprite = module.Sprite;
      Widget = module.Widget;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      SbConfigManager = module.default;
      SbSkinID = module.SbSkinID;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

      cclegacy._RF.push({}, "813a4Qrn7BJfZku1fvubAaf", "SbSkinSprite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSkinSprite = exports('default', (_dec = ccclass('SbSkinSprite'), _dec2 = property(SpriteFrame), _dec3 = property(Color), _dec4 = property(Color), _dec5 = property(Color), _dec6 = property(Color), _dec7 = property(Color), _dec8 = property([CCFloat]), _dec9 = property([CCFloat]), _dec10 = property([Size]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSkinSprite, _Component);

        function SbSkinSprite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listSpriteFrame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resetNodeColor", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resetNodeColor4", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "resetNodeColor5", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "color1", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "color2", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "color3", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "color4", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "color5", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColor1", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColor2", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColor3", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColor4", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "setColor5", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posXBonus", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "posYBonus", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sizeCustom", _descriptor17, _assertThisInitialized(_this));

          _this.spriteFrame = null;
          return _this;
        }

        var _proto = SbSkinSprite.prototype;

        _proto.onLoad = function onLoad() {
          this.spriteFrame = this.node.getComponent(Sprite);
          var id = SbConfigManager.getInstance().GetSkinCurrent();

          if (this.spriteFrame !== null) {
            if (id >= 0) {
              this.ChangeSkin(id);
            }
          }
        };

        _proto.ChangeSkin = function ChangeSkin(id) {
          this.spriteFrame.spriteFrame = this.listSpriteFrame[id];

          if (this.resetNodeColor === true && id === SbSkinID.Skin1) {
            this.spriteFrame.color = new Color(255, 255, 255);
          }

          if (this.setColor1 === true && id === SbSkinID.Skin1) {
            this.spriteFrame.color = this.color1;
          }

          if (this.setColor2 === true && id === SbSkinID.Skin2) {
            this.spriteFrame.color = this.color2;
          }

          if (this.setColor3 === true && id === SbSkinID.Skin3) {
            this.spriteFrame.color = this.color3;
          }

          if (this.setColor4 === true && id === SbSkinID.Skin4) {
            this.spriteFrame.color = this.color4;
          }

          if (this.resetNodeColor4 === true && id === SbSkinID.Skin4) {
            this.spriteFrame.color = new Color(255, 255, 255);
          }

          if (this.resetNodeColor5 === true && id === SbSkinID.Skin5) {
            this.spriteFrame.color = new Color(255, 255, 255);
          }

          if (this.setColor5 === true && id === SbSkinID.Skin5) {
            this.spriteFrame.color = this.color5;
          }

          var xBonus = this.posXBonus[id] || 0;
          var yBonus = this.posYBonus[id] || 0;
          var widget = this.node.getComponent(Widget);

          if (xBonus !== 0 || yBonus !== 0) {
            this.node.setPosition(this.node.position.x + xBonus, this.node.position.y + yBonus);

            if (widget) {
              widget.enabled = false;
            }
          }

          var size = this.sizeCustom[id];

          if (size && size !== Size.ZERO) {
            this.node.getComponent(UITransform).setContentSize(size);
          }
        };

        return SbSkinSprite;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "resetNodeColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "resetNodeColor4", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "resetNodeColor5", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "color1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 255, 255);
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "color2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 255, 255);
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "color3", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 255, 255);
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "color4", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 255, 255);
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "color5", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(255, 255, 255);
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "setColor1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "setColor2", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "setColor3", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "setColor4", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "setColor5", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "posXBonus", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "posYBonus", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "sizeCustom", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSoundsManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbStringUtil.ts', './SbConfigManager.ts', './SbBridge.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, game, sys, AudioSource, Game, director, log, resources, AudioClip, error, Component, SbSkinID, SbConfigManager, SbBridge;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      game = module.game;
      sys = module.sys;
      AudioSource = module.AudioSource;
      Game = module.Game;
      director = module.director;
      log = module.log;
      resources = module.resources;
      AudioClip = module.AudioClip;
      error = module.error;
      Component = module.Component;
    }, null, function (module) {
      SbSkinID = module.SbSkinID;
      SbConfigManager = module.default;
    }, function (module) {
      SbBridge = module.SbBridge;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "9f7701FleNAoJOwBhf3vl6o", "SbSoundsManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_SOUND = "enableSound";
      var KEY_MUSIC = "enableBackgroundMusic"; //mute/unmute BGM

      var EVENT_MUTE_UNMUTE_BGM = "INTERGRATE_FORCE_MUTED_SOUND"; //event from SbBridge
      //mute/unmute SFX

      var EVENT_MUTE_UNMUTE_SFX = "INTERGRATE_FORCE_MUTED_SOUNDFX"; //event from SbBridge

      var TOTAL_FILE = 5;
      var SbSoundsManager = exports('default', (_dec = ccclass('SbSoundsManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSoundsManager, _Component);

        function SbSoundsManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.audioSourceMusic = null;
          _this.audioSourceSound = null;
          _this.sfxBetError = null;
          _this.sfxBetOk = null;
          _this.sfxOdd = null;
          _this.sfxClick = null;
          _this.listMusicBg = [];
          _this.count = 0;
          _this.enableSound = true;
          _this.enableBackgroundMusic = true;
          _this.enableMusicBox = false;
          _this.indexMusicCurrent = -1;
          _this.isPlayMusicFinish = false;
          _this.idSkinCurrent = SbSkinID.Skin0;
          _this.currentMusicVolume = 0;
          return _this;
        }

        SbSoundsManager.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbSoundsManager();
          }

          return this.Instance;
        };

        var _proto = SbSoundsManager.prototype;

        _proto.onLoad = function onLoad() {
          SbSoundsManager.Instance = this;
          this.currentMusicVolume = 1;
          game.addPersistRootNode(this.node);
          var tempValue = sys.localStorage.getItem(KEY_SOUND);
          this.enableSound = tempValue !== null && tempValue !== undefined ? tempValue.localeCompare("true") === 0 : true;
          var tempValue2 = sys.localStorage.getItem(KEY_MUSIC);
          this.enableBackgroundMusic = tempValue2 !== null && tempValue2 !== undefined ? tempValue2.localeCompare("true") === 0 : true;
          this.enableMusicBox = SbBridge.IsMusicBoxPlaying();
          this.idSkinCurrent = SbConfigManager.getInstance().GetSkinCurrent();
          var audioSources = this.getComponentsInChildren(AudioSource);
          this.audioSourceMusic = audioSources[0];
          this.audioSourceSound = audioSources[1];
          this.audioSourceMusic.stop();
          this.regiterEventListener();
        };

        _proto.Clean = function Clean() {
          if (this.node != null) {
            game.removePersistRootNode(this.node);
            this.node.removeFromParent();
          }

          this.audioSourceMusic.stop();
          this.indexMusicCurrent = -1;
          this.removeEventListener();
        };

        _proto.preloadSounds = function preloadSounds(callBack) {
          var _this2 = this;

          var folderPath = this.getFolderSfxBySkin(this.idSkinCurrent);
          var sfxClickPath = "Sportsbook/sounds/" + folderPath + "/sfx_click";
          this.loadAudioClip(sfxClickPath, function (audioClip) {
            _this2.sfxClick = audioClip;

            _this2.isLoadDone(callBack);
          });
          var sfxBetErrorPath = "Sportsbook/sounds/" + folderPath + "/sfx-bet-error";
          this.loadAudioClip(sfxBetErrorPath, function (audioClip) {
            _this2.sfxBetError = audioClip;

            _this2.isLoadDone(callBack);
          });
          var sfxBetOkPath = "Sportsbook/sounds/" + folderPath + "/sfx-bet-ok";
          this.loadAudioClip(sfxBetOkPath, function (audioClip) {
            _this2.sfxBetOk = audioClip;

            _this2.isLoadDone(callBack);
          });
          var sfxOddPath = "Sportsbook/sounds/" + folderPath + "/sfx-odd";
          this.loadAudioClip(sfxOddPath, function (audioClip) {
            _this2.sfxOdd = audioClip;

            _this2.isLoadDone(callBack);
          });
          this.listMusicBg = [];
          this.loadAudioClip("Sportsbook/sounds/music/Sportsbook-BGM", function (audioClip) {
            _this2.listMusicBg.push(audioClip);

            _this2.isLoadDone(callBack);

            _this2.doneLoadFirstMusicBg(callBack);
          });
        };

        _proto.regiterEventListener = function regiterEventListener() {
          game.on(Game.EVENT_HIDE, this.stop, this);
          game.on(Game.EVENT_SHOW, this.resume, this);
          director.on(EVENT_MUTE_UNMUTE_BGM, this.onSettingSoundMusicChange, this);
          director.on(EVENT_MUTE_UNMUTE_SFX, this.onSettingSoundFxChange, this);
        };

        _proto.removeEventListener = function removeEventListener() {
          game.off(Game.EVENT_HIDE, this.stop, this);
          game.off(Game.EVENT_SHOW, this.resume, this);
          director.off(EVENT_MUTE_UNMUTE_BGM, this.onSettingSoundMusicChange, this);
          director.off(EVENT_MUTE_UNMUTE_SFX, this.onSettingSoundFxChange, this);
        };

        _proto.onSettingSoundFxChange = function onSettingSoundFxChange(value) {
          this.enableSound = Boolean(!value);
        };

        _proto.onSettingSoundMusicChange = function onSettingSoundMusicChange(value) {
          log("onSettingSoundMusicChange: " + value);
        };

        _proto.isLoadDone = function isLoadDone(callBack) {
          this.count++;

          if (this.count === TOTAL_FILE) {
            if (callBack !== null) callBack();
          }
        };

        _proto.doneLoadFirstMusicBg = function doneLoadFirstMusicBg(callBack) {// this.loadAudioClip("Sportsbook/sounds/music/Sportsbook-Music 1", (audioClip) => {
          //     this.listMusicBg.push(audioClip);
          //     this.isLoadDone(callBack);
          // });
          // this.loadAudioClip("Sportsbook/sounds/music/Sportsbook-Music 2", (audioClip) => {
          //     this.listMusicBg.push(audioClip);
          //     this.isLoadDone(callBack);
          // });
          // this.loadAudioClip("Sportsbook/sounds/music/Sportsbook-Music 3", (audioClip) => {
          //     this.listMusicBg.push(audioClip);
          //     this.isLoadDone(callBack);
          // });
        };

        _proto.loadAudioClip = function loadAudioClip(url, callback) {
          resources.load(url, AudioClip, function (err, audioClip) {
            if (audioClip === null) {
              error("audioClip null: " + url);
              callback(null);
            } else {
              callback(audioClip);
            }
          }.bind(this));
        };

        _proto.playSfxClick = function playSfxClick() {
          this.playSound(this.sfxClick, false);
        };

        _proto.playSfxBetError = function playSfxBetError() {
          this.playSound(this.sfxBetError, false);
        };

        _proto.playSfxBetOk = function playSfxBetOk() {
          this.playSound(this.sfxBetOk, false);
        };

        _proto.playSfxOdd = function playSfxOdd() {
          this.playSound(this.sfxOdd, false);
        };

        _proto.playMusicBg1 = function playMusicBg1() {
          this.playMusic(this.listMusicBg[0], true);
        };

        _proto.playSound = function playSound(audioClip, loop) {
          if (this.enableSound === false) return;
          this.audioSourceSound.playOneShot(audioClip);
        };

        _proto.playMusic = function playMusic(audioClip, loop) {
          this.audioSourceMusic.loop = loop;
          this.audioSourceMusic.clip = audioClip;
          if (this.enableBackgroundMusic === false || this.enableMusicBox) return;
        };

        _proto.playRandomMusicBg = function playRandomMusicBg() {};

        _proto.update = function update(dt) {};

        _proto.stop = function stop() {
          if (this.enableBackgroundMusic === false) {
            return;
          }
        };

        _proto.resume = function resume() {
          if (this.enableBackgroundMusic === false || this.enableMusicBox) {
            return;
          } // if (sys.os === sys.OS.IOS) {


          this.resetMusic(); // }
        };

        _proto.setMusicVolume = function setMusicVolume(value) {
          this.audioSourceMusic.volume = value;
        };

        _proto.resetMusicVolume = function resetMusicVolume() {
          this.audioSourceMusic.volume = this.currentMusicVolume;
        };

        _proto.resetMusic = function resetMusic() {};

        _proto.getFolderSfxBySkin = function getFolderSfxBySkin(id) {
          switch (id) {
            case SbSkinID.Skin1:
              {
                return 'sfx1';
              }

            case SbSkinID.Skin2:
              {
                return 'sfx2';
              }

            case SbSkinID.Skin3:
              {
                return 'sfx3';
              }
          }

          return 'sfx';
        };

        return SbSoundsManager;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSportManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2df05HPTelJIZCaM86VVYAF", "SbSportManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSportID = exports('SbSportID', /*#__PURE__*/function (SbSportID) {
        SbSportID[SbSportID["Football"] = 1] = "Football";
        SbSportID[SbSportID["None"] = 2] = "None";
        return SbSportID;
      }({}));
      var SbTypeTimeMatch = exports('SbTypeTimeMatch', /*#__PURE__*/function (SbTypeTimeMatch) {
        SbTypeTimeMatch[SbTypeTimeMatch["None"] = 0] = "None";
        SbTypeTimeMatch[SbTypeTimeMatch["Early"] = 1] = "Early";
        SbTypeTimeMatch[SbTypeTimeMatch["Live"] = 2] = "Live";
        SbTypeTimeMatch[SbTypeTimeMatch["Today"] = 3] = "Today";
        SbTypeTimeMatch[SbTypeTimeMatch["All"] = 4] = "All";
        SbTypeTimeMatch[SbTypeTimeMatch["CustomDate"] = 5] = "CustomDate";
        SbTypeTimeMatch[SbTypeTimeMatch["SearchResult"] = 6] = "SearchResult";
        return SbTypeTimeMatch;
      }({})); //time trận đấu lộn xộn vì data từ kết quả tìm kiếm

      var SbSportManager = exports('default', (_dec = ccclass('SbSportManager'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSportManager, _Component);

        function SbSportManager() {
          return _Component.apply(this, arguments) || this;
        }

        SbSportManager.ConvertSportIdToName = function ConvertSportIdToName(id) {
          if (id == SbSportID.Football) return "Bóng Đá";
          return "Sport";
        };

        SbSportManager.ConvertStringToTypeTimeMatch = function ConvertStringToTypeTimeMatch(str) {
          if (str.localeCompare("0") == 0) return SbTypeTimeMatch.None;else if (str.localeCompare("1") == 0) return SbTypeTimeMatch.Early;else if (str.localeCompare("2") == 0) return SbTypeTimeMatch.Live;else if (str.localeCompare("3") == 0) return SbTypeTimeMatch.Today;else if (str.localeCompare("4") == 0) return SbTypeTimeMatch.SearchResult;else if (str.localeCompare("5") == 0) return SbTypeTimeMatch.All;
          return SbTypeTimeMatch.Today;
        };

        return SbSportManager;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbStandings.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbItemStandings.ts', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Node, Label, instantiate, Component, SbItemStandings, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      SbItemStandings = module.SbItemStandings;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "7e150aYO3lCYLEKmetnJJKX", "SbStandings", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbStandings = exports('SbStandings', (_dec = ccclass('SbStandings'), _dec2 = property(Prefab), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbStandings, _Component);

        function SbStandings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "itemStandingPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentAllItem", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeTitle", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbGroupName", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbStandings.prototype;

        _proto.InitData = function InitData(data, groupNameDefault) {
          if (groupNameDefault === void 0) {
            groupNameDefault = "";
          }

          if (data.standings.length == 0) {
            return;
          }

          if (data.group_name != null && data.group_name != undefined && data.group_name != 0) {
            var groupString = SbLocalizationManager.getInstance().GetKeyValue("group") + " " + data.group_name;

            if (data.stage_name && data.stage_name.length > 0) {
              this.lbGroupName.string = data.stage_name + " - " + groupString;
            } else {
              this.lbGroupName.string = groupString;
            }
          } else if (data.stage_name && data.stage_name.length > 0) {
            this.lbGroupName.string = data.stage_name;
          } else if (groupNameDefault.length > 0) {
            this.lbGroupName.string = groupNameDefault;
          } else if (this.nodeTitle != null) {
            this.nodeTitle.active = false;
          }

          for (var i = 0; i < data.standings.length; i++) {
            var element = data.standings[i];
            var standings = instantiate(this.itemStandingPrefab).getComponent(SbItemStandings);
            standings.node.parent = this.nodeParentAllItem;
            standings.InitData(data.standings[i], i + 1);
          }
        };

        return SbStandings;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemStandingPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentAllItem", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeTitle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbGroupName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbStringUtil.ts", ['cc'], function (exports) {
  var cclegacy, log, sys;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      sys = module.sys;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b87a7PazY9P1LS8qsH6fx3x", "SbStringUtil", undefined);

      var SbStringUtil = exports('default', /*#__PURE__*/function () {
        function SbStringUtil() {}

        SbStringUtil.formatMoneyNumber = function formatMoneyNumber(money, pow) {
          if (pow === void 0) {
            pow = 2;
          } // cc.log(money);


          var sign = 1;
          var value = money;

          if (money < 0) {
            sign = -1;
            value = value * -1;
          }

          var format = "";

          if (value >= 1000000000.0) {
            value /= 1000000000.0;
            format = "B";
          } else if (value >= 1000000.0) {
            value /= 1000000.0;
            format = "M";
          } else if (value >= 1000.0) {
            value /= 1000.0;
            format = "K";
          }

          value = Math.floor(value * Math.pow(10, pow) + 0.00000001) / Math.pow(10, pow) * sign;
          return value + format;
        };

        SbStringUtil.formatMoneyNumber2 = function formatMoneyNumber2(money) {
          // cc.log(money);
          var sign = 1;
          var value = money;

          if (money < 0) {
            sign = -1;
            value = value * -1;
          }

          var format = "";

          if (value >= 1000000000.0) {
            value /= 1000000000.0;
            format = " Tỷ";
          } else if (value >= 1000000.0) {
            value /= 1000000.0;
            format = " Triệu";
          } else if (value >= 1000.0) {
            value /= 1000.0;
            format = " Ngàn";
          }

          value = Math.floor(value * 100 + 0.00000001) / 100 * sign;
          return value + format;
        };

        SbStringUtil.formatMoneyNumberWithDot = function formatMoneyNumberWithDot(money) {
          var negative = false;

          if (money < 0) {
            money *= -1;
            negative = true;
          }

          if (money < 1000) {
            var temp = Math.floor(money).toString();

            if (negative == true) {
              temp = "-" + temp;
            }

            return temp;
          }

          var output = "";
          var moneyStr = Math.floor(money).toString();

          for (var i = moneyStr.length; i >= 0; i -= 3) {
            if (i - 3 <= 0) {
              output = moneyStr.slice(0, i) + output;
              break;
            } else {
              output = "." + moneyStr.slice(i - 3, i) + output;
            }
          }

          if (negative == true) output = "-" + output;
          return output;
        };

        SbStringUtil.formatMoneyNumberWithComma = function formatMoneyNumberWithComma(money, numberInFixedPoint) {
          if (numberInFixedPoint === void 0) {
            numberInFixedPoint = 1;
          }

          var negative = false;

          if (money < 0) {
            money *= -1;
            negative = true;
          }

          if (money < 1000) {
            var temp = Number(money).toFixed(numberInFixedPoint).toString();
            if (Number.isInteger(money)) temp = Math.floor(money).toString();

            if (negative == true) {
              temp = "-" + temp;
            }

            return temp;
          }

          var output = "";
          var moneyStr = Number(money).toFixed(numberInFixedPoint).toString();
          if (Number.isInteger(money)) moneyStr = Math.floor(money).toString();
          var indexDot = moneyStr.indexOf(".");
          var indexStart = moneyStr.length;
          if (indexDot < 0) indexDot = 0;else indexStart = moneyStr.length - (moneyStr.length - indexDot);

          for (var i = indexStart; i >= 0; i -= 3) {
            if (i - 3 <= 0) {
              output = moneyStr.slice(0, i) + output;
              break;
            } else {
              output = "," + moneyStr.slice(i - 3, i) + output;
            }
          }

          if (indexDot > 0) output += moneyStr.slice(-(moneyStr.length - indexDot));
          if (negative == true) output = "-" + output;
          return output;
        };

        SbStringUtil.formatNumber = function formatNumber(money) {
          //    cc.log(money + " " + money.toFixed(2));
          //  return money.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'); ;
          return money.toLocaleString();
        };

        SbStringUtil.getRandomInt = function getRandomInt(max) {
          return Math.floor(Math.random() * Math.floor(max));
        };

        SbStringUtil.getRandomFloat = function getRandomFloat(max) {
          return Math.random() * max;
        };

        SbStringUtil.getRandomArbitrary = function getRandomArbitrary(min, max) {
          return Math.random() * (max - min) + min;
        };

        SbStringUtil.checkVec2Equal = function checkVec2Equal(pos1, pos2) {
          if (pos1.x === pos2.x && pos1.y === pos2.y) {
            return true;
          }

          return false;
        };

        SbStringUtil.isNullOrEmpty = function isNullOrEmpty(text) {
          if (text === undefined || text === null || text === "" || text.length === 0) {
            return true;
          }

          return false;
        };

        SbStringUtil.getQueryStringValue = function getQueryStringValue(key) {
          return decodeURIComponent(window.location.search.replace(new RegExp("^(?:.*[&\\?]" + encodeURIComponent(key).replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1"));
        };

        SbStringUtil.filterTenDangNhap = function filterTenDangNhap(text) {
          return text.replace(/[^A-Za-z0-9]/g, "");
        };

        SbStringUtil.isContainSpecialCharacter = function isContainSpecialCharacter(text) {
          //cc.log("text.search: " + text.search(/[ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýỲỸỳỹỶỷỴỵựỰửỬữỮừỪứỨưƯụỤủỦũŨợỢởỞỡỠờỜớỚơƠộỘổỔỗỖồỒốỐọỌỏỎịỊỉỈĩĨệỆểỂễỄềỀếẾẹẸẻẺẽẼặẶẳẲẵẴằẰắẮăĂậẬẩẨẫẪầẦấẤạẠảẢđĐ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/g));
          if (text.search(/[ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýỲỸỳỹỶỷỴỵựỰửỬữỮừỪứỨưƯụỤủỦũŨợỢởỞỡỠờỜớỚơƠộỘổỔỗỖồỒốỐọỌỏỎịỊỉỈĩĨệỆểỂễỄềỀếẾẹẸẻẺẽẼặẶẳẲẵẴằẰắẮăĂậẬẩẨẫẪầẦấẤạẠảẢđĐ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/g) >= 0) {
            return true;
          }

          return false;
        };

        SbStringUtil.removeSpecialCharacter = function removeSpecialCharacter(text, isHaveSpace) {
          if (isHaveSpace === void 0) {
            isHaveSpace = true;
          }

          if (isHaveSpace) {
            return text.replace(/[^A-Za-z0-9ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýỲỸỳỹỶỷỴỵựỰửỬữỮừỪứỨưƯụỤủỦũŨợỢởỞỡỠờỜớỚơƠộỘổỔỗỖồỒốỐọỌỏỎịỊỉỈĩĨệỆểỂễỄềỀếẾẹẸẻẺẽẼặẶẳẲẵẴằẰắẮăĂậẬẩẨẫẪầẦấẤạẠảẢđĐ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/g, "");
          } else {
            return text.replace(/[^A-Za-z0-9ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýỲỸỳỹỶỷỴỵựỰửỬữỮừỪứỨưƯụỤủỦũŨợỢởỞỡỠờỜớỚơƠộỘổỔỗỖồỒốỐọỌỏỎịỊỉỈĩĨệỆểỂễỄềỀếẾẹẸẻẺẽẼặẶẳẲẵẴằẰắẮăĂậẬẩẨẫẪầẦấẤạẠảẢđĐ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/g, "");
          }
        };

        SbStringUtil.filterForDisplayName = function filterForDisplayName(text) {
          return text.replace(/[^A-Za-z0-9 ÀÁÂÃÈÉÊÌÍÒÓÔÕÙÚÝàáâãèéêìíòóôõùúýỲỸỳỹỶỷỴỵựỰửỬữỮừỪứỨưƯụỤủỦũŨợỢởỞỡỠờỜớỚơƠộỘổỔỗỖồỒốỐọỌỏỎịỊỉỈĩĨệỆểỂễỄềỀếẾẹẸẻẺẽẼặẶẳẲẵẴằẰắẮăĂậẬẩẨẫẪầẦấẤạẠảẢđĐ]/g, "");
        };

        SbStringUtil.filterNumber = function filterNumber(text) {
          return text.replace(/[.]/g, "");
        };

        SbStringUtil.getNumBer = function getNumBer(textNum) {
          log(" asdd " + textNum.indexOf("."));

          while (textNum.indexOf(".") >= 0) {
            textNum = textNum.replace(".", "");
          }

          var reruld = parseInt(textNum);
          log(textNum + " asdd " + reruld);
          return reruld;
        };

        SbStringUtil.getStringofNumBer = function getStringofNumBer(num) {
          if (num <= 9) {
            return "0" + num;
          }

          return num.toString();
        };

        SbStringUtil.ParseIntBanPhimMobile = function ParseIntBanPhimMobile(textString, isKetsat) {
          if (isKetsat === void 0) {
            isKetsat = false;
          }

          var value = 0;

          if (sys.platform === sys.Platform.MOBILE_BROWSER || sys.platform === sys.Platform.DESKTOP_BROWSER) {
            value = parseInt(textString);
          } else {
            //neu mobile thi bo dau cham moi parse duoc
            value = parseInt(textString.replace('.', ''));

            if (textString.indexOf(".") >= 0 && isKetsat) {
              value = parseInt(textString.split('.')[0]);
            }
          }

          return value;
        };

        SbStringUtil.removeComma = function removeComma(str) {
          var strMoney = str.replace(/,/g, "");
          if (strMoney == undefined || strMoney == null) strMoney = "";
          return strMoney;
        };

        SbStringUtil.formatMoneyNumberWithColomAndDot = function formatMoneyNumberWithColomAndDot(amount) {
          if (Number(amount) >= 1000) {
            var split = amount.split(".");
            var part1 = "";
            var part1Number = Number(split[0]);

            if (part1Number >= 1000) {
              part1 = SbStringUtil.formatMoneyNumberWithComma(part1Number);
            }

            amount = part1;
            if (split[1] != undefined) amount += "." + split[1];
          }

          return amount;
        };

        SbStringUtil.formatTime = function formatTime(time) {
          return ("0" + time).slice(-2);
        };

        SbStringUtil.formatTimes = function formatTimes(hours, minutes, seconds) {
          return SbStringUtil.formatTime(hours) + ":" + SbStringUtil.formatTime(minutes) + ":" + SbStringUtil.formatTime(seconds);
        };

        SbStringUtil.formatString = function formatString(str) {
          for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            params[_key - 1] = arguments[_key];
          }

          var regexp = /{(\d+)}/g;
          return str.replace(regexp, function (match, number) {
            return number < params.length && typeof params[number] != "undefined" ? params[number] : match;
          });
        };

        return SbStringUtil;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbSummaryEvent.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbDefine.ts', './SbPlayer.ts', './SbSkinListSprite.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Label, Sprite, Color, Component, SbCompetitorType, SBCardType, SbPlayer, SbSkinListSprite, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SbCompetitorType = module.SbCompetitorType;
      SBCardType = module.SBCardType;
    }, function (module) {
      SbPlayer = module.SbPlayer;
    }, function (module) {
      SbSkinListSprite = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "0ed2bIeU7lHYa7/HuamQ/Bd", "SbSummaryEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSummaryEvent = exports('SbSummaryEvent', (_dec = ccclass('SbSummaryEvent'), _dec2 = property(Node), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Label), _dec8 = property(Label), _dec9 = property(Sprite), _dec10 = property(Sprite), _dec11 = property(SbSkinListSprite), _dec12 = property(Color), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSummaryEvent, _Component);

        function SbSummaryEvent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bg", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTime", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbScore", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeInfoLeft", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeInfoRight", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTeamNameLeft", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbTeamNameRight", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconLeft", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconRight", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinListIcon", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colorBlur", _descriptor11, _assertThisInitialized(_this));

          _this.id = 0;
          _this.type = "";
          return _this;
        }

        var _proto = SbSummaryEvent.prototype;

        _proto.SetID = function SetID(id, type) {
          this.id = id;
          this.type = type;
        };

        _proto.GetID = function GetID() {
          return this.id;
        };

        _proto.GetType = function GetType() {
          return this.type;
        };

        _proto.InitData = function InitData(data) {
          this.resetUI();
          this.lbTime.string = data.match_time + "'";

          if (data.type.localeCompare(this.type) == 0 && data.id == this.id) {
            this.updateData(data);
          } // {
          //     "id": 1566845308,
          //     "type": "yellow_card",
          //     "time": "2023-10-14T22:52:06+00:00",
          //     "match_time": 45,
          //     "competitor": "away",
          //     "players": [
          //         {
          //             "id": "sr:player:1407307",
          //             "name": "Rabino, Renzo"
          //         }
          //     ],
          //     "stoppage_time": 3,
          //     "stoppage_time_clock": "3:08",
          //     "period": 1,
          //     "period_type": "regular_period"
          // }
          // {
          //     "id": 1566861530,
          //     "type": "score_change",
          //     "time": "2023-10-14T23:31:22+00:00",
          //     "match_time": 65,
          //     "match_clock": "64:35",
          //     "competitor": "home",
          //     "players": [
          //         {
          //             "id": "sr:player:1947684",
          //             "name": "Fonseca, Matias",
          //             "type": "scorer"
          //         },
          //         {
          //             "id": "sr:player:900340",
          //             "name": "Andrade, Tomas",
          //             "type": "assist"
          //         }
          //     ],
          //     "x": 91,
          //     "y": 57,
          //     "period": 2,
          //     "period_type": "regular_period",
          //     "home_score": 1,
          //     "away_score": 0
          // }{
          //     "id": 1566833398,
          //     "type": "substitution",
          //     "time": "2023-10-14T22:23:40+00:00",
          //     "match_time": 20,
          //     "match_clock": "19:41",
          //     "competitor": "home",
          //     "players": [
          //         {
          //             "id": "sr:player:1549503",
          //             "name": "Veglio, Bruno",
          //             "type": "substituted_out"
          //         },
          //         {
          //             "id": "sr:player:2123066",
          //             "name": "Rolon, Kevin",
          //             "type": "substituted_in"
          //         }
          //     ],
          //     "period": 1,
          //     "period_type": "regular_period"
          // }

        };

        _proto.resetUI = function resetUI() {
          this.lbTime.string = "";

          for (var i = 0; i < this.lbTeamNameLeft.length; i++) this.lbTeamNameLeft[i].node.active = false;

          for (var _i = 0; _i < this.lbTeamNameRight.length; _i++) this.lbTeamNameRight[_i].node.active = false;

          for (var _i2 = 0; _i2 < this.iconLeft.length; _i2++) this.iconLeft[_i2].node.active = false;

          for (var _i3 = 0; _i3 < this.iconRight.length; _i3++) this.iconRight[_i3].node.active = false;
        };

        _proto.updateData = function updateData(data) {
          var type = data.type;
          var competitor = data.competitor.localeCompare("away") == 0 ? SbCompetitorType.Away : SbCompetitorType.Home;

          if (type.localeCompare("yellow_card") == 0) {
            this.setTypeCard(SBCardType.Yellow, competitor, data);
          } else if (type.localeCompare("red_card") == 0) {
            this.setTypeCard(SBCardType.Red, competitor, data);
          } else if (type.localeCompare("score_change") == 0) {
            this.setScore(competitor, data);
          } else if (type.localeCompare("substitution") == 0) {
            this.setSubstitution(competitor, data);
          }
        };

        _proto.setSubstitution = function setSubstitution(competitor, data) {
          if (data.hasOwnProperty("players") == false) {
            return;
          }

          var indexIconIn = 8;
          var indexIconOut = 7;
          var indexPlayerIn = 1;
          var indexPlayerOut = 0;

          if (data.players[0].type.localeCompare("substituted_out") == 0) {
            indexPlayerIn = 1;
            indexPlayerOut = 0;
          } else {
            indexPlayerIn = 0;
            indexPlayerOut = 1;
          }

          if (competitor == SbCompetitorType.Home) {
            this.nodeInfoLeft[indexPlayerIn].active = true;
            this.iconLeft[indexPlayerIn].node.active = true;
            this.iconLeft[indexPlayerIn].spriteFrame = this.listIcon[indexIconOut];
            this.lbTeamNameLeft[indexPlayerIn].node.active = true;
            this.lbTeamNameLeft[indexPlayerIn].string = SbPlayer.ShortPlayerName(data.players[indexPlayerIn].name);
            this.nodeInfoLeft[indexPlayerOut].active = true;
            this.iconLeft[indexPlayerOut].node.active = true;
            this.iconLeft[indexPlayerOut].spriteFrame = this.listIcon[indexIconIn];
            this.lbTeamNameLeft[indexPlayerOut].node.active = true;
            this.lbTeamNameLeft[indexPlayerOut].color = this.colorBlur;
            this.lbTeamNameLeft[indexPlayerOut].string = SbPlayer.ShortPlayerName(data.players[indexPlayerOut].name);
          } else {
            this.nodeInfoRight[indexPlayerIn].active = true;
            this.iconRight[indexPlayerIn].node.active = true;
            this.iconRight[indexPlayerIn].spriteFrame = this.listIcon[indexIconOut];
            this.lbTeamNameRight[indexPlayerIn].node.active = true;
            this.lbTeamNameRight[indexPlayerIn].string = SbPlayer.ShortPlayerName(data.players[indexPlayerIn].name);
            this.nodeInfoRight[indexPlayerOut].active = true;
            this.iconRight[indexPlayerOut].node.active = true;
            this.iconRight[indexPlayerOut].spriteFrame = this.listIcon[indexIconIn];
            this.lbTeamNameRight[indexPlayerOut].node.active = true;
            this.lbTeamNameRight[indexPlayerOut].color = this.colorBlur;
            this.lbTeamNameRight[indexPlayerOut].string = SbPlayer.ShortPlayerName(data.players[indexPlayerOut].name);
          }
        };

        _proto.setScore = function setScore(competitor, data) {
          this.lbScore.node.active = true;
          this.lbScore.string = data.home_score + "-" + data.away_score;
          var isOwnGoal = data["method"] == "own_goal";
          var indexIcon = isOwnGoal ? 10 : 3;

          if (competitor == SbCompetitorType.Home) {
            this.nodeInfoLeft[0].active = true;
            this.iconLeft[0].node.active = true;
            this.iconLeft[0].spriteFrame = this.listIcon[indexIcon];

            if (this.iconLeft[0].node.children[0]) {
              this.iconLeft[0].node.children[0].active = isOwnGoal;
            }

            if (data.hasOwnProperty("players")) {
              this.lbTeamNameLeft[0].node.active = true;
              this.lbTeamNameLeft[0].string = SbPlayer.ShortPlayerName(data.players[0].name);
            }
          } else {
            this.nodeInfoRight[0].active = true;
            this.iconRight[0].node.active = true;
            this.iconRight[0].spriteFrame = this.listIcon[indexIcon];

            if (this.iconRight[0].node.children[0]) {
              this.iconRight[0].node.children[0].active = isOwnGoal;
            }

            if (data.hasOwnProperty("players")) {
              this.lbTeamNameRight[0].node.active = true;
              this.lbTeamNameRight[0].string = SbPlayer.ShortPlayerName(data.players[0].name);
            }
          }
        };

        _proto.setTypeCard = function setTypeCard(cardType, competitor, data) {
          var indexCard = cardType == SBCardType.Yellow ? 0 : 1;

          if (competitor == SbCompetitorType.Home) {
            this.nodeInfoLeft[0].active = true;
            this.iconLeft[0].node.active = true;
            this.iconLeft[0].spriteFrame = this.listIcon[indexCard];

            if (data.hasOwnProperty("players")) {
              this.lbTeamNameLeft[0].node.active = true;
              this.lbTeamNameLeft[0].string = SbPlayer.ShortPlayerName(data.players[0].name);
            }
          } else {
            this.nodeInfoRight[0].active = true;
            this.iconRight[0].node.active = true;
            this.iconRight[0].spriteFrame = this.listIcon[indexCard];

            if (data.hasOwnProperty("players")) {
              this.lbTeamNameRight[0].node.active = true;
              this.lbTeamNameRight[0].string = SbPlayer.ShortPlayerName(data.players[0].name);
            }
          }
        };

        _createClass(SbSummaryEvent, [{
          key: "listIcon",
          get: function get() {
            var result = [];

            if (this.skinListIcon) {
              result = this.skinListIcon.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbSummaryEvent;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbTime", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbScore", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodeInfoLeft", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeInfoRight", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbTeamNameLeft", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "lbTeamNameRight", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "iconLeft", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "iconRight", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "skinListIcon", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "colorBlur", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color(105, 104, 104, 255);
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabFormation.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbPlayer.ts', './SbTabItem.ts', './SbTypeDefine.ts', './SbItemSubPlayer.ts', './SbItemSubstitutions.ts', './SbItemInjury.ts', './SbSoundsManager.ts', './SbSkinListColor.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, Toggle, instantiate, log, SbPlayer, SbTabItem, CompetitorEnum, TimeLineType, PlayerTypeEnum, SbPlayerInfo, SbItemSubPlayer, SbItemSubstitutions, SbItemInjury, SbSoundsManager, SbSkinListColor, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Toggle = module.Toggle;
      instantiate = module.instantiate;
      log = module.log;
    }, function (module) {
      SbPlayer = module.SbPlayer;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      CompetitorEnum = module.CompetitorEnum;
      TimeLineType = module.TimeLineType;
      PlayerTypeEnum = module.PlayerTypeEnum;
      SbPlayerInfo = module.SbPlayerInfo;
    }, function (module) {
      SbItemSubPlayer = module.SbItemSubPlayer;
    }, function (module) {
      SbItemSubstitutions = module.SbItemSubstitutions;
    }, function (module) {
      SbItemInjury = module.SbItemInjury;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23;

      cclegacy._RF.push({}, "827f43n98xBSqAXdSeXbew3", "SbTabFormation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabFormation = exports('SbTabFormation', (_dec = ccclass('SbTabFormation'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(SbPlayer), _dec7 = property(SbPlayer), _dec8 = property(SbPlayer), _dec9 = property(SbPlayer), _dec10 = property(SbPlayer), _dec11 = property(Toggle), _dec12 = property(Toggle), _dec13 = property(SbSkinListColor), _dec14 = property({
        group: 'Substitution',
        type: Node
      }), _dec15 = property({
        group: 'Substitution',
        type: Node
      }), _dec16 = property({
        group: 'Substitution',
        type: Node
      }), _dec17 = property({
        group: 'SubPlayer',
        type: Node
      }), _dec18 = property({
        group: 'SubPlayer',
        type: Node
      }), _dec19 = property({
        group: 'SubPlayer',
        type: Node
      }), _dec20 = property({
        group: 'Injury',
        type: Node
      }), _dec21 = property({
        group: 'Injury',
        type: Node
      }), _dec22 = property({
        group: 'Injury',
        type: Node
      }), _dec23 = property({
        group: 'Coach',
        type: Label
      }), _dec24 = property({
        group: 'Coach',
        type: Label
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabFormation, _SbTabItem);

        function SbTabFormation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbHomeName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbFormat", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listNodeFormation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listGoalkeeper", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listDefender", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listMidfielder", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listStriker0", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listStriker1", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleHome", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "toggleAway", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinTextTitleColor", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupPanelSubstitutions", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameSubstitutions", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tempSubstitutions", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupPanelSubPlayer", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameSubPlayer", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tempSubPlayer", _descriptor18, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "groupPanelInjury", _descriptor19, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "frameInjury", _descriptor20, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tempInjury", _descriptor21, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbHomeCoach", _descriptor22, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbAwayCoach", _descriptor23, _assertThisInitialized(_this));

          _this.homeData = null;
          _this.awayData = null;
          _this.timeLineData = null;
          _this.mapPlayerInfo = new Map();
          _this.matchId = "";
          _this.isAtHome = false;
          _this.dataFake = {
            "0": {
              "id": "sr:competitor:3240",
              "name": "Montevideo Wanderers",
              "country": "Uruguay",
              "country_code": "URY",
              "abbreviation": "WAN",
              "qualifier": "home",
              "gender": "male",
              "jersey": {
                "type": "home",
                "base": "ffffff",
                "sleeve": "ffffff",
                "number": "000000",
                "squares": false,
                "stripes": true,
                "stripes_color": "000000",
                "horizontal_stripes": false,
                "split": false,
                "shirt_type": "short_sleeves"
              },
              "manager": {
                "id": "sr:player:15176",
                "name": "Pacheco, Antonio",
                "date_of_birth": "1976-04-11",
                "nationality": "Uruguay",
                "country_code": "URY"
              },
              "main_team": [[{
                "id": "sr:player:158643",
                "name": "da Silva, Jhonny",
                "type": "goalkeeper",
                "date_of_birth": "1991-08-21",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 183,
                "jersey_number": 25,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 1
              }], [{
                "id": "sr:player:2146042",
                "name": "Morales, Lucas",
                "type": "defender",
                "date_of_birth": "1999-11-25",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 183,
                "jersey_number": 6,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 2
              }, {
                "id": "sr:player:246129",
                "name": "Formiliano, Fabricio",
                "type": "defender",
                "date_of_birth": "1993-01-14",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 185,
                "weight": 85,
                "jersey_number": 13,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 3
              }, {
                "id": "sr:player:249873",
                "name": "Bontempo, Leonel",
                "type": "defender",
                "date_of_birth": "1992-11-01",
                "nationality": "Argentina",
                "country_code": "ARG",
                "height": 172,
                "weight": 64,
                "jersey_number": 27,
                "preferred_foot": "left",
                "starter": true,
                "played": true,
                "order": 4
              }, {
                "id": "sr:player:871072",
                "name": "Vega, Gonzalo",
                "type": "midfielder",
                "date_of_birth": "1992-06-29",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 174,
                "weight": 70,
                "jersey_number": 7,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 5
              }], [{
                "id": "sr:player:162579",
                "name": "Freitas, Gonzalo",
                "type": "midfielder",
                "date_of_birth": "1991-10-02",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 186,
                "weight": 78,
                "jersey_number": 5,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 6
              }, {
                "id": "sr:player:1706785",
                "name": "Alberti, Jose",
                "type": "midfielder",
                "date_of_birth": "1997-03-29",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 172,
                "jersey_number": 16,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 7
              }, {
                "id": "sr:player:2123066",
                "name": "Rolon, Kevin",
                "type": "midfielder",
                "date_of_birth": "2001-03-02",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 171,
                "weight": 67,
                "jersey_number": 21,
                "preferred_foot": "left",
                "starter": true,
                "played": true,
                "order": 8
              }, {
                "id": "sr:player:42465",
                "name": "Viudez, Tabare",
                "type": "midfielder",
                "date_of_birth": "1989-09-08",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 170,
                "weight": 70,
                "jersey_number": 19,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 9
              }], [{
                "id": "sr:player:1947684",
                "name": "Fonseca, Matias",
                "type": "forward",
                "date_of_birth": "2001-03-12",
                "nationality": "Italy",
                "country_code": "ITA",
                "jersey_number": 10,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 10
              }, {
                "id": "sr:player:253811",
                "name": "Garcia, Emiliano",
                "type": "defender",
                "date_of_birth": "1989-11-26",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 184,
                "weight": 79,
                "jersey_number": 23,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 11
              }]],
              "reserve_team": [{
                "id": "sr:player:1017909",
                "name": "Silveira, Mauro",
                "type": "goalkeeper",
                "date_of_birth": "2000-05-06",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 187,
                "weight": 88,
                "jersey_number": 1,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:2562105",
                "name": "Martinez, Federico",
                "type": "defender",
                "date_of_birth": "2003-05-19",
                "nationality": "Uruguay",
                "country_code": "URY",
                "jersey_number": 2
              }, {
                "id": "sr:player:2136452",
                "name": "Suarez, Martin",
                "type": "defender",
                "date_of_birth": "2004-06-16",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 178,
                "weight": 67,
                "jersey_number": 17,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:2772813",
                "name": "Guzman, Santiago",
                "type": "forward",
                "date_of_birth": "2004-03-08",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 177,
                "weight": 79,
                "jersey_number": 26,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:2319385",
                "name": "Ferreira, Nicolas",
                "type": "forward",
                "date_of_birth": "2002-02-07",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 173,
                "weight": 68,
                "jersey_number": 20,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:1109689",
                "name": "Milan, Facundo",
                "type": "forward",
                "date_of_birth": "2001-02-03",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 182,
                "weight": 81,
                "jersey_number": 14,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:1549503",
                "name": "Veglio, Bruno",
                "type": "midfielder",
                "date_of_birth": "1998-02-12",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 164,
                "weight": 61,
                "jersey_number": 8,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:2780627",
                "name": "Crucci Picardo, Esteban Nahuel",
                "type": "forward",
                "date_of_birth": "2006-07-05",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 180,
                "jersey_number": 29
              }, {
                "id": "sr:player:2562107",
                "name": "Albarracin, Agustin",
                "type": "forward",
                "date_of_birth": "2005-08-29",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 174,
                "jersey_number": 11
              }, {
                "id": "sr:player:2327379",
                "name": "Garcia, Ismael",
                "type": "defender",
                "date_of_birth": "2001-09-24",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 181,
                "weight": 71,
                "jersey_number": 3,
                "preferred_foot": "right"
              }],
              "formation": {
                "type": "4-4-2"
              }
            },
            "1": {
              "id": "sr:competitor:25009",
              "name": "Cerro Largo FC",
              "country": "Uruguay",
              "country_code": "URY",
              "abbreviation": "CLA",
              "qualifier": "away",
              "gender": "male",
              "jersey": {
                "type": "home",
                "base": "ffffff",
                "sleeve": "fafafa",
                "number": "000000",
                "squares": false,
                "stripes": false,
                "horizontal_stripes": false,
                "split": false,
                "shirt_type": "short_sleeves",
                "sleeve_detail": "0000ff"
              },
              "manager": {
                "id": "sr:player:10240",
                "name": "Silva, Bruno",
                "date_of_birth": "1980-03-29",
                "nationality": "Uruguay",
                "country_code": "URY"
              },
              "main_team": [[{
                "id": "sr:player:1478442",
                "name": "Formento, Rodrigo",
                "type": "goalkeeper",
                "date_of_birth": "1999-09-25",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 185,
                "weight": 76,
                "jersey_number": 1,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 1
              }], [{
                "id": "sr:player:1952610",
                "name": "Prado, Axel",
                "type": "defender",
                "date_of_birth": "2002-11-17",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 185,
                "weight": 76,
                "jersey_number": 2,
                "preferred_foot": "left",
                "starter": true,
                "played": true,
                "order": 2
              }, {
                "id": "sr:player:1431117",
                "name": "Ferrares, Brian",
                "type": "defender",
                "date_of_birth": "2000-03-01",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 180,
                "jersey_number": 4,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 3
              }, {
                "id": "sr:player:1110815",
                "name": "Silveira, Hugo",
                "type": "forward",
                "date_of_birth": "1993-05-23",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 187,
                "weight": 72,
                "jersey_number": 9,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 4
              }, {
                "id": "sr:player:2058885",
                "name": "Nunez, Sergio",
                "type": "forward",
                "date_of_birth": "2000-06-30",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 178,
                "jersey_number": 11,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 5
              }], [{
                "id": "sr:player:1707961",
                "name": "Furtado, Nahuel",
                "type": "defender",
                "date_of_birth": "1998-03-20",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 168,
                "weight": 63,
                "jersey_number": 13,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 6
              }, {
                "id": "sr:player:2285347",
                "name": "Correa, Lucas",
                "type": "defender",
                "date_of_birth": "1996-05-07",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 180,
                "weight": 73,
                "jersey_number": 14,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 7
              }, {
                "id": "sr:player:339131",
                "name": "Pereira Ferron, Hamilton Miguel",
                "type": "midfielder",
                "date_of_birth": "1987-06-26",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 179,
                "weight": 80,
                "jersey_number": 21,
                "preferred_foot": "left",
                "starter": true,
                "played": true,
                "order": 8
              }], [{
                "id": "sr:player:2546445",
                "name": "Castillo, Enzo",
                "type": "defender",
                "date_of_birth": "2000-12-23",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 171,
                "jersey_number": 23,
                "preferred_foot": "left",
                "starter": true,
                "played": true,
                "order": 9
              }, {
                "id": "sr:player:2368917",
                "name": "Cosentino, Luciano",
                "type": "forward",
                "date_of_birth": "2001-05-18",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 172,
                "weight": 68,
                "jersey_number": 28,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 10
              }, {
                "id": "sr:player:1699829",
                "name": "Acosta, Briam",
                "type": "midfielder",
                "date_of_birth": "1997-09-07",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 178,
                "jersey_number": 30,
                "preferred_foot": "right",
                "starter": true,
                "played": true,
                "order": 11
              }]],
              "reserve_team": [{
                "id": "sr:player:1406459",
                "name": "Estol, Mauro",
                "type": "midfielder",
                "date_of_birth": "1995-01-27",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 179,
                "weight": 71,
                "jersey_number": 7,
                "preferred_foot": "right"
              }, {
                "id": "sr:player:1407307",
                "name": "Rabino, Renzo",
                "type": "defender",
                "date_of_birth": "1997-12-19",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 176,
                "weight": 65,
                "jersey_number": 8,
                "preferred_foot": "left"
              }, {
                "id": "sr:player:1707279",
                "name": "Assis, Sebastian",
                "type": "midfielder",
                "date_of_birth": "1993-03-04",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 171,
                "weight": 65,
                "jersey_number": 15
              }, {
                "id": "sr:player:2666229",
                "name": "De Lucca, Alfonso",
                "type": "forward",
                "date_of_birth": "2005-10-03",
                "nationality": "Uruguay",
                "country_code": "URY",
                "jersey_number": 16
              }, {
                "id": "sr:player:1493469",
                "name": "Garcia, Alan",
                "type": "defender",
                "date_of_birth": "1999-09-14",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 178,
                "weight": 71,
                "jersey_number": 17
              }, {
                "id": "sr:player:961869",
                "name": "Fatecha, Gianlucca",
                "type": "midfielder",
                "date_of_birth": "1998-01-17",
                "nationality": "Paraguay",
                "country_code": "PRY",
                "height": 178,
                "weight": 69,
                "jersey_number": 18
              }, {
                "id": "sr:player:2142956",
                "name": "Santilli, Gino",
                "type": "goalkeeper",
                "date_of_birth": "2001-10-26",
                "nationality": "Argentina",
                "country_code": "ARG",
                "height": 191,
                "jersey_number": 24
              }, {
                "id": "sr:player:2548589",
                "name": "Cabral, Nicolas",
                "type": "defender",
                "date_of_birth": "1999-10-09",
                "nationality": "Argentina",
                "country_code": "ARG",
                "height": 188,
                "jersey_number": 26,
                "preferred_foot": "left"
              }, {
                "id": "sr:player:2645361",
                "name": "Rollano, Santiago",
                "type": "forward",
                "date_of_birth": "2004-04-14",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 170,
                "weight": 70,
                "jersey_number": 29
              }, {
                "id": "sr:player:539238",
                "name": "Sosa, Sebastian",
                "type": "forward",
                "date_of_birth": "1994-03-13",
                "nationality": "Uruguay",
                "country_code": "URY",
                "height": 183,
                "weight": 71,
                "jersey_number": 10,
                "preferred_foot": "right"
              }],
              "formation": {
                "type": "4-3-3"
              }
            }
          };
          return _this;
        }

        var _proto = SbTabFormation.prototype;

        _proto.SetDataFormation = function SetDataFormation(data, matchId) {
          var _this$homeData$manage, _this$awayData$manage;

          this.dataInfo = data;

          if (!this.dataInfo) {
            return;
          }

          this.homeData = this.dataInfo[0];
          this.awayData = this.dataInfo[1];

          if (this.toggleHome.isChecked) {
            this.updateHomeData();
          } else {
            this.updateAwayData();
          }

          this.lbHomeCoach.string = (_this$homeData$manage = this.homeData.manager) == null ? void 0 : _this$homeData$manage.name;
          this.lbAwayCoach.string = (_this$awayData$manage = this.awayData.manager) == null ? void 0 : _this$awayData$manage.name;
          this.initDataSubPlayer();

          if (this.matchId != matchId) {
            this.scrollToTop();
            this.matchId = matchId;
          }
        };

        _proto.SetDataInfoMatch = function SetDataInfoMatch(infoMatch) {
          if (infoMatch) {
            var home = infoMatch.find(function (a) {
              return a.qualifier == CompetitorEnum.HOME;
            });

            if (home.name.length <= 15) {
              this.lbHomeName.string = home.name;
            } else {
              this.lbHomeName.string = home.name.slice(0, 15) + "...";
            }

            var away = infoMatch.find(function (a) {
              return a.qualifier == CompetitorEnum.AWAY;
            });

            if (away.name.length <= 15) {
              this.lbAwayName.string = away.name;
            } else {
              this.lbAwayName.string = away.name.slice(0, 15) + "...";
            }
          }
        };

        _proto.SetDataTimeline = function SetDataTimeline(dataTimeLine) {
          if (!dataTimeLine) {
            return;
          }

          this.groupPanelSubstitutions.active = false;
          this.groupPanelInjury.active = false;
          this.mapPlayerInfo = new Map();
          var extraData = this.convertTimelineInfo(dataTimeLine);
          this.initDataSubstitutions(extraData.homeSubs, extraData.awaySubs);
          this.initDataInjuries(extraData.homeInjuries, extraData.awayInjuries);
        };

        _proto.AfterUpdateWidget = function AfterUpdateWidget() {
          this.scrollToTop();
        };

        _proto.ResetTab = function ResetTab() {
          _SbTabItem.prototype.ResetTab.call(this);

          this.matchId = '';
          this.lbHomeCoach.string = '';
          this.lbAwayCoach.string = '';
          this.homeData = null;
          this.awayData = null;
          this.timeLineData = null;
          this.scrollToTop();
          this.groupPanelSubstitutions.active = false;
          this.groupPanelSubPlayer.active = false;
          this.groupPanelInjury.active = false;
          this.mapPlayerInfo = new Map();
        };

        _proto.convertTimelineInfo = function convertTimelineInfo(dataTimeLine) {
          var _this2 = this;

          this.timeLineData = dataTimeLine;
          var listHomeInjuries = [];
          var listAwayInjuries = [];
          var listHomeSubstitutions = [];
          var listAwaySubstitutions = [];

          var _loop = function _loop() {
            var timeLine = _this2.timeLineData[i];
            var listPlayers = timeLine.players;
            var tlType = timeLine.type;

            switch (tlType) {
              case TimeLineType.INJURY:
              case TimeLineType.YELLOW_CARD:
              case TimeLineType.RED_CARD:
              case TimeLineType.SUBSTITUTION:
              case TimeLineType.SCORE_CHANGE:
                {
                  if (listPlayers && listPlayers.length > 0) {
                    if (tlType != TimeLineType.SCORE_CHANGE) {
                      listPlayers.forEach(function (data) {
                        _this2.setPlayerValueInfo(data, tlType);
                      });
                    } else {
                      var isOwnGoal = timeLine.method == "own_goal";
                      var player = listPlayers[0];

                      _this2.setPlayerValueInfo(player, tlType, isOwnGoal);
                    }
                  }

                  if (tlType == TimeLineType.INJURY && timeLine.players && timeLine.players.length > 0) {
                    if (timeLine.competitor == CompetitorEnum.HOME) {
                      listHomeInjuries = listHomeInjuries.concat(timeLine.players);
                    } else {
                      listAwayInjuries = listAwayInjuries.concat(timeLine.players);
                    }
                  }

                  if (tlType == TimeLineType.SUBSTITUTION) {
                    if (timeLine.competitor == CompetitorEnum.HOME) {
                      listHomeSubstitutions.push(timeLine);
                    } else {
                      listAwaySubstitutions.push(timeLine);
                    }
                  }

                  break;
                }
            }
          };

          for (var i = 0; i < this.timeLineData.length; i++) {
            _loop();
          }

          return {
            homeSubs: listHomeSubstitutions,
            awaySubs: listAwaySubstitutions,
            homeInjuries: listHomeInjuries,
            awayInjuries: listAwayInjuries
          };
        };

        _proto.initDataSubstitutions = function initDataSubstitutions(homeSubstitions, awaySubstitions) {
          var lengthSubstition = Math.max(homeSubstitions.length, awaySubstitions.length);
          this.groupPanelSubstitutions.active = lengthSubstition > 0;
          this.frameSubstitutions.removeAllChildren();

          for (var i = 0; i < lengthSubstition; i++) {
            var homeData = homeSubstitions[i];
            var awayData = awaySubstitions[i];
            var itemSubstitution = instantiate(this.tempSubstitutions);
            itemSubstitution.active = true;
            itemSubstitution.parent = this.frameSubstitutions;
            itemSubstitution.getComponent(SbItemSubstitutions).SetDataSubstitutions(homeData, awayData);
          }
        };

        _proto.initDataInjuries = function initDataInjuries(homeInjuries, awayInjuries) {
          var lengthElement = Math.max(homeInjuries.length, awayInjuries.length);
          this.groupPanelInjury.active = lengthElement > 0;
          this.frameInjury.removeAllChildren();

          for (var i = 0; i < lengthElement; i++) {
            var homeData = homeInjuries[i];
            var awayData = awayInjuries[i];
            var itemInjury = instantiate(this.tempInjury);
            itemInjury.active = true;
            itemInjury.parent = this.frameInjury;
            itemInjury.getComponent(SbItemInjury).SetDataInjury(homeData, awayData);
          }
        };

        _proto.initDataSubPlayer = function initDataSubPlayer() {
          var listHomeSubs = this.homeData && this.homeData.reserve_team ? this.homeData.reserve_team : [];
          var listAwaySubs = this.awayData && this.awayData.reserve_team ? this.awayData.reserve_team : [];
          var lengthSub = Math.max(listHomeSubs.length, listAwaySubs.length);
          this.groupPanelSubPlayer.active = lengthSub > 0;
          this.frameSubPlayer.removeAllChildren();

          for (var i = 0; i < lengthSub; i++) {
            var homePlayer = listHomeSubs[i];
            var awayPlayer = listAwaySubs[i];
            var itemSub = instantiate(this.tempSubPlayer);
            itemSub.active = true;
            itemSub.parent = this.frameSubPlayer;
            itemSub.getComponent(SbItemSubPlayer).SetDataSubPlayer(homePlayer, awayPlayer, this.mapPlayerInfo);
          }
        };

        _proto.setPlayerValueInfo = function setPlayerValueInfo(data, tlType, isOwnGoal) {
          if (isOwnGoal === void 0) {
            isOwnGoal = false;
          }

          if (!data || !data.id) {
            return;
          }

          var playerInfo = this.getPlayerById(data.id);
          playerInfo.playerName = data.name;

          switch (tlType) {
            case TimeLineType.INJURY:
              {
                playerInfo.isInjury = true;
                break;
              }

            case TimeLineType.YELLOW_CARD:
              {
                playerInfo.numCardYellow++;
                break;
              }

            case TimeLineType.RED_CARD:
              {
                playerInfo.numCardRed++;
                break;
              }

            case TimeLineType.SUBSTITUTION:
              {
                if (data.type == PlayerTypeEnum.SUB_IN) {
                  playerInfo.playerIn = true;
                } else if (data.type == PlayerTypeEnum.SUB_OUT) {
                  playerInfo.playerOut = true;
                }

                break;
              }

            case TimeLineType.SCORE_CHANGE:
              {
                if (isOwnGoal) {
                  playerInfo.ownGoal++;
                } else {
                  playerInfo.score++;
                }

                break;
              }
          }
        };

        _proto.getPlayerById = function getPlayerById(id) {
          if (!this.mapPlayerInfo.has(id)) {
            this.mapPlayerInfo.set(id, new SbPlayerInfo(id));
          }

          return this.mapPlayerInfo.get(id);
        };

        _proto.updateHomeData = function updateHomeData() {
          log("updateHomeData");
          this.isAtHome = true;
          this.lbHomeName.color = this.colorText[0];
          this.lbAwayName.color = this.colorText[1];
          this.initDataTeam(this.homeData);
        };

        _proto.updateAwayData = function updateAwayData() {
          log("updateAwayData");
          this.isAtHome = false;
          this.lbHomeName.color = this.colorText[1];
          this.lbAwayName.color = this.colorText[0];
          this.initDataTeam(this.awayData);
        };

        _proto.onClickHome = function onClickHome() {
          SbSoundsManager.getInstance().playSfxClick();
          this.updateHomeData();
        };

        _proto.onClickAway = function onClickAway() {
          SbSoundsManager.getInstance().playSfxClick();
          this.updateAwayData();
        };

        _proto.initDataTeam = function initDataTeam(data) {
          var formationString = data.formation.type;
          this.updateFormation(formationString);
          this.updateMainTeam(data.main_team);
        };

        _proto.updateMainTeam = function updateMainTeam(mainTeam) {
          for (var i = 0; i < mainTeam.length; i++) {
            switch (i) {
              case 0:
                this.updatePlayerInfo(this.listGoalkeeper, mainTeam[i]);
                break;

              case 1:
                this.updatePlayerInfo(this.listDefender, mainTeam[i]);
                break;

              case 2:
                this.updatePlayerInfo(this.listMidfielder, mainTeam[i]);
                break;

              case 3:
                this.updatePlayerInfo(this.listStriker0, mainTeam[i]);
                break;

              case 4:
                this.updatePlayerInfo(this.listStriker1, mainTeam[i]);
                break;
            }
          }
        };

        _proto.updatePlayerInfo = function updatePlayerInfo(listPlayer, listInfo) {
          var playerDatas = listInfo.slice();

          if (!this.isAtHome) {
            playerDatas.reverse();
          }

          for (var i = 0; i < playerDatas.length; i++) {
            if (listPlayer[i]) {
              listPlayer[i].InitData(playerDatas[i], this.mapPlayerInfo);
            }
          }
        };

        _proto.updateFormation = function updateFormation(formationType) {
          var formationString = formationType;
          this.lbFormat.string = "Đội hình" + " " + formationString;
          var formation = formationString.split("-"); //[4,3,3]

          log("formation: " + formation);

          if (formation.length > 0) {
            this.updateData(this.listGoalkeeper, 1);

            for (var i = 0; i < this.listNodeFormation.length; i++) {
              if (i < formation.length) {
                this.listNodeFormation[i].active = true;

                switch (i) {
                  case 0:
                    this.updateData(this.listDefender, Number(formation[i]));
                    break;

                  case 1:
                    this.updateData(this.listMidfielder, Number(formation[i]));
                    break;

                  case 2:
                    this.updateData(this.listStriker0, Number(formation[i]));
                    break;

                  case 3:
                    this.updateData(this.listStriker1, Number(formation[i]));
                    break;
                }
              } else {
                this.listNodeFormation[i].active = false;
              }
            }
          }
        };

        _proto.updateData = function updateData(listPlayer, amountActive) {
          var amount = amountActive;

          if (amount > 0) {
            for (var i = 0; i < listPlayer.length; i++) {
              if (i < amount) listPlayer[i].node.active = true;else listPlayer[i].node.active = false;
            }
          }
        };

        _createClass(SbTabFormation, [{
          key: "colorText",
          get: function get() {
            var result = [];

            if (this.skinTextTitleColor) {
              result = this.skinTextTitleColor.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbTabFormation;
      }(SbTabItem), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbHomeName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayName", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbFormat", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listNodeFormation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listGoalkeeper", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listDefender", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "listMidfielder", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listStriker0", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "listStriker1", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "toggleHome", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "toggleAway", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "skinTextTitleColor", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "groupPanelSubstitutions", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "frameSubstitutions", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "tempSubstitutions", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "groupPanelSubPlayer", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "frameSubPlayer", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "tempSubPlayer", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "groupPanelInjury", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "frameInjury", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "tempInjury", [_dec22], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "lbHomeCoach", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "lbAwayCoach", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabHighlight.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbUserInfo.ts', './SbTabItem.ts', './SbCommonPrefabsManager.ts', './SbItemHighlight.ts', './SbGameHTTPManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, instantiate, SbConfigManager, SbUserInfo, SbTabItem, SbCommonPrefabsManager, SbItemHighlight, SbGameHTTPManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      instantiate = module.instantiate;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbItemHighlight = module.SbItemHighlight;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "12f1d17/oBNir6LtRTggk9m", "SbTabHighlight", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabHighlight = exports('SbTabHighlight', (_dec = ccclass('SbTabLHighlight'), _dec(_class = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabHighlight, _SbTabItem);

        function SbTabHighlight() {
          return _SbTabItem.apply(this, arguments) || this;
        }

        var _proto = SbTabHighlight.prototype;

        _proto.start = function start() {
          this.LoadData();
        };

        _proto.onTabFocus = function onTabFocus() {
          _SbTabItem.prototype.onTabFocus.call(this);

          if (this.checkNeedRequestNewData()) {
            log("NeedRequestNewData");
            this.requestData();
          } else {
            log("no NeedRequestNewData");
          }
        };

        _proto.onEnable = function onEnable() {
          this.onTabFocus();
        };

        _proto.onDisable = function onDisable() {
          this.onTabLostFocus();
        };

        _proto.LoadData = function LoadData() {
          this.requestData();
        };

        _proto.requestData = function requestData() {
          var _this = this;

          var uToken = SbUserInfo.getInstance().GetUserToken();
          var url = SbConfigManager.getInstance().urlHightlight + "?sportId=1" + "&token=" + uToken;
          this.showLoading();
          this.clearUI();
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            //success
            var itemTemplate = SbCommonPrefabsManager.getInstance().GetItemHighlightTemplate();

            for (var i = 0; i < obj.length; i++) {
              var item = instantiate(itemTemplate).getComponent(SbItemHighlight);
              item.node.parent = _this.nodeParentAllItem;
              item.InitData(obj[i]);
            }

            _this.scrollToTop();

            if (obj.length == 0) _this.showMsg("Không có dữ liệu!");

            _this.hideLoading();
          }, function () {
            //fail
            _this.hideLoading();
          }, true);
        };

        return SbTabHighlight;
      }(SbTabItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbLoadingNode.ts', './SbGameUtil.ts', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Label, Node, ScrollView, game, Game, log, Tween, tween, Vec3, TweenSystem, UIOpacity, Vec2, Component, SbLoadingNode, ScrollView_EventType, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      ScrollView = module.ScrollView;
      game = module.game;
      Game = module.Game;
      log = module.log;
      Tween = module.Tween;
      tween = module.tween;
      Vec3 = module.Vec3;
      TweenSystem = module.TweenSystem;
      UIOpacity = module.UIOpacity;
      Vec2 = module.Vec2;
      Component = module.Component;
    }, function (module) {
      SbLoadingNode = module.default;
    }, function (module) {
      ScrollView_EventType = module.ScrollView_EventType;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "c7a81K6NxFHaJyNH+lw5Rvq", "SbTabItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_NEED_LOAD_DATA = 1.5; //second

      var SbTabItem = exports('SbTabItem', (_dec = ccclass('SbTabItem'), _dec2 = property(SbLoadingNode), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(ScrollView), _dec7 = property(ScrollView), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbTabItem, _Component);

        function SbTabItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeLoading", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbMsg", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeParentAllItem", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonScrollToTop", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiMenuScrollView", _descriptor6, _assertThisInitialized(_this)); // Menu Have More Tab


          _this.timeLoadData = 0;
          _this.dataInfo = null;
          return _this;
        }

        var _proto = SbTabItem.prototype;

        _proto.ResetTab = function ResetTab() {
          this.dataInfo = null;
        };

        _proto.onLoad = function onLoad() {
          this.timeLoadData = Date.now();
          game.on(Game.EVENT_SHOW, this.onTabFocus, this);
          game.on(Game.EVENT_HIDE, this.onTabLostFocus, this);
        };

        _proto.onEnable = function onEnable() {// this.onTabFocus();
        };

        _proto.onDisable = function onDisable() {// this.onTabLostFocus();
        };

        _proto.onDestroy = function onDestroy() {
          game.off(Game.EVENT_SHOW, this.onTabFocus, this);
          game.off(Game.EVENT_HIDE, this.onTabLostFocus, this);
        };

        _proto.checkNeedRequestNewData = function checkNeedRequestNewData() {
          return this.node.activeInHierarchy && this.node.active && Date.now() - this.timeLoadData > TIME_NEED_LOAD_DATA * 1000;
        };

        _proto.onTabLostFocus = function onTabLostFocus() {
          log("onTabLostFocus base");
          this.timeLoadData = Date.now();
        };

        _proto.onTabFocus = function onTabFocus() {
          log("onTabFocus base");
        };

        _proto.showMsg = function showMsg(str) {
          if (this.lbMsg != null) {
            this.lbMsg.string = str;
            this.lbMsg.node.setScale(this.lbMsg.node.scale.x, 0);
            this.lbMsg.node.active = true;
            Tween.stopAllByTarget(this.lbMsg.node);
            tween(this.lbMsg.node).delay(0.1).to(0.2, {
              scale: new Vec3(1, 1)
            }, {
              easing: 'backOut'
            }).start();
          }
        };

        _proto.hideMsg = function hideMsg() {
          if (this.lbMsg) {
            this.lbMsg.node.active = false;
          }
        };

        _proto.showLoading = function showLoading() {
          if (this.nodeLoading != null) this.nodeLoading.ShowLoading(); // this.menu.SetActive(false);
        };

        _proto.hideLoading = function hideLoading() {
          if (this.nodeLoading != null) this.nodeLoading.HideLoading();
        };

        _proto.clearUI = function clearUI() {
          if (this.nodeParentAllItem != null) this.nodeParentAllItem.removeAllChildren();
          this.hideMsg();
        } //========== handle tab item has scrollview ===============
        ;

        _proto.scrollToTop = function scrollToTop() {
          if (this.scrollView != null) {
            this.scrollView.scrollToTop();
          }

          this.HideButtonScrollToTop();
        };

        _proto.onClickScrollToTop = function onClickScrollToTop() {
          SbSoundsManager.getInstance().playSfxClick();

          if (this.scrollView != null) {
            this.scrollView.scrollToTop(0.3);
          }
        };

        _proto.onScrollviewEvenCallback = function onScrollviewEvenCallback(scrollview, eventType, customEventData) {
          if (eventType == ScrollView_EventType.SCROLLING) {
            this.checkAndShowButtonScrollToTop(scrollview);
          }
        };

        _proto.checkAndShowButtonScrollToTop = function checkAndShowButtonScrollToTop(scrollview) {
          if (this.buttonScrollToTop != null) {
            //@ts-ignore
            if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.buttonScrollToTop.getComponent(UIOpacity)) == 0) {
              var index = scrollview.getScrollOffset().y / scrollview.getMaxScrollOffset().y;

              if (index > 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity == 0) {
                this.showButtonScrollToTop();
              } else if (index <= 0.4 && this.buttonScrollToTop.getComponent(UIOpacity).opacity > 0) {
                this.HideButtonScrollToTop();
              }
            }
          }
        };

        _proto.HideButtonScrollToTop = function HideButtonScrollToTop() {
          var _this2 = this;

          if (this.buttonScrollToTop != null) {
            Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
            tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
              opacity: 0
            }).call(function () {
              _this2.buttonScrollToTop.active = false;
              _this2.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
            }).start();
          }
        };

        _proto.showButtonScrollToTop = function showButtonScrollToTop() {
          if (this.buttonScrollToTop != null) {
            this.buttonScrollToTop.active = true;
            this.buttonScrollToTop.getComponent(UIOpacity).opacity = 0;
            Tween.stopAllByTarget(this.buttonScrollToTop.getComponent(UIOpacity));
            tween(this.buttonScrollToTop.getComponent(UIOpacity)).to(0.2, {
              opacity: 255
            }).start();
          }
        };

        _proto.onScrollToTab = function onScrollToTab(index, nodeTab, minItem, deltaX) {
          if (minItem === void 0) {
            minItem = 0;
          }

          if (deltaX === void 0) {
            deltaX = 0;
          }

          if (this.uiMenuScrollView && nodeTab) {
            this.uiMenuScrollView.stopAutoScroll();
            var time = 0.5;

            if (index < minItem) {
              this.uiMenuScrollView.scrollToLeft(time);
            } else if (index > this.uiMenuScrollView.content.children.length - minItem - 1) {
              this.uiMenuScrollView.scrollToRight(time);
            } else {
              var posWantToGo = Math.abs(nodeTab.position.x);
              var offSetX = this.uiMenuScrollView.getMaxScrollOffset().x - deltaX - posWantToGo;
              this.uiMenuScrollView.scrollToOffset(new Vec2(-offSetX, 0), time);
            }
          }
        } //================================================================
        ;

        _createClass(SbTabItem, [{
          key: "IsHaveData",
          get: function get() {
            return this.dataInfo != null && this.dataInfo != undefined;
          }
        }]);

        return SbTabItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeLoading", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbMsg", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeParentAllItem", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonScrollToTop", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "uiMenuScrollView", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabLiveStream.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbTabItem.ts', './SbItemVideoLivestream.ts', './SbCommonPrefabsManager.ts', './SbDefine.ts', './SbLocalizationManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, director, instantiate, SbTabItem, SbItemVideoLivestream, SbCommonPrefabsManager, SB_EVENT_EVENT_MATCH_CHANGE_DATA, SB_EVENT_EVENT_MATCH_REMOVE, SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM, SbLocalizationManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      director = module.director;
      instantiate = module.instantiate;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      SbItemVideoLivestream = module.SbItemVideoLivestream;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SB_EVENT_EVENT_MATCH_CHANGE_DATA = module.SB_EVENT_EVENT_MATCH_CHANGE_DATA;
      SB_EVENT_EVENT_MATCH_REMOVE = module.SB_EVENT_EVENT_MATCH_REMOVE;
      SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM = module.SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c3708UcANxOnoYqewWfhjlD", "SbTabLiveStream", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabLiveStream = exports('SbTabLiveStream', (_dec = ccclass('SbTabLiveStream'), _dec(_class = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabLiveStream, _SbTabItem);

        function SbTabLiveStream() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;
          _this.listItemVideoLivestream = [];
          return _this;
        }

        var _proto = SbTabLiveStream.prototype;

        _proto.start = function start() {
          this.clearUI();
          this.showLoading();
        };

        _proto.onTabFocus = function onTabFocus() {
          _SbTabItem.prototype.onTabFocus.call(this);

          if (this.checkNeedRequestNewData()) {
            log("NeedRequestNewData TabLiveStream");
            this.reqestData();
          } else {
            log("no NeedRequestNewData TabLiveStream");
          }
        };

        _proto.onEnable = function onEnable() {
          this.addEventListener();
          this.onTabFocus();
        };

        _proto.onDisable = function onDisable() {
          this.onTabLostFocus();
          console.log("SbTabLiveStream onDisable");
          director.off(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.onDataChange.bind(this), this);
          director.off(SB_EVENT_EVENT_MATCH_REMOVE, this.onMatchRemove.bind(this), this);
        };

        _proto.onTabLostFocus = function onTabLostFocus() {
          _SbTabItem.prototype.onTabLostFocus.call(this);
        };

        _proto.ShowData = function ShowData(listData, listDataShort) {
          console.log("SbTabLiveStream listData: " + JSON.stringify(listData));

          if (listData.length > 0) {
            this.displayData(listData, listDataShort);
          } else {
            this.clearUI();
            this.showMsg(SbLocalizationManager.getInstance().GetKeyValue('NoMatchLiveStream'));
            this.HideButtonScrollToTop();
          }

          this.hideLoading();
        };

        _proto.reqestData = function reqestData() {
          this.showLoading();
          director.emit(SB_EVENT_REQUEST_DATA_TAB_LIVESTREAM);
        };

        _proto.addEventListener = function addEventListener() {
          // director.off(SB_EVENT_EVENT_MATCH_CHANGE_DATA);
          director.on(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.onDataChange.bind(this), this);
          director.on(SB_EVENT_EVENT_MATCH_REMOVE, this.onMatchRemove.bind(this), this);
        };

        _proto.displayData = function displayData(listData, listDataShort) {
          this.clearUI();
          this.listItemVideoLivestream = [];
          var itemTemplate = SbCommonPrefabsManager.getInstance().GetItemLivestreamTemplate();

          for (var i = 0; i < listData.length; i++) {
            var item = instantiate(itemTemplate).getComponent(SbItemVideoLivestream);
            item.node.parent = this.nodeParentAllItem;
            this.listItemVideoLivestream.push(item);
            var itemShort = null;
            if (i < listDataShort.length) itemShort = listDataShort[i];
            item.InitData(listData[i], itemShort);
          }
        };

        _proto.onMatchRemove = function onMatchRemove(matchData) {
          this.findAndRemoveMatchItem(matchData);
        };

        _proto.onDataChange = function onDataChange(matchData) {
          if (this.listItemVideoLivestream != null && this.listItemVideoLivestream != undefined) {
            for (var i = 0; i < this.listItemVideoLivestream.length; i++) {
              if (this.listItemVideoLivestream[i].IsMatch(matchData)) {
                if (this.listItemVideoLivestream[i].IsMatchFinish(matchData.gamePart)) {
                  this.listItemVideoLivestream[i].node.removeFromParent();
                  this.listItemVideoLivestream.splice(i, 1);
                  return;
                }

                this.listItemVideoLivestream[i].InitData(matchData);
                return;
              }
            }
          }
        };

        _proto.findAndRemoveMatchItem = function findAndRemoveMatchItem(matchData) {
          if (this.listItemVideoLivestream != null && this.listItemVideoLivestream != undefined) {
            for (var i = 0; i < this.listItemVideoLivestream.length; i++) {
              if (this.listItemVideoLivestream[i].IsMatch(matchData)) {
                this.listItemVideoLivestream[i].node.removeFromParent();
                this.listItemVideoLivestream.splice(i, 1);
                return;
              }
            }
          }
        };

        return SbTabLiveStream;
      }(SbTabItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabMatchStandings.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbTabItem.ts', './SbGameHTTPManager.ts', './SbStandings.ts', './SbSoundsManager.ts', './SbUIMenu.ts', './SbDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Button, JsonAsset, Enum, Node, log, instantiate, SbConfigManager, SbTabItem, SbGameHTTPManager, SbStandings, SbSoundsManager, SbUIMenu, SBScheduleTypeEnum;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Button = module.Button;
      JsonAsset = module.JsonAsset;
      Enum = module.Enum;
      Node = module.Node;
      log = module.log;
      instantiate = module.instantiate;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbStandings = module.SbStandings;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SBScheduleTypeEnum = module.SBScheduleTypeEnum;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "a5d2ea7sBBOUbwTaN/RmFo4", "SbTabMatchStandings", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabMatchStandings = exports('SbTabMatchStandings', (_dec = ccclass('SbTabMatchStandings'), _dec2 = property(Prefab), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(SbUIMenu), _dec6 = property(JsonAsset), _dec7 = property({
        type: Enum(SBScheduleTypeEnum)
      }), _dec8 = property({
        group: 'Independent',
        type: Node
      }), _dec9 = property({
        group: 'Independent',
        type: Node
      }), _dec10 = property({
        group: 'Independent'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabMatchStandings, _SbTabItem);

        function SbTabMatchStandings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "standingPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSchedule", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonStandings", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiMenuLeague", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonDataJson", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scheduleType", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabSchedule", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabStandings", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonName", _descriptor9, _assertThisInitialized(_this));

          _this.indexSeasonID = 0;
          _this.isRequestData = false;
          _this.listSeasonData = [];
          return _this;
        }

        var _proto = SbTabMatchStandings.prototype;

        _proto.onLoad = function onLoad() {
          _SbTabItem.prototype.onLoad.call(this);
        };

        _proto.start = function start() {
          if (this.uiMenuLeague) {
            //init tab menu
            this.uiMenuLeague.SetIndexDefault(0);
            this.uiMenuLeague.SetButtonClickCallback(this.onClickChangeMenuItem.bind(this));
          }

          this.indexSeasonID = 0;
          this.requestData(this.getSeasonID(this.indexSeasonID), this.getSeasonName(this.indexSeasonID));
        };

        _proto.onTabFocus = function onTabFocus() {
          _SbTabItem.prototype.onTabFocus.call(this);

          this.hideMsg();

          if (this.checkNeedRequestNewData()) {
            log("NeedRequestNewData");
            this.requestData(this.getSeasonID(this.indexSeasonID));
          } else {
            if (!this.IsHaveData) {
              this.showMsg("Không có dữ liệu!");
            }

            log("no NeedRequestNewData");
          }
        };

        _proto.onEnable = function onEnable() {
          this.onTabFocus();
        };

        _proto.onDisable = function onDisable() {
          this.onTabLostFocus();
        };

        _proto.LoadData = function LoadData(seasonID, seasonName) {
          this.requestData(seasonID, seasonName);
        };

        _proto.getSeasonID = function getSeasonID(index) {
          if (this.listSeasonData[index]) {
            return this.listSeasonData[index].leagueId;
          }

          return this.seasonName;
        };

        _proto.getSeasonName = function getSeasonName(index) {
          var leagueName = '';

          if (this.listSeasonData[index] && this.listSeasonData[index].titleStanding) {
            leagueName = this.listSeasonData[index].leagueName;
          }

          return leagueName;
        };

        _proto.onClickChangeMenuItem = function onClickChangeMenuItem(customData) {
          var index = Number(customData);

          if (!isNaN(index)) {
            this.indexSeasonID = index;
            var season = this.listSeasonData[index];
            var leagueName = "";

            if (season.titleStanding) {
              leagueName = season.leagueName;
            }

            this.requestData(season.leagueId, leagueName);
            var tab = this.uiMenuLeague.GetButtonByIndex(index);

            if (tab && tab.node) {
              this.onScrollToTab(index, tab.node, 2, 680);
            }
          }
        };

        _proto.LoadConfigSeason = function LoadConfigSeason() {
          if (this.isIndependent) {
            return;
          }

          var listSeasonInfo = this.seasonDataJson.json;
          this.PushSeasonCustom(listSeasonInfo);
        };

        _proto.PushSeasonCustom = function PushSeasonCustom(listSeasonInfo) {
          for (var i = 0; i < listSeasonInfo.length; i++) {
            var season = listSeasonInfo[i];

            if (season.active) {
              this.listSeasonData.push(listSeasonInfo[i]);
            }
          }
        };

        _proto.requestData = function requestData(seasonID, seasonName) {
          var _this2 = this;

          if (seasonName === void 0) {
            seasonName = "";
          }

          var lang = "vn";
          var url = SbConfigManager.getInstance().urlGetStandings.replace("{seasonID}", seasonID);
          url = url.replace("{lang}", lang);

          if (this.isRequestData) {
            return;
          }

          this.showLoading();
          this.scrollView.stopAutoScroll();
          this.isRequestData = true;
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, function (obj) {
            if (obj.statusCode == 200) {
              _this2.clearUI();

              var listGroup = obj.data.groups;

              if (listGroup) {
                log(listGroup);
                var groupMaches = null;
                var nameOfSeason = seasonName.replace("\n", "");

                for (var i = 0; i < listGroup.length; i++) {
                  groupMaches = instantiate(_this2.standingPrefab).getComponent(SbStandings);
                  groupMaches.node.parent = _this2.nodeParentAllItem;
                  groupMaches.InitData(listGroup[i], nameOfSeason);
                }

                _this2.scrollToTop();

                if (listGroup.length == 0) {
                  _this2.showMsg("Không có dữ liệu!");
                } else {
                  _this2.dataInfo = listGroup;
                }
              } else {
                _this2.showMsg("Không có dữ liệu!");
              }
            } else {
              _this2.showMsg("Vui lòng thử lại sau!");
            }

            _this2.isRequestData = false;

            _this2.hideLoading();
          }, function () {
            //fail
            _this2.isRequestData = false;

            _this2.hideLoading();
          }, true);
        };

        _proto.onClickButtonSchedule = function onClickButtonSchedule() {
          SbSoundsManager.getInstance().playSfxClick();
          this.buttonSchedule.interactable = true;
          this.buttonStandings.interactable = false;
          this.tabSchedule.active = false;
          this.tabStandings.active = true;
        };

        _createClass(SbTabMatchStandings, [{
          key: "isIndependent",
          get: function get() {
            return this.scheduleType === SBScheduleTypeEnum.INDEPENDENT;
          }
        }]);

        return SbTabMatchStandings;
      }(SbTabItem), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "standingPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "buttonSchedule", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonStandings", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "uiMenuLeague", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "seasonDataJson", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "scheduleType", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SBScheduleTypeEnum.ALL;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tabSchedule", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tabStandings", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "seasonName", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabSchedule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbConfigManager.ts', './SbUserInfo.ts', './SbTabItem.ts', './SbGameHTTPManager.ts', './SbMatchSchedule.ts', './SbSoundsManager.ts', './SbUIMenu.ts', './SbDefine.ts', './SbUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _createClass, _regeneratorRuntime, cclegacy, _decorator, Prefab, Button, JsonAsset, Enum, Node, log, instantiate, SbConfigManager, SbUserInfo, SbTabItem, SbGameHTTPManager, SbMatchSchedule, SbSoundsManager, SbUIMenu, SBScheduleTypeEnum, SbUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _createClass = module.createClass;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Button = module.Button;
      JsonAsset = module.JsonAsset;
      Enum = module.Enum;
      Node = module.Node;
      log = module.log;
      instantiate = module.instantiate;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      SbGameHTTPManager = module.default;
    }, function (module) {
      SbMatchSchedule = module.SbMatchSchedule;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbUIMenu = module.default;
    }, function (module) {
      SBScheduleTypeEnum = module.SBScheduleTypeEnum;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "20e4bU1+T9N9pPFbG6L0I37", "SbTabSchedule", undefined);

      var ScheduleFilterEnum = exports('ScheduleFilterEnum', /*#__PURE__*/function (ScheduleFilterEnum) {
        ScheduleFilterEnum["SUMMARIES"] = "summaries";
        ScheduleFilterEnum["FIXTURES"] = "fixtures";
        ScheduleFilterEnum["RESULT"] = "results";
        return ScheduleFilterEnum;
      }({})); // Past Match

      var ScheduleSportStatusEnum = exports('ScheduleSportStatusEnum', /*#__PURE__*/function (ScheduleSportStatusEnum) {
        ScheduleSportStatusEnum["NOT_START"] = "not_started";
        ScheduleSportStatusEnum["ENDED"] = "ended";
        return ScheduleSportStatusEnum;
      }({}));
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabSchedule = exports('SbTabSchedule', (_dec = ccclass('SbTabSchedule'), _dec2 = property(Prefab), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(SbUIMenu), _dec6 = property(JsonAsset), _dec7 = property({
        type: Enum(SBScheduleTypeEnum)
      }), _dec8 = property({
        group: 'Independent',
        type: Node
      }), _dec9 = property({
        group: 'Independent',
        type: Node
      }), _dec10 = property({
        group: 'Independent'
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabSchedule, _SbTabItem);

        function SbTabSchedule() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "matchSchedulePrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonSchedule", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonStandings", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "uiMenuLeague", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonDataJson", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scheduleType", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabSchedule", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tabStandings", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "seasonName", _descriptor9, _assertThisInitialized(_this));

          _this.listSeasonID = [];
          _this.listTotalRound = [];
          _this.listData = [];
          _this.totalRound = 38;
          _this.currentData = null;
          return _this;
        }

        var _proto = SbTabSchedule.prototype;

        _proto.onLoad = function onLoad() {
          _SbTabItem.prototype.onLoad.call(this);
        };

        _proto.start = function start() {
          if (this.uiMenuLeague) {
            //init tab menu
            this.uiMenuLeague.SetIndexDefault(0);
            this.uiMenuLeague.SetButtonClickCallback(this.onClickChangeMenuItem.bind(this));
          }

          this.LoadData(this.seasonName, this.totalRound, this.currentData);
        };

        _proto.LoadConfigSeason = function LoadConfigSeason() {
          if (this.isIndependent) {
            return;
          }

          var listSeasonInfo = this.seasonDataJson.json;
          this.PushSeasonCustom(listSeasonInfo);
        };

        _proto.PushSeasonCustom = function PushSeasonCustom(listSeasonInfo) {
          for (var i = 0; i < listSeasonInfo.length; i++) {
            var season = listSeasonInfo[i];

            if (season.active) {
              this.listSeasonID.push(listSeasonInfo[i].leagueId);
            } else {
              this.listSeasonID.push(null);
            }

            this.listTotalRound.push(listSeasonInfo[i].totalRound);
            this.listData.push(season);
          }

          for (var _i = 0; _i < this.listSeasonID.length; _i++) {
            if (this.listSeasonID[_i] != null) {
              this.seasonName = this.listSeasonID[_i];
              this.totalRound = this.listTotalRound[_i];
              this.currentData = this.listData[_i];
              return;
            }
          }
        };

        _proto.onTabFocus = function onTabFocus() {
          _SbTabItem.prototype.onTabFocus.call(this);

          this.hideMsg();

          if (this.checkNeedRequestNewData()) {
            log("NeedRequestNewData");
            this.requestData(this.seasonName, this.totalRound, this.currentData);
          } else {
            if (!this.IsHaveData) {
              this.showMsg("Không có dữ liệu!");
            }

            log("no NeedRequestNewData");
          }
        };

        _proto.onEnable = function onEnable() {
          this.onTabFocus();
        };

        _proto.onDisable = function onDisable() {
          this.onTabLostFocus();
        };

        _proto.LoadData = function LoadData(seasonName, totalRound, data) {
          this.seasonName = seasonName;
          this.totalRound = totalRound;
          this.currentData = data;
          this.requestData(this.seasonName, totalRound, data);
        };

        _proto.onClickChangeMenuItem = function onClickChangeMenuItem(customData) {
          var index = Number(customData);

          if (!isNaN(index)) {
            this.LoadData(this.listSeasonID[index], this.listTotalRound[index], this.listData[index]);
            var tab = this.uiMenuLeague.GetButtonByIndex(customData);

            if (tab && tab.node) {
              this.onScrollToTab(index, tab.node, 2, 680);
            }
          }
        };

        _proto.requestData = function requestData(seasonID, totalRound, data) {
          var _this2 = this;

          var uToken = SbUserInfo.getInstance().GetUserToken();
          var lang = "vn";
          var url = SbConfigManager.getInstance().urlGetSchedules.replace("{seasonID}", seasonID);
          url = url.replace("{lang}", lang);
          this.clearUI();
          this.scrollView.stopAutoScroll();
          this.showLoading();
          SbGameHTTPManager.getInstance().sendGetHttpRequest(url, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(obj) {
            var listSchedule, isGroupView;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (!(obj.statusCode == 200)) {
                    _context.next = 12;
                    break;
                  }

                  _this2.clearUI();

                  listSchedule = obj.data.schedules;

                  if (listSchedule && listSchedule.length > 0) {
                    _this2.dataInfo = obj.data.schedules;
                  }

                  isGroupView = data && data.isGroupView;
                  log(listSchedule);
                  _context.next = 8;
                  return _this2.addListSchedule(listSchedule, false, totalRound, isGroupView);

                case 8:
                  _context.next = 10;
                  return _this2.addListSchedule(listSchedule, true, totalRound, isGroupView);

                case 10:
                  _this2.scrollToTop();

                  if (!_this2.IsHaveData) {
                    _this2.showMsg("Không có dữ liệu!");
                  }

                case 12:
                  _this2.hideLoading();

                case 13:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })), function () {
            //fail
            _this2.hideLoading();
          }, true);
        };

        _proto.addListSchedule = /*#__PURE__*/function () {
          var _addListSchedule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(listSchedule, showMatchEnded, totalRound, isGroupView) {
            var title, groupMaches, i, group, sportEvent, sportEventStatus, now, timeStartMatch, timeEndMatch;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (showMatchEnded === void 0) {
                    showMatchEnded = false;
                  }

                  if (isGroupView === void 0) {
                    isGroupView = false;
                  }

                  log(listSchedule);
                  title = "";
                  groupMaches = null;
                  i = 0;

                case 6:
                  if (!(i < listSchedule.length)) {
                    _context2.next = 43;
                    break;
                  }

                  group = "";
                  sportEvent = listSchedule[i].sport_event;
                  sportEventStatus = listSchedule[i].sport_event_status;
                  now = new Date().getTime();
                  timeStartMatch = new Date(sportEvent.start_time).getTime();
                  timeEndMatch = timeStartMatch + 86400 * 1000;

                  if (!sportEventStatus.hasOwnProperty("status")) {
                    _context2.next = 25;
                    break;
                  }

                  if (!showMatchEnded) {
                    _context2.next = 21;
                    break;
                  }

                  if (!(sportEventStatus.status.localeCompare(ScheduleSportStatusEnum.NOT_START) == 0)) {
                    _context2.next = 17;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 17:
                  if (!(sportEventStatus.status.localeCompare(ScheduleSportStatusEnum.ENDED) == 0 && now < timeEndMatch)) {
                    _context2.next = 19;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 19:
                  _context2.next = 25;
                  break;

                case 21:
                  if (!(sportEventStatus.status.localeCompare(ScheduleSportStatusEnum.ENDED) == 0)) {
                    _context2.next = 23;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 23:
                  if (!(now > timeStartMatch)) {
                    _context2.next = 25;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 25:
                  if (!isGroupView) {
                    _context2.next = 32;
                    break;
                  } //xếp theo bảng]


                  group = sportEvent.sport_event_context.groups[0].group_name;

                  if (group == null || group == undefined || group.length == 0 || Number(group) === 0) {
                    group = sportEvent.sport_event_context.groups[0].name; // For Season have Group Playoff and Round 

                    if (sportEvent.sport_event_context.round.hasOwnProperty("number")) {
                      if (sportEvent.sport_event_context.round.number !== 0) {
                        group = String(sportEvent.sport_event_context.round.number);
                      }
                    }
                  }

                  if (!(group == null || group == undefined)) {
                    _context2.next = 30;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 30:
                  _context2.next = 35;
                  break;

                case 32:
                  //xếp theo vòng
                  if (sportEvent.sport_event_context.round.hasOwnProperty("number")) {
                    group = String(sportEvent.sport_event_context.round.number);
                  } else if (sportEvent.sport_event_context.round.hasOwnProperty("name")) {
                    group = String(sportEvent.sport_event_context.round.name);
                  }

                  if (!(group == null || group == undefined)) {
                    _context2.next = 35;
                    break;
                  }

                  return _context2.abrupt("continue", 40);

                case 35:
                  if (group && group.localeCompare(title) != 0) {
                    title = group;
                    groupMaches = instantiate(this.matchSchedulePrefab).getComponent(SbMatchSchedule);
                    groupMaches.node.parent = this.nodeParentAllItem;
                  }

                  if (groupMaches != null) {
                    groupMaches.initData(listSchedule[i], title, totalRound);
                  }

                  if (!(i < listSchedule.length / 3)) {
                    _context2.next = 40;
                    break;
                  }

                  _context2.next = 40;
                  return SbUtils.Delay(1);

                case 40:
                  i++;
                  _context2.next = 6;
                  break;

                case 43:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function addListSchedule(_x2, _x3, _x4, _x5) {
            return _addListSchedule.apply(this, arguments);
          }

          return addListSchedule;
        }();

        _proto.onClickButtonStandings = function onClickButtonStandings() {
          SbSoundsManager.getInstance().playSfxClick();
          this.buttonSchedule.interactable = false;
          this.buttonStandings.interactable = true;
          this.tabSchedule.active = true;
          this.tabStandings.active = false;
        };

        _proto.sortSportEventsByGroup = function sortSportEventsByGroup(events) {
          return events.sort(function (a, b) {
            var _a$sport_event$sport_, _b$sport_event$sport_;

            var aGroupName = ((_a$sport_event$sport_ = a.sport_event.sport_event_context.groups.find(function (group) {
              return group.group_name;
            })) == null ? void 0 : _a$sport_event$sport_.group_name) || '';
            var bGroupName = ((_b$sport_event$sport_ = b.sport_event.sport_event_context.groups.find(function (group) {
              return group.group_name;
            })) == null ? void 0 : _b$sport_event$sport_.group_name) || '';

            if (aGroupName && bGroupName) {
              return aGroupName.localeCompare(bGroupName);
            } else if (aGroupName) {
              return -1;
            } else if (bGroupName) {
              return 1;
            } else {
              var _a$sport_event$sport_2, _b$sport_event$sport_2;

              var aName = ((_a$sport_event$sport_2 = a.sport_event.sport_event_context.groups.find(function (group) {
                return group.name;
              })) == null ? void 0 : _a$sport_event$sport_2.name) || '';
              var bName = ((_b$sport_event$sport_2 = b.sport_event.sport_event_context.groups.find(function (group) {
                return group.name;
              })) == null ? void 0 : _b$sport_event$sport_2.name) || '';

              if (aName && !bName) {
                return 1;
              } else if (!aName && bName) {
                return -1;
              } else if (aName && bName) {
                return bName.localeCompare(aName);
              } else {
                return 0;
              }
            }
          });
        };

        _createClass(SbTabSchedule, [{
          key: "isIndependent",
          get: function get() {
            return this.scheduleType === SBScheduleTypeEnum.INDEPENDENT;
          }
        }]);

        return SbTabSchedule;
      }(SbTabItem), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "matchSchedulePrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "buttonSchedule", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonStandings", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "uiMenuLeague", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "seasonDataJson", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "scheduleType", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SBScheduleTypeEnum.ALL;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "tabSchedule", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "tabStandings", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "seasonName", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabStatistic.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbTabItem.ts', './SbProgressCompare2Number.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, SbTabItem, SbProgressCompare2Number;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }, function (module) {
      SbProgressCompare2Number = module.SbProgressCompare2Number;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "18610430kBOJJdP3bPRCpte", "SbTabStatistic", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabStatistic = exports('SbTabStatistic', (_dec = ccclass('SbTabStatistic'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabStatistic, _SbTabItem);

        function SbTabStatistic() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabSbProgressCompare2Number", _descriptor, _assertThisInitialized(_this));

          _this.listItems = [];
          _this.listKeys = ["shots_total", "shots_on_target", "shots_off_target", "shots_blocked", "ball_possession", "corner_kicks", "offsides", "fouls", "cards_given", "yellow_cards", "yellow_red_cards", "red_cards", "substitutions", "shots_saved", "free_kicks", "throw_ins", "injuries"];
          _this.dataHome = null;
          _this.dataAway = null;
          _this.dataFake = [{
            "id": "sr:competitor:48",
            "name": "Everton FC",
            "abbreviation": "EVE",
            "qualifier": "home",
            "statistics": {
              "ball_possession": 60,
              "cards_given": 0,
              "corner_kicks": 10,
              "fouls": 11,
              "free_kicks": 9,
              "goal_kicks": 10,
              "injuries": 0,
              "offsides": 6,
              "red_cards": 0,
              "shots_blocked": 2,
              "shots_off_target": 3,
              "shots_on_target": 14,
              "shots_saved": 1,
              "shots_total": 19,
              "substitutions": 2,
              "throw_ins": 27,
              "yellow_cards": 0,
              "yellow_red_cards": 0
            }
          }, {
            "id": "sr:competitor:43",
            "name": "Fulham FC",
            "abbreviation": "FUL",
            "qualifier": "away",
            "statistics": {
              "ball_possession": 40,
              "cards_given": 2,
              "corner_kicks": 4,
              "fouls": 6,
              "free_kicks": 17,
              "goal_kicks": 6,
              "injuries": 1,
              "offsides": 3,
              "red_cards": 0,
              "shots_blocked": 1,
              "shots_off_target": 5,
              "shots_on_target": 2,
              "shots_saved": 14,
              "shots_total": 8,
              "substitutions": 3,
              "throw_ins": 22,
              "yellow_cards": 2,
              "yellow_red_cards": 0
            }
          }];
          return _this;
        }

        var _proto = SbTabStatistic.prototype;

        _proto.SetDataStatistic = function SetDataStatistic(data) {
          this.dataInfo = data;

          if (!this.dataInfo) {
            return;
          }

          this.dataHome = this.dataInfo[0].statistics;
          this.dataAway = this.dataInfo[1].statistics;

          for (var i = 0; i < this.listKeys.length; i++) {
            var keyName = this.listKeys[i];
            this.setDataItem(keyName, this.dataHome, this.dataAway);
          }
        };

        _proto.ResetTab = function ResetTab() {
          _SbTabItem.prototype.ResetTab.call(this);

          this.scrollToTop();
        };

        _proto.getItemWithKey = function getItemWithKey(key) {
          for (var i = 0; i < this.listItems.length; i++) {
            if (this.listItems[i].GetKey().localeCompare(key) == 0) return this.listItems[i];
          }

          return null;
        };

        _proto.setDataItem = function setDataItem(keyName, dataHome, dataAway) {
          if (!dataHome || !dataAway) {
            return;
          }

          if (dataHome.hasOwnProperty(keyName) && dataAway.hasOwnProperty(keyName)) {
            var homeValue = dataHome[keyName];
            var awayValue = dataAway[keyName];
            var item = this.getItemWithKey(keyName);

            if (!item) {
              item = instantiate(this.prefabSbProgressCompare2Number).getComponent(SbProgressCompare2Number);
              item.node.parent = this.nodeParentAllItem;
              this.listItems.push(item);
            }

            var maxValue = homeValue + awayValue; // if (maxValue == 0) {
            //     item.node.active = false;
            // } else {
            //     item.node.active = true;

            item.SetKey(keyName, maxValue);
            item.SetData(keyName, homeValue, awayValue); // }
          }
        };

        return SbTabStatistic;
      }(SbTabItem), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabSbProgressCompare2Number", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTabTimeline.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSummaryEvent.ts', './SbTabItem.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, SbSummaryEvent, SbTabItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
    }, function (module) {
      SbSummaryEvent = module.SbSummaryEvent;
    }, function (module) {
      SbTabItem = module.SbTabItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "b5925SBXOxM2bzG+5HmkYTZ", "SbTabTimeline", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTabTimeline = exports('SbTabTimeline', (_dec = ccclass('SbTabTimeline'), _dec2 = property(Prefab), _dec(_class = (_class2 = /*#__PURE__*/function (_SbTabItem) {
        _inheritsLoose(SbTabTimeline, _SbTabItem);

        function SbTabTimeline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SbTabItem.call.apply(_SbTabItem, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "prefabSummaryEvent", _descriptor, _assertThisInitialized(_this));

          _this.listKeys = ["score_change", "yellow_card", "red_card", "substitution"];
          _this.dataFake = [{
            "id": 1566825116,
            "type": "match_started",
            "time": "2023-10-14T22:03:58+00:00"
          }, {
            "id": 1566825118,
            "type": "period_start",
            "time": "2023-10-14T22:03:58+00:00",
            "period": 1,
            "period_type": "regular_period",
            "period_name": "regular_period"
          }, {
            "id": 1566825624,
            "type": "free_kick",
            "time": "2023-10-14T22:05:13+00:00",
            "match_time": 2,
            "match_clock": "1:15",
            "competitor": "home",
            "x": 73,
            "y": 84,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566826242,
            "type": "shot_off_target",
            "time": "2023-10-14T22:06:39+00:00",
            "match_time": 3,
            "match_clock": "2:40",
            "competitor": "home",
            "x": 81,
            "y": 59,
            "period": 1,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566826252,
            "type": "goal_kick",
            "time": "2023-10-14T22:06:39+00:00",
            "match_time": 3,
            "match_clock": "2:40",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566826842,
            "type": "throw_in",
            "time": "2023-10-14T22:07:57+00:00",
            "match_time": 4,
            "match_clock": "3:58",
            "competitor": "home",
            "x": 81,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566827140,
            "type": "goal_kick",
            "time": "2023-10-14T22:08:45+00:00",
            "match_time": 5,
            "match_clock": "4:46",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566827476,
            "type": "free_kick",
            "time": "2023-10-14T22:09:39+00:00",
            "match_time": 6,
            "match_clock": "5:40",
            "competitor": "away",
            "x": 41,
            "y": 54,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566827702,
            "type": "throw_in",
            "time": "2023-10-14T22:10:09+00:00",
            "match_time": 7,
            "match_clock": "6:10",
            "competitor": "home",
            "x": 14,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566827950,
            "type": "free_kick",
            "time": "2023-10-14T22:10:41+00:00",
            "match_time": 7,
            "match_clock": "6:43",
            "competitor": "home",
            "x": 58,
            "y": 28,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566828572,
            "type": "free_kick",
            "time": "2023-10-14T22:12:07+00:00",
            "match_time": 9,
            "match_clock": "8:09",
            "competitor": "home",
            "x": 87,
            "y": 16,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566828974,
            "type": "throw_in",
            "time": "2023-10-14T22:13:03+00:00",
            "match_time": 10,
            "match_clock": "9:05",
            "competitor": "home",
            "x": 81,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566829098,
            "type": "throw_in",
            "time": "2023-10-14T22:13:20+00:00",
            "match_time": 10,
            "match_clock": "9:21",
            "competitor": "away",
            "x": 81,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566829334,
            "type": "free_kick",
            "time": "2023-10-14T22:13:50+00:00",
            "match_time": 10,
            "match_clock": "9:52",
            "competitor": "home",
            "x": 35,
            "y": 30,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566830952,
            "type": "offside",
            "time": "2023-10-14T22:17:22+00:00",
            "match_time": 14,
            "match_clock": "13:23",
            "competitor": "away",
            "x": 11,
            "y": 20,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566831300,
            "type": "injury",
            "time": "2023-10-14T22:18:14+00:00",
            "match_time": 15,
            "match_clock": "14:14",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1549503",
              "name": "Veglio, Bruno"
            }],
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566831968,
            "type": "offside",
            "time": "2023-10-14T22:20:01+00:00",
            "match_time": 17,
            "match_clock": "16:02",
            "competitor": "home",
            "x": 82,
            "y": 67,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566832026,
            "type": "injury_return",
            "time": "2023-10-14T22:20:11+00:00",
            "match_time": 17,
            "match_clock": "16:12",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1549503",
              "name": "Veglio, Bruno"
            }],
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566832284,
            "type": "throw_in",
            "time": "2023-10-14T22:20:56+00:00",
            "match_time": 17,
            "match_clock": "16:57",
            "competitor": "away",
            "x": 86,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833016,
            "type": "throw_in",
            "time": "2023-10-14T22:22:37+00:00",
            "match_time": 19,
            "match_clock": "18:38",
            "competitor": "home",
            "x": 79,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833168,
            "type": "throw_in",
            "time": "2023-10-14T22:23:03+00:00",
            "match_time": 20,
            "match_clock": "19:04",
            "competitor": "home",
            "x": 93,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833330,
            "type": "offside",
            "time": "2023-10-14T22:23:25+00:00",
            "match_time": 20,
            "match_clock": "19:26",
            "competitor": "home",
            "x": 87,
            "y": 78,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833398,
            "type": "substitution",
            "time": "2023-10-14T22:23:40+00:00",
            "match_time": 20,
            "match_clock": "19:41",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1549503",
              "name": "Veglio, Bruno",
              "type": "substituted_out"
            }, {
              "id": "sr:player:2123066",
              "name": "Rolon, Kevin",
              "type": "substituted_in"
            }],
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833602,
            "type": "throw_in",
            "time": "2023-10-14T22:24:16+00:00",
            "match_time": 21,
            "match_clock": "20:14",
            "competitor": "home",
            "x": 67,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833754,
            "type": "free_kick",
            "time": "2023-10-14T22:24:43+00:00",
            "match_time": 21,
            "match_clock": "20:44",
            "competitor": "away",
            "x": 91,
            "y": 16,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566833980,
            "type": "throw_in",
            "time": "2023-10-14T22:25:26+00:00",
            "match_time": 22,
            "match_clock": "21:28",
            "competitor": "away",
            "x": 37,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566834292,
            "type": "shot_on_target",
            "time": "2023-10-14T22:26:16+00:00",
            "match_time": 23,
            "match_clock": "22:17",
            "competitor": "home",
            "x": 85,
            "y": 55,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566834296,
            "type": "shot_saved",
            "time": "2023-10-14T22:26:17+00:00",
            "match_time": 23,
            "match_clock": "22:18",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566834392,
            "type": "free_kick",
            "time": "2023-10-14T22:26:32+00:00",
            "match_time": 23,
            "match_clock": "22:33",
            "competitor": "away",
            "x": 69,
            "y": 11,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566834790,
            "type": "throw_in",
            "time": "2023-10-14T22:27:33+00:00",
            "match_time": 24,
            "match_clock": "23:34",
            "competitor": "away",
            "x": 10,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566834976,
            "type": "throw_in",
            "time": "2023-10-14T22:27:59+00:00",
            "match_time": 25,
            "match_clock": "24:00",
            "competitor": "away",
            "x": 30,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566835300,
            "type": "corner_kick",
            "time": "2023-10-14T22:28:46+00:00",
            "match_time": 25,
            "match_clock": "24:47",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2297693",
              "name": "Gonzalez, Brian"
            }],
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566835754,
            "type": "goal_kick",
            "time": "2023-10-14T22:29:53+00:00",
            "match_time": 26,
            "match_clock": "25:54",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566836020,
            "type": "throw_in",
            "time": "2023-10-14T22:30:29+00:00",
            "match_time": 27,
            "match_clock": "26:29",
            "competitor": "home",
            "x": 68,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566836488,
            "type": "throw_in",
            "time": "2023-10-14T22:31:45+00:00",
            "match_time": 28,
            "match_clock": "27:46",
            "competitor": "home",
            "x": 88,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566836580,
            "type": "shot_off_target",
            "time": "2023-10-14T22:32:03+00:00",
            "match_time": 29,
            "match_clock": "28:04",
            "competitor": "home",
            "x": 87,
            "y": 50,
            "period": 1,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566836584,
            "type": "goal_kick",
            "time": "2023-10-14T22:32:03+00:00",
            "match_time": 29,
            "match_clock": "28:04",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566837404,
            "type": "goal_kick",
            "time": "2023-10-14T22:34:24+00:00",
            "match_time": 31,
            "match_clock": "30:25",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566837550,
            "type": "throw_in",
            "time": "2023-10-14T22:34:50+00:00",
            "match_time": 31,
            "match_clock": "30:51",
            "competitor": "away",
            "x": 82,
            "y": 0,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566837710,
            "type": "throw_in",
            "time": "2023-10-14T22:35:20+00:00",
            "match_time": 32,
            "match_clock": "31:21",
            "competitor": "home",
            "x": 75,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566838108,
            "type": "free_kick",
            "time": "2023-10-14T22:36:14+00:00",
            "match_time": 33,
            "match_clock": "32:15",
            "competitor": "home",
            "x": 22,
            "y": 60,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566838282,
            "type": "offside",
            "time": "2023-10-14T22:36:38+00:00",
            "match_time": 33,
            "match_clock": "32:39",
            "competitor": "home",
            "x": 81,
            "y": 13,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566838508,
            "type": "free_kick",
            "time": "2023-10-14T22:37:09+00:00",
            "match_time": 34,
            "match_clock": "33:10",
            "competitor": "home",
            "x": 68,
            "y": 20,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566838792,
            "type": "shot_on_target",
            "time": "2023-10-14T22:37:52+00:00",
            "match_time": 34,
            "match_clock": "33:53",
            "competitor": "home",
            "x": 85,
            "y": 58,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566838800,
            "type": "shot_saved",
            "time": "2023-10-14T22:37:53+00:00",
            "match_time": 34,
            "match_clock": "33:54",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566839010,
            "type": "goal_kick",
            "time": "2023-10-14T22:38:33+00:00",
            "match_time": 35,
            "match_clock": "34:34",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566839260,
            "type": "shot_on_target",
            "time": "2023-10-14T22:39:11+00:00",
            "match_time": 36,
            "match_clock": "35:13",
            "competitor": "home",
            "x": 90,
            "y": 31,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566839432,
            "type": "shot_off_target",
            "time": "2023-10-14T22:39:35+00:00",
            "match_time": 36,
            "match_clock": "35:36",
            "competitor": "home",
            "x": 88,
            "y": 32,
            "period": 1,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566839438,
            "type": "goal_kick",
            "time": "2023-10-14T22:39:35+00:00",
            "match_time": 36,
            "match_clock": "35:36",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566839822,
            "type": "goal_kick",
            "time": "2023-10-14T22:40:32+00:00",
            "match_time": 37,
            "match_clock": "36:33",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566840048,
            "type": "free_kick",
            "time": "2023-10-14T22:41:06+00:00",
            "match_time": 38,
            "match_clock": "37:07",
            "competitor": "away",
            "x": 81,
            "y": 31,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566840588,
            "type": "offside",
            "time": "2023-10-14T22:42:27+00:00",
            "match_time": 39,
            "match_clock": "38:28",
            "competitor": "home",
            "x": 91,
            "y": 51,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566841004,
            "type": "throw_in",
            "time": "2023-10-14T22:43:26+00:00",
            "match_time": 40,
            "match_clock": "39:27",
            "competitor": "away",
            "x": 71,
            "y": 100,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566841074,
            "type": "free_kick",
            "time": "2023-10-14T22:43:40+00:00",
            "match_time": 40,
            "match_clock": "39:41",
            "competitor": "away",
            "x": 17,
            "y": 89,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566841594,
            "type": "offside",
            "time": "2023-10-14T22:45:04+00:00",
            "match_time": 42,
            "match_clock": "41:06",
            "competitor": "home",
            "x": 85,
            "y": 46,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566843608,
            "type": "goal_kick",
            "time": "2023-10-14T22:47:09+00:00",
            "match_time": 44,
            "match_clock": "43:10",
            "competitor": "home",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566844046,
            "type": "shot_on_target",
            "time": "2023-10-14T22:48:31+00:00",
            "match_time": 45,
            "match_clock": "44:32",
            "competitor": "away",
            "x": 15,
            "y": 45,
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566844088,
            "type": "shot_saved",
            "time": "2023-10-14T22:48:35+00:00",
            "match_time": 45,
            "match_clock": "44:36",
            "competitor": "home",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566844134,
            "type": "goal_kick",
            "time": "2023-10-14T22:48:46+00:00",
            "match_time": 45,
            "match_clock": "44:47",
            "competitor": "away",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566844260,
            "type": "injury_time_shown",
            "time": "2023-10-14T22:49:05+00:00",
            "match_time": 45,
            "match_clock": "45:00",
            "stoppage_time": 1,
            "stoppage_time_clock": "0:07",
            "period": 1,
            "period_type": "regular_period",
            "injury_time_announced": 2
          }, {
            "id": 1566844538,
            "type": "offside",
            "time": "2023-10-14T22:49:50+00:00",
            "match_time": 45,
            "match_clock": "45:00",
            "competitor": "away",
            "x": 33,
            "y": 29,
            "stoppage_time": 1,
            "stoppage_time_clock": "0:51",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566844970,
            "type": "corner_kick",
            "time": "2023-10-14T22:51:01+00:00",
            "match_time": 45,
            "match_clock": "45:00",
            "competitor": "away",
            "players": [{
              "id": "sr:player:339123",
              "name": "Alaniz, Martin"
            }],
            "stoppage_time": 3,
            "stoppage_time_clock": "2:02",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566845034,
            "type": "free_kick",
            "time": "2023-10-14T22:51:14+00:00",
            "match_time": 45,
            "match_clock": "45:00",
            "competitor": "home",
            "x": 79,
            "y": 77,
            "stoppage_time": 3,
            "stoppage_time_clock": "2:15",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566845308,
            "type": "yellow_card",
            "time": "2023-10-14T22:52:06+00:00",
            "match_time": 45,
            "competitor": "away",
            "players": [{
              "id": "sr:player:1407307",
              "name": "Rabino, Renzo"
            }],
            "stoppage_time": 3,
            "stoppage_time_clock": "3:08",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566845442,
            "type": "period_score",
            "time": "2023-10-14T22:52:34+00:00",
            "period": 1,
            "period_type": "regular_period"
          }, {
            "id": 1566845446,
            "type": "break_start",
            "time": "2023-10-14T22:52:34+00:00",
            "period_type": "pause",
            "break_name": "pause"
          }, {
            "id": 1566851708,
            "type": "period_start",
            "time": "2023-10-14T23:11:27+00:00",
            "period": 2,
            "period_type": "regular_period",
            "period_name": "regular_period"
          }, {
            "id": 1566851996,
            "type": "corner_kick",
            "time": "2023-10-14T23:12:11+00:00",
            "match_time": 46,
            "match_clock": "45:44",
            "competitor": "home",
            "players": [{
              "id": "sr:player:2123066",
              "name": "Rolon, Kevin"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566852088,
            "type": "throw_in",
            "time": "2023-10-14T23:12:28+00:00",
            "match_time": 47,
            "match_clock": "46:00",
            "competitor": "away",
            "x": 37,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566853178,
            "type": "red_card",
            "time": "2023-10-14T23:14:12+00:00",
            "match_time": 48,
            "match_clock": "47:39",
            "competitor": "home",
            "players": [{
              "id": "sr:player:175093",
              "name": "Cerro, Francisco"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566853184,
            "type": "free_kick",
            "time": "2023-10-14T23:14:12+00:00",
            "match_time": 48,
            "match_clock": "47:44",
            "competitor": "away",
            "x": 73,
            "y": 67,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566854896,
            "type": "offside",
            "time": "2023-10-14T23:15:54+00:00",
            "match_time": 50,
            "match_clock": "49:25",
            "competitor": "away",
            "x": 19,
            "y": 43,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566855202,
            "type": "shot_on_target",
            "time": "2023-10-14T23:16:33+00:00",
            "match_time": 51,
            "match_clock": "50:05",
            "competitor": "home",
            "x": 86,
            "y": 55,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566855230,
            "type": "shot_saved",
            "time": "2023-10-14T23:16:36+00:00",
            "match_time": 51,
            "match_clock": "50:07",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566855354,
            "type": "offside",
            "time": "2023-10-14T23:16:53+00:00",
            "match_time": 51,
            "match_clock": "50:24",
            "competitor": "home",
            "x": 83,
            "y": 58,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566855688,
            "type": "throw_in",
            "time": "2023-10-14T23:17:36+00:00",
            "match_time": 52,
            "match_clock": "51:07",
            "competitor": "away",
            "x": 24,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566855986,
            "type": "throw_in",
            "time": "2023-10-14T23:18:13+00:00",
            "match_time": 52,
            "match_clock": "51:44",
            "competitor": "away",
            "x": 28,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566856174,
            "type": "free_kick",
            "time": "2023-10-14T23:18:43+00:00",
            "match_time": 53,
            "match_clock": "52:15",
            "competitor": "away",
            "x": 61,
            "y": 74,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566856436,
            "type": "free_kick",
            "time": "2023-10-14T23:19:26+00:00",
            "match_time": 53,
            "match_clock": "52:58",
            "competitor": "home",
            "x": 9,
            "y": 40,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566856868,
            "type": "free_kick",
            "time": "2023-10-14T23:20:18+00:00",
            "match_time": 54,
            "match_clock": "53:49",
            "competitor": "away",
            "x": 34,
            "y": 36,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566857168,
            "type": "shot_on_target",
            "time": "2023-10-14T23:21:00+00:00",
            "match_time": 55,
            "match_clock": "54:32",
            "competitor": "away",
            "x": 15,
            "y": 44,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566857768,
            "type": "throw_in",
            "time": "2023-10-14T23:22:22+00:00",
            "match_time": 56,
            "match_clock": "55:54",
            "competitor": "home",
            "x": 76,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566857934,
            "type": "shot_off_target",
            "time": "2023-10-14T23:22:48+00:00",
            "match_time": 57,
            "match_clock": "56:20",
            "competitor": "home",
            "x": 84,
            "y": 68,
            "period": 2,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566857956,
            "type": "goal_kick",
            "time": "2023-10-14T23:22:49+00:00",
            "match_time": 57,
            "match_clock": "56:20",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566858116,
            "type": "throw_in",
            "time": "2023-10-14T23:23:09+00:00",
            "match_time": 57,
            "match_clock": "56:41",
            "competitor": "away",
            "x": 42,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566858244,
            "type": "free_kick",
            "time": "2023-10-14T23:23:28+00:00",
            "match_time": 58,
            "match_clock": "57:00",
            "competitor": "home",
            "x": 24,
            "y": 46,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566858450,
            "type": "throw_in",
            "time": "2023-10-14T23:24:01+00:00",
            "match_time": 58,
            "match_clock": "57:33",
            "competitor": "away",
            "x": 82,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566858616,
            "type": "throw_in",
            "time": "2023-10-14T23:24:33+00:00",
            "match_time": 59,
            "match_clock": "58:04",
            "competitor": "away",
            "x": 78,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566858966,
            "type": "throw_in",
            "time": "2023-10-14T23:25:08+00:00",
            "match_time": 59,
            "match_clock": "58:40",
            "competitor": "home",
            "x": 17,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566859150,
            "type": "free_kick",
            "time": "2023-10-14T23:25:41+00:00",
            "match_time": 60,
            "match_clock": "59:13",
            "competitor": "home",
            "x": 33,
            "y": 82,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566859390,
            "type": "yellow_card",
            "time": "2023-10-14T23:26:20+00:00",
            "match_time": 60,
            "match_clock": "59:43",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2297693",
              "name": "Gonzalez, Brian"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566859506,
            "type": "yellow_card",
            "time": "2023-10-14T23:26:37+00:00",
            "match_time": 60,
            "match_clock": "59:55",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1600932",
              "name": "Fonseca, Nicolas"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566859552,
            "type": "free_kick",
            "time": "2023-10-14T23:26:46+00:00",
            "match_time": 61,
            "match_clock": "60:17",
            "competitor": "away",
            "x": 81,
            "y": 82,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566859722,
            "type": "free_kick",
            "time": "2023-10-14T23:27:09+00:00",
            "match_time": 61,
            "match_clock": "60:40",
            "competitor": "home",
            "x": 66,
            "y": 68,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566861108,
            "type": "corner_kick",
            "time": "2023-10-14T23:30:24+00:00",
            "match_time": 64,
            "match_clock": "63:55",
            "competitor": "away",
            "players": [{
              "id": "sr:player:339123",
              "name": "Alaniz, Martin"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566861432,
            "type": "possible_goal",
            "time": "2023-10-14T23:31:07+00:00",
            "match_time": 65,
            "match_clock": "64:35",
            "competitor": "home",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566861530,
            "type": "score_change",
            "time": "2023-10-14T23:31:22+00:00",
            "match_time": 65,
            "match_clock": "64:35",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1947684",
              "name": "Fonseca, Matias",
              "type": "scorer"
            }, {
              "id": "sr:player:900340",
              "name": "Andrade, Tomas",
              "type": "assist"
            }],
            "x": 91,
            "y": 57,
            "period": 2,
            "period_type": "regular_period",
            "home_score": 1,
            "away_score": 0
          }, {
            "id": 1566862118,
            "type": "substitution",
            "time": "2023-10-14T23:32:35+00:00",
            "match_time": 67,
            "match_clock": "66:07",
            "competitor": "home",
            "players": [{
              "id": "sr:player:340347",
              "name": "Camargo, Gonzalo",
              "type": "substituted_out"
            }, {
              "id": "sr:player:2297199",
              "name": "Figueredo, Sebastian",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566862120,
            "type": "substitution",
            "time": "2023-10-14T23:32:35+00:00",
            "match_time": 67,
            "match_clock": "66:07",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1707243",
              "name": "Acosta, Juan Manuel",
              "type": "substituted_out"
            }, {
              "id": "sr:player:42465",
              "name": "Viudez, Tabare",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566862232,
            "type": "substitution",
            "time": "2023-10-14T23:32:50+00:00",
            "match_time": 67,
            "match_clock": "66:22",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2389661",
              "name": "Mir Garcia, Matias",
              "type": "substituted_out"
            }, {
              "id": "sr:player:1410887",
              "name": "Villar, Emiliano",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566862346,
            "type": "throw_in",
            "time": "2023-10-14T23:33:07+00:00",
            "match_time": 67,
            "match_clock": "66:38",
            "competitor": "home",
            "x": 16,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566862758,
            "type": "free_kick",
            "time": "2023-10-14T23:33:55+00:00",
            "match_time": 68,
            "match_clock": "67:26",
            "competitor": "home",
            "x": 24,
            "y": 44,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566863190,
            "type": "goal_kick",
            "time": "2023-10-14T23:34:56+00:00",
            "match_time": 69,
            "match_clock": "68:28",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566863952,
            "type": "injury",
            "time": "2023-10-14T23:36:38+00:00",
            "match_time": 71,
            "match_clock": "70:09",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2297693",
              "name": "Gonzalez, Brian"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566864830,
            "type": "free_kick",
            "time": "2023-10-14T23:38:56+00:00",
            "match_time": 73,
            "match_clock": "72:28",
            "competitor": "away",
            "x": 62,
            "y": 85,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566864978,
            "type": "substitution",
            "time": "2023-10-14T23:39:18+00:00",
            "match_time": 73,
            "match_clock": "72:50",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2297693",
              "name": "Gonzalez, Brian",
              "type": "substituted_out"
            }, {
              "id": "sr:player:2570515",
              "name": "Da Costa, Facundo",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566865080,
            "type": "injury_return",
            "time": "2023-10-14T23:39:32+00:00",
            "match_time": 74,
            "match_clock": "73:03",
            "competitor": "away",
            "players": [{
              "id": "sr:player:2297693",
              "name": "Gonzalez, Brian"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566865576,
            "type": "throw_in",
            "time": "2023-10-14T23:40:25+00:00",
            "match_time": 74,
            "match_clock": "73:57",
            "competitor": "away",
            "x": 24,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566865718,
            "type": "shot_off_target",
            "time": "2023-10-14T23:40:51+00:00",
            "match_time": 75,
            "match_clock": "74:23",
            "competitor": "away",
            "x": 12,
            "y": 42,
            "period": 2,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566865732,
            "type": "goal_kick",
            "time": "2023-10-14T23:40:52+00:00",
            "match_time": 75,
            "match_clock": "74:23",
            "competitor": "home",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566866060,
            "type": "free_kick",
            "time": "2023-10-14T23:41:32+00:00",
            "match_time": 76,
            "match_clock": "75:04",
            "competitor": "away",
            "x": 38,
            "y": 81,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566866268,
            "type": "throw_in",
            "time": "2023-10-14T23:41:58+00:00",
            "match_time": 76,
            "match_clock": "75:29",
            "competitor": "away",
            "x": 22,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566866382,
            "type": "throw_in",
            "time": "2023-10-14T23:42:14+00:00",
            "match_time": 76,
            "match_clock": "75:46",
            "competitor": "away",
            "x": 13,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566866820,
            "type": "possible_goal",
            "time": "2023-10-14T23:42:57+00:00",
            "match_time": 77,
            "match_clock": "76:25",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867074,
            "type": "substitution",
            "time": "2023-10-14T23:43:34+00:00",
            "match_time": 78,
            "match_clock": "77:05",
            "competitor": "home",
            "players": [{
              "id": "sr:player:900340",
              "name": "Andrade, Tomas",
              "type": "substituted_out"
            }, {
              "id": "sr:player:2056827",
              "name": "Wagner, Guillermo",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867076,
            "type": "substitution",
            "time": "2023-10-14T23:43:34+00:00",
            "match_time": 78,
            "match_clock": "77:05",
            "competitor": "home",
            "players": [{
              "id": "sr:player:1947684",
              "name": "Fonseca, Matias",
              "type": "substituted_out"
            }, {
              "id": "sr:player:153654",
              "name": "Pastorini, Rodrigo",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867292,
            "type": "corner_kick",
            "time": "2023-10-14T23:43:53+00:00",
            "match_time": 78,
            "match_clock": "77:25",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867392,
            "type": "free_kick",
            "time": "2023-10-14T23:44:03+00:00",
            "match_time": 78,
            "match_clock": "77:34",
            "competitor": "home",
            "x": 9,
            "y": 62,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867640,
            "type": "free_kick",
            "time": "2023-10-14T23:44:38+00:00",
            "match_time": 79,
            "match_clock": "78:09",
            "competitor": "away",
            "x": 37,
            "y": 11,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867894,
            "type": "shot_on_target",
            "time": "2023-10-14T23:45:06+00:00",
            "match_time": 79,
            "match_clock": "78:37",
            "competitor": "away",
            "x": 11,
            "y": 60,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566867902,
            "type": "shot_saved",
            "time": "2023-10-14T23:45:07+00:00",
            "match_time": 79,
            "match_clock": "78:39",
            "competitor": "home",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566868146,
            "type": "throw_in",
            "time": "2023-10-14T23:45:35+00:00",
            "match_time": 80,
            "match_clock": "79:06",
            "competitor": "home",
            "x": 83,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566868686,
            "type": "throw_in",
            "time": "2023-10-14T23:46:14+00:00",
            "match_time": 80,
            "match_clock": "79:46",
            "competitor": "away",
            "x": 25,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566868956,
            "type": "free_kick",
            "time": "2023-10-14T23:46:41+00:00",
            "match_time": 81,
            "match_clock": "80:13",
            "competitor": "away",
            "x": 17,
            "y": 64,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566869588,
            "type": "throw_in",
            "time": "2023-10-14T23:48:00+00:00",
            "match_time": 82,
            "match_clock": "81:32",
            "competitor": "home",
            "x": 11,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566869926,
            "type": "throw_in",
            "time": "2023-10-14T23:48:35+00:00",
            "match_time": 83,
            "match_clock": "82:06",
            "competitor": "away",
            "x": 20,
            "y": 0,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566870108,
            "type": "throw_in",
            "time": "2023-10-14T23:48:56+00:00",
            "match_time": 83,
            "match_clock": "82:27",
            "competitor": "away",
            "x": 20,
            "y": 100,
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566870694,
            "type": "video_assistant_referee",
            "time": "2023-10-14T23:50:05+00:00",
            "match_time": 84,
            "match_clock": "83:36",
            "period": 2,
            "period_type": "regular_period",
            "description": "penalty",
            "competitor": "away"
          }, {
            "id": 1566871240,
            "type": "video_assistant_referee_over",
            "time": "2023-10-14T23:51:08+00:00",
            "match_time": 85,
            "match_clock": "84:40",
            "period": 2,
            "period_type": "regular_period",
            "description": "penalty",
            "competitor": "away"
          }, {
            "id": 1566871340,
            "type": "penalty_awarded",
            "time": "2023-10-14T23:51:23+00:00",
            "match_time": 85,
            "match_clock": "84:54",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566871828,
            "type": "penalty_missed",
            "time": "2023-10-14T23:52:24+00:00",
            "match_time": 86,
            "match_clock": "85:56",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566871830,
            "type": "score_change",
            "time": "2023-10-14T23:52:24+00:00",
            "match_time": 86,
            "match_clock": "85:56",
            "competitor": "away",
            "players": [{
              "id": "sr:player:339123",
              "name": "Alaniz, Martin",
              "type": "scorer"
            }],
            "x": 11,
            "y": 50,
            "period": 2,
            "period_type": "regular_period",
            "home_score": 1,
            "away_score": 1
          }, {
            "id": 1566872562,
            "type": "corner_kick",
            "time": "2023-10-14T23:53:42+00:00",
            "match_time": 88,
            "match_clock": "87:14",
            "competitor": "home",
            "players": [{
              "id": "sr:player:42465",
              "name": "Viudez, Tabare"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566872762,
            "type": "shot_off_target",
            "time": "2023-10-14T23:54:02+00:00",
            "match_time": 88,
            "match_clock": "87:34",
            "competitor": "home",
            "x": 86,
            "y": 42,
            "period": 2,
            "period_type": "regular_period",
            "outcome": "miss"
          }, {
            "id": 1566872768,
            "type": "goal_kick",
            "time": "2023-10-14T23:54:03+00:00",
            "match_time": 88,
            "match_clock": "87:34",
            "competitor": "away",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566873664,
            "type": "substitution",
            "time": "2023-10-14T23:56:09+00:00",
            "match_time": 90,
            "match_clock": "89:41",
            "competitor": "away",
            "players": [{
              "id": "sr:player:247217",
              "name": "Lima, Adolfo",
              "type": "substituted_out"
            }, {
              "id": "sr:player:2056831",
              "name": "Gianoli, Martin",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566873666,
            "type": "substitution",
            "time": "2023-10-14T23:56:09+00:00",
            "match_time": 90,
            "match_clock": "89:41",
            "competitor": "away",
            "players": [{
              "id": "sr:player:1120975",
              "name": "Viera, Santiago",
              "type": "substituted_out"
            }, {
              "id": "sr:player:339131",
              "name": "Pereira Ferron, Hamilton Miguel",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566873668,
            "type": "substitution",
            "time": "2023-10-14T23:56:09+00:00",
            "match_time": 90,
            "match_clock": "89:41",
            "competitor": "away",
            "players": [{
              "id": "sr:player:1406301",
              "name": "Brasil Alcaire, Mauro Alejandro",
              "type": "substituted_out"
            }, {
              "id": "sr:player:179343",
              "name": "Garcia, Rafael",
              "type": "substituted_in"
            }],
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566873838,
            "type": "injury_time_shown",
            "time": "2023-10-14T23:56:41+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "stoppage_time": 1,
            "stoppage_time_clock": "0:12",
            "period": 2,
            "period_type": "regular_period",
            "injury_time_announced": 7
          }, {
            "id": 1566874122,
            "type": "throw_in",
            "time": "2023-10-14T23:57:26+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "home",
            "x": 32,
            "y": 100,
            "stoppage_time": 1,
            "stoppage_time_clock": "0:58",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566874406,
            "type": "free_kick",
            "time": "2023-10-14T23:58:23+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "home",
            "x": 65,
            "y": 34,
            "stoppage_time": 2,
            "stoppage_time_clock": "1:55",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566874738,
            "type": "free_kick",
            "time": "2023-10-14T23:59:07+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "home",
            "x": 17,
            "y": 74,
            "stoppage_time": 3,
            "stoppage_time_clock": "2:38",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566874924,
            "type": "goal_kick",
            "time": "2023-10-14T23:59:42+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "away",
            "stoppage_time": 4,
            "stoppage_time_clock": "3:13",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566875192,
            "type": "free_kick",
            "time": "2023-10-15T00:00:29+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "away",
            "x": 76,
            "y": 75,
            "stoppage_time": 5,
            "stoppage_time_clock": "4:02",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566875672,
            "type": "throw_in",
            "time": "2023-10-15T00:01:33+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "home",
            "x": 79,
            "y": 100,
            "stoppage_time": 6,
            "stoppage_time_clock": "5:06",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566875774,
            "type": "throw_in",
            "time": "2023-10-15T00:01:51+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "away",
            "x": 86,
            "y": 100,
            "stoppage_time": 6,
            "stoppage_time_clock": "5:24",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566875962,
            "type": "free_kick",
            "time": "2023-10-15T00:02:22+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "home",
            "x": 69,
            "y": 83,
            "stoppage_time": 6,
            "stoppage_time_clock": "5:55",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566876196,
            "type": "free_kick",
            "time": "2023-10-15T00:02:49+00:00",
            "match_time": 90,
            "match_clock": "90:00",
            "competitor": "away",
            "x": 92,
            "y": 50,
            "stoppage_time": 7,
            "stoppage_time_clock": "6:21",
            "period": 2,
            "period_type": "regular_period"
          }, {
            "id": 1566876514,
            "type": "match_ended",
            "time": "2023-10-15T00:03:37+00:00",
            "match_clock": "90:00"
          }];
          return _this;
        }

        var _proto = SbTabTimeline.prototype;

        _proto.SetDataTimeLine = function SetDataTimeLine(data) {
          this.dataInfo = data;

          if (!this.dataInfo) {
            return;
          }

          this.nodeParentAllItem.removeAllChildren();
          var listData = this.filterData(this.listKeys, this.dataInfo);

          for (var i = 0; i < listData.length; i++) {
            // if (listData[i].type.localeCompare("yellow_card") == 0) {
            var item = instantiate(this.prefabSummaryEvent).getComponent(SbSummaryEvent);
            item.SetID(listData[i].id, listData[i].type);
            item.InitData(listData[i]);
            item.node.parent = this.nodeParentAllItem; // }
          }
        };

        _proto.filterData = function filterData(listKey, listData) {
          return listData.filter(function (item) {
            return listKey.includes(item.type);
          });
        };

        return SbTabTimeline;
      }(SbTabItem), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabSummaryEvent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTesting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "8079aDRt6ZAupCOURuTvK9w", "SbTesting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTesting = exports('default', (_dec = ccclass('SbTesting'), _dec2 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbTesting, _Component);

        function SbTesting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbTesting.prototype; // LIFE-CYCLE CALLBACKS:
        // onLoad () {}

        _proto.start = function start() {
          this.label.setSiblingIndex(0);
        } // update (dt) {}
        ;

        return SbTesting;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'hello';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbToggleTwoNode.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ed077cp13FCVL8FMSMTjn6p", "SbToggleTwoNode", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbToggleTwoNode = exports('SbToggleTwoNode', (_dec = ccclass('SbToggleTwoNode'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Toggle) {
        _inheritsLoose(SbToggleTwoNode, _Toggle);

        function SbToggleTwoNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Toggle.call.apply(_Toggle, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeUnchecked", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeChecked", _descriptor2, _assertThisInitialized(_this));

          _this.isBlocked = false;
          return _this;
        }

        var _proto = SbToggleTwoNode.prototype;

        _proto._set = function _set(value, emitEvent) {
          if (this.isBlocked) {
            return;
          }

          _Toggle.prototype._set.call(this, value, emitEvent);

          if (this.nodeUnchecked != null) this.nodeUnchecked.active = value == false;
          if (this.nodeChecked != null) this.nodeChecked.active = value == true;
        };

        return SbToggleTwoNode;
      }(Toggle), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeUnchecked", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeChecked", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTooltips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbCommonPrefabsManager.ts', './SbSoundsManager.ts', './SbLocalizationManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Tween, Vec3, tween, Component, SbCommonPrefabsManager, SbSoundsManager, SbLocalizationManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbLocalizationManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "9092ciSxC5M/ZeBO4Y97MSt", "SbTooltips", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbTooltips = exports('SbTooltips', (_dec = ccclass('SbTooltips'), _dec2 = property(Label), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbTooltips, _Component);

        function SbTooltips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "listLbContent", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbTooltips.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.SetContent = function SetContent(str) {
          for (var i = 0; i < this.listLbContent.length; i++) {
            this.listLbContent[i].string = str;
          }
        };

        _proto.ShowTooltip = function ShowTooltip(timeDelayHide) {
          var _this2 = this;

          if (timeDelayHide === void 0) {
            timeDelayHide = 2;
          }

          this.node.active = true;
          Tween.stopAllByTarget(this.node);
          this.node.scale = Vec3.ZERO;
          tween(this.node).to(0.2, {
            scale: Vec3.ONE
          }, {
            easing: "backOut"
          }).delay(timeDelayHide).to(0.2, {
            scale: Vec3.ZERO
          }, {
            easing: "backIn"
          }).call(function () {
            _this2.node.active = false;
          }).start();
        };

        _proto.onClickShowGuideIconOnGoingLive = function onClickShowGuideIconOnGoingLive() {
          SbSoundsManager.getInstance().playSfxClick();
          SbCommonPrefabsManager.getInstance().ShowMessage(SbLocalizationManager.getInstance().GetKeyValue("SupportBetLive"));
        };

        return SbTooltips;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listLbContent", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbTypeDefine.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a343foXFUBJr6jlgWORLBB9", "SbTypeDefine", undefined); // State UI from BettingDetail


      var LiveStreamUIState = exports('LiveStreamUIState', /*#__PURE__*/function (LiveStreamUIState) {
        LiveStreamUIState[LiveStreamUIState["NORMAL"] = 0] = "NORMAL";
        LiveStreamUIState[LiveStreamUIState["SHOW_BUTTON_LIVE"] = 1] = "SHOW_BUTTON_LIVE";
        LiveStreamUIState[LiveStreamUIState["SHOW_LIVESTREAM"] = 2] = "SHOW_LIVESTREAM";
        return LiveStreamUIState;
      }({})); //#region Formation Info

      var CompetitorEnum = exports('CompetitorEnum', /*#__PURE__*/function (CompetitorEnum) {
        CompetitorEnum["HOME"] = "home";
        CompetitorEnum["AWAY"] = "away";
        return CompetitorEnum;
      }({})); // Depend Msg Data

      var PlayerTypeEnum = exports('PlayerTypeEnum', /*#__PURE__*/function (PlayerTypeEnum) {
        PlayerTypeEnum["SUB_IN"] = "substituted_in";
        PlayerTypeEnum["SUB_OUT"] = "substituted_out";
        PlayerTypeEnum["GOALKEEPER"] = "goalkeeper";
        PlayerTypeEnum["DEFENDER"] = "defender";
        return PlayerTypeEnum;
      }({})); //...

      var TimeLineType = exports('TimeLineType', /*#__PURE__*/function (TimeLineType) {
        TimeLineType["CORNER_KICK"] = "corner_kick";
        TimeLineType["SHOT_ON_TARGET"] = "shot_on_target";
        TimeLineType["SHOT_OFF_TARGET"] = "shot_off_target";
        TimeLineType["GOAL_KICK"] = "goal_kick";
        TimeLineType["SHOT_SAVED"] = "shot_saved";
        TimeLineType["FREE_KICK"] = "free_kick";
        TimeLineType["THROW_IN"] = "throw_in";
        TimeLineType["OFFSIDE"] = "offside";
        TimeLineType["YELLOW_CARD"] = "yellow_card";
        TimeLineType["RED_CARD"] = "red_card";
        TimeLineType["POSSIBLE_GOAL"] = "possible_goal";
        TimeLineType["INJURY"] = "injury";
        TimeLineType["INJURY_TIME_SHOWN"] = "injury_time_shown";
        TimeLineType["SUBSTITUTION"] = "substitution";
        TimeLineType["SCORE_CHANGE"] = "score_change";
        return TimeLineType;
      }({}));
      var SbPlayerInfo = exports('SbPlayerInfo', // Get from Data LineUp
      // Get from TimeLine
      function SbPlayerInfo(id) {
        this.id = '';
        this.playerName = '';
        this.score = 0;
        this.ownGoal = 0;
        this.numCardYellow = 0;
        this.numCardRed = 0;
        this.playerIn = false;
        this.playerOut = false;
        this.isInjury = false;
        this.id = id;
      }); //#endregion

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUIComboBox.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUIComboboxItem.ts', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, Node, Prefab, Label, ScrollView, instantiate, TweenSystem, UIOpacity, tween, Vec3, Tween, Vec2, Component, Color, SbUIComboboxItem, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Label = module.Label;
      ScrollView = module.ScrollView;
      instantiate = module.instantiate;
      TweenSystem = module.TweenSystem;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      Vec2 = module.Vec2;
      Component = module.Component;
      Color = module.Color;
    }, function (module) {
      SbUIComboboxItem = module.default;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

      cclegacy._RF.push({}, "0384csO9H5NTJIoVg9qM7lt", "SbUIComboBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbUIComboBox = exports('default', (_dec = ccclass('SbUIComboBox'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Prefab), _dec5 = property(Label), _dec6 = property(Node), _dec7 = property(ScrollView), _dec8 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUIComboBox, _Component);

        function SbUIComboBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "comboListNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "content", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "labelText", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "muiTen", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "scrollView", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "bg", _descriptor7, _assertThisInitialized(_this));

          _this.listComboBoxItem = [];
          _this.callBackClick = null;
          _this.callBackOpen = null;
          _this.listString = [];
          _this.currIndex = -1;
          return _this;
        }

        var _proto = SbUIComboBox.prototype;

        _proto.onLoad = function onLoad() {
          this.comboListNode.active = false;
        };

        _proto.initData = function initData(listString, listColor) {
          if (listColor === void 0) {
            listColor = [];
          }

          this.listString = listString;

          for (var i = this.listComboBoxItem.length; i < listString.length; ++i) {
            var nodeTemp = instantiate(this.itemPrefab);
            nodeTemp.parent = this.content;
            var tableCell = nodeTemp.getComponent(SbUIComboboxItem);
            tableCell.init(this);
            this.listComboBoxItem.push(tableCell);
          }

          for (var i = 0; i < listString.length; ++i) {
            var tableCell = this.listComboBoxItem[i];

            if (!tableCell.node.active) {
              tableCell.node.active = true;
            }

            if (listColor.length > 0) tableCell.initData(listString[i], i, listColor[i]);else tableCell.initData(listString[i], i);
          }

          for (var i = listString.length; i < this.listComboBoxItem.length; ++i) {
            var tableCell = this.listComboBoxItem[i];
            tableCell.node.active = false;
          }
        };

        _proto.onClickComboBox = function onClickComboBox() {
          var _this2 = this;

          SbSoundsManager.getInstance().playSfxClick();

          if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.comboListNode) > 0) {
            return;
          }

          var time = 0.2;

          if (this.comboListNode.active) {
            this.comboListNode.setScale(this.comboListNode.scale.x, 1, 1);
            this.comboListNode.getComponent(UIOpacity).opacity = 255;
            tween(this.comboListNode).to(time, {
              scale: new Vec3(1, 0, 1)
            }).call(function () {
              _this2.comboListNode.active = false; // this.comboListNode.getComponent(UIOpacity).opacity = 0;

              Tween.stopAllByTarget(_this2.comboListNode);
            }).start(); // tween(this.comboListNode.getComponent(UIOpacity)).to(time, { opacity: 0 }).start();

            Tween.stopAllByTarget(this.muiTen);
            tween(this.muiTen).by(0.2, {
              angle: 180
            }).start();

            if (this.bg != null) {
              Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
              tween(this.bg.getComponent(UIOpacity)).to(0.2, {
                opacity: 0
              }).call(function () {
                _this2.bg.active = false;
              }).start();
            }
          } else {
            this.comboListNode.active = true;
            this.comboListNode.setScale(this.comboListNode.scale.x, 0, 1);
            this.comboListNode.getComponent(UIOpacity).opacity = 0;
            tween(this.comboListNode).to(time, {
              scale: new Vec3(1, 1, 1)
            }).start();
            tween(this.comboListNode.getComponent(UIOpacity)).to(time, {
              opacity: 255
            }).start();
            Tween.stopAllByTarget(this.muiTen);
            tween(this.muiTen).by(0.2, {
              angle: -180
            }).start();
            tween(this.comboListNode).delay(0.01).call(function () {
              if (_this2.scrollView !== null) _this2.scrollView.scrollToOffset(new Vec2(0, Math.abs(_this2.listComboBoxItem[_this2.currIndex].node.position.y) - 50));
            }).start();

            if (this.bg != null) {
              this.bg.active = true;
              this.bg.getComponent(UIOpacity).opacity = 0;
              Tween.stopAllByTarget(this.bg.getComponent(UIOpacity));
              tween(this.bg.getComponent(UIOpacity)).to(0.2, {
                opacity: 255 * 0.4
              }).start();
            }

            if (this.callBackOpen != null) this.callBackOpen();
          }
        };

        _proto.onItemClick = /*#__PURE__*/function () {
          var _onItemClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(index, text, isClick, color) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (isClick === void 0) {
                    isClick = true;
                  }

                  if (color === void 0) {
                    color = Color.WHITE;
                  }

                  if (!(TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.comboListNode) > 0)) {
                    _context.next = 4;
                    break;
                  }

                  return _context.abrupt("return");

                case 4:
                  isClick == true ? this.onClickComboBox() : null;
                  this.labelText.node.active = true;
                  this.labelText.string = text;
                  this.labelText.color = color;
                  if (this.callBackClick != null) this.callBackClick(index);
                  this.setTick(index);

                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function onItemClick(_x, _x2, _x3, _x4) {
            return _onItemClick.apply(this, arguments);
          }

          return onItemClick;
        }();

        _proto.setCallbackClick = function setCallbackClick(cb) {
          this.callBackClick = cb;
        };

        _proto.setTick = function setTick(index) {
          this.resetTick();
          this.listComboBoxItem[index].tick.active = true;
          this.currIndex = index;
          this.labelText.string = this.listString[index];
        };

        _proto.setTickString = function setTickString(str) {
          this.setTick(this.listString.indexOf(str));
        };

        _proto.GetIndexCurrent = function GetIndexCurrent() {
          return this.currIndex;
        };

        _proto.resetTick = function resetTick() {
          this.currIndex = -1;

          for (var i = 0; i < this.listComboBoxItem.length; i++) {
            this.listComboBoxItem[i].tick.active = false;
          }
        };

        return SbUIComboBox;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "comboListNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "labelText", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "muiTen", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "scrollView", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "bg", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUIComboboxItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Color, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "f5bbcXi3O5Cd56CKw1yLq7A", "SbUIComboboxItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbUIComboboxItem = exports('default', (_dec = ccclass('SbUIComboboxItem'), _dec2 = property(Label), _dec3 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUIComboboxItem, _Component);

        function SbUIComboboxItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "tick", _descriptor2, _assertThisInitialized(_this));

          _this.index = -1;
          _this.comboBox = null;
          return _this;
        }

        var _proto = SbUIComboboxItem.prototype;

        _proto.init = function init(_comboBoxItem) {
          this.comboBox = _comboBoxItem;
        };

        _proto.initData = function initData(text, index, color) {
          if (color === void 0) {
            color = new Color(69, 69, 69, 255);
          }

          this.lbText.string = text;
          this.lbText.color = color;
          this.index = index;
        };

        _proto.onCLick = function onCLick() {
          //SbSoundsManager.getInstance().playSfxClick();
          this.comboBox.onItemClick(this.index, this.lbText.string, true, this.lbText.color);
        };

        return SbUIComboboxItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "tick", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUIDropdown.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UIOpacity, TweenSystem, UITransform, tween, Vec3, Tween, Component, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      TweenSystem = module.TweenSystem;
      UITransform = module.UITransform;
      tween = module.tween;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "9d762tT9NVLi7EZrs/S5X0K", "SbUIDropdown", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_COLLAPSE_ITEM = 0.25;
      var SbUIDropdown = exports('SbUIDropdown', (_dec = ccclass('SbUIDropdown'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUIDropdown, _Component);

        function SbUIDropdown() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "nodeTarget", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeLockTarget", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconArrowExpandOrCollapse", _descriptor3, _assertThisInitialized(_this));

          _this.isExpandAllMatchs = true;
          _this.nodeOpacity = null;
          _this.nodeTransform = null;
          return _this;
        }

        var _proto = SbUIDropdown.prototype;

        _proto.start = function start() {
          if (this.nodeTarget == null) {
            this.nodeTarget = this.node;
          }

          if (this.nodeTarget.getComponent(UIOpacity) == null) {
            this.nodeTarget.addComponent(UIOpacity);
          }
        };

        _proto.update = function update(dt) {
          if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.nodeTarget) > 0) {
            this.getNodeTransform().height = this.getNodeTransform().height + 0.00000000001;
          }
        };

        _proto.getNodeTransform = function getNodeTransform() {
          if (this.nodeTransform === null) this.nodeTransform = this.nodeTarget.getComponent(UITransform);
          return this.nodeTransform;
        };

        _proto.expandItem = function expandItem() {
          var _this2 = this;

          {
            this.getNodeOpacity().opacity = 255;
            this.nodeTarget.active = true;
            tween(this.nodeTarget).to(TIME_COLLAPSE_ITEM, {
              scale: new Vec3(1, 1, 1)
            }).call(function () {
              // Template fix active -> when collapse call false (need stop tween ??)
              _this2.nodeTarget.active = true;
              _this2.getNodeOpacity().opacity = 255;
            }).start();

            if (this.nodeLockTarget != null) {
              this.nodeLockTarget.active = true;
              tween(this.nodeLockTarget).to(TIME_COLLAPSE_ITEM, {
                scale: new Vec3(1, 1, 1)
              }).call(function () {
                _this2.nodeLockTarget.active = true;
              }).start();
            }
          }
          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 0
          }).start();
        };

        _proto.collapseItem = function collapseItem() {
          var _this3 = this;

          {
            tween(this.nodeTarget).to(TIME_COLLAPSE_ITEM, {
              scale: new Vec3(1, 0, 1)
            }).call(function () {
              _this3.getNodeOpacity().opacity = 0;
              _this3.nodeTarget.active = false;
            }).start();

            if (this.nodeLockTarget != null) {
              tween(this.nodeLockTarget).to(TIME_COLLAPSE_ITEM, {
                scale: new Vec3(1, 0, 1)
              }).call(function () {
                if (_this3.isExpandAllMatchs) {
                  _this3.nodeLockTarget.active = false;
                }
              }).start();
            }
          }
          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 90
          }).start();
        };

        _proto.ExpandItem = function ExpandItem() {
          if (this.isExpandAllMatchs == false) {
            this.expandItem();
            this.isExpandAllMatchs = !this.isExpandAllMatchs;
          }
        };

        _proto.CollapseItem = function CollapseItem() {
          if (this.isExpandAllMatchs) {
            this.collapseItem();
            this.isExpandAllMatchs = !this.isExpandAllMatchs;
          }
        };

        _proto.expandOrCollapseAllItem = function expandOrCollapseAllItem() {
          if (this.isExpandAllMatchs) {
            this.collapseItem();
          } else {
            this.expandItem();
          }

          this.isExpandAllMatchs = !this.isExpandAllMatchs;
        };

        _proto.onClickExpandOrCollapseAllItem = function onClickExpandOrCollapseAllItem() {
          SbSoundsManager.getInstance().playSfxClick();
          this.expandOrCollapseAllItem();
        };

        _proto.getNodeOpacity = function getNodeOpacity() {
          if (this.nodeOpacity === null) {
            this.nodeOpacity = this.nodeTarget.getComponent(UIOpacity);
          }

          return this.nodeOpacity;
        };

        return SbUIDropdown;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeLockTarget", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconArrowExpandOrCollapse", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUIMenu.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts', './SbDefine.ts', './SbLocalizationManager.ts', './SbSkinListColor.ts', './SbConfigManager.ts', './SBUIMenuButton.ts', './SbUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Button, Label, Sprite, Node, Tween, tween, EventHandler, TweenSystem, log, director, Color, Component, SbSoundsManager, SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager, SbSkinListColor, SbConfigManager, SBUIMenuButton, SbUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      EventHandler = module.EventHandler;
      TweenSystem = module.TweenSystem;
      log = module.log;
      director = module.director;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SB_EVENT_SHOW_MESSAGE_ULTIL = module.SB_EVENT_SHOW_MESSAGE_ULTIL;
    }, function (module) {
      SbLocalizationManager = module.default;
    }, function (module) {
      SbSkinListColor = module.default;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SBUIMenuButton = module.SBUIMenuButton;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "4b170C+iKBKxoD4Rp706mi3", "SbUIMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbUIMenu = exports('default', (_dec = ccclass('SbUIMenu'), _dec2 = property(Button), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(SbSkinListColor), _dec6 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUIMenu, _Component);

        function SbUIMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "isResizeSelectedImage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listLabelOfButton", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "listIconOfButton", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "skinTextTitleColor", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "itemSelected", _descriptor6, _assertThisInitialized(_this));

          _this.onClickCallback = null;
          _this.isIndexSelected = 0;
          _this.isActive = true;
          _this.isDisable = false;
          return _this;
        }

        var _proto = SbUIMenu.prototype; // sbCommonPrefabsManager: SbCommonPrefabsManager = null;
        // init(sbCommonPrefabsManager: SbCommonPrefabsManager) {
        //     this.sbCommonPrefabsManager = sbCommonPrefabsManager;
        // }

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < this.listButton.length; i++) {
            var clickEventHandler = this.createButtonHandler(String(i));
            var button = this.listButton[i];

            if (button) {
              button.clickEvents.push(clickEventHandler);
            }
          }
        };

        _proto.start = function start() {// if (this.isResizeSelectedImage) {
          //     let contentsize = this.itemSelected.getComponent(UITransform);
          //     this.itemSelected.getComponent(UITransform).setContentSize(new Size(28.1+  this.listButton[0].node.getComponent(UITransform).width, contentsize.height))
          // }
        };

        _proto.GetButtonByIndex = function GetButtonByIndex(index) {
          return this.listButton[index];
        };

        _proto.SetButtonClickCallback = function SetButtonClickCallback(cb) {
          this.onClickCallback = cb;
        };

        _proto.SetActive = function SetActive(value) {
          this.isActive = value;
        };

        _proto.GetIndexCurrent = function GetIndexCurrent() {
          if (this.isDisable) return -1;
          return this.isIndexSelected;
        };

        _proto.SetIndexDefault = function SetIndexDefault(index) {
          this.isIndexSelected = index;

          if (this.itemSelected != null) {
            this.itemSelected.position = this.listButton[index].node.position;
            this.setColorLabelOfButton(this.isIndexSelected, true);
            this.setColorIconOfButton(this.isIndexSelected, true);
          } else {
            this.activeAllButton(); // this.listButton[index].interactable = false;

            this.setButtonDisable(this.listButton[index]);
          } // if (this.isResizeSelectedImage) {
          //     let contentsize = this.itemSelected.getComponent(UITransform);
          //     this.itemSelected.getComponent(UITransform).setContentSize(new Size(this.listButton[index].node.getComponent(UITransform).width, contentsize.height))
          // }

        };

        _proto.ActiveAllButton = function ActiveAllButton() {
          this.activeAllButton();
          this.isDisable = true;
        };

        _proto.RevertIndexButton = function RevertIndexButton() {
          this.setButtonDisable(this.listButton[this.isIndexSelected]);
          this.isDisable = false;
        };

        _proto.SetIndexButton = function SetIndexButton(index) {
          this.isIndexSelected = index;
        };

        _proto.SetPositionButton = function SetPositionButton(index) {
          if (this.itemSelected != null) {
            this.itemSelected.position = this.listButton[index].node.position;
          } else {
            this.activeAllButton(); // this.listButton[index].interactable = false;

            this.setButtonDisable(this.listButton[index]);
          }
        };

        _proto.InitCustomButton = function InitCustomButton(listUIButtons) {
          var startIndex = this.listButton.length;

          for (var i = 0; i < listUIButtons.length; i++) {
            var item = listUIButtons[i];
            this.listButton.push(item.buttonComponent);
            this.listLabelOfButton[startIndex] = item.lbButton;
            this.listIconOfButton[startIndex] = item.iconButton;
            var clickEventHandler = this.createButtonHandler(String(startIndex));

            if (item.buttonComponent) {
              item.buttonComponent.clickEvents.push(clickEventHandler);
            }

            startIndex++;
          }
        };

        _proto.SetTabByIndex = function SetTabByIndex(tab, isAnim) {
          var _this2 = this;

          if (isAnim === void 0) {
            isAnim = true;
          }

          for (var i = 0; i < this.listButton.length; i++) {
            if (this.isIndexSelected !== tab) {
              this.setColorLabelOfButton(i, false);
              this.setColorIconOfButton(i, false);
            }
          }

          if (this.onClickCallback) {
            this.onClickCallback(tab, isAnim);
          }

          this.isIndexSelected = tab;
          var worldPos = this.listButton[tab].node.getWorldPosition();

          if (this.itemSelected) {
            Tween.stopAllByTarget(this.itemSelected);

            if (isAnim) {
              tween(this.itemSelected).to(0.25, {
                position: SbUtils.ConvertToLocalPosition(worldPos, this.itemSelected.parent)
              }, {
                easing: 'circInOut'
              }).call(function () {
                _this2.setColorLabelOfButton(_this2.isIndexSelected, true);

                _this2.setColorIconOfButton(_this2.isIndexSelected, true);
              }).start();
            } else {
              this.itemSelected.position = this.listButton[tab].node.position;
              this.setColorLabelOfButton(this.isIndexSelected, true);
              this.setColorIconOfButton(this.isIndexSelected, true);
            }
          } else {
            this.activeAllButton();
            this.setButtonDisable(this.listButton[tab]);
          }
        };

        _proto.createButtonHandler = function createButtonHandler(customData) {
          var clickEventHandler = new EventHandler();
          clickEventHandler.target = this.node; // This node is the node to which your event handler code component belongs

          clickEventHandler.component = "SbUIMenu"; // This is the code file name

          clickEventHandler.handler = "onButtonClick";
          clickEventHandler.customEventData = customData;
          return clickEventHandler;
        };

        _proto.onButtonClick = function onButtonClick(event, customData) {
          if (this.itemSelected) {
            if (TweenSystem.instance.ActionManager.getNumberOfRunningActionsInTarget(this.itemSelected) > 0) {
              return;
            }
          }

          SbSoundsManager.getInstance().playSfxClick();
          log(customData);

          if (this.isActive == false) {
            director.emit(SB_EVENT_SHOW_MESSAGE_ULTIL, SbLocalizationManager.getInstance().GetKeyValue("ActionTooFast")); //Thao tác quá nhanh!
            // SbCommonPrefabsManager.getInstance().ShowMessage("Chức năng hiện không khả dụng!");

            return;
          }

          this.SetTabByIndex(Number(customData));
        };

        _proto.activeAllButton = function activeAllButton() {
          for (var i = 0; i < this.listButton.length; i++) {
            this.listButton[i].interactable = true;
            this.listButton[i].normalSprite = this.listButton[i].hoverSprite;
            this.listButton[i].disabledSprite = this.listButton[i].hoverSprite;
          }
        };

        _proto.setButtonDisable = function setButtonDisable(button) {
          if (button == null || button == undefined) {
            return;
          }

          button.interactable = false;
          button.disabledSprite = button.pressedSprite;
        };

        _proto.setColorLabelOfButton = function setColorLabelOfButton(index, isSelected) {
          if (index >= this.listLabelOfButton.length) {
            return;
          }

          if (!this.listLabelOfButton[index]) {
            return;
          }

          if (isSelected) {
            this.listLabelOfButton[index].color = this.colorText[0];
          } else {
            this.listLabelOfButton[index].color = this.colorText[1];
          }
        };

        _proto.setColorIconOfButton = function setColorIconOfButton(index, isSelected) {
          if (index >= this.listIconOfButton.length) {
            return;
          }

          if (this.listIconOfButton[index] == null || this.listIconOfButton[index] == undefined) {
            return;
          }

          if (isSelected) {
            this.listIconOfButton[index].grayscale = false;
          } else {
            this.listIconOfButton[index].grayscale = true;
          }

          var menuButton = this.listButton[index] && this.listButton[index].getComponent(SBUIMenuButton);

          if (menuButton) {
            menuButton.ChangeUIButton(isSelected);
          }
        };

        _createClass(SbUIMenu, [{
          key: "colorText",
          get: function get() {
            var result = [Color.WHITE, Color.WHITE];

            if (this.skinTextTitleColor) {
              result = this.skinTextTitleColor.ChangeSkin(SbConfigManager.getInstance().GetSkinCurrent());
            }

            return result;
          }
        }]);

        return SbUIMenu;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isResizeSelectedImage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listLabelOfButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "listIconOfButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "skinTextTitleColor", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "itemSelected", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SBUIMenuButton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Sprite, Button, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "d25b0yjUNZKSpPdp+kb5h4m", "SBUIMenuButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SBUIMenuButton = exports('SBUIMenuButton', (_dec = ccclass('SBUIMenuButton'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Button), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SBUIMenuButton, _Component);

        function SBUIMenuButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbButton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "buttonComponent", _descriptor3, _assertThisInitialized(_this));

          _this.data = null;
          _this.sprFrameSelect = null;
          _this.sprFrameUnSelect = null;
          return _this;
        }

        var _proto = SBUIMenuButton.prototype;

        _proto.SetData = function SetData(data, sprFrameSelect, sprFrameUnSelect) {
          if (sprFrameSelect === void 0) {
            sprFrameSelect = null;
          }

          if (sprFrameUnSelect === void 0) {
            sprFrameUnSelect = null;
          }

          this.data = data;
          this.sprFrameSelect = sprFrameSelect;
          this.sprFrameUnSelect = sprFrameUnSelect;
        };

        _proto.ChangeUIButton = function ChangeUIButton(isSelected) {
          this.DoSetSprFrameSelect(isSelected);
        };

        _proto.DoSetSprFrameSelect = function DoSetSprFrameSelect(isSelected) {
          if (!this.iconButton) {
            return false;
          }

          var sprFrame = isSelected ? this.sprFrameSelect : this.sprFrameUnSelect;

          if (sprFrame) {
            this.iconButton.grayscale = false;
            this.iconButton.spriteFrame = sprFrame;
            return true;
          }

          return false;
        };

        return SBUIMenuButton;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonComponent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SBUIMenuButtonSeason.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SBUIMenuButton.ts', './SbConfigManager.ts', './SbUtils.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, SBUIMenuButton, SbConfigManager, SbUtils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SBUIMenuButton = module.SBUIMenuButton;
    }, function (module) {
      SbConfigManager = module.default;
    }, function (module) {
      SbUtils = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "21392ByT4BGcZTbc7asdhTY", "SBUIMenuButtonSeason", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SBUIMenuButtonSeason = exports('SBUIMenuButtonSeason', (_dec = ccclass('SBUIMenuButtonSeason'), _dec(_class = /*#__PURE__*/function (_SBUIMenuButton) {
        _inheritsLoose(SBUIMenuButtonSeason, _SBUIMenuButton);

        function SBUIMenuButtonSeason() {
          return _SBUIMenuButton.apply(this, arguments) || this;
        }

        var _proto = SBUIMenuButtonSeason.prototype;

        _proto.DoSetSprFrameSelect = function DoSetSprFrameSelect(isSelected) {
          var _this = this;

          var isHaveSprFrame = _SBUIMenuButton.prototype.DoSetSprFrameSelect.call(this, isSelected);

          if (isHaveSprFrame) {
            return false;
          }

          if (!this.data) {
            return false;
          }

          if (!this.iconButton) {
            return false;
          }

          var nameLogo = this.data.nameLogo;

          if (nameLogo && nameLogo.length > 0) {
            var urlSprFrame = 'logo_' + (isSelected ? nameLogo : nameLogo + 'Grey') + '.png';
            var hostUrl = SbConfigManager.getInstance().brandImageUrl;
            this.iconButton.grayscale = false;
            SbUtils.downloadAndShowImage(this.iconButton, hostUrl + urlSprFrame, function (sprFrame) {
              if (isSelected) {
                _this.sprFrameSelect = sprFrame;
              } else {
                _this.sprFrameUnSelect = sprFrame;
              }
            });
          }

          return true;
        };

        return SBUIMenuButtonSeason;
      }(SBUIMenuButton)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUISafeArea.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Widget, sys, view, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Widget = module.Widget;
      sys = module.sys;
      view = module.view;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "db247LkhZNCRYtAIXxfgsvX", "SbUISafeArea", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbSafeArea = exports('default', (_dec = ccclass('SbUISafeArea'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbSafeArea, _Component);

        function SbSafeArea() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SbSafeArea.prototype;

        _proto.start = function start() {
          var widget = this.getComponent(Widget);

          if (widget != undefined || widget != null) {
            var pading = SbSafeArea.GetSizeNotch();
            widget.right += pading;
            widget.left += pading;
          }
        };

        SbSafeArea.GetSizeNotch = function GetSizeNotch() {
          var safeAreaRect = sys.getSafeAreaRect();
          var visibleSize = view.getVisibleSize();
          var safeAreaWidth = safeAreaRect.width - safeAreaRect.x;
          var winSizeWidth = visibleSize.width - safeAreaRect.x;
          var pading = (winSizeWidth - safeAreaWidth) / 2;
          return pading;
        } // update (dt) {}
        ;

        return SbSafeArea;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUITitle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbSoundsManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, Tween, tween, Component, SbSoundsManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      SbSoundsManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "8fc57PEDvpJsZ8/sgaR5urI", "SbUITitle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbUITitle = exports('default', (_dec = ccclass('SbUITitle'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUITitle, _Component);

        function SbUITitle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "nodeContent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "iconArrowExpandOrCollapse", _descriptor3, _assertThisInitialized(_this));

          _this.callbaclButtonClick = null;
          _this.isExpandAllItem = true;
          return _this;
        }

        var _proto = SbUITitle.prototype;

        _proto.start = function start() {};

        _proto.SetActive = function SetActive(value) {
          this.node.active = value;
          this.nodeContent.active = value;

          if (value == true) {
            this.nodeContent.removeAllChildren();
          }
        };

        _proto.SetTitle = function SetTitle(srt) {
          if (this.lbName != null) this.lbName.string = srt;
        };

        _proto.SetCallbackButtonClicl = function SetCallbackButtonClicl(cb) {
          this.callbaclButtonClick = cb;
        };

        _proto.SetExpand = function SetExpand(value) {
          this.isExpandAllItem = value;
          if (value) this.expandAllItem();else this.collapseAllItem();
        };

        _proto.onClickExpandOrCollapseAllItem = function onClickExpandOrCollapseAllItem() {
          SbSoundsManager.getInstance().playSfxClick();
          this.expandOrCollapseAllItem();
          if (this.callbaclButtonClick != null) this.callbaclButtonClick(this.isExpandAllItem);
        };

        _proto.expandOrCollapseAllItem = function expandOrCollapseAllItem() {
          if (this.isExpandAllItem) this.collapseAllItem();else this.expandAllItem();
        };

        _proto.expandAllItem = function expandAllItem() {
          this.isExpandAllItem = true;
          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 0
          }).start();
        };

        _proto.collapseAllItem = function collapseAllItem() {
          this.isExpandAllItem = false;
          Tween.stopAllByTarget(this.iconArrowExpandOrCollapse);
          tween(this.iconArrowExpandOrCollapse).to(0.2, {
            angle: 90
          }).start();
        };

        return SbUITitle;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeContent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconArrowExpandOrCollapse", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUserInfo.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbGameUtil.ts', './SbMarket.ts', './SbSportManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, sys, Component, SbOddsStyle, SbMarketId, SbTypeTimeMatch, SbSportManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      SbOddsStyle = module.SbOddsStyle;
    }, function (module) {
      SbMarketId = module.SbMarketId;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
      SbSportManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "af30aNhf9VLgqZUqdARKyzz", "SbUserInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var KEY_TYPE_TIME_MATCH_CURRENT = "key_ghkjhjdsfjhsdjfdsffff==";
      var KEY_IS_ACCEPT_BETTER_ODDS = "key_ghkjhjdsfjhsdjfdsfff1==";
      var KEY_STYLE_ODDS = "key_iuahsiudhiaushdshisdh==";
      var SbUserInfo = exports('default', (_dec = ccclass('SbUserInfo'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUserInfo, _Component);

        function SbUserInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.displayName = "Undefined";
          _this.userName = "Undefined";
          _this.custID = "Undefined";
          _this.userID = "Undefined";
          _this.balance = 0;
          _this.status = "Active";
          _this.oddsStyle = SbOddsStyle.Malay;
          _this.typeTimeMatch = SbTypeTimeMatch.Today;
          _this.timeMatchCurrent = null;
          _this.userToken = "";
          _this.isAutoAcceptBetterOdds = true;
          return _this;
        }

        SbUserInfo.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbUserInfo();
            this.Instance.init();
          }

          return this.Instance;
        };

        var _proto = SbUserInfo.prototype;

        _proto.InitData = function InitData(data) {
          if (data.hasOwnProperty("displayName")) this.displayName = data.displayName;
          if (data.hasOwnProperty("cust_login")) this.userName = data.cust_login;
          if (data.hasOwnProperty("cust_id")) this.custID = data.cust_id;
          if (data.hasOwnProperty("balance")) this.balance = Math.round(Number(data.balance) * 1000);
          if (data.hasOwnProperty("status")) this.status = data.status;
          if (data.hasOwnProperty("uid")) this.userID = data.uid;
        };

        _proto.GetTimeMatchCurrent = function GetTimeMatchCurrent() {
          return this.timeMatchCurrent;
        };

        _proto.SetTimeMatchCurrent = function SetTimeMatchCurrent(time) {
          this.timeMatchCurrent = new Date(time.getTime());
        };

        _proto.GetUserToken = function GetUserToken() {
          return this.userToken;
        };

        _proto.SetUserToken = function SetUserToken(tk) {
          this.userToken = tk;
        };

        _proto.IsAutoAcceptBetterOdds = function IsAutoAcceptBetterOdds() {
          return this.isAutoAcceptBetterOdds;
        };

        _proto.SetAutoAcceptBetterOdds = function SetAutoAcceptBetterOdds(value) {
          this.isAutoAcceptBetterOdds = value;
          if (value == false) sys.localStorage.setItem(KEY_IS_ACCEPT_BETTER_ODDS, "false");else sys.localStorage.setItem(KEY_IS_ACCEPT_BETTER_ODDS, "true");
        };

        _proto.GetCustID = function GetCustID() {
          return this.custID;
        };

        _proto.GetUserIdOfBrand = function GetUserIdOfBrand() {
          return this.userID;
        };

        _proto.GetUserName = function GetUserName() {
          return this.userName;
        };

        _proto.GetBalance = function GetBalance() {
          return Number(this.balance);
        };

        _proto.SetBalance = function SetBalance(value) {
          this.balance = value;
        };

        _proto.GetOddsStyleID = function GetOddsStyleID() {
          return this.oddsStyle;
        };

        _proto.SetOddsStyleID = function SetOddsStyleID(id) {
          this.oddsStyle = id;
          sys.localStorage.setItem(KEY_STYLE_ODDS, this.oddsStyle.toString());
        };

        _proto.GetTypeTimeMatch = function GetTypeTimeMatch() {
          return this.typeTimeMatch;
        };

        _proto.SetTypeTimeMatch = function SetTypeTimeMatch(type) {
          this.typeTimeMatch = type;
          sys.localStorage.setItem(KEY_TYPE_TIME_MATCH_CURRENT, this.typeTimeMatch.toString());
        };

        _proto.GetOddsStyleString = function GetOddsStyleString(marketId, oddsStyle) {
          if (marketId == SbMarketId.Market1X2FT || marketId == SbMarketId.Market1X2HT || marketId == SbMarketId.Market1X2ExtraFT || marketId == SbMarketId.Market1X2ExtraHT) return "de"; //1x2 alway is Decimal

          return this.ConverttOddsStyleString(oddsStyle);
        };

        _proto.ConverttOddsStyleString = function ConverttOddsStyleString(oddsStyle) {
          switch (oddsStyle) {
            case SbOddsStyle.Malay:
              return "ma";

            case SbOddsStyle.Indo:
              return "in";

            case SbOddsStyle.Decimal:
              return "de";

            case SbOddsStyle.HK:
              return "hk";

            default:
              return "undefined";
          }
        };

        _proto.init = function init() {
          var typeTime = sys.localStorage.getItem(KEY_TYPE_TIME_MATCH_CURRENT);
          if (typeTime == null || typeTime == undefined) this.typeTimeMatch = SbTypeTimeMatch.Live;else this.typeTimeMatch = SbSportManager.ConvertStringToTypeTimeMatch(typeTime); // //

          var isAutoAccept = sys.localStorage.getItem(KEY_IS_ACCEPT_BETTER_ODDS);
          if (isAutoAccept == null || isAutoAccept == undefined) this.isAutoAcceptBetterOdds = true;else if (isAutoAccept.localeCompare("true") == 0) this.isAutoAcceptBetterOdds = true;else this.isAutoAcceptBetterOdds = false; // //KEY_STYLE_ODDS

          var styleOdds = sys.localStorage.getItem(KEY_STYLE_ODDS);
          if (styleOdds == null || styleOdds == undefined) this.oddsStyle = SbOddsStyle.Malay;else this.oddsStyle = Number(styleOdds);
        };

        return SbUserInfo;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite, Label, Color, assetManager, warn, Texture2D, SpriteFrame, resources, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Color = module.Color;
      assetManager = module.assetManager;
      warn = module.warn;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      resources = module.resources;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3af45oVswBF8baTRX54mSo3", "SbUtils", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbUtils = exports('default', (_dec = ccclass('SbUtils'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbUtils, _Component);

        function SbUtils() {
          return _Component.apply(this, arguments) || this;
        }

        SbUtils.ReplacePlaceholders = function ReplacePlaceholders(template) {
          for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            values[_key - 1] = arguments[_key];
          }

          return template.replace(/{(\d+)}/g, function (match, index) {
            var value = values[index];
            return value !== undefined ? value.toString() : match;
          });
        };

        SbUtils.SetAllUIHiden = function SetAllUIHiden(target, value) {
          var opacity = 255;

          if (value) {
            opacity = 0;
          }

          var lisstSprite = target.getComponentsInChildren(Sprite);
          var lisstLabel = target.getComponentsInChildren(Label);

          for (var i = 0; i < lisstSprite.length; i++) {
            if (lisstSprite[i] != null) {
              var r = lisstSprite[i].color.r - 1 < 0 ? 0 : lisstSprite[i].color.r - 1;
              var g = lisstSprite[i].color.g - 1 < 0 ? 0 : lisstSprite[i].color.g - 1;
              var b = lisstSprite[i].color.b - 1 < 0 ? 0 : lisstSprite[i].color.b - 1;
              lisstSprite[i].color = new Color(r, g, b, opacity);
              lisstSprite[i].color = new Color(r <= 0 ? 0 : r + 1, g <= 0 ? 0 : g + 1, b <= 0 ? 0 : b + 1, opacity);
            }
          }

          for (var _i = 0; _i < lisstLabel.length; _i++) {
            lisstLabel[_i].color = new Color(lisstLabel[_i].color.r, lisstLabel[_i].color.g, lisstLabel[_i].color.b, opacity);
          }
        };

        SbUtils.GetBundleId = function GetBundleId() {// let id = "";
          // if (sys.isNative) {
          //     if (sys.os === sys.OS.ANDROID) {
          //         let className = "org/cocos2dx/javascript/AppActivity";
          //         let methodName = "getBundleid";
          //         let methodSignature = "()Ljava/lang/String;";
          //         try {
          //             if (jsb != undefined) {
          //                 id = jsb.reflection.callStaticMethod(className, methodName, methodSignature);
          //             }
          //         } catch (ex) {
          //             console.error("ERROR getting bundle id " + ex);
          //         }
          //     } else if (sys.os === sys.OS_IOS) {
          //         try {
          //             if (jsb != undefined) {
          //                 id = jsb.reflection.callStaticMethod("AppController", "getBundleid");
          //             }
          //         } catch (ex) {
          //             console.error("ERROR getting bundle id " + ex);
          //         }
          //     }
          // }
          // return id;
        };

        SbUtils.IsMatchGoingOn = function IsMatchGoingOn(startDate, isLive, eSport) {
          var now = new Date().getTime();
          var timeStart = new Date(startDate).getTime();
          var timeEnd = SbUtils.GetEstimateTimeEnd(startDate, isLive, eSport);
          if (now > timeStart && now < timeEnd) return true;
          return false;
        };

        SbUtils.GetEstimateTimeEnd = function GetEstimateTimeEnd(startDate, isLive, eSport) {
          var timeTemp = new Date(startDate);
          var fullTimeOfMatch = 60 * 120 * 1000;
          var fullTimeOfMatcVirtual = 60 * 25 * 1000;

          if (isLive) {
            if (eSport) return timeTemp.getTime() + fullTimeOfMatcVirtual;else return timeTemp.getTime() + fullTimeOfMatch;
          } else {
            if (eSport) return timeTemp.getTime() + fullTimeOfMatcVirtual;else return timeTemp.getTime() + fullTimeOfMatch;
          }
        };

        SbUtils.IsISO8601Date = function IsISO8601Date(str) {
          var isoRegex = /^(\d{4})-([0-1][0-9])-([0-3][0-9])T([0-2][0-9]):([0-5][0-9]):([0-5][0-9])(\.\d+)?(Z|[+-][0-2][0-9]:[0-5][0-9])$/;
          return isoRegex.test(str);
        };

        SbUtils.Delay = function Delay(ms) {
          return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
          });
        } // Get CurrentTime or StringDate with Config TimeZone
        ;

        SbUtils.GetDateCurrentTimeZone = function GetDateCurrentTimeZone(strDate) {
          if (strDate === void 0) {
            strDate = null;
          }

          var someDate = strDate ? new Date(strDate) : new Date();
          var timeZoneAPI = parseFloat(SbUtils.GetTimeZoneOffsetCurrent());
          someDate.setTime(someDate.getTime() + (someDate.getTimezoneOffset() - timeZoneAPI) * 60 * 1000);
          return someDate;
        };

        SbUtils.IsToday = function IsToday(timeString) {
          var now = this.GetDateCurrentTimeZone();
          var someDate = this.GetDateCurrentTimeZone(timeString);
          return someDate.getDate() == now.getDate() && someDate.getMonth() == now.getMonth() && someDate.getFullYear() == now.getFullYear();
        };

        SbUtils.IsTimeEarly = function IsTimeEarly(timeString) {
          var now = this.GetDateCurrentTimeZone();
          var someDate = this.GetDateCurrentTimeZone(timeString);
          return someDate.getDate() > now.getDate() && someDate.getMonth() >= now.getMonth() && someDate.getFullYear() == now.getFullYear();
        };

        SbUtils.ConvertTimeStringToTodayFormat = function ConvertTimeStringToTodayFormat(timeString) {
          var someDate = this.GetDateCurrentTimeZone(timeString);
          var hours = someDate.getHours();
          var min = someDate.getMinutes();
          var ampm = hours >= 12 ? 'PM' : 'AM';
          hours = hours % 12;
          hours = hours ? hours : 12; // the hour '0' should be '12'

          var minutes = min < 10 ? '0' + min : min;
          var strTime = hours + ':' + minutes + ' ' + ampm;
          return strTime;
        };

        SbUtils.GetTimeZoneOffsetCurrent = function GetTimeZoneOffsetCurrent() {
          return "-420";
        };

        SbUtils.GetLocalTimeZoneCurrent = function GetLocalTimeZoneCurrent() {
          var currentTime = new Date();
          var currentTimezone = currentTime.getTimezoneOffset();
          currentTimezone = currentTimezone / 60 * -1;
          var gmt = "";

          if (currentTimezone !== 0) {
            gmt += currentTimezone > 0 ? '+' : '-';
            gmt += currentTimezone;
          }

          return gmt;
        };

        SbUtils.GetTimeZone = function GetTimeZone(currentTime) {
          var currentTimezone = currentTime.getTimezoneOffset();
          currentTimezone = currentTimezone / 60 * -1;
          var gmt = "";

          if (currentTimezone !== 0) {
            gmt += currentTimezone > 0 ? '+' : '-';
            gmt += currentTimezone;
          }

          return gmt;
        };

        SbUtils.ConvertTimeStringToTodayFormatFull = function ConvertTimeStringToTodayFormatFull(timeString) {
          var someDate = this.GetDateCurrentTimeZone(timeString);
          var time = SbUtils.ConvertTimeStringToTodayFormat(timeString);
          var dd = "00" + someDate.getDate();
          var mm = "00" + (someDate.getMonth() + 1);
          return dd.slice(-2) + "/" + mm.slice(-2) + "/" + someDate.getFullYear() + "   " + time;
        };

        SbUtils.ConvertTimeStringToDDMM = function ConvertTimeStringToDDMM(timeString, isNotGetIsToday) {
          if (isNotGetIsToday === void 0) {
            isNotGetIsToday = false;
          }

          var now = this.GetDateCurrentTimeZone();
          var someDate = this.GetDateCurrentTimeZone(timeString);

          if (isNotGetIsToday && now.getDate() == someDate.getDate()) {
            return "";
          }

          var dd = "00" + someDate.getDate();
          var mm = "00" + (someDate.getMonth() + 1);
          return dd.slice(-2) + "/" + mm.slice(-2);
        };

        SbUtils.ConvertTimeStringToDDMMYYYY = function ConvertTimeStringToDDMMYYYY(timeString, isNotGetIsToday) {
          if (isNotGetIsToday === void 0) {
            isNotGetIsToday = false;
          }

          var now = this.GetDateCurrentTimeZone();
          var someDate = this.GetDateCurrentTimeZone(timeString);

          if (isNotGetIsToday && now.getDate() == someDate.getDate()) {
            return "";
          }

          var dd = "00" + someDate.getDate();
          var mm = "00" + (someDate.getMonth() + 1);
          var yyyy = "0000" + someDate.getFullYear();
          return dd.slice(-2) + "/" + mm.slice(-2) + "/" + yyyy.slice(-4);
        };

        SbUtils.ConvertPointToString = function ConvertPointToString(vl) {
          var value = Math.abs(vl);
          var minus = "";
          var div = Math.abs(vl % 1);
          if (vl < 0) minus = "-";
          if (div == 0.25 || div == 0.75) return minus + String(value - 0.25) + "-" + String(value + 0.25);else return minus + String(value);
        };

        SbUtils.GetNameDayOfWeek = function GetNameDayOfWeek(day) {
          var weekday = new Array(7);
          weekday[0] = "Chủ Nhật";
          weekday[1] = "Thứ Hai";
          weekday[2] = "Thứ Ba";
          weekday[3] = "Thứ Tư";
          weekday[4] = "Thứ Năm";
          weekday[5] = "Thứ Sáu";
          weekday[6] = "Thứ Bảy";
          return weekday[day];
        };

        SbUtils.downloadAndShowImage = function downloadAndShowImage(spriteTarget, downloadURL, fallbackSpriteFrame) {
          if (fallbackSpriteFrame === void 0) {
            fallbackSpriteFrame = null;
          }

          if (spriteTarget != null && spriteTarget.isValid && downloadURL != null && downloadURL.length > 0) {
            if (downloadURL.indexOf('http') >= 0) {
              assetManager.loadRemote(downloadURL, function (err, tex) {
                if (err !== null && err !== undefined) {
                  warn("Can't download from " + downloadURL);
                  return;
                }

                try {
                  if (spriteTarget != null && tex != null) {
                    var texture = new Texture2D();
                    texture.image = tex;
                    var sf = new SpriteFrame();
                    sf.texture = texture;
                    spriteTarget.spriteFrame = sf;

                    if (fallbackSpriteFrame) {
                      fallbackSpriteFrame(sf);
                    }
                  }
                } catch (ex) {
                  warn("Can't load image from URL " + downloadURL, ex);
                }
              });
            } else {
              resources.load(downloadURL, function (err, tex) {
                if (err !== null && err !== undefined) {
                  return;
                }

                try {
                  if (spriteTarget != null && tex != null) {
                    var texture = new Texture2D();
                    texture.image = tex;
                    var sf = new SpriteFrame();
                    sf.texture = texture;
                    spriteTarget.spriteFrame = sf;

                    if (fallbackSpriteFrame) {
                      fallbackSpriteFrame(sf);
                    }
                  }
                } catch (ex) {
                  warn("Can't load image from URL " + downloadURL, ex);
                }
              });
            }
          }
        };

        SbUtils.ConvertToLocalPosition = function ConvertToLocalPosition(worldPos, nodeContainer) {
          if (nodeContainer) {
            var result = new Vec3();
            nodeContainer.inverseTransformPoint(result, worldPos);
            return result;
          } else {
            return worldPos;
          }
        };

        return SbUtils;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbVideoPlayer.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbLive.ts', './SbConfigManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, VideoPlayer, EditBox, director, Component, SbLiveState, SbConfigManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      VideoPlayer = module.VideoPlayer;
      EditBox = module.EditBox;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      SbLiveState = module.SbLiveState;
    }, function (module) {
      SbConfigManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "96073lqh2tHmYJY771SDo7T", "SbVideoPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SbVideoPlayer = exports('SbVideoPlayer', (_dec = ccclass('SbVideoPlayer'), _dec2 = property(VideoPlayer), _dec3 = property(EditBox), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbVideoPlayer, _Component);

        function SbVideoPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this; //hiện tại dùng webview load 1 web có chứa player để play video

          _initializerDefineProperty(_this, "videoPlayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "editBox", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SbVideoPlayer.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.setUrlSource = function setUrlSource() {
          this.videoPlayer.remoteURL = this.editBox.string;
          var link = SbConfigManager.getInstance().urlVideoJS + "https://sb2-prd-video-sg-dest.s3.ap-southeast-1.amazonaws.com/1-1684121364541/Default/HLS/1-1684121364541.m3u8";
          director.emit(SbLiveState.LiveLoad, {
            "h5Link": link
          });
        };

        _proto.playButtonClicked = function playButtonClicked() {
          this.videoPlayer.play();
        };

        _proto.stopButtonClicked = function stopButtonClicked() {
          this.videoPlayer.stop();
        };

        _proto.pauseButtonClicked = function pauseButtonClicked() {
          this.videoPlayer.pause();
        };

        _proto.resumButtonClicked = function resumButtonClicked() {
          this.videoPlayer.resume();
        };

        return SbVideoPlayer;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "videoPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "editBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SBWatchVideoAndInfoDetailt.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbDisplayMatchInfo.ts', './SbLive.ts', './SbSoundsManager.ts', './SbCommonPrefabsManager.ts', './SbDefine.ts', './SbSportManager.ts', './SbMatch.ts', './SbCommonGroupMatchDetail.ts', './SbTypeDefine.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, director, log, Component, SbDisplayMatchInfo, SbLiveState, SbSoundsManager, SbCommonPrefabsManager, SB_EVENT_EVENT_MATCH_CHANGE_DATA, SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, SbSportID, SbMatch, SbCommonGroupMatchDetail, LiveStreamUIState;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      director = module.director;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SbDisplayMatchInfo = module.SbDisplayMatchInfo;
    }, function (module) {
      SbLiveState = module.SbLiveState;
    }, function (module) {
      SbSoundsManager = module.default;
    }, function (module) {
      SbCommonPrefabsManager = module.default;
    }, function (module) {
      SB_EVENT_EVENT_MATCH_CHANGE_DATA = module.SB_EVENT_EVENT_MATCH_CHANGE_DATA;
      SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID = module.SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID;
    }, function (module) {
      SbSportID = module.SbSportID;
    }, function (module) {
      SbMatch = module.default;
    }, function (module) {
      SbCommonGroupMatchDetail = module.SbCommonGroupMatchDetail;
    }, function (module) {
      LiveStreamUIState = module.LiveStreamUIState;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "02f65TuO7xDLK70GesWvAwO", "SBWatchVideoAndInfoDetailt", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SBWatchVideoAndInfoDetailt = exports('SBWatchVideoAndInfoDetailt', (_dec = ccclass('SBWatchVideoAndInfoDetailt'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property({
        group: 'CommonGroup',
        type: SbCommonGroupMatchDetail
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SBWatchVideoAndInfoDetailt, _Component);

        function SBWatchVideoAndInfoDetailt() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLeagues", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "compMatchInfoDetail", _descriptor2, _assertThisInitialized(_this)); //============ Match Info =============//


          _initializerDefineProperty(_this, "nodeGroupMatchInfo", _descriptor3, _assertThisInitialized(_this));

          _this.callbackHide = null;
          _this.matchInfoDetaitlData = null;
          _this.matchInfoDetaitl = null;
          return _this;
        }

        var _proto = SBWatchVideoAndInfoDetailt.prototype;

        _proto.onLoad = function onLoad() {
          this.matchInfoDetaitl = this.compMatchInfoDetail.getComponent(SbDisplayMatchInfo);
        };

        _proto.onEnable = function onEnable() {
          this.addEventListener();
          this.nodeGroupMatchInfo.SetActiveCommonGroup(true);
          this.nodeGroupMatchInfo.SetWidgetLayout(LiveStreamUIState.SHOW_LIVESTREAM);
          this.nodeGroupMatchInfo.InitCommonGroup(this.onButtonInfoDetailtClick.bind(this), false);
        };

        _proto.onDisable = function onDisable() {
          director.off(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.onDataChange.bind(this), this);
          this.nodeGroupMatchInfo.SetActiveCommonGroup(false);
        };

        _proto.InitData = function InitData(matchInfoDetaitlData, isButtonBetNowEnabe) {
          this.matchInfoDetaitlData = matchInfoDetaitlData;
          var linkVideo = matchInfoDetaitlData.videoLink;
          var isIframe = false;

          if (matchInfoDetaitlData.iframe != null) {
            isIframe = matchInfoDetaitlData.iframe;
          } //play video


          director.emit(SbLiveState.LiveLoad, {
            "h5Link": linkVideo,
            "iframe": isIframe
          });
          this.nodeGroupMatchInfo.SetMenuFirstTab();
          this.lbLeagues.string = matchInfoDetaitlData.leagueName; // Information Detail

          this.nodeGroupMatchInfo.SetDataMatchInfo(matchInfoDetaitlData.eventId);
          if (this.matchInfoDetaitl != null) this.matchInfoDetaitl.SetData(matchInfoDetaitlData);
        };

        _proto.SetCallbackHide = function SetCallbackHide(cb) {
          this.callbackHide = cb;
        };

        _proto.ResumVideo = function ResumVideo() {
          if (this.node.active) {
            director.emit(SbLiveState.LiveReload);
          }
        };

        _proto.addEventListener = function addEventListener() {
          director.off(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.onDataChange.bind(this), this);
          director.on(SB_EVENT_EVENT_MATCH_CHANGE_DATA, this.onDataChange.bind(this), this);
        };

        _proto.onDataChange = function onDataChange(matchData) {
          if (this.matchInfoDetaitlData == null) return;

          if (this.HasMatch(SbSportID.Football, matchData.leagueId, matchData.eventId)) {
            log("SBWatchVideoAndInfoDetailt nè : " + JSON.stringify(matchData));
            if (this.matchInfoDetaitl != null) this.matchInfoDetaitl.SetData(SbMatch.GetDataForDataLiveChangeFromMatchData(matchData));
          }
        };

        _proto.HasMatch = function HasMatch(sportId, leagueId, eventId) {
          // if (this.node.active == false)
          //     return false;
          if (this.matchInfoDetaitlData == null) return false;
          if (sportId == SbSportID.Football && leagueId == this.matchInfoDetaitlData.leagueId && eventId == this.matchInfoDetaitlData.eventId) return true;
          return false;
        };

        _proto.onButtonBetNowClick = function onButtonBetNowClick() {
          SbSoundsManager.getInstance().playSfxClick();
          director.emit(SB_EVENT_SHOW_MATCH_DETAIL_WITH_ID, this.matchInfoDetaitlData.eventId);
        };

        _proto.onButtonInfoDetailtClick = function onButtonInfoDetailtClick(customData) {};

        _proto.onCloseButtonClicked = function onCloseButtonClicked() {
          SbSoundsManager.getInstance().playSfxClick();
          director.emit(SbLiveState.LiveHide);

          if (this.callbackHide != null) {
            this.callbackHide();
          }

          this.node.active = false;
        };

        _proto.onButtonInfoClicked = function onButtonInfoClicked() {
          SbCommonPrefabsManager.getInstance().ShowMessage("Chức năng sẽ sớm ra mắt!");
        };

        return SBWatchVideoAndInfoDetailt;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLeagues", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "compMatchInfoDetail", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodeGroupMatchInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbWebSocketConnecter.ts", ['cc'], function (exports) {
  var cclegacy, log;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09f85oWgyBKV6dBqoh2pvWf", "SbWebSocketConnecter", undefined);

      var SbWebSocketConnecter = exports('default', /*#__PURE__*/function () {
        function SbWebSocketConnecter() {
          this.TIMEOUTINTERVAL = 10000;
          this.RECONNECT_TIMEOUTINTERVAL = 1000; //

          this.ws = null;
          this.url = ""; //Set up the default 'noop' event handlers

          this.onopen = function (event) {};

          this.onclose = function (event) {};

          this.onconnecting = function () {};

          this.onmessage = function (event) {};

          this.onerror = function (event) {};
        }

        var _proto = SbWebSocketConnecter.prototype;

        _proto.connectWS = function connectWS(url) {
          var that = this;
          this.url = url;

          if (this.ws != null) {
            log("WebSocketConnecter set null callback");
            this.ws.onopen = null;
            this.ws.onerror = null;
            this.ws.onmessage = null;
            this.ws.onclose = null;
            this.ws.close();
          } // if (sys.platform == sys.ANDROID) {
          //     this.ws = new WebSocket(this.url, [], "cacert.pem");
          // } else {
          //     this.ws = new WebSocket(this.url);
          // }


          this.ws = new WebSocket(this.url); // this.ws = new WebSocket(this.url)

          this.ws.binaryType = "arraybuffer";

          this.ws.onopen = function (event) {
            log("WebSocketConnecter: Send Text WS was opened.");
            that.onopen(event);
          };

          this.ws.onmessage = function (event) {
            // log("WebSocketConnecter: response text msg: " + event.data);
            that.onmessage(event);
          };

          this.ws.onerror = function (event) {
            log("WebSocketConnecter: Send Text fired an error");
            that.onerror(event);
          };

          this.ws.onclose = function (event) {
            // log("WebSocket instance closed: " + JSON.stringify(event));
            that.onclose(event);
          };
        };

        _proto.reconnect = function reconnect() {
          log("WebSocket reconnect nè: ");
          this.connectWS(this.url);
        };

        _proto.closeWS = function closeWS() {
          if (this.ws != null && this.ws.readyState == WebSocket.OPEN) this.ws.close();
        };

        _proto.sendData = function sendData(message, isLog) {
          if (isLog === void 0) {
            isLog = false;
          }

          if (isLog) {
            log("[Network] SendData: " + message);
          }

          if (this.ws == null) {
            log("websocket == null");
            return;
          }

          if (this.ws.readyState == WebSocket.OPEN) {
            // log('WS send cmd:', message);
            this.ws.send(message);
          } else {
            log('Send data ERROR: Socket CLOSED ', this.ws);
          }
        };

        _proto.getStatus = function getStatus() {
          if (this.ws == null) return null;
          return this.ws.readyState;
        };

        return SbWebSocketConnecter;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SbWebSocketHandle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUserInfo.ts', './SbSportManager.ts', './SbUtils.ts', './SbWebSocketConnecter.ts', './SbLive.ts', './SbDefine.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, log, director, warn, Component, SbUserInfo, SbTypeTimeMatch, SbUtils, SbWebSocketConnecter, SbLiveState, SB_CHAT_CHECK_RESUBSCRIBE;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      director = module.director;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      SbUserInfo = module.default;
    }, function (module) {
      SbTypeTimeMatch = module.SbTypeTimeMatch;
    }, function (module) {
      SbUtils = module.default;
    }, function (module) {
      SbWebSocketConnecter = module.default;
    }, function (module) {
      SbLiveState = module.SbLiveState;
    }, function (module) {
      SB_CHAT_CHECK_RESUBSCRIBE = module.SB_CHAT_CHECK_RESUBSCRIBE;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "bbbecfaK4hAgYJVDiw40Gu9", "SbWebSocketHandle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_PING_PONG = 5000;
      var SbWebSocketHandle = exports('default', (_dec = ccclass('SbWebSocketHandle'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SbWebSocketHandle, _Component);

        function SbWebSocketHandle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.webSocket = null;
          _this.ping = 0;
          _this.pong = 0;
          _this.intervalPingPong = null;

          _this.onOddsInsert = function (data) {};

          _this.onOddsRemove = function (data) {};

          _this.onOddsChange = function (data) {};

          _this.onMarketChange = function (data) {};

          _this.onEventInsert = function (data) {};

          _this.onEventRemove = function (data) {};

          _this.onEventChange = function (data) {};

          _this.onLeagueInsert = function (data) {};

          _this.onUserBalanceChange = function (data) {};

          _this.onConnectSuccess = function () {};

          return _this;
        }

        SbWebSocketHandle.getInstance = function getInstance() {
          if (this.Instance === null || this.Instance === undefined) {
            this.Instance = new SbWebSocketHandle();
            this.Instance.init();
          }

          return this.Instance;
        };

        var _proto = SbWebSocketHandle.prototype; //============= funct ================//

        _proto.ConnectWS = function ConnectWS(url) {
          if (url.length == 0) {
            log("Not connect to ws: " + url);
            return;
          }

          log("ConnectWS: " + url);
          this.webSocket.connectWS(url);
          this.webSocket.onopen = this.onWSOpen.bind(this);
          this.webSocket.onmessage = this.onWsReciveMessage.bind(this);
          this.webSocket.onclose = this.onWSClose.bind(this);
          this.webSocket.onerror = this.onWSError.bind(this);
        };

        _proto.Clean = function Clean() {
          this.clearIntervalPingPong();

          if (SbWebSocketHandle.Instance != null) {
            if (this.webSocket != null) this.webSocket.closeWS();
            SbWebSocketHandle.Instance = null;
          }
        };

        _proto.IsNeedConnectWS = function IsNeedConnectWS() {
          var status = this.webSocket.getStatus();
          if (status == null || status == WebSocket.CLOSED || status == WebSocket.CLOSING) return true;
          if (this.ping - this.pong > 1) return true;
          return false;
        };

        _proto.Reconnect = function Reconnect() {
          this.webSocket.reconnect();
        };

        _proto.Login = function Login() {
          var data = "userbal:" + SbUserInfo.getInstance().GetUserName();
          this.webSocket.sendData(data);
        };

        _proto.SubscriteTypeTimeMatch = function SubscriteTypeTimeMatch(type) {
          var timerange = "today";
          if (type == SbTypeTimeMatch.Early) timerange = "early";else if (type == SbTypeTimeMatch.Today) timerange = "today";else if (type == SbTypeTimeMatch.Live) timerange = "live";else if (type == SbTypeTimeMatch.CustomDate) {
            var currentTime = SbUtils.GetDateCurrentTimeZone();
            var gmt = SbUtils.GetTimeZone(currentTime);
            timerange = currentTime.getFullYear() + "-" + ("0" + (currentTime.getMonth() + 1)).slice(-2) + "-" + ("0" + currentTime.getDate()).slice(-2) + "^tz=utc" + gmt;
          }
          var data = "t:subscribe" + ";d:timerange=" + timerange;
          this.webSocket.sendData(data);
        };

        _proto.init = function init() {
          if (this.webSocket == null) {
            this.webSocket = new SbWebSocketConnecter();
          }
        };

        _proto.onWSOpen = function onWSOpen(event) {
          var _this2 = this;

          this.ping = 0;
          this.pong = 0;
          this.onConnectSuccess();
          this.clearIntervalPingPong();
          this.intervalPingPong = setInterval(function () {
            if (_this2.IsNeedConnectWS()) {
              _this2.Reconnect();

              return;
            }

            _this2.sendPing();
          }, TIME_PING_PONG);
          director.emit(SbLiveState.LiveReload);
          director.emit(SB_CHAT_CHECK_RESUBSCRIBE);
        };

        _proto.clearIntervalPingPong = function clearIntervalPingPong() {
          if (this.intervalPingPong != null) {
            clearInterval(this.intervalPingPong);
          }
        };

        _proto.onWsReciveMessage = function onWsReciveMessage(event) {
          var data = null;

          try {
            data = JSON.parse(event.data);
          } catch (error) {
            warn("Data error: " + event.data);
          }

          if (data == null) return;

          if (data.hasOwnProperty("pong")) {
            this.onPong(data.pong);
            return;
          }

          var type = "";
          if (data.hasOwnProperty("t")) type = data.t;

          if (type.localeCompare("user_bal") == 0) {
            this.onUserBalanceChange(data.d);
          } else if (type.localeCompare("odds_ins") == 0) {
            this.onOddsInsert(data.d);
          } else if (type.localeCompare("odds_rmv") == 0) {
            this.onOddsRemove(data.d);
          } else if (type.localeCompare("odds_up") == 0) {
            this.onOddsChange(data.d);
          } else if (type.localeCompare("market_up") == 0) {
            this.onMarketChange(data.d);
          } else if (type.localeCompare("event_ins") == 0) {
            this.onEventInsert(data.d);
          } else if (type.localeCompare("event_rm") == 0) {
            this.onEventRemove(data.d);
          } else if (type.localeCompare("event_up") == 0) {
            this.onEventChange(data.d);
          } else if (type.localeCompare("league_ins") == 0) {
            this.onLeagueInsert(data.d);
          }
        };

        _proto.onWSClose = function onWSClose(event) {};

        _proto.onWSError = function onWSError(ev) {};

        _proto.onPong = function onPong(num) {
          // log("pingpong pong nè: " + num)
          this.pong = num;
        };

        _proto.sendPing = function sendPing() {
          if (this.ping - this.pong > 1) {
            this.Reconnect();
            return;
          } // log("pingpong ping nè: " + this.ping)


          this.webSocket.sendData("ping_" + this.ping.toString());
          this.ping++;
        };

        return SbWebSocketHandle;
      }(Component), _class2.Instance = null, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SplashSceneSB.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, dynamicAtlasManager, macro, view, ResolutionPolicy, director, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      dynamicAtlasManager = module.dynamicAtlasManager;
      macro = module.macro;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1b58cIp4wFAZrFSm48nLx6d", "SplashSceneSB", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      dynamicAtlasManager.maxFrameSize = 4096;
      macro.CLEANUP_IMAGE_CACHE = false;
      dynamicAtlasManager.enabled = true;
      var SplashSceneSB = exports('default', (_dec = ccclass('SplashSceneSB'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SplashSceneSB, _Component);

        function SplashSceneSB() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SplashSceneSB.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          var screenSize = view.getVisibleSize();

          if (screenSize.height / screenSize.width > 1560 / 720) {
            view.setDesignResolutionSize(720, screenSize.height, ResolutionPolicy.FIXED_WIDTH);
          } else {
            view.setDesignResolutionSize(screenSize.width, 1560, ResolutionPolicy.FIXED_HEIGHT);
          }

          director.preloadScene("SbLogin", function () {
            director.loadScene("SbLogin");
          });
        };

        return SplashSceneSB;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sprite1.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Sprite;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "31a50AyisBOPpgC03uLqvbJ", "Sprite1", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sprite1 = exports('Sprite1', (_dec = ccclass('Sprite1'), _dec(_class = /*#__PURE__*/function (_Sprite) {
        _inheritsLoose(Sprite1, _Sprite);

        function Sprite1() {
          return _Sprite.apply(this, arguments) || this;
        }

        return Sprite1;
      }(Sprite)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StaticBatch.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, instantiate, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "49ffc4wJRRBwLE3avgNAKZt", "StaticBatch", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var StaticBatch = exports('StaticBatch', (_dec = ccclass('StaticBatch'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(StaticBatch, _Component);

        function StaticBatch() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = StaticBatch.prototype;

        _proto.onLoad = function onLoad() {
          // Image1.pool = this.node;
          this.doSpawn();
        };

        _proto.start = function start() {};

        _proto.doSpawn = function doSpawn() {
          var c = this.node.children[0];
          var c1 = this.node.children[1];

          for (var idx = 0; idx < 3000; idx++) {
            var n = instantiate(idx % 2 == 0 ? c : c1);
            n.setPosition(Math.random() * 500, Math.random() * 500, 0);
            this.node.addChild(n);
          }
        };

        return StaticBatch;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TestScript.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SbUIComboBox.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, log, Component, SbUIComboBox;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      SbUIComboBox = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "60b63szSElH6LXimTIEM18P", "TestScript", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestScript = exports('default', (_dec = ccclass('TestScript'), _dec2 = property(SbUIComboBox), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestScript, _Component);

        function TestScript() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "label", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "text", _descriptor2, _assertThisInitialized(_this)); // LIFE-CYCLE CALLBACKS:
          // onLoad () {}


          _this.marketData = JSON.parse("{\"m\":[{\"o\":[{\"shi\":\"220720160000000h\",\"sai\":\"220720160000000a\",\"oi\":2041322006022000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.7\"},\"oa\":{\"de\":\"2.05\"},\"ml\":true,\"ot\":1622115831600}],\"mi\":16,\"gi\":2},{\"o\":[{\"shi\":\"220720050000000h\",\"sai\":\"220720050000000a\",\"oi\":2041322083033000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.76\",\"in\":\"-1.32\",\"de\":\"1.76\",\"hk\":\"0.76\"},\"oa\":{\"ma\":\"-0.89\",\"in\":\"1.12\",\"de\":\"2.12\",\"hk\":\"1.12\"},\"ml\":true,\"ot\":1622117541657}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"220720030020025h\",\"sai\":\"220720030020025a\",\"oi\":20413220832460224,\"p\":\"2.25\",\"oh\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"oa\":{\"ma\":\"0.86\",\"in\":\"-1.16\",\"de\":\"1.86\",\"hk\":\"0.86\"},\"ml\":true,\"ot\":1622117541673}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"220720060000000h\",\"sai\":\"220720060000000a\",\"oi\":2041322083060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.82\",\"in\":\"-1.22\",\"de\":\"1.82\",\"hk\":\"0.82\"},\"oa\":{\"ma\":\"-0.96\",\"in\":\"1.04\",\"de\":\"2.04\",\"hk\":\"1.04\"},\"ml\":true,\"ot\":1622117541697}],\"mi\":6,\"gi\":3},{\"o\":[{\"shi\":\"220720040000075h\",\"sai\":\"220720040000075a\",\"oi\":20413220830620076,\"p\":\"0.75\",\"oh\":{\"ma\":\"0.71\",\"in\":\"-1.41\",\"de\":\"1.71\",\"hk\":\"0.71\"},\"oa\":{\"ma\":\"-0.85\",\"in\":\"1.18\",\"de\":\"2.18\",\"hk\":\"1.18\"},\"ml\":true,\"ot\":1622117541760}],\"mi\":4,\"gi\":3},{\"o\":[{\"shi\":\"220720020000000h\",\"sai\":\"220720020000000a\",\"sdi\":\"220720020000000d\",\"oi\":2041322285237000,\"p\":\"0.0\",\"oh\":{\"de\":\"3.08\"},\"oa\":{\"de\":\"3.5\"},\"od\":{\"de\":\"1.96\"},\"ml\":true,\"ot\":1622120652970}],\"mi\":2,\"gi\":3},{\"o\":[{\"shi\":\"220720010000000h\",\"sai\":\"220720010000000a\",\"sdi\":\"220720010000000d\",\"oi\":2041322285245000,\"p\":\"0.0\",\"oh\":{\"de\":\"2.37\"},\"oa\":{\"de\":\"2.75\"},\"od\":{\"de\":\"3.08\"},\"ml\":true,\"ot\":1622120713000}],\"mi\":1,\"gi\":1},{\"o\":[{\"shi\":\"220720120000000h\",\"sai\":\"220720120000000a\",\"sdi\":\"220720120000000d\",\"oi\":2041322285023000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.33\"},\"oa\":{\"de\":\"1.44\"},\"od\":{\"de\":\"1.26\"},\"ml\":true,\"ot\":1622121083110}],\"mi\":12,\"gi\":2},{\"o\":[{\"shi\":\"220720080000000h\",\"sai\":\"220720080000000a\",\"oi\":2041322285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"oa\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"ml\":true,\"ot\":1622121162983}],\"mi\":8,\"gi\":2}],\"ei\":22072,\"hi\":1336,\"hn\":\"Sol De America\",\"ai\":739,\"an\":\"Guairena\",\"mc\":9,\"gl\":true,\"et\":\"2021-05-28T21:45:00Z\"}");
          _this.leagueData = JSON.parse("[{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"221350050000025h\",\"sai\":\"221350050000025a\",\"oi\":21126842850330025,\"p\":\"0.25\",\"oh\":{\"ma\":\"0.95\",\"in\":\"-1.05\",\"de\":\"1.95\",\"hk\":\"0.95\"},\"oa\":{\"ma\":\"0.89\",\"in\":\"-1.12\",\"de\":\"1.89\",\"hk\":\"0.89\"},\"ml\":true,\"ot\":1622201017953},{\"shi\":\"221350050000005h\",\"sai\":\"221350050000005a\",\"oi\":2112684285033005,\"p\":\"0.5\",\"oh\":{\"ma\":\"0.62\",\"in\":\"-1.61\",\"de\":\"1.62\",\"hk\":\"0.62\"},\"oa\":{\"ma\":\"-0.78\",\"in\":\"1.28\",\"de\":\"2.28\",\"hk\":\"1.28\"},\"ot\":1622201019920}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"221350030010075h\",\"sai\":\"221350030010075a\",\"oi\":21126842852460175,\"p\":\"1.75\",\"oh\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"oa\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"ml\":true,\"ot\":1622201029993},{\"shi\":\"221350030001005h\",\"sai\":\"221350030001005a\",\"oi\":2112684285246015,\"p\":\"1.5\",\"oh\":{\"ma\":\"0.62\",\"in\":\"-1.61\",\"de\":\"1.62\",\"hk\":\"0.62\"},\"oa\":{\"ma\":\"-0.8\",\"in\":\"1.25\",\"de\":\"2.25\",\"hk\":\"1.25\"},\"ot\":1622201030000}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"221350010000000h\",\"sai\":\"221350010000000a\",\"sdi\":\"221350010000000d\",\"oi\":2112684285245000,\"p\":\"0.0\",\"oh\":{\"de\":\"44.0\"},\"oa\":{\"de\":\"1.11\"},\"od\":{\"de\":\"5.17\"},\"ml\":true,\"ot\":1622201034050}],\"mi\":1,\"gi\":1}],\"ei\":22135,\"hi\":7006,\"hn\":\"Sporting Braga U19\",\"ai\":7001,\"an\":\"Sporting Lisboa U19\",\"mc\":5,\"l\":true,\"gl\":true,\"gt\":3977136,\"gp\":8,\"hs\":0,\"as\":1,\"rch\":1,\"rca\":0,\"et\":\"2021-05-28T10:00:00Z\",\"ych\":1,\"yca\":3,\"hc\":1,\"ac\":2}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Portugal\",\"li\":624,\"ln\":\"Portugal Juniores U19\"},{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"221360080000000h\",\"sai\":\"221360080000000a\",\"oi\":2055887285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"oa\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"ml\":true,\"ot\":1622200656967}],\"mi\":8,\"gi\":2},{\"o\":[{\"shi\":\"221360050010025h\",\"sai\":\"221360050010025a\",\"oi\":20558872850330125,\"p\":\"1.25\",\"oh\":{\"ma\":\"0.72\",\"in\":\"-1.39\",\"de\":\"1.72\",\"hk\":\"0.72\"},\"oa\":{\"ma\":\"-0.85\",\"in\":\"1.18\",\"de\":\"2.18\",\"hk\":\"1.18\"},\"ot\":1622200693437},{\"shi\":\"221360050001000h\",\"sai\":\"221360050001000a\",\"oi\":2055887285033010,\"p\":\"1.0\",\"oh\":{\"ma\":\"-0.99\",\"in\":\"1.01\",\"de\":\"2.01\",\"hk\":\"1.01\"},\"oa\":{\"ma\":\"0.86\",\"in\":\"-1.16\",\"de\":\"1.86\",\"hk\":\"0.86\"},\"ml\":true,\"ot\":1622200693430}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"221360030060025h\",\"sai\":\"221360030060025a\",\"oi\":20558872852460625,\"p\":\"6.25\",\"oh\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"oa\":{\"ma\":\"0.87\",\"in\":\"-1.15\",\"de\":\"1.87\",\"hk\":\"0.87\"},\"ml\":true,\"ot\":1622200700377},{\"shi\":\"221360030006000h\",\"sai\":\"221360030006000a\",\"oi\":2055887285246060,\"p\":\"6.0\",\"oh\":{\"ma\":\"0.7\",\"in\":\"-1.43\",\"de\":\"1.7\",\"hk\":\"0.7\"},\"oa\":{\"ma\":\"-0.84\",\"in\":\"1.19\",\"de\":\"2.19\",\"hk\":\"1.19\"},\"ot\":1622200700383}],\"mi\":3,\"gi\":1}],\"ei\":22136,\"hi\":1317,\"hn\":\"Capalaba\",\"ai\":1893,\"an\":\"Moreton Bay United Jets\",\"mc\":5,\"l\":true,\"gl\":true,\"gt\":2700000,\"gp\":4,\"hs\":0,\"as\":4,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T10:30:00Z\",\"ych\":2,\"yca\":0,\"hc\":2,\"ac\":2},{\"m\":[{\"o\":[{\"shi\":\"221570080000000h\",\"sai\":\"221570080000000a\",\"oi\":2065900285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.95\",\"in\":\"-1.05\",\"de\":\"1.95\",\"hk\":\"0.95\"},\"oa\":{\"ma\":\"0.93\",\"in\":\"-1.08\",\"de\":\"1.93\",\"hk\":\"0.93\"},\"ml\":true,\"ot\":1622200756523}],\"mi\":8,\"gi\":2},{\"o\":[{\"shi\":\"221570060000000h\",\"sai\":\"221570060000000a\",\"oi\":2065900285060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.72\",\"in\":\"-1.39\",\"de\":\"1.72\",\"hk\":\"0.72\"},\"oa\":{\"ma\":\"-0.83\",\"in\":\"1.2\",\"de\":\"2.2\",\"hk\":\"1.2\"},\"ml\":true,\"ot\":1622200783767},{\"shi\":\"221570060009925h\",\"sai\":\"221570060009925a\",\"oi\":20659002850601025,\"p\":\"-0.25\",\"oh\":{\"ma\":\"-0.46\",\"in\":\"2.17\",\"de\":\"3.17\",\"hk\":\"2.17\"},\"oa\":{\"ma\":\"0.38\",\"in\":\"-2.63\",\"de\":\"1.38\",\"hk\":\"0.38\"},\"ot\":1622201015947}],\"mi\":6,\"gi\":3},{\"o\":[{\"shi\":\"221570160000000h\",\"sai\":\"221570160000000a\",\"oi\":2065900006022000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.55\"},\"oa\":{\"de\":\"2.32\"},\"ml\":true,\"ot\":1622200935517}],\"mi\":16,\"gi\":2},{\"o\":[{\"shi\":\"221570030020025h\",\"sai\":\"221570030020025a\",\"oi\":20659002852460225,\"p\":\"2.25\",\"oh\":{\"ma\":\"-0.97\",\"in\":\"1.03\",\"de\":\"2.03\",\"hk\":\"1.03\"},\"oa\":{\"ma\":\"0.83\",\"in\":\"-1.2\",\"de\":\"1.83\",\"hk\":\"0.83\"},\"ml\":true,\"ot\":1622200956047},{\"shi\":\"221570030002000h\",\"sai\":\"221570030002000a\",\"oi\":2065900285246020,\"p\":\"2.0\",\"oh\":{\"ma\":\"0.71\",\"in\":\"-1.41\",\"de\":\"1.71\",\"hk\":\"0.71\"},\"oa\":{\"ma\":\"-0.86\",\"in\":\"1.16\",\"de\":\"2.16\",\"hk\":\"1.16\"},\"ot\":1622200956060}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"221570040000075h\",\"sai\":\"221570040000075a\",\"oi\":20659002850620075,\"p\":\"0.75\",\"oh\":{\"ma\":\"-0.47\",\"in\":\"2.13\",\"de\":\"3.13\",\"hk\":\"2.13\"},\"oa\":{\"ma\":\"0.38\",\"in\":\"-2.63\",\"de\":\"1.38\",\"hk\":\"0.38\"},\"ot\":1622201036997},{\"shi\":\"221570040000005h\",\"sai\":\"221570040000005a\",\"oi\":2065900285062005,\"p\":\"0.5\",\"oh\":{\"ma\":\"-0.77\",\"in\":\"1.3\",\"de\":\"2.3\",\"hk\":\"1.3\"},\"oa\":{\"ma\":\"0.65\",\"in\":\"-1.54\",\"de\":\"1.65\",\"hk\":\"0.65\"},\"ml\":true,\"ot\":1622201036987}],\"mi\":4,\"gi\":3},{\"o\":[{\"shi\":\"221570020000000h\",\"sai\":\"221570020000000a\",\"sdi\":\"221570020000000d\",\"oi\":2065900285237000,\"p\":\"0.0\",\"oh\":{\"de\":\"3.86\"},\"oa\":{\"de\":\"5.0\"},\"od\":{\"de\":\"1.53\"},\"ml\":true,\"ot\":1622201036980}],\"mi\":2,\"gi\":3},{\"o\":[{\"shi\":\"221570010000000h\",\"sai\":\"221570010000000a\",\"sdi\":\"221570010000000d\",\"oi\":2065900285245000,\"p\":\"0.0\",\"oh\":{\"de\":\"2.12\"},\"oa\":{\"de\":\"3.27\"},\"od\":{\"de\":\"3.08\"},\"ml\":true,\"ot\":1622201036970}],\"mi\":1,\"gi\":1},{\"o\":[{\"shi\":\"221570050009925h\",\"sai\":\"221570050009925a\",\"oi\":20659002850331025,\"p\":\"-0.25\",\"oh\":{\"ma\":\"0.89\",\"in\":\"-1.12\",\"de\":\"1.89\",\"hk\":\"0.89\"},\"oa\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"ml\":true,\"ot\":1622201037003},{\"shi\":\"221570050000995h\",\"sai\":\"221570050000995a\",\"oi\":2065900285033105,\"p\":\"-0.5\",\"oh\":{\"ma\":\"-0.9\",\"in\":\"1.11\",\"de\":\"2.11\",\"hk\":\"1.11\"},\"oa\":{\"ma\":\"0.77\",\"in\":\"-1.3\",\"de\":\"1.77\",\"hk\":\"0.77\"},\"ot\":1622201037010}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"221570120000000h\",\"sai\":\"221570120000000a\",\"sdi\":\"221570120000000d\",\"oi\":2065900285023000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.24\"},\"oa\":{\"de\":\"1.56\"},\"od\":{\"de\":\"1.27\"},\"ml\":true,\"ot\":1622201040017}],\"mi\":12,\"gi\":2}],\"ei\":22157,\"hi\":3788,\"hn\":\"Adelaide Comets\",\"ai\":3723,\"an\":\"Campbelltown City\",\"mc\":13,\"l\":true,\"gl\":true,\"gt\":1855592,\"gp\":2,\"hs\":0,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T10:45:00Z\",\"ych\":1,\"yca\":1,\"hc\":2,\"ac\":1}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Australia\",\"li\":193,\"ln\":\"Australia NPL\"},{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"221490060000000h\",\"sai\":\"221490060000000a\",\"oi\":2050050285060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"-0.89\",\"in\":\"1.12\",\"de\":\"2.12\",\"hk\":\"1.12\"},\"oa\":{\"ma\":\"0.78\",\"in\":\"-1.28\",\"de\":\"1.78\",\"hk\":\"0.78\"},\"ml\":true,\"ot\":1622200879597}],\"mi\":6,\"gi\":3},{\"o\":[{\"shi\":\"221490050000000h\",\"sai\":\"221490050000000a\",\"oi\":2050050285033000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.97\",\"in\":\"-1.03\",\"de\":\"1.97\",\"hk\":\"0.97\"},\"oa\":{\"ma\":\"0.89\",\"in\":\"-1.12\",\"de\":\"1.89\",\"hk\":\"0.89\"},\"ml\":true,\"ot\":1622200937917}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"221490040000075h\",\"sai\":\"221490040000075a\",\"oi\":20500502850620075,\"p\":\"0.75\",\"oh\":{\"ma\":\"-0.16\",\"in\":\"6.25\",\"de\":\"7.25\",\"hk\":\"6.25\"},\"oa\":{\"ma\":\"0.1\",\"in\":\"-10.0\",\"de\":\"1.1\",\"hk\":\"0.1\"},\"ot\":1622200991130},{\"shi\":\"221490040000005h\",\"sai\":\"221490040000005a\",\"oi\":2050050285062005,\"p\":\"0.5\",\"oh\":{\"ma\":\"-0.22\",\"in\":\"4.5\",\"de\":\"5.5\",\"hk\":\"4.5\"},\"oa\":{\"ma\":\"0.16\",\"in\":\"-6.25\",\"de\":\"1.16\",\"hk\":\"0.16\"},\"ml\":true,\"ot\":1622201008983}],\"mi\":4,\"gi\":3},{\"o\":[{\"shi\":\"221490030002000h\",\"sai\":\"221490030002000a\",\"oi\":2050050285246020,\"p\":\"2.0\",\"oh\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"oa\":{\"ma\":\"0.93\",\"in\":\"-1.08\",\"de\":\"1.93\",\"hk\":\"0.93\"},\"ml\":true,\"ot\":1622201045970},{\"shi\":\"221490030020025h\",\"sai\":\"221490030020025a\",\"oi\":20500502852460225,\"p\":\"2.25\",\"oh\":{\"ma\":\"-0.84\",\"in\":\"1.19\",\"de\":\"2.19\",\"hk\":\"1.19\"},\"oa\":{\"ma\":\"0.7\",\"in\":\"-1.43\",\"de\":\"1.7\",\"hk\":\"0.7\"},\"ot\":1622201045980}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"221490120000000h\",\"sai\":\"221490120000000a\",\"sdi\":\"221490120000000d\",\"oi\":2050050285023000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.42\"},\"oa\":{\"de\":\"1.33\"},\"od\":{\"de\":\"1.27\"},\"ml\":true,\"ot\":1622201049060}],\"mi\":12,\"gi\":2},{\"o\":[{\"shi\":\"221490080000000h\",\"sai\":\"221490080000000a\",\"oi\":2050050285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.96\",\"in\":\"-1.04\",\"de\":\"1.96\",\"hk\":\"0.96\"},\"oa\":{\"ma\":\"0.92\",\"in\":\"-1.09\",\"de\":\"1.92\",\"hk\":\"0.92\"},\"ml\":true,\"ot\":1622201049090}],\"mi\":8,\"gi\":2}],\"ei\":22149,\"hi\":1786,\"hn\":\"Brisbane Knights\",\"ai\":1787,\"an\":\"University Of Queensland\",\"mc\":8,\"l\":true,\"gl\":true,\"gt\":2530860,\"gp\":2,\"hs\":0,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T10:30:00Z\",\"ych\":2,\"yca\":0,\"hc\":2,\"ac\":3},{\"m\":[{\"o\":[{\"shi\":\"221500060000000h\",\"sai\":\"221500060000000a\",\"oi\":2050051285060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.43\",\"in\":\"-2.33\",\"de\":\"1.43\",\"hk\":\"0.43\"},\"oa\":{\"ma\":\"-0.5\",\"in\":\"2.0\",\"de\":\"3.0\",\"hk\":\"2.0\"},\"ml\":true,\"ot\":1622200994913}],\"mi\":6,\"gi\":3}],\"ei\":22150,\"hi\":3841,\"hn\":\"Albany Creek\",\"ai\":1833,\"an\":\"The Lakes\",\"mc\":1,\"l\":true,\"gl\":true,\"gt\":2610044,\"gp\":2,\"hs\":3,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T10:30:00Z\",\"ych\":1,\"yca\":3,\"hc\":2,\"ac\":2}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Australia\",\"li\":184,\"ln\":\"Australia Brisbane Premier League\"},{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"222300080000000h\",\"sai\":\"222300080000000a\",\"oi\":2092031285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.95\",\"in\":\"-1.05\",\"de\":\"1.95\",\"hk\":\"0.95\"},\"oa\":{\"ma\":\"0.93\",\"in\":\"-1.08\",\"de\":\"1.93\",\"hk\":\"0.93\"},\"ml\":true,\"ot\":1622200812440}],\"mi\":8,\"gi\":2},{\"o\":[{\"shi\":\"222300160000000h\",\"sai\":\"222300160000000a\",\"oi\":2092031006022000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.33\"},\"oa\":{\"de\":\"3.04\"},\"ml\":true,\"ot\":1622200829290}],\"mi\":16,\"gi\":2},{\"o\":[{\"shi\":\"222300040002000h\",\"sai\":\"222300040002000a\",\"oi\":2092031285062020,\"p\":\"2.0\",\"oh\":{\"ma\":\"0.65\",\"in\":\"-1.54\",\"de\":\"1.65\",\"hk\":\"0.65\"},\"oa\":{\"ma\":\"-0.81\",\"in\":\"1.23\",\"de\":\"2.23\",\"hk\":\"1.23\"},\"ot\":1622201000113},{\"shi\":\"222300040020025h\",\"sai\":\"222300040020025a\",\"oi\":20920312850620225,\"p\":\"2.25\",\"oh\":{\"ma\":\"-0.9\",\"in\":\"1.11\",\"de\":\"2.11\",\"hk\":\"1.11\"},\"oa\":{\"ma\":\"0.75\",\"in\":\"-1.33\",\"de\":\"1.75\",\"hk\":\"0.75\"},\"ml\":true,\"ot\":1622201000107}],\"mi\":4,\"gi\":3},{\"o\":[{\"shi\":\"222300050000025h\",\"sai\":\"222300050000025a\",\"oi\":20920312850330025,\"p\":\"0.25\",\"oh\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"oa\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"ml\":true,\"ot\":1622201024943},{\"shi\":\"222300050000005h\",\"sai\":\"222300050000005a\",\"oi\":2092031285033005,\"p\":\"0.5\",\"oh\":{\"ma\":\"0.67\",\"in\":\"-1.49\",\"de\":\"1.67\",\"hk\":\"0.67\"},\"oa\":{\"ma\":\"-0.83\",\"in\":\"1.2\",\"de\":\"2.2\",\"hk\":\"1.2\"},\"ot\":1622201024950}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"222300010000000h\",\"sai\":\"222300010000000a\",\"sdi\":\"222300010000000d\",\"oi\":2092031285245000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.69\"},\"oa\":{\"de\":\"3.78\"},\"od\":{\"de\":\"4.0\"},\"ml\":true,\"ot\":1622201024933}],\"mi\":1,\"gi\":1},{\"o\":[{\"shi\":\"222300060000025h\",\"sai\":\"222300060000025a\",\"oi\":20920312850600025,\"p\":\"0.25\",\"oh\":{\"ma\":\"0.6\",\"in\":\"-1.67\",\"de\":\"1.6\",\"hk\":\"0.6\"},\"oa\":{\"ma\":\"-0.76\",\"in\":\"1.32\",\"de\":\"2.32\",\"hk\":\"1.32\"},\"ot\":1622201030047},{\"shi\":\"222300060000000h\",\"sai\":\"222300060000000a\",\"oi\":2092031285060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.98\",\"in\":\"-1.02\",\"de\":\"1.98\",\"hk\":\"0.98\"},\"oa\":{\"ma\":\"0.86\",\"in\":\"-1.16\",\"de\":\"1.86\",\"hk\":\"0.86\"},\"ml\":true,\"ot\":1622201030040}],\"mi\":6,\"gi\":3},{\"o\":[{\"shi\":\"222300020000000h\",\"sai\":\"222300020000000a\",\"sdi\":\"222300020000000d\",\"oi\":2092031285237000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.45\"},\"oa\":{\"de\":\"8.0\"},\"od\":{\"de\":\"3.38\"},\"ml\":true,\"ot\":1622201030020}],\"mi\":2,\"gi\":3},{\"o\":[{\"shi\":\"222300030040025h\",\"sai\":\"222300030040025a\",\"oi\":20920312852460425,\"p\":\"4.25\",\"oh\":{\"ma\":\"0.98\",\"in\":\"-1.02\",\"de\":\"1.98\",\"hk\":\"0.98\"},\"oa\":{\"ma\":\"0.86\",\"in\":\"-1.16\",\"de\":\"1.86\",\"hk\":\"0.86\"},\"ml\":true,\"ot\":1622201042973},{\"shi\":\"222300030004000h\",\"sai\":\"222300030004000a\",\"oi\":2092031285246040,\"p\":\"4.0\",\"oh\":{\"ma\":\"0.69\",\"in\":\"-1.45\",\"de\":\"1.69\",\"hk\":\"0.69\"},\"oa\":{\"ma\":\"-0.86\",\"in\":\"1.16\",\"de\":\"2.16\",\"hk\":\"1.16\"},\"ot\":1622201042983}],\"mi\":3,\"gi\":1}],\"ei\":22230,\"hi\":3801,\"hn\":\"Port Darwin\",\"ai\":3800,\"an\":\"Darwin Olympic\",\"mc\":12,\"l\":true,\"gl\":true,\"gt\":815628,\"gp\":2,\"hs\":1,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T11:00:00Z\",\"ych\":0,\"yca\":0,\"hc\":1,\"ac\":0}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Australia\",\"li\":396,\"ln\":\"Australia NorZone Premier League\"},{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"223260050009925h\",\"sai\":\"223260050009925a\",\"oi\":20890690830331025,\"p\":\"-0.25\",\"oh\":{\"ma\":\"-0.92\",\"in\":\"1.09\",\"de\":\"2.09\",\"hk\":\"1.09\"},\"oa\":{\"ma\":\"0.67\",\"in\":\"-1.49\",\"de\":\"1.67\",\"hk\":\"0.67\"},\"ot\":1622200915480},{\"shi\":\"223260050000000h\",\"sai\":\"223260050000000a\",\"oi\":2089069083033000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.68\",\"in\":\"-1.47\",\"de\":\"1.68\",\"hk\":\"0.68\"},\"oa\":{\"ma\":\"-0.94\",\"in\":\"1.06\",\"de\":\"2.06\",\"hk\":\"1.06\"},\"ml\":true,\"ot\":1622200915463},{\"shi\":\"223260050000025h\",\"sai\":\"223260050000025a\",\"oi\":20890690830330025,\"p\":\"0.25\",\"oh\":{\"ma\":\"0.45\",\"in\":\"-2.22\",\"de\":\"1.45\",\"hk\":\"0.45\"},\"oa\":{\"ma\":\"-0.65\",\"in\":\"1.54\",\"de\":\"2.54\",\"hk\":\"1.54\"},\"ot\":1622200915487}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"223260030004000h\",\"sai\":\"223260030004000a\",\"oi\":2089069083246040,\"p\":\"4.0\",\"oh\":{\"ma\":\"0.92\",\"in\":\"-1.09\",\"de\":\"1.92\",\"hk\":\"0.92\"},\"oa\":{\"ma\":\"0.82\",\"in\":\"-1.22\",\"de\":\"1.82\",\"hk\":\"0.82\"},\"ml\":true,\"ot\":1622200915503},{\"shi\":\"223260030030075h\",\"sai\":\"223260030030075a\",\"oi\":20890690832460375,\"p\":\"3.75\",\"oh\":{\"ma\":\"0.63\",\"in\":\"-1.59\",\"de\":\"1.63\",\"hk\":\"0.63\"},\"oa\":{\"ma\":\"-0.88\",\"in\":\"1.14\",\"de\":\"2.14\",\"hk\":\"1.14\"},\"ot\":1622200915520},{\"shi\":\"223260030040025h\",\"sai\":\"223260030040025a\",\"oi\":20890690832460425,\"p\":\"4.25\",\"oh\":{\"ma\":\"-0.8\",\"in\":\"1.25\",\"de\":\"2.25\",\"hk\":\"1.25\"},\"oa\":{\"ma\":\"0.57\",\"in\":\"-1.75\",\"de\":\"1.57\",\"hk\":\"0.57\"},\"ot\":1622200915530}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"223260010000000h\",\"sai\":\"223260010000000a\",\"sdi\":\"223260010000000d\",\"oi\":2089069083245000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.07\"},\"oa\":{\"de\":\"17.5\"},\"od\":{\"de\":\"9.0\"},\"ml\":true,\"ot\":1622200915457}],\"mi\":1,\"gi\":1}],\"ei\":22326,\"hi\":3867,\"hn\":\"Sydney University\",\"ai\":3869,\"an\":\"Gladesville Ryde Magic\",\"mc\":7,\"l\":true,\"gl\":true,\"gt\":2700000,\"gp\":4,\"hs\":2,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T10:15:00Z\",\"ych\":2,\"yca\":0,\"hc\":0,\"ac\":0}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Australia\",\"li\":450,\"ln\":\"Australia NPL 3\"},{\"e\":[{\"m\":[{\"o\":[{\"shi\":\"224330060000000h\",\"sai\":\"224330060000000a\",\"oi\":1912151285060000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.57\",\"in\":\"-1.75\",\"de\":\"1.57\",\"hk\":\"0.57\"},\"oa\":{\"ma\":\"-0.72\",\"in\":\"1.39\",\"de\":\"2.39\",\"hk\":\"1.39\"},\"ot\":1622200501397},{\"shi\":\"224330060009925h\",\"sai\":\"224330060009925a\",\"oi\":19121512850601025,\"p\":\"-0.25\",\"oh\":{\"ma\":\"-0.78\",\"in\":\"1.28\",\"de\":\"2.28\",\"hk\":\"1.28\"},\"oa\":{\"ma\":\"0.65\",\"in\":\"-1.54\",\"de\":\"1.65\",\"hk\":\"0.65\"},\"ml\":true,\"ot\":1622200945203}],\"mi\":6,\"gi\":3},{\"o\":[{\"shi\":\"224330160000000h\",\"sai\":\"224330160000000a\",\"oi\":1912151006022000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.36\"},\"oa\":{\"de\":\"2.89\"},\"ml\":true,\"ot\":1622200577110}],\"mi\":16,\"gi\":2},{\"o\":[{\"shi\":\"224330080000000h\",\"sai\":\"224330080000000a\",\"oi\":1912151285006000,\"p\":\"0.0\",\"oh\":{\"ma\":\"0.94\",\"in\":\"-1.06\",\"de\":\"1.94\",\"hk\":\"0.94\"},\"oa\":{\"ma\":\"0.94\",\"in\":\"-1.06\",\"de\":\"1.94\",\"hk\":\"0.94\"},\"ml\":true,\"ot\":1622200854450}],\"mi\":8,\"gi\":2},{\"o\":[{\"shi\":\"224330050009975h\",\"sai\":\"224330050009975a\",\"oi\":19121512850331075,\"p\":\"-0.75\",\"oh\":{\"ma\":\"-0.92\",\"in\":\"1.09\",\"de\":\"2.09\",\"hk\":\"1.09\"},\"oa\":{\"ma\":\"0.73\",\"in\":\"-1.37\",\"de\":\"1.73\",\"hk\":\"0.73\"},\"ot\":1622200980960},{\"shi\":\"224330050000995h\",\"sai\":\"224330050000995a\",\"oi\":1912151285033105,\"p\":\"-0.5\",\"oh\":{\"ma\":\"0.83\",\"in\":\"-1.2\",\"de\":\"1.83\",\"hk\":\"0.83\"},\"oa\":{\"ma\":\"-0.99\",\"in\":\"1.01\",\"de\":\"2.01\",\"hk\":\"1.01\"},\"ml\":true,\"ot\":1622200980953}],\"mi\":5,\"gi\":1},{\"o\":[{\"shi\":\"224330010000000h\",\"sai\":\"224330010000000a\",\"sdi\":\"224330010000000d\",\"oi\":1912151285245000,\"p\":\"0.0\",\"oh\":{\"de\":\"1.83\"},\"oa\":{\"de\":\"3.7\"},\"od\":{\"de\":\"3.44\"},\"ml\":true,\"ot\":1622200980947}],\"mi\":1,\"gi\":1},{\"o\":[{\"shi\":\"224330030002005h\",\"sai\":\"224330030002005a\",\"oi\":1912151285246025,\"p\":\"2.5\",\"oh\":{\"ma\":\"0.88\",\"in\":\"-1.14\",\"de\":\"1.88\",\"hk\":\"0.88\"},\"oa\":{\"ma\":\"0.92\",\"in\":\"-1.09\",\"de\":\"1.92\",\"hk\":\"0.92\"},\"ot\":1622200980970},{\"shi\":\"224330030020075h\",\"sai\":\"224330030020075a\",\"oi\":19121512852460275,\"p\":\"2.75\",\"oh\":{\"ma\":\"-0.91\",\"in\":\"1.1\",\"de\":\"2.1\",\"hk\":\"1.1\"},\"oa\":{\"ma\":\"0.76\",\"in\":\"-1.32\",\"de\":\"1.76\",\"hk\":\"0.76\"},\"ml\":true,\"ot\":1622200980983}],\"mi\":3,\"gi\":1},{\"o\":[{\"shi\":\"224330040000005h\",\"sai\":\"224330040000005a\",\"oi\":1912151285062005,\"p\":\"0.5\",\"oh\":{\"ma\":\"0.61\",\"in\":\"-1.64\",\"de\":\"1.61\",\"hk\":\"0.61\"},\"oa\":{\"ma\":\"-0.77\",\"in\":\"1.3\",\"de\":\"2.3\",\"hk\":\"1.3\"},\"ot\":1622200998370},{\"shi\":\"224330040000075h\",\"sai\":\"224330040000075a\",\"oi\":19121512850620075,\"p\":\"0.75\",\"oh\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"oa\":{\"ma\":\"0.91\",\"in\":\"-1.1\",\"de\":\"1.91\",\"hk\":\"0.91\"},\"ml\":true,\"ot\":1622200998363}],\"mi\":4,\"gi\":3},{\"o\":[{\"shi\":\"224330020000000h\",\"sai\":\"224330020000000a\",\"sdi\":\"224330020000000d\",\"oi\":1912151285237000,\"p\":\"0.0\",\"oh\":{\"de\":\"2.92\"},\"oa\":{\"de\":\"4.57\"},\"od\":{\"de\":\"1.83\"},\"ml\":true,\"ot\":1622200998353}],\"mi\":2,\"gi\":3}],\"ei\":22433,\"hi\":4692,\"hn\":\"Graficar U19\",\"ai\":3856,\"an\":\"Spartak Subotica U19\",\"mc\":12,\"l\":true,\"gl\":true,\"gt\":1215537,\"gp\":2,\"hs\":0,\"as\":0,\"rch\":0,\"rca\":0,\"et\":\"2021-05-28T11:00:00Z\",\"ych\":0,\"yca\":1,\"hc\":0,\"ac\":1}],\"si\":1,\"sn\":\"Sor\",\"rn\":\"Serbia\",\"li\":213,\"ln\":\"Serbia U19 League\"}]");
          return _this;
        }

        var _proto = TestScript.prototype;

        _proto.start = function start() {//     let market_up = JSON.parse(`{
          //     "s": 1,
          //     "t": "market_up",
          //     "d": {
          //       "domainEventId": 22082,
          //       "domainMarketId": 16,
          //       "domainSportId": 1,
          //       "domainLeagueId": 175,
          //       "status": "3"
          //     }
          //   }`);
          //     let odds_up = JSON.parse(`{ "s": 1, "t": "odds_up", "d": { "kafkaOddsList": [ { "marketId": 16, "marketName": "Over Under Half Time", "isSuspended": false, "sportId": 1, "odds": { "selectionHomeId": "213450040001000h", "selectionAwayId": "213450040001000a", "offerId": 2041322006022000, "points": "1.0", "oddsHome": { "trueOdds": "1.8704793944491171", "malay": "0.877777777777", "indo": "-1.15555555555555", "decimal": "1.8777777777777", "hk": "0.877777777777777" }, "oddsAway": { "trueOdds": "2.0392444525949025", "malay": "-0.9666666666", "indo": "1.04444444", "decimal": "2.0444444444", "hk": "1.0444444444" }, "isMainLine": true, "offerTs": 1622129052953 }, "leagueId": 582, "eventId": 21345, "timeRange": "TODAY" }, { "marketId": 4, "marketName": "Over Under Half Time", "isSuspended": false, "sportId": 1, "odds": { "selectionHomeId": "213450040000005h", "selectionAwayId": "213450040000005a", "offerId": 2093445083062005, "points": "0.5", "oddsHome": { "trueOdds": "1.3943715972701483", "malay": "0.39", "indo": "-2.56", "decimal": "1.39", "hk": "0.39" }, "oddsAway": { "trueOdds": "3.146325595559432", "malay": "-0.47", "indo": "2.13", "decimal": "3.13", "hk": "2.13" }, "isMainLine": false, "offerTs": 1622129052960 }, "leagueId": 582, "eventId": 21345, "timeRange": "TODAY" }, { "marketId": 4, "marketName": "Over Under Half Time", "isSuspended": false, "sportId": 1, "odds": { "selectionHomeId": "213450040000075h", "selectionAwayId": "213450040000075a", "offerId": 20934450830620076, "points": "0.75", "oddsHome": { "trueOdds": "1.5492746560707724", "malay": "0.55", "indo": "-1.82", "decimal": "1.55", "hk": "0.55" }, "oddsAway": { "trueOdds": "2.6005323131712896", "malay": "-0.62", "indo": "1.61", "decimal": "2.61", "hk": "1.61" }, "isMainLine": false, "offerTs": 1622129052970 }, "leagueId": 582, "eventId": 21345, "timeRange": "TODAY" }, { "marketId": 4, "marketName": "Over Under Half Time", "isSuspended": false, "sportId": 1, "odds": { "selectionHomeId": "213450040010025h", "selectionAwayId": "213450040010025a", "offerId": 20934450830620124, "points": "1.25", "oddsHome": { "trueOdds": "2.3867313915857604", "malay": "-0.72", "indo": "1.39", "decimal": "2.39", "hk": "1.39" }, "oddsAway": { "trueOdds": "1.636615811373093", "malay": "0.64", "indo": "-1.56", "decimal": "1.64", "hk": "0.64" }, "isMainLine": false, "offerTs": 1622129052977 }, "leagueId": 582, "eventId": 21345, "timeRange": "TODAY" }, { "marketId": 4, "marketName": "Over Under Half Time", "isSuspended": false, "sportId": 1, "odds": { "selectionHomeId": "213450040001005h", "selectionAwayId": "213450040001005a", "offerId": 2093445083062015, "points": "1.5", "oddsHome": { "trueOdds": "2.8892349050451815", "malay": "-0.53", "indo": "1.89", "decimal": "2.89", "hk": "1.89" }, "oddsAway": { "trueOdds": "1.45161559935142", "malay": "0.45", "indo": "-2.22", "decimal": "1.45", "hk": "0.45" }, "isMainLine": false, "offerTs": 1622129052983 }, "leagueId": 582, "eventId": 21345, "timeRange": "TODAY" } ] }, "tmrg": "toDay" }`);
          //   this.onUpdateMarketData(this.marketData.m, market_up.d)
          // this.onUpdateListOddsData(this.marketData.m, odds_up.d.kafkaOddsList);
        };

        _proto.findLeague = function findLeague(keyWord) {};

        _proto.onUpdateListOddsData = function onUpdateListOddsData(listMarket, listOdds) {
          for (var i = 0; i < listOdds.length; i++) {
            this.onUpdateOddsData(listMarket, listOdds[i]);
          }
        };

        _proto.onUpdateOddsData = function onUpdateOddsData(listMarket, oddsUpdateData) {
          for (var i = 0; i < listMarket.length; i++) {
            if (listMarket[i].mi == oddsUpdateData.marketId) {
              var listOdds = listMarket[i].o;

              for (var j = 0; j < listOdds.length; j++) {
                var odds = oddsUpdateData.odds;

                if (listOdds[j].soi == odds.offerId) {
                  listOdds[j].p = odds.points;

                  if (listOdds[j].hasOwnProperty("oh")) {
                    if (listOdds[j].oh.hasOwnProperty("ma") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.ma = odds.oddsHome.hasOwnProperty("malay") ? odds.oddsHome.malay : null;
                    if (listOdds[j].oh.hasOwnProperty("in") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh["in"] = odds.oddsHome.hasOwnProperty("indo") ? odds.oddsHome.indo : null;
                    if (listOdds[j].oh.hasOwnProperty("de") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.de = odds.oddsHome.hasOwnProperty("decimal") ? odds.oddsHome.decimal : null;
                    if (listOdds[j].oh.hasOwnProperty("hk") && odds.hasOwnProperty("oddsHome")) listOdds[j].oh.hk = odds.oddsHome.hasOwnProperty("hk") ? odds.oddsHome.hk : null;
                  }

                  if (listOdds[j].hasOwnProperty("oa")) {
                    if (listOdds[j].oa.hasOwnProperty("ma") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.ma = odds.oddsAway.hasOwnProperty("malay") ? odds.oddsAway.malay : null;
                    if (listOdds[j].oa.hasOwnProperty("in") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa["in"] = odds.oddsAway.hasOwnProperty("indo") ? odds.oddsAway.indo : null;
                    if (listOdds[j].oa.hasOwnProperty("de") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.de = odds.oddsAway.hasOwnProperty("decimal") ? odds.oddsAway.decimal : null;
                    if (listOdds[j].oa.hasOwnProperty("hk") && odds.hasOwnProperty("oddsAway")) listOdds[j].oa.hk = odds.oddsAway.hasOwnProperty("hk") ? odds.oddsAway.hk : null;
                  }

                  if (listOdds[j].hasOwnProperty("od")) {
                    if (listOdds[j].od.hasOwnProperty("ma") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.ma = odds.oddsDraw.hasOwnProperty("malay") ? odds.oddsDraw.malay : null;
                    if (listOdds[j].od.hasOwnProperty("in") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od["in"] = odds.oddsDraw.hasOwnProperty("indo") ? odds.oddsDraw.indo : null;
                    if (listOdds[j].od.hasOwnProperty("de") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.de = odds.oddsDraw.hasOwnProperty("decimal") ? odds.oddsDraw.decimal : null;
                    if (listOdds[j].od.hasOwnProperty("hk") && odds.hasOwnProperty("oddsDraw")) listOdds[j].od.hk = odds.oddsDraw.hasOwnProperty("hk") ? odds.oddsDraw.hk : null;
                  }

                  log("onUpdateMarketData: " + JSON.stringify(this.marketData));
                  return;
                }
              }
            }
          }
        };

        _proto.onUpdateMarketData = function onUpdateMarketData(listMarket, dataUpdate) {
          for (var i = 0; i < listMarket.length; i++) {
            if (listMarket[i].mi == dataUpdate.domainMarketId) {
              log("onUpdateok");
              listMarket[i].status = dataUpdate.status;
            }
          }

          log("onUpdateMarketData: " + JSON.stringify(this.marketData));
        };

        return TestScript;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "text", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'hello';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TestScript2.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Canvas, log, view, size, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Canvas = module.Canvas;
      log = module.log;
      view = module.view;
      size = module.size;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "9c2d7+cdoRHbIVe+JNa2QRD", "TestScript2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TestScript2 = exports('default', (_dec = ccclass('TestScript2'), _dec2 = property(Canvas), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TestScript2, _Component);

        function TestScript2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "canvas", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = TestScript2.prototype;

        _proto.start = function start() {};

        _proto.onClickPortrait = function onClickPortrait() {
          var ret = jsb.reflection.callStaticMethod("AppController", "setDevicePortrait");
          log("onClickPortrait");
          setTimeout(function () {
            log("canvas0: " + this.canvas.designResolution);
            view.init();
            this.canvas._designResolution = size(720, 1560);
            this.canvas.fitWidth = true;
            this.canvas.fitHeight = false;
            this.canvas.applySettings();
            this.canvas.alignWithScreen(); // this.canvas.node.position = new cc.Vec2(0, 0);

            log("canvas1: " + this.canvas.designResolution);
            director.loadScene("SbTestScene3");
          }.bind(this), 2000);
        };

        _proto.onClickLanscape = function onClickLanscape() {
          var ret = jsb.reflection.callStaticMethod("AppController", "setDeviceLandscape");
          log("onClickLanscape");
          view.init();
          var canvas = Canvas.instance;
          canvas.applySettings();
          canvas.alignWithScreen();
        };

        return TestScript2;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});